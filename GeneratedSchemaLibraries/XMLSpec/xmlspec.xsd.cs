//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W3C.XMLSpec {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public abstract partial class listclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("list.class", "");
        
		public static explicit operator listclass(XElement xe) {  return (listclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public listclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static listclass Load(string xmlFile) {
            return ((listclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static listclass Load(System.IO.TextReader xmlFile) {
            return ((listclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static listclass Parse(string xml) {
            return ((listclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class speclistclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("speclist.class", "");
        
		public static explicit operator speclistclass(XElement xe) {  return (speclistclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public speclistclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static speclistclass Load(string xmlFile) {
            return ((speclistclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static speclistclass Load(System.IO.TextReader xmlFile) {
            return ((speclistclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static speclistclass Parse(string xml) {
            return ((speclistclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class noteclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("note.class", "");
        
		public static explicit operator noteclass(XElement xe) {  return (noteclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public noteclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static noteclass Load(string xmlFile) {
            return ((noteclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static noteclass Load(System.IO.TextReader xmlFile) {
            return ((noteclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static noteclass Parse(string xml) {
            return ((noteclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class illusclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("illus.class", "");
        
		public static explicit operator illusclass(XElement xe) {  return (illusclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public illusclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static illusclass Load(string xmlFile) {
            return ((illusclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static illusclass Load(System.IO.TextReader xmlFile) {
            return ((illusclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static illusclass Parse(string xml) {
            return ((illusclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public abstract partial class annotclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator annotclass(XElement xe) {  return (annotclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annotclass() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public annotclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.annotclass.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.annotclass.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.annotclass.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static annotclass Load(string xmlFile) {
            return ((annotclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static annotclass Load(System.IO.TextReader xmlFile) {
            return ((annotclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static annotclass Parse(string xml) {
            return ((annotclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public abstract partial class termdefclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("termdef.class", "");
        
		public static explicit operator termdefclass(XElement xe) {  return (termdefclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public termdefclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static termdefclass Load(string xmlFile) {
            return ((termdefclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static termdefclass Load(System.IO.TextReader xmlFile) {
            return ((termdefclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static termdefclass Parse(string xml) {
            return ((termdefclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class emphclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emph.class", "");
        
		public static explicit operator emphclass(XElement xe) {  return (emphclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public emphclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static emphclass Load(string xmlFile) {
            return ((emphclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static emphclass Load(System.IO.TextReader xmlFile) {
            return ((emphclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static emphclass Parse(string xml) {
            return ((emphclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class refclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ref.class", "");
        
		public static explicit operator refclass(XElement xe) {  return (refclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public refclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static refclass Load(string xmlFile) {
            return ((refclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static refclass Load(System.IO.TextReader xmlFile) {
            return ((refclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static refclass Parse(string xml) {
            return ((refclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public abstract partial class locclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator locclass(XElement xe) {  return (locclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static locclass() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public locclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.locclass.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.locclass.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.locclass.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.locclass.ShowEnum show {
            get {
                XAttribute x = this.Attribute(showXName);
                return ((W3C.XMLSpec.locclass.ShowEnum)(Enum.Parse(typeof(W3C.XMLSpec.locclass.ShowEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(showXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.locclass.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.locclass.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.locclass.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static locclass Load(string xmlFile) {
            return ((locclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static locclass Load(System.IO.TextReader xmlFile) {
            return ((locclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static locclass Parse(string xml) {
            return ((locclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ShowEnum {
            
            replace,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    public abstract partial class techclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tech.class", "");
        
		public static explicit operator techclass(XElement xe) {  return (techclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public techclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static techclass Load(string xmlFile) {
            return ((techclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static techclass Load(System.IO.TextReader xmlFile) {
            return ((techclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static techclass Parse(string xml) {
            return ((techclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name?, date?, edtext)
    /// </para>
    /// </summary>
    public abstract partial class ednoteclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edtextXName = System.Xml.Linq.XName.Get("edtext", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ednoteclass(XElement xe) {  return (ednoteclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ednoteclass() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(edtextXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public ednoteclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((name)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(dateXName);
                return ((date)(x));
            }
            set {
                this.SetElement(dateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual edtext edtext {
            get {
                XElement x = this.GetElement(edtextXName);
                return ((edtext)(x));
            }
            set {
                this.SetElement(edtextXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.ednoteclass.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.ednoteclass.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.ednoteclass.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ednoteclass Load(string xmlFile) {
            return ((ednoteclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ednoteclass Load(System.IO.TextReader xmlFile) {
            return ((ednoteclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ednoteclass Parse(string xml) {
            return ((ednoteclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(edtextXName, typeof(edtext));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class head : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator head(XElement xe) { return XTypedServices.ToXTypedElement<head>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public head() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.head.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.head.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.head.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static head Load(string xmlFile) {
            return XTypedServices.Load<head>(xmlFile);
        }
        
        public static head Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<head>(xmlFile);
        }
        
        public static head Parse(string xml) {
            return XTypedServices.Parse<head>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (header, front?, body, back?)
    /// </para>
    /// </summary>
    public partial class spec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headerXName = System.Xml.Linq.XName.Get("header", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frontXName = System.Xml.Linq.XName.Get("front", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bodyXName = System.Xml.Linq.XName.Get("body", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName backXName = System.Xml.Linq.XName.Get("back", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName w3cdoctypeXName = System.Xml.Linq.XName.Get("w3c-doctype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherdoctypeXName = System.Xml.Linq.XName.Get("other-doctype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("spec", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator spec(XElement xe) { return XTypedServices.ToXTypedElement<spec>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static spec() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headerXName), new NamedContentModelEntity(frontXName), new NamedContentModelEntity(bodyXName), new NamedContentModelEntity(backXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public spec() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual header header {
            get {
                XElement x = this.GetElement(headerXName);
                return ((header)(x));
            }
            set {
                this.SetElement(headerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual front front {
            get {
                XElement x = this.GetElement(frontXName);
                return ((front)(x));
            }
            set {
                this.SetElement(frontXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual body body {
            get {
                XElement x = this.GetElement(bodyXName);
                return ((body)(x));
            }
            set {
                this.SetElement(bodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual back back {
            get {
                XElement x = this.GetElement(backXName);
                return ((back)(x));
            }
            set {
                this.SetElement(backXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.spec.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.spec.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.spec.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.spec.W3cdoctypeEnum? w3cdoctype {
            get {
                XAttribute x = this.Attribute(w3cdoctypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.spec.W3cdoctypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.spec.W3cdoctypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(w3cdoctypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherdoctype {
            get {
                XAttribute x = this.Attribute(otherdoctypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(otherdoctypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string status {
            get {
                XAttribute x = this.Attribute(statusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(statusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static spec Load(string xmlFile) {
            return XTypedServices.Load<spec>(xmlFile);
        }
        
        public static spec Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<spec>(xmlFile);
        }
        
        public static spec Parse(string xml) {
            return XTypedServices.Parse<spec>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<spec>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headerXName, typeof(header));
            localElementDictionary.Add(frontXName, typeof(front));
            localElementDictionary.Add(bodyXName, typeof(body));
            localElementDictionary.Add(backXName, typeof(back));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum W3cdoctypeEnum {
            
            cr,
            
            dispcmts,
            
            issues,
            
            wgnote,
            
            memsub,
            
            teamsub,
            
            note,
            
            other,
            
            pr,
            
            per,
            
            rec,
            
            wd,
            
            review,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (div1+)
    /// </para>
    /// </summary>
    public partial class front : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div1XName = System.Xml.Linq.XName.Get("div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div1> div1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("front", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator front(XElement xe) { return XTypedServices.ToXTypedElement<front>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static front() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(div1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (div1+)
        /// </para>
        /// </summary>
        public front() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (div1+)
        /// </para>
        /// </summary>
        public virtual IList<div1> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div1>(this, LinqToXsdTypeManager.Instance, div1XName);
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div1>.Initialize(this, LinqToXsdTypeManager.Instance, value, div1XName);
                    }
                    else {
                        XTypedServices.SetList<div1>(this.div1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.front.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.front.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.front.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static front Load(string xmlFile) {
            return XTypedServices.Load<front>(xmlFile);
        }
        
        public static front Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<front>(xmlFile);
        }
        
        public static front Parse(string xml) {
            return XTypedServices.Parse<front>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<front>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(div1XName, typeof(div1));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (div1+)
    /// </para>
    /// </summary>
    public partial class body : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div1XName = System.Xml.Linq.XName.Get("div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div1> div1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("body", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator body(XElement xe) { return XTypedServices.ToXTypedElement<body>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static body() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(div1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (div1+)
        /// </para>
        /// </summary>
        public body() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (div1+)
        /// </para>
        /// </summary>
        public virtual IList<div1> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div1>(this, LinqToXsdTypeManager.Instance, div1XName);
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div1>.Initialize(this, LinqToXsdTypeManager.Instance, value, div1XName);
                    }
                    else {
                        XTypedServices.SetList<div1>(this.div1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.body.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.body.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.body.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static body Load(string xmlFile) {
            return XTypedServices.Load<body>(xmlFile);
        }
        
        public static body Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<body>(xmlFile);
        }
        
        public static body Parse(string xml) {
            return XTypedServices.Parse<body>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<body>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(div1XName, typeof(div1));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((div1+, informdiv1*)|informdiv1+)
    /// </para>
    /// </summary>
    public partial class back : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div1XName = System.Xml.Linq.XName.Get("div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div1> div1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName informdiv1XName = System.Xml.Linq.XName.Get("inform-div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<informdiv1> informdiv1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("back", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator back(XElement xe) { return XTypedServices.ToXTypedElement<back>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static back() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(div1XName), new NamedContentModelEntity(informdiv1XName)), new NamedContentModelEntity(informdiv1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((div1+, informdiv1*)|informdiv1+)
        /// </para>
        /// </summary>
        public back() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((div1+, informdiv1*)|informdiv1+)
        /// </para>
        /// </summary>
        public virtual IList<div1> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div1>(this, LinqToXsdTypeManager.Instance, div1XName);
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div1>.Initialize(this, LinqToXsdTypeManager.Instance, value, div1XName);
                    }
                    else {
                        XTypedServices.SetList<div1>(this.div1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((div1+, informdiv1*)|informdiv1+)
        /// </para>
        /// </summary>
        public virtual IList<informdiv1> informdiv1 {
            get {
                if ((this.informdiv1Field == null)) {
                    this.informdiv1Field = new XTypedList<informdiv1>(this, LinqToXsdTypeManager.Instance, informdiv1XName);
                }
                return this.informdiv1Field;
            }
            set {
                if ((value == null)) {
                    this.informdiv1Field = null;
                }
                else {
                    if ((this.informdiv1Field == null)) {
                        this.informdiv1Field = XTypedList<informdiv1>.Initialize(this, LinqToXsdTypeManager.Instance, value, informdiv1XName);
                    }
                    else {
                        XTypedServices.SetList<informdiv1>(this.informdiv1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.back.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.back.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.back.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static back Load(string xmlFile) {
            return XTypedServices.Load<back>(xmlFile);
        }
        
        public static back Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<back>(xmlFile);
        }
        
        public static back Parse(string xml) {
            return XTypedServices.Parse<back>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<back>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(div1XName, typeof(div1));
            localElementDictionary.Add(informdiv1XName, typeof(informdiv1));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
    /// </para>
    /// </summary>
    public partial class div1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div2XName = System.Xml.Linq.XName.Get("div2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div2> div2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div1(XElement xe) { return XTypedServices.ToXTypedElement<div1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div1() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(div2XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public div1() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<div2> div2 {
            get {
                if ((this.div2Field == null)) {
                    this.div2Field = new XTypedList<div2>(this, LinqToXsdTypeManager.Instance, div2XName);
                }
                return this.div2Field;
            }
            set {
                if ((value == null)) {
                    this.div2Field = null;
                }
                else {
                    if ((this.div2Field == null)) {
                        this.div2Field = XTypedList<div2>.Initialize(this, LinqToXsdTypeManager.Instance, value, div2XName);
                    }
                    else {
                        XTypedServices.SetList<div2>(this.div2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.div1.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.div1.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.div1.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div1 Load(string xmlFile) {
            return XTypedServices.Load<div1>(xmlFile);
        }
        
        public static div1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div1>(xmlFile);
        }
        
        public static div1 Parse(string xml) {
            return XTypedServices.Parse<div1>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div1>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(div2XName, typeof(div2));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
    /// </para>
    /// </summary>
    public partial class informdiv1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div2XName = System.Xml.Linq.XName.Get("div2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div2> div2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inform-div1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator informdiv1(XElement xe) { return XTypedServices.ToXTypedElement<informdiv1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static informdiv1() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(div2XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public informdiv1() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div2*)
        /// </para>
        /// </summary>
        public virtual IList<div2> div2 {
            get {
                if ((this.div2Field == null)) {
                    this.div2Field = new XTypedList<div2>(this, LinqToXsdTypeManager.Instance, div2XName);
                }
                return this.div2Field;
            }
            set {
                if ((value == null)) {
                    this.div2Field = null;
                }
                else {
                    if ((this.div2Field == null)) {
                        this.div2Field = XTypedList<div2>.Initialize(this, LinqToXsdTypeManager.Instance, value, div2XName);
                    }
                    else {
                        XTypedServices.SetList<div2>(this.div2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.informdiv1.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.informdiv1.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.informdiv1.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static informdiv1 Load(string xmlFile) {
            return XTypedServices.Load<informdiv1>(xmlFile);
        }
        
        public static informdiv1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<informdiv1>(xmlFile);
        }
        
        public static informdiv1 Parse(string xml) {
            return XTypedServices.Parse<informdiv1>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<informdiv1>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(div2XName, typeof(div2));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
    /// </para>
    /// </summary>
    public partial class div2 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div3XName = System.Xml.Linq.XName.Get("div3", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div3> div3Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div2(XElement xe) { return XTypedServices.ToXTypedElement<div2>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div2() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(div3XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public div2() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div3*)
        /// </para>
        /// </summary>
        public virtual IList<div3> div3 {
            get {
                if ((this.div3Field == null)) {
                    this.div3Field = new XTypedList<div3>(this, LinqToXsdTypeManager.Instance, div3XName);
                }
                return this.div3Field;
            }
            set {
                if ((value == null)) {
                    this.div3Field = null;
                }
                else {
                    if ((this.div3Field == null)) {
                        this.div3Field = XTypedList<div3>.Initialize(this, LinqToXsdTypeManager.Instance, value, div3XName);
                    }
                    else {
                        XTypedServices.SetList<div3>(this.div3Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.div2.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.div2.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.div2.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div2 Load(string xmlFile) {
            return XTypedServices.Load<div2>(xmlFile);
        }
        
        public static div2 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div2>(xmlFile);
        }
        
        public static div2 Parse(string xml) {
            return XTypedServices.Parse<div2>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div2>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(div3XName, typeof(div3));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
    /// </para>
    /// </summary>
    public partial class div3 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div4XName = System.Xml.Linq.XName.Get("div4", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div4> div4Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div3", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div3(XElement xe) { return XTypedServices.ToXTypedElement<div3>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div3() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(div4XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public div3() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div4*)
        /// </para>
        /// </summary>
        public virtual IList<div4> div4 {
            get {
                if ((this.div4Field == null)) {
                    this.div4Field = new XTypedList<div4>(this, LinqToXsdTypeManager.Instance, div4XName);
                }
                return this.div4Field;
            }
            set {
                if ((value == null)) {
                    this.div4Field = null;
                }
                else {
                    if ((this.div4Field == null)) {
                        this.div4Field = XTypedList<div4>.Initialize(this, LinqToXsdTypeManager.Instance, value, div4XName);
                    }
                    else {
                        XTypedServices.SetList<div4>(this.div4Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.div3.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.div3.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.div3.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div3 Load(string xmlFile) {
            return XTypedServices.Load<div3>(xmlFile);
        }
        
        public static div3 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div3>(xmlFile);
        }
        
        public static div3 Parse(string xml) {
            return XTypedServices.Parse<div3>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div3>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(div4XName, typeof(div4));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
    /// </para>
    /// </summary>
    public partial class div4 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div5XName = System.Xml.Linq.XName.Get("div5", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div5> div5Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div4", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div4(XElement xe) { return XTypedServices.ToXTypedElement<div4>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div4() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(div5XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public div4() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*, div5*)
        /// </para>
        /// </summary>
        public virtual IList<div5> div5 {
            get {
                if ((this.div5Field == null)) {
                    this.div5Field = new XTypedList<div5>(this, LinqToXsdTypeManager.Instance, div5XName);
                }
                return this.div5Field;
            }
            set {
                if ((value == null)) {
                    this.div5Field = null;
                }
                else {
                    if ((this.div5Field == null)) {
                        this.div5Field = XTypedList<div5>.Initialize(this, LinqToXsdTypeManager.Instance, value, div5XName);
                    }
                    else {
                        XTypedServices.SetList<div5>(this.div5Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.div4.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.div4.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.div4.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div4 Load(string xmlFile) {
            return XTypedServices.Load<div4>(xmlFile);
        }
        
        public static div4 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div4>(xmlFile);
        }
        
        public static div4 Parse(string xml) {
            return XTypedServices.Parse<div4>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div4>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(div5XName, typeof(div5));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
    /// </para>
    /// </summary>
    public partial class div5 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div5", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div5(XElement xe) { return XTypedServices.ToXTypedElement<div5>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div5() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public div5() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.div5.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.div5.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.div5.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div5 Load(string xmlFile) {
            return XTypedServices.Load<div5>(xmlFile);
        }
        
        public static div5 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div5>(xmlFile);
        }
        
        public static div5 Parse(string xml) {
            return XTypedServices.Parse<div5>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div5>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
    /// </para>
    /// </summary>
    public partial class header : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName w3cdesignationXName = System.Xml.Linq.XName.Get("w3c-designation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName w3cdoctypeXName = System.Xml.Linq.XName.Get("w3c-doctype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubdateXName = System.Xml.Linq.XName.Get("pubdate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noticeXName = System.Xml.Linq.XName.Get("notice", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<notice> noticeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publocXName = System.Xml.Linq.XName.Get("publoc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altlocsXName = System.Xml.Linq.XName.Get("altlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prevlocsXName = System.Xml.Linq.XName.Get("prevlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prevlocs> prevlocsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latestlocXName = System.Xml.Linq.XName.Get("latestloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<latestloc> latestlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authlistXName = System.Xml.Linq.XName.Get("authlist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName erratalocXName = System.Xml.Linq.XName.Get("errataloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preverratalocXName = System.Xml.Linq.XName.Get("preverrataloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName translationlocXName = System.Xml.Linq.XName.Get("translationloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName copyrightXName = System.Xml.Linq.XName.Get("copyright", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<status> statusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @abstractXName = System.Xml.Linq.XName.Get("abstract", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubstmtXName = System.Xml.Linq.XName.Get("pubstmt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourcedescXName = System.Xml.Linq.XName.Get("sourcedesc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langusageXName = System.Xml.Linq.XName.Get("langusage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName revisiondescXName = System.Xml.Linq.XName.Get("revisiondesc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("header", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator header(XElement xe) { return XTypedServices.ToXTypedElement<header>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static header() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titleXName), new NamedContentModelEntity(subtitleXName), new NamedContentModelEntity(versionXName), new NamedContentModelEntity(w3cdesignationXName), new NamedContentModelEntity(w3cdoctypeXName), new NamedContentModelEntity(pubdateXName), new NamedContentModelEntity(noticeXName), new NamedContentModelEntity(publocXName), new NamedContentModelEntity(altlocsXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(prevlocsXName), new NamedContentModelEntity(latestlocXName)), new SequenceContentModelEntity(new NamedContentModelEntity(latestlocXName), new NamedContentModelEntity(prevlocsXName))), new NamedContentModelEntity(authlistXName), new NamedContentModelEntity(erratalocXName), new NamedContentModelEntity(preverratalocXName), new NamedContentModelEntity(translationlocXName), new NamedContentModelEntity(copyrightXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(statusXName), new NamedContentModelEntity(@abstractXName)), new SequenceContentModelEntity(new NamedContentModelEntity(@abstractXName), new NamedContentModelEntity(statusXName))), new NamedContentModelEntity(pubstmtXName), new NamedContentModelEntity(sourcedescXName), new NamedContentModelEntity(langusageXName), new NamedContentModelEntity(revisiondescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public header() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual title title {
            get {
                XElement x = this.GetElement(titleXName);
                return ((title)(x));
            }
            set {
                this.SetElement(titleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual subtitle subtitle {
            get {
                XElement x = this.GetElement(subtitleXName);
                return ((subtitle)(x));
            }
            set {
                this.SetElement(subtitleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual version version {
            get {
                XElement x = this.GetElement(versionXName);
                return ((version)(x));
            }
            set {
                this.SetElement(versionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual w3cdesignation w3cdesignation {
            get {
                XElement x = this.GetElement(w3cdesignationXName);
                return ((w3cdesignation)(x));
            }
            set {
                this.SetElement(w3cdesignationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual w3cdoctype w3cdoctype {
            get {
                XElement x = this.GetElement(w3cdoctypeXName);
                return ((w3cdoctype)(x));
            }
            set {
                this.SetElement(w3cdoctypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual pubdate pubdate {
            get {
                XElement x = this.GetElement(pubdateXName);
                return ((pubdate)(x));
            }
            set {
                this.SetElement(pubdateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<notice> notice {
            get {
                if ((this.noticeField == null)) {
                    this.noticeField = new XTypedList<notice>(this, LinqToXsdTypeManager.Instance, noticeXName);
                }
                return this.noticeField;
            }
            set {
                if ((value == null)) {
                    this.noticeField = null;
                }
                else {
                    if ((this.noticeField == null)) {
                        this.noticeField = XTypedList<notice>.Initialize(this, LinqToXsdTypeManager.Instance, value, noticeXName);
                    }
                    else {
                        XTypedServices.SetList<notice>(this.noticeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual publoc publoc {
            get {
                XElement x = this.GetElement(publocXName);
                return ((publoc)(x));
            }
            set {
                this.SetElement(publocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual altlocs altlocs {
            get {
                XElement x = this.GetElement(altlocsXName);
                return ((altlocs)(x));
            }
            set {
                this.SetElement(altlocsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<prevlocs> prevlocs {
            get {
                if ((this.prevlocsField == null)) {
                    this.prevlocsField = new XTypedList<prevlocs>(this, LinqToXsdTypeManager.Instance, prevlocsXName);
                }
                return this.prevlocsField;
            }
            set {
                if ((value == null)) {
                    this.prevlocsField = null;
                }
                else {
                    if ((this.prevlocsField == null)) {
                        this.prevlocsField = XTypedList<prevlocs>.Initialize(this, LinqToXsdTypeManager.Instance, value, prevlocsXName);
                    }
                    else {
                        XTypedServices.SetList<prevlocs>(this.prevlocsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<latestloc> latestloc {
            get {
                if ((this.latestlocField == null)) {
                    this.latestlocField = new XTypedList<latestloc>(this, LinqToXsdTypeManager.Instance, latestlocXName);
                }
                return this.latestlocField;
            }
            set {
                if ((value == null)) {
                    this.latestlocField = null;
                }
                else {
                    if ((this.latestlocField == null)) {
                        this.latestlocField = XTypedList<latestloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, latestlocXName);
                    }
                    else {
                        XTypedServices.SetList<latestloc>(this.latestlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual authlist authlist {
            get {
                XElement x = this.GetElement(authlistXName);
                return ((authlist)(x));
            }
            set {
                this.SetElement(authlistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual errataloc errataloc {
            get {
                XElement x = this.GetElement(erratalocXName);
                return ((errataloc)(x));
            }
            set {
                this.SetElement(erratalocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual preverrataloc preverrataloc {
            get {
                XElement x = this.GetElement(preverratalocXName);
                return ((preverrataloc)(x));
            }
            set {
                this.SetElement(preverratalocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual translationloc translationloc {
            get {
                XElement x = this.GetElement(translationlocXName);
                return ((translationloc)(x));
            }
            set {
                this.SetElement(translationlocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual copyright copyright {
            get {
                XElement x = this.GetElement(copyrightXName);
                return ((copyright)(x));
            }
            set {
                this.SetElement(copyrightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<status> status {
            get {
                if ((this.statusField == null)) {
                    this.statusField = new XTypedList<status>(this, LinqToXsdTypeManager.Instance, statusXName);
                }
                return this.statusField;
            }
            set {
                if ((value == null)) {
                    this.statusField = null;
                }
                else {
                    if ((this.statusField == null)) {
                        this.statusField = XTypedList<status>.Initialize(this, LinqToXsdTypeManager.Instance, value, statusXName);
                    }
                    else {
                        XTypedServices.SetList<status>(this.statusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, @abstractXName);
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, @abstractXName);
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual pubstmt pubstmt {
            get {
                XElement x = this.GetElement(pubstmtXName);
                return ((pubstmt)(x));
            }
            set {
                this.SetElement(pubstmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual sourcedesc sourcedesc {
            get {
                XElement x = this.GetElement(sourcedescXName);
                return ((sourcedesc)(x));
            }
            set {
                this.SetElement(sourcedescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual langusage langusage {
            get {
                XElement x = this.GetElement(langusageXName);
                return ((langusage)(x));
            }
            set {
                this.SetElement(langusageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual revisiondesc revisiondesc {
            get {
                XElement x = this.GetElement(revisiondescXName);
                return ((revisiondesc)(x));
            }
            set {
                this.SetElement(revisiondescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.header.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.header.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.header.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static header Load(string xmlFile) {
            return XTypedServices.Load<header>(xmlFile);
        }
        
        public static header Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<header>(xmlFile);
        }
        
        public static header Parse(string xml) {
            return XTypedServices.Parse<header>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<header>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(subtitleXName, typeof(subtitle));
            localElementDictionary.Add(versionXName, typeof(version));
            localElementDictionary.Add(w3cdesignationXName, typeof(w3cdesignation));
            localElementDictionary.Add(w3cdoctypeXName, typeof(w3cdoctype));
            localElementDictionary.Add(pubdateXName, typeof(pubdate));
            localElementDictionary.Add(noticeXName, typeof(notice));
            localElementDictionary.Add(publocXName, typeof(publoc));
            localElementDictionary.Add(altlocsXName, typeof(altlocs));
            localElementDictionary.Add(prevlocsXName, typeof(prevlocs));
            localElementDictionary.Add(latestlocXName, typeof(latestloc));
            localElementDictionary.Add(authlistXName, typeof(authlist));
            localElementDictionary.Add(erratalocXName, typeof(errataloc));
            localElementDictionary.Add(preverratalocXName, typeof(preverrataloc));
            localElementDictionary.Add(translationlocXName, typeof(translationloc));
            localElementDictionary.Add(copyrightXName, typeof(copyright));
            localElementDictionary.Add(statusXName, typeof(status));
            localElementDictionary.Add(@abstractXName, typeof(@abstract));
            localElementDictionary.Add(pubstmtXName, typeof(pubstmt));
            localElementDictionary.Add(sourcedescXName, typeof(sourcedesc));
            localElementDictionary.Add(langusageXName, typeof(langusage));
            localElementDictionary.Add(revisiondescXName, typeof(revisiondesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator title(XElement xe) { return XTypedServices.ToXTypedElement<title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static title() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public title() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.title.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.title.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.title.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static title Load(string xmlFile) {
            return XTypedServices.Load<title>(xmlFile);
        }
        
        public static title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<title>(xmlFile);
        }
        
        public static title Parse(string xml) {
            return XTypedServices.Parse<title>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<title>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class subtitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subtitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator subtitle(XElement xe) { return XTypedServices.ToXTypedElement<subtitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subtitle() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public subtitle() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.subtitle.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.subtitle.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.subtitle.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static subtitle Load(string xmlFile) {
            return XTypedServices.Load<subtitle>(xmlFile);
        }
        
        public static subtitle Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<subtitle>(xmlFile);
        }
        
        public static subtitle Parse(string xml) {
            return XTypedServices.Parse<subtitle>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subtitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class version : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator version(XElement xe) { return XTypedServices.ToXTypedElement<version>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static version() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public version() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.version.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.version.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.version.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static version Load(string xmlFile) {
            return XTypedServices.Load<version>(xmlFile);
        }
        
        public static version Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<version>(xmlFile);
        }
        
        public static version Parse(string xml) {
            return XTypedServices.Parse<version>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<version>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class w3cdesignation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("w3c-designation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator w3cdesignation(XElement xe) { return XTypedServices.ToXTypedElement<w3cdesignation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static w3cdesignation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public w3cdesignation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.w3cdesignation.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.w3cdesignation.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.w3cdesignation.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static w3cdesignation Load(string xmlFile) {
            return XTypedServices.Load<w3cdesignation>(xmlFile);
        }
        
        public static w3cdesignation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<w3cdesignation>(xmlFile);
        }
        
        public static w3cdesignation Parse(string xml) {
            return XTypedServices.Parse<w3cdesignation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<w3cdesignation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class w3cdoctype : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("w3c-doctype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator w3cdoctype(XElement xe) { return XTypedServices.ToXTypedElement<w3cdoctype>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static w3cdoctype() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public w3cdoctype() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.w3cdoctype.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.w3cdoctype.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.w3cdoctype.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static w3cdoctype Load(string xmlFile) {
            return XTypedServices.Load<w3cdoctype>(xmlFile);
        }
        
        public static w3cdoctype Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<w3cdoctype>(xmlFile);
        }
        
        public static w3cdoctype Parse(string xml) {
            return XTypedServices.Parse<w3cdoctype>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<w3cdoctype>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (day?, month, year)
    /// </para>
    /// </summary>
    public partial class pubdate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dayXName = System.Xml.Linq.XName.Get("day", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName monthXName = System.Xml.Linq.XName.Get("month", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pubdate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pubdate(XElement xe) { return XTypedServices.ToXTypedElement<pubdate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pubdate() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dayXName), new NamedContentModelEntity(monthXName), new NamedContentModelEntity(yearXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public pubdate() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual day day {
            get {
                XElement x = this.GetElement(dayXName);
                return ((day)(x));
            }
            set {
                this.SetElement(dayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual month month {
            get {
                XElement x = this.GetElement(monthXName);
                return ((month)(x));
            }
            set {
                this.SetElement(monthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual year year {
            get {
                XElement x = this.GetElement(yearXName);
                return ((year)(x));
            }
            set {
                this.SetElement(yearXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.pubdate.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.pubdate.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.pubdate.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static pubdate Load(string xmlFile) {
            return XTypedServices.Load<pubdate>(xmlFile);
        }
        
        public static pubdate Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pubdate>(xmlFile);
        }
        
        public static pubdate Parse(string xml) {
            return XTypedServices.Parse<pubdate>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pubdate>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dayXName, typeof(day));
            localElementDictionary.Add(monthXName, typeof(month));
            localElementDictionary.Add(yearXName, typeof(year));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class day : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("day", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator day(XElement xe) { return XTypedServices.ToXTypedElement<day>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static day() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public day() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.day.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.day.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.day.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static day Load(string xmlFile) {
            return XTypedServices.Load<day>(xmlFile);
        }
        
        public static day Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<day>(xmlFile);
        }
        
        public static day Parse(string xml) {
            return XTypedServices.Parse<day>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<day>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class month : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("month", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator month(XElement xe) { return XTypedServices.ToXTypedElement<month>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static month() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public month() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.month.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.month.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.month.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static month Load(string xmlFile) {
            return XTypedServices.Load<month>(xmlFile);
        }
        
        public static month Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<month>(xmlFile);
        }
        
        public static month Parse(string xml) {
            return XTypedServices.Parse<month>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<month>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class year : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator year(XElement xe) { return XTypedServices.ToXTypedElement<year>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static year() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public year() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.year.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.year.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.year.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static year Load(string xmlFile) {
            return XTypedServices.Load<year>(xmlFile);
        }
        
        public static year Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<year>(xmlFile);
        }
        
        public static year Parse(string xml) {
            return XTypedServices.Parse<year>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<year>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class copyright : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("copyright", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator copyright(XElement xe) { return XTypedServices.ToXTypedElement<copyright>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static copyright() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public copyright() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.copyright.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.copyright.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.copyright.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static copyright Load(string xmlFile) {
            return XTypedServices.Load<copyright>(xmlFile);
        }
        
        public static copyright Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<copyright>(xmlFile);
        }
        
        public static copyright Parse(string xml) {
            return XTypedServices.Parse<copyright>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<copyright>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class notice : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("notice", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator notice(XElement xe) { return XTypedServices.ToXTypedElement<notice>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static notice() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public notice() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.notice.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.notice.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.notice.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static notice Load(string xmlFile) {
            return XTypedServices.Load<notice>(xmlFile);
        }
        
        public static notice Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<notice>(xmlFile);
        }
        
        public static notice Parse(string xml) {
            return XTypedServices.Parse<notice>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<notice>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class publoc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("publoc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator publoc(XElement xe) { return XTypedServices.ToXTypedElement<publoc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static publoc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public publoc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.publoc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.publoc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.publoc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static publoc Load(string xmlFile) {
            return XTypedServices.Load<publoc>(xmlFile);
        }
        
        public static publoc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<publoc>(xmlFile);
        }
        
        public static publoc Parse(string xml) {
            return XTypedServices.Parse<publoc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<publoc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (loc+)
    /// </para>
    /// </summary>
    public partial class altlocs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locXName = System.Xml.Linq.XName.Get("loc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<loc> locField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("altlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator altlocs(XElement xe) { return XTypedServices.ToXTypedElement<altlocs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static altlocs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(locXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (loc+)
        /// </para>
        /// </summary>
        public altlocs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (loc+)
        /// </para>
        /// </summary>
        public virtual IList<loc> loc {
            get {
                if ((this.locField == null)) {
                    this.locField = new XTypedList<loc>(this, LinqToXsdTypeManager.Instance, locXName);
                }
                return this.locField;
            }
            set {
                if ((value == null)) {
                    this.locField = null;
                }
                else {
                    if ((this.locField == null)) {
                        this.locField = XTypedList<loc>.Initialize(this, LinqToXsdTypeManager.Instance, value, locXName);
                    }
                    else {
                        XTypedServices.SetList<loc>(this.locField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.altlocs.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.altlocs.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.altlocs.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static altlocs Load(string xmlFile) {
            return XTypedServices.Load<altlocs>(xmlFile);
        }
        
        public static altlocs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<altlocs>(xmlFile);
        }
        
        public static altlocs Parse(string xml) {
            return XTypedServices.Parse<altlocs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<altlocs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locXName, typeof(loc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class prevlocs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prevlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator prevlocs(XElement xe) { return XTypedServices.ToXTypedElement<prevlocs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prevlocs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public prevlocs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.prevlocs.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.prevlocs.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.prevlocs.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prevlocs Load(string xmlFile) {
            return XTypedServices.Load<prevlocs>(xmlFile);
        }
        
        public static prevlocs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prevlocs>(xmlFile);
        }
        
        public static prevlocs Parse(string xml) {
            return XTypedServices.Parse<prevlocs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prevlocs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (loc+)
    /// </para>
    /// </summary>
    public partial class latestloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locXName = System.Xml.Linq.XName.Get("loc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<loc> locField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("latestloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator latestloc(XElement xe) { return XTypedServices.ToXTypedElement<latestloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static latestloc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(locXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (loc+)
        /// </para>
        /// </summary>
        public latestloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (loc+)
        /// </para>
        /// </summary>
        public virtual IList<loc> loc {
            get {
                if ((this.locField == null)) {
                    this.locField = new XTypedList<loc>(this, LinqToXsdTypeManager.Instance, locXName);
                }
                return this.locField;
            }
            set {
                if ((value == null)) {
                    this.locField = null;
                }
                else {
                    if ((this.locField == null)) {
                        this.locField = XTypedList<loc>.Initialize(this, LinqToXsdTypeManager.Instance, value, locXName);
                    }
                    else {
                        XTypedServices.SetList<loc>(this.locField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.latestloc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.latestloc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.latestloc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static latestloc Load(string xmlFile) {
            return XTypedServices.Load<latestloc>(xmlFile);
        }
        
        public static latestloc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<latestloc>(xmlFile);
        }
        
        public static latestloc Parse(string xml) {
            return XTypedServices.Parse<latestloc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<latestloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locXName, typeof(loc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class errataloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("errataloc", "");
        
		public static explicit operator errataloc(XElement xe) { return XTypedServices.ToXTypedElement<errataloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public errataloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.errataloc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.errataloc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.errataloc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static errataloc Load(string xmlFile) {
            return XTypedServices.Load<errataloc>(xmlFile);
        }
        
        public static errataloc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<errataloc>(xmlFile);
        }
        
        public static errataloc Parse(string xml) {
            return XTypedServices.Parse<errataloc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<errataloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class preverrataloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("preverrataloc", "");
        
		public static explicit operator preverrataloc(XElement xe) { return XTypedServices.ToXTypedElement<preverrataloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public preverrataloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.preverrataloc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.preverrataloc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.preverrataloc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static preverrataloc Load(string xmlFile) {
            return XTypedServices.Load<preverrataloc>(xmlFile);
        }
        
        public static preverrataloc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<preverrataloc>(xmlFile);
        }
        
        public static preverrataloc Parse(string xml) {
            return XTypedServices.Parse<preverrataloc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<preverrataloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class translationloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("translationloc", "");
        
		public static explicit operator translationloc(XElement xe) { return XTypedServices.ToXTypedElement<translationloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public translationloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.translationloc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.translationloc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.translationloc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static translationloc Load(string xmlFile) {
            return XTypedServices.Load<translationloc>(xmlFile);
        }
        
        public static translationloc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<translationloc>(xmlFile);
        }
        
        public static translationloc Parse(string xml) {
            return XTypedServices.Parse<translationloc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<translationloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (author+)
    /// </para>
    /// </summary>
    public partial class authlist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<author> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("authlist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator authlist(XElement xe) { return XTypedServices.ToXTypedElement<authlist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static authlist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(authorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author+)
        /// </para>
        /// </summary>
        public authlist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (author+)
        /// </para>
        /// </summary>
        public virtual IList<author> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<author>(this, LinqToXsdTypeManager.Instance, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<author>.Initialize(this, LinqToXsdTypeManager.Instance, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<author>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.authlist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.authlist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.authlist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static authlist Load(string xmlFile) {
            return XTypedServices.Load<authlist>(xmlFile);
        }
        
        public static authlist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<authlist>(xmlFile);
        }
        
        public static authlist Parse(string xml) {
            return XTypedServices.Parse<authlist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<authlist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(authorXName, typeof(author));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name, affiliation?, email?)
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName affiliationXName = System.Xml.Linq.XName.Get("affiliation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emailXName = System.Xml.Linq.XName.Get("email", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("author", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator author(XElement xe) { return XTypedServices.ToXTypedElement<author>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static author() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName), new NamedContentModelEntity(affiliationXName), new NamedContentModelEntity(emailXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, affiliation?, email?)
        /// </para>
        /// </summary>
        public author() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, email?)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((name)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, email?)
        /// </para>
        /// </summary>
        public virtual affiliation affiliation {
            get {
                XElement x = this.GetElement(affiliationXName);
                return ((affiliation)(x));
            }
            set {
                this.SetElement(affiliationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, email?)
        /// </para>
        /// </summary>
        public virtual email email {
            get {
                XElement x = this.GetElement(emailXName);
                return ((email)(x));
            }
            set {
                this.SetElement(emailXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.author.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.author.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.author.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static author Load(string xmlFile) {
            return XTypedServices.Load<author>(xmlFile);
        }
        
        public static author Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<author>(xmlFile);
        }
        
        public static author Parse(string xml) {
            return XTypedServices.Parse<author>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<author>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(affiliationXName, typeof(affiliation));
            localElementDictionary.Add(emailXName, typeof(email));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class name : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName keyXName = System.Xml.Linq.XName.Get("key", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator name(XElement xe) { return XTypedServices.ToXTypedElement<name>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static name() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public name() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.name.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.name.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.name.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string key {
            get {
                XAttribute x = this.Attribute(keyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(keyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static name Load(string xmlFile) {
            return XTypedServices.Load<name>(xmlFile);
        }
        
        public static name Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<name>(xmlFile);
        }
        
        public static name Parse(string xml) {
            return XTypedServices.Parse<name>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<name>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class affiliation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("affiliation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator affiliation(XElement xe) { return XTypedServices.ToXTypedElement<affiliation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static affiliation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public affiliation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.affiliation.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.affiliation.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.affiliation.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static affiliation Load(string xmlFile) {
            return XTypedServices.Load<affiliation>(xmlFile);
        }
        
        public static affiliation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<affiliation>(xmlFile);
        }
        
        public static affiliation Parse(string xml) {
            return XTypedServices.Parse<affiliation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<affiliation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class email : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("email", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator email(XElement xe) { return XTypedServices.ToXTypedElement<email>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static email() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public email() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.email.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.email.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.email.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.email.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.email.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.email.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static email Load(string xmlFile) {
            return XTypedServices.Load<email>(xmlFile);
        }
        
        public static email Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<email>(xmlFile);
        }
        
        public static email Parse(string xml) {
            return XTypedServices.Parse<email>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<email>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class status : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("status", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator status(XElement xe) { return XTypedServices.ToXTypedElement<status>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static status() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public status() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.status.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.status.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.status.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static status Load(string xmlFile) {
            return XTypedServices.Load<status>(xmlFile);
        }
        
        public static status Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<status>(xmlFile);
        }
        
        public static status Parse(string xml) {
            return XTypedServices.Parse<status>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<status>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)*
    /// </para>
    /// </summary>
    public partial class @abstract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("abstract", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @abstract(XElement xe) { return XTypedServices.ToXTypedElement<@abstract>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @abstract() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)*
        /// </para>
        /// </summary>
        public @abstract() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@abstract.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@abstract.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@abstract.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static @abstract Load(string xmlFile) {
            return XTypedServices.Load<@abstract>(xmlFile);
        }
        
        public static @abstract Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@abstract>(xmlFile);
        }
        
        public static @abstract Parse(string xml) {
            return XTypedServices.Parse<@abstract>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@abstract>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class pubstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pubstmt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pubstmt(XElement xe) { return XTypedServices.ToXTypedElement<pubstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pubstmt() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public pubstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.pubstmt.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.pubstmt.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.pubstmt.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static pubstmt Load(string xmlFile) {
            return XTypedServices.Load<pubstmt>(xmlFile);
        }
        
        public static pubstmt Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pubstmt>(xmlFile);
        }
        
        public static pubstmt Parse(string xml) {
            return XTypedServices.Parse<pubstmt>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pubstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class sourcedesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sourcedesc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sourcedesc(XElement xe) { return XTypedServices.ToXTypedElement<sourcedesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sourcedesc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public sourcedesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.sourcedesc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.sourcedesc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.sourcedesc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sourcedesc Load(string xmlFile) {
            return XTypedServices.Load<sourcedesc>(xmlFile);
        }
        
        public static sourcedesc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sourcedesc>(xmlFile);
        }
        
        public static sourcedesc Parse(string xml) {
            return XTypedServices.Parse<sourcedesc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sourcedesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (language+)
    /// </para>
    /// </summary>
    public partial class langusage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<language> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("langusage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator langusage(XElement xe) { return XTypedServices.ToXTypedElement<langusage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static langusage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(languageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (language+)
        /// </para>
        /// </summary>
        public langusage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (language+)
        /// </para>
        /// </summary>
        public virtual IList<language> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XTypedList<language>(this, LinqToXsdTypeManager.Instance, languageXName);
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XTypedList<language>.Initialize(this, LinqToXsdTypeManager.Instance, value, languageXName);
                    }
                    else {
                        XTypedServices.SetList<language>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.langusage.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.langusage.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.langusage.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static langusage Load(string xmlFile) {
            return XTypedServices.Load<langusage>(xmlFile);
        }
        
        public static langusage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<langusage>(xmlFile);
        }
        
        public static langusage Parse(string xml) {
            return XTypedServices.Parse<langusage>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<langusage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(languageXName, typeof(language));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class language : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator language(XElement xe) { return XTypedServices.ToXTypedElement<language>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static language() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public language() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.language.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.language.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.language.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static language Load(string xmlFile) {
            return XTypedServices.Load<language>(xmlFile);
        }
        
        public static language Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<language>(xmlFile);
        }
        
        public static language Parse(string xml) {
            return XTypedServices.Parse<language>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<language>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class revisiondesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("revisiondesc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator revisiondesc(XElement xe) { return XTypedServices.ToXTypedElement<revisiondesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static revisiondesc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public revisiondesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.revisiondesc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.revisiondesc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.revisiondesc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static revisiondesc Load(string xmlFile) {
            return XTypedServices.Load<revisiondesc>(xmlFile);
        }
        
        public static revisiondesc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<revisiondesc>(xmlFile);
        }
        
        public static revisiondesc Parse(string xml) {
            return XTypedServices.Parse<revisiondesc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<revisiondesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
    /// </para>
    /// </summary>
    public partial class p : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator p(XElement xe) { return XTypedServices.ToXTypedElement<p>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static p() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public p() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.p.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.p.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.p.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static p Load(string xmlFile) {
            return XTypedServices.Load<p>(xmlFile);
        }
        
        public static p Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<p>(xmlFile);
        }
        
        public static p Parse(string xml) {
            return XTypedServices.Parse<p>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<p>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (item+)
    /// </para>
    /// </summary>
    public partial class ulist : global::W3C.XMLSpec.listclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spacingXName = System.Xml.Linq.XName.Get("spacing", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ulist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ulist(XElement xe) { return XTypedServices.ToXTypedElement<ulist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ulist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(itemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (item+)
        /// </para>
        /// </summary>
        public ulist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (item+)
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.ulist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.ulist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.ulist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.ulist.SpacingEnum? spacing {
            get {
                XAttribute x = this.Attribute(spacingXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.ulist.SpacingEnum)(Enum.Parse(typeof(W3C.XMLSpec.ulist.SpacingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(spacingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static ulist Load(string xmlFile) {
            return XTypedServices.Load<ulist>(xmlFile);
        }
        
        public static ulist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ulist>(xmlFile);
        }
        
        public new static ulist Parse(string xml) {
            return XTypedServices.Parse<ulist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ulist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemXName, typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum SpacingEnum {
            
            normal,
            
            compact,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (item+)
    /// </para>
    /// </summary>
    public partial class olist : global::W3C.XMLSpec.listclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spacingXName = System.Xml.Linq.XName.Get("spacing", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("olist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator olist(XElement xe) { return XTypedServices.ToXTypedElement<olist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static olist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(itemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (item+)
        /// </para>
        /// </summary>
        public olist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (item+)
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.olist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.olist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.olist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.olist.SpacingEnum? spacing {
            get {
                XAttribute x = this.Attribute(spacingXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.olist.SpacingEnum)(Enum.Parse(typeof(W3C.XMLSpec.olist.SpacingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(spacingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static olist Load(string xmlFile) {
            return XTypedServices.Load<olist>(xmlFile);
        }
        
        public static olist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<olist>(xmlFile);
        }
        
        public new static olist Parse(string xml) {
            return XTypedServices.Parse<olist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<olist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemXName, typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum SpacingEnum {
            
            normal,
            
            compact,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class item : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator item(XElement xe) { return XTypedServices.ToXTypedElement<item>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static item() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public item() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.item.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.item.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.item.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static item Load(string xmlFile) {
            return XTypedServices.Load<item>(xmlFile);
        }
        
        public static item Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<item>(xmlFile);
        }
        
        public static item Parse(string xml) {
            return XTypedServices.Parse<item>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<item>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sitem+)
    /// </para>
    /// </summary>
    public partial class slist : global::W3C.XMLSpec.listclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sitemXName = System.Xml.Linq.XName.Get("sitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sitem> sitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("slist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator slist(XElement xe) { return XTypedServices.ToXTypedElement<slist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static slist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sitemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sitem+)
        /// </para>
        /// </summary>
        public slist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (sitem+)
        /// </para>
        /// </summary>
        public virtual IList<sitem> sitem {
            get {
                if ((this.sitemField == null)) {
                    this.sitemField = new XTypedList<sitem>(this, LinqToXsdTypeManager.Instance, sitemXName);
                }
                return this.sitemField;
            }
            set {
                if ((value == null)) {
                    this.sitemField = null;
                }
                else {
                    if ((this.sitemField == null)) {
                        this.sitemField = XTypedList<sitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, sitemXName);
                    }
                    else {
                        XTypedServices.SetList<sitem>(this.sitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.slist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.slist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.slist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static slist Load(string xmlFile) {
            return XTypedServices.Load<slist>(xmlFile);
        }
        
        public static slist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<slist>(xmlFile);
        }
        
        public new static slist Parse(string xml) {
            return XTypedServices.Parse<slist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<slist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sitemXName, typeof(sitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class sitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sitem(XElement xe) { return XTypedServices.ToXTypedElement<sitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public sitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.sitem.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.sitem.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.sitem.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sitem Load(string xmlFile) {
            return XTypedServices.Load<sitem>(xmlFile);
        }
        
        public static sitem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sitem>(xmlFile);
        }
        
        public static sitem Parse(string xml) {
            return XTypedServices.Parse<sitem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (gitem+)
    /// </para>
    /// </summary>
    public partial class glist : global::W3C.XMLSpec.listclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gitemXName = System.Xml.Linq.XName.Get("gitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<gitem> gitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("glist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator glist(XElement xe) { return XTypedServices.ToXTypedElement<glist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static glist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(gitemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (gitem+)
        /// </para>
        /// </summary>
        public glist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (gitem+)
        /// </para>
        /// </summary>
        public virtual IList<gitem> gitem {
            get {
                if ((this.gitemField == null)) {
                    this.gitemField = new XTypedList<gitem>(this, LinqToXsdTypeManager.Instance, gitemXName);
                }
                return this.gitemField;
            }
            set {
                if ((value == null)) {
                    this.gitemField = null;
                }
                else {
                    if ((this.gitemField == null)) {
                        this.gitemField = XTypedList<gitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, gitemXName);
                    }
                    else {
                        XTypedServices.SetList<gitem>(this.gitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.glist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.glist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.glist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static glist Load(string xmlFile) {
            return XTypedServices.Load<glist>(xmlFile);
        }
        
        public static glist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<glist>(xmlFile);
        }
        
        public new static glist Parse(string xml) {
            return XTypedServices.Parse<glist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<glist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(gitemXName, typeof(gitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (label, def)
    /// </para>
    /// </summary>
    public partial class gitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("gitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator gitem(XElement xe) { return XTypedServices.ToXTypedElement<gitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static gitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(labelXName), new NamedContentModelEntity(defXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (label, def)
        /// </para>
        /// </summary>
        public gitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, def)
        /// </para>
        /// </summary>
        public virtual label label {
            get {
                XElement x = this.GetElement(labelXName);
                return ((label)(x));
            }
            set {
                this.SetElement(labelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, def)
        /// </para>
        /// </summary>
        public virtual def def {
            get {
                XElement x = this.GetElement(defXName);
                return ((def)(x));
            }
            set {
                this.SetElement(defXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.gitem.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.gitem.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.gitem.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static gitem Load(string xmlFile) {
            return XTypedServices.Load<gitem>(xmlFile);
        }
        
        public static gitem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<gitem>(xmlFile);
        }
        
        public static gitem Parse(string xml) {
            return XTypedServices.Parse<gitem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<gitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(labelXName, typeof(label));
            localElementDictionary.Add(defXName, typeof(def));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class label : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator label(XElement xe) { return XTypedServices.ToXTypedElement<label>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static label() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public label() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.label.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.label.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.label.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static label Load(string xmlFile) {
            return XTypedServices.Load<label>(xmlFile);
        }
        
        public static label Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<label>(xmlFile);
        }
        
        public static label Parse(string xml) {
            return XTypedServices.Parse<label>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<label>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
    /// </para>
    /// </summary>
    public partial class def : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("def", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator def(XElement xe) { return XTypedServices.ToXTypedElement<def>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static def() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public def() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.def.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.def.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.def.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static def Load(string xmlFile) {
            return XTypedServices.Load<def>(xmlFile);
        }
        
        public static def Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<def>(xmlFile);
        }
        
        public static def Parse(string xml) {
            return XTypedServices.Parse<def>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<def>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (bibl+)
    /// </para>
    /// </summary>
    public partial class blist : global::W3C.XMLSpec.speclistclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName biblXName = System.Xml.Linq.XName.Get("bibl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibl> biblField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("blist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator blist(XElement xe) { return XTypedServices.ToXTypedElement<blist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static blist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(biblXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (bibl+)
        /// </para>
        /// </summary>
        public blist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (bibl+)
        /// </para>
        /// </summary>
        public virtual IList<bibl> bibl {
            get {
                if ((this.biblField == null)) {
                    this.biblField = new XTypedList<bibl>(this, LinqToXsdTypeManager.Instance, biblXName);
                }
                return this.biblField;
            }
            set {
                if ((value == null)) {
                    this.biblField = null;
                }
                else {
                    if ((this.biblField == null)) {
                        this.biblField = XTypedList<bibl>.Initialize(this, LinqToXsdTypeManager.Instance, value, biblXName);
                    }
                    else {
                        XTypedServices.SetList<bibl>(this.biblField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.blist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.blist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.blist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static blist Load(string xmlFile) {
            return XTypedServices.Load<blist>(xmlFile);
        }
        
        public static blist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<blist>(xmlFile);
        }
        
        public new static blist Parse(string xml) {
            return XTypedServices.Parse<blist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<blist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(biblXName, typeof(bibl));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class bibl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName keyXName = System.Xml.Linq.XName.Get("key", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bibl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bibl(XElement xe) { return XTypedServices.ToXTypedElement<bibl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibl() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public bibl() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((emphclass | refclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.bibl.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.bibl.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.bibl.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.bibl.ShowEnum show {
            get {
                XAttribute x = this.Attribute(showXName);
                return ((W3C.XMLSpec.bibl.ShowEnum)(Enum.Parse(typeof(W3C.XMLSpec.bibl.ShowEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(showXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.bibl.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.bibl.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.bibl.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string key {
            get {
                XAttribute x = this.Attribute(keyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(keyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static bibl Load(string xmlFile) {
            return XTypedServices.Load<bibl>(xmlFile);
        }
        
        public static bibl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<bibl>(xmlFile);
        }
        
        public static bibl Parse(string xml) {
            return XTypedServices.Parse<bibl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibl>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ShowEnum {
            
            replace,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (member+)
    /// </para>
    /// </summary>
    public partial class orglist : global::W3C.XMLSpec.speclistclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName memberXName = System.Xml.Linq.XName.Get("member", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<member> memberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orglist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orglist(XElement xe) { return XTypedServices.ToXTypedElement<orglist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orglist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(memberXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (member+)
        /// </para>
        /// </summary>
        public orglist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (member+)
        /// </para>
        /// </summary>
        public virtual IList<member> member {
            get {
                if ((this.memberField == null)) {
                    this.memberField = new XTypedList<member>(this, LinqToXsdTypeManager.Instance, memberXName);
                }
                return this.memberField;
            }
            set {
                if ((value == null)) {
                    this.memberField = null;
                }
                else {
                    if ((this.memberField == null)) {
                        this.memberField = XTypedList<member>.Initialize(this, LinqToXsdTypeManager.Instance, value, memberXName);
                    }
                    else {
                        XTypedServices.SetList<member>(this.memberField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.orglist.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.orglist.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.orglist.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static orglist Load(string xmlFile) {
            return XTypedServices.Load<orglist>(xmlFile);
        }
        
        public static orglist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orglist>(xmlFile);
        }
        
        public new static orglist Parse(string xml) {
            return XTypedServices.Parse<orglist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orglist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(memberXName, typeof(member));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name, affiliation?, role?)
    /// </para>
    /// </summary>
    public partial class member : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName affiliationXName = System.Xml.Linq.XName.Get("affiliation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName role1XName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("member", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator member(XElement xe) { return XTypedServices.ToXTypedElement<member>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static member() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName), new NamedContentModelEntity(affiliationXName), new NamedContentModelEntity(roleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name, affiliation?, role?)
        /// </para>
        /// </summary>
        public member() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, role?)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((name)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, role?)
        /// </para>
        /// </summary>
        public virtual affiliation affiliation {
            get {
                XElement x = this.GetElement(affiliationXName);
                return ((affiliation)(x));
            }
            set {
                this.SetElement(affiliationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name, affiliation?, role?)
        /// </para>
        /// </summary>
        public virtual role role {
            get {
                XElement x = this.GetElement(roleXName);
                return ((role)(x));
            }
            set {
                this.SetElement(roleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role1 {
            get {
                XAttribute x = this.Attribute(role1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(role1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.member.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.member.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.member.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static member Load(string xmlFile) {
            return XTypedServices.Load<member>(xmlFile);
        }
        
        public static member Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<member>(xmlFile);
        }
        
        public static member Parse(string xml) {
            return XTypedServices.Parse<member>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<member>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(affiliationXName, typeof(affiliation));
            localElementDictionary.Add(roleXName, typeof(role));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class role : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName role1XName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator role(XElement xe) { return XTypedServices.ToXTypedElement<role>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static role() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public role() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role1 {
            get {
                XAttribute x = this.Attribute(role1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(role1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.role.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.role.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.role.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static role Load(string xmlFile) {
            return XTypedServices.Load<role>(xmlFile);
        }
        
        public static role Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<role>(xmlFile);
        }
        
        public static role Parse(string xml) {
            return XTypedServices.Parse<role>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<role>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class note : global::W3C.XMLSpec.noteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("note", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator note(XElement xe) { return XTypedServices.ToXTypedElement<note>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static note() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public note() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.note.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.note.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.note.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static note Load(string xmlFile) {
            return XTypedServices.Load<note>(xmlFile);
        }
        
        public static note Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<note>(xmlFile);
        }
        
        public new static note Parse(string xml) {
            return XTypedServices.Parse<note>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<note>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
    /// </para>
    /// </summary>
    public partial class issue : global::W3C.XMLSpec.noteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<source> sourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resolutionXName = System.Xml.Linq.XName.Get("resolution", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string statusDefaultValue = "open";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("issue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator issue(XElement xe) { return XTypedServices.ToXTypedElement<issue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static issue() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(sourceXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))), new NamedContentModelEntity(resolutionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public issue() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<source> source {
            get {
                if ((this.sourceField == null)) {
                    this.sourceField = new XTypedList<source>(this, LinqToXsdTypeManager.Instance, sourceXName);
                }
                return this.sourceField;
            }
            set {
                if ((value == null)) {
                    this.sourceField = null;
                }
                else {
                    if ((this.sourceField == null)) {
                        this.sourceField = XTypedList<source>.Initialize(this, LinqToXsdTypeManager.Instance, value, sourceXName);
                    }
                    else {
                        XTypedServices.SetList<source>(this.sourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, source*, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+, resolution?)
        /// </para>
        /// </summary>
        public virtual resolution resolution {
            get {
                XElement x = this.GetElement(resolutionXName);
                return ((resolution)(x));
            }
            set {
                this.SetElement(resolutionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.issue.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.issue.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.issue.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.issue.StatusEnum status {
            get {
                XAttribute x = this.Attribute(statusXName);
                return ((W3C.XMLSpec.issue.StatusEnum)(Enum.Parse(typeof(W3C.XMLSpec.issue.StatusEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype, statusDefaultValue))));
            }
            set {
                this.SetAttribute(statusXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static issue Load(string xmlFile) {
            return XTypedServices.Load<issue>(xmlFile);
        }
        
        public static issue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<issue>(xmlFile);
        }
        
        public new static issue Parse(string xml) {
            return XTypedServices.Parse<issue>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<issue>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(sourceXName, typeof(source));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(resolutionXName, typeof(resolution));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum StatusEnum {
            
            open,
            
            closed,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class source : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator source(XElement xe) { return XTypedServices.ToXTypedElement<source>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static source() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public source() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.source.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.source.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.source.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static source Load(string xmlFile) {
            return XTypedServices.Load<source>(xmlFile);
        }
        
        public static source Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<source>(xmlFile);
        }
        
        public static source Parse(string xml) {
            return XTypedServices.Parse<source>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<source>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class resolution : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("resolution", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator resolution(XElement xe) { return XTypedServices.ToXTypedElement<resolution>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static resolution() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public resolution() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.resolution.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.resolution.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.resolution.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static resolution Load(string xmlFile) {
            return XTypedServices.Load<resolution>(xmlFile);
        }
        
        public static resolution Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<resolution>(xmlFile);
        }
        
        public static resolution Parse(string xml) {
            return XTypedServices.Parse<resolution>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<resolution>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
    /// </para>
    /// </summary>
    public partial class wfcnote : global::W3C.XMLSpec.noteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("wfcnote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator wfcnote(XElement xe) { return XTypedServices.ToXTypedElement<wfcnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static wfcnote() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public wfcnote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.wfcnote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.wfcnote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.wfcnote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static wfcnote Load(string xmlFile) {
            return XTypedServices.Load<wfcnote>(xmlFile);
        }
        
        public static wfcnote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<wfcnote>(xmlFile);
        }
        
        public new static wfcnote Parse(string xml) {
            return XTypedServices.Parse<wfcnote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<wfcnote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
    /// </para>
    /// </summary>
    public partial class vcnote : global::W3C.XMLSpec.noteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("vcnote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator vcnote(XElement xe) { return XTypedServices.ToXTypedElement<vcnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static vcnote() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public vcnote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.vcnote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.vcnote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.vcnote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static vcnote Load(string xmlFile) {
            return XTypedServices.Load<vcnote>(xmlFile);
        }
        
        public static vcnote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<vcnote>(xmlFile);
        }
        
        public new static vcnote Parse(string xml) {
            return XTypedServices.Parse<vcnote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<vcnote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
    /// </para>
    /// </summary>
    public partial class constraintnote : global::W3C.XMLSpec.noteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constraintnote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator constraintnote(XElement xe) { return XTypedServices.ToXTypedElement<constraintnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static constraintnote() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public constraintnote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.constraintnote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.constraintnote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.constraintnote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static constraintnote Load(string xmlFile) {
            return XTypedServices.Load<constraintnote>(xmlFile);
        }
        
        public static constraintnote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<constraintnote>(xmlFile);
        }
        
        public new static constraintnote Parse(string xml) {
            return XTypedServices.Parse<constraintnote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constraintnote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
    /// </para>
    /// </summary>
    public partial class eg : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constraintXName = System.Xml.Linq.XName.Get("constraint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<constraint> constraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spaceXName = System.Xml.Linq.XName.Get("space", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eg(XElement xe) { return XTypedServices.ToXTypedElement<eg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eg() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(constraintXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public eg() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<constraint> constraint {
            get {
                if ((this.constraintField == null)) {
                    this.constraintField = new XTypedList<constraint>(this, LinqToXsdTypeManager.Instance, constraintXName);
                }
                return this.constraintField;
            }
            set {
                if ((value == null)) {
                    this.constraintField = null;
                }
                else {
                    if ((this.constraintField == null)) {
                        this.constraintField = XTypedList<constraint>.Initialize(this, LinqToXsdTypeManager.Instance, value, constraintXName);
                    }
                    else {
                        XTypedServices.SetList<constraint>(this.constraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.eg.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.eg.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.eg.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.SpaceEnum? space {
            get {
                XAttribute x = this.Attribute(spaceXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.SpaceEnum)(Enum.Parse(typeof(W3C.XMLSpec.SpaceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(spaceXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static eg Load(string xmlFile) {
            return XTypedServices.Load<eg>(xmlFile);
        }
        
        public static eg Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<eg>(xmlFile);
        }
        
        public new static eg Parse(string xml) {
            return XTypedServices.Parse<eg>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eg>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(constraintXName, typeof(constraint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class graphic : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altXName = System.Xml.Linq.XName.Get("alt", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("graphic", "");
        
		public static explicit operator graphic(XElement xe) { return XTypedServices.ToXTypedElement<graphic>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public graphic() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.graphic.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.graphic.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.graphic.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.graphic.ShowEnum show {
            get {
                XAttribute x = this.Attribute(showXName);
                return ((W3C.XMLSpec.graphic.ShowEnum)(Enum.Parse(typeof(W3C.XMLSpec.graphic.ShowEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(showXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.graphic.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.graphic.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.graphic.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alt {
            get {
                XAttribute x = this.Attribute(altXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static graphic Load(string xmlFile) {
            return XTypedServices.Load<graphic>(xmlFile);
        }
        
        public static graphic Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<graphic>(xmlFile);
        }
        
        public new static graphic Parse(string xml) {
            return XTypedServices.Parse<graphic>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<graphic>(this);
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ShowEnum {
            
            embed,
        }
        
        public enum ActuateEnum {
            
            onLoad,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arg*)
    /// </para>
    /// </summary>
    public partial class proto : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argXName = System.Xml.Linq.XName.Get("arg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arg> argField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName returntypeXName = System.Xml.Linq.XName.Get("return-type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("proto", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator proto(XElement xe) { return XTypedServices.ToXTypedElement<proto>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static proto() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arg*)
        /// </para>
        /// </summary>
        public proto() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (arg*)
        /// </para>
        /// </summary>
        public virtual IList<arg> arg {
            get {
                if ((this.argField == null)) {
                    this.argField = new XTypedList<arg>(this, LinqToXsdTypeManager.Instance, argXName);
                }
                return this.argField;
            }
            set {
                if ((value == null)) {
                    this.argField = null;
                }
                else {
                    if ((this.argField == null)) {
                        this.argField = XTypedList<arg>.Initialize(this, LinqToXsdTypeManager.Instance, value, argXName);
                    }
                    else {
                        XTypedServices.SetList<arg>(this.argField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.proto.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.proto.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.proto.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string returntype {
            get {
                XAttribute x = this.Attribute(returntypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(returntypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static proto Load(string xmlFile) {
            return XTypedServices.Load<proto>(xmlFile);
        }
        
        public static proto Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<proto>(xmlFile);
        }
        
        public new static proto Parse(string xml) {
            return XTypedServices.Parse<proto>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<proto>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argXName, typeof(arg));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class arg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occurXName = System.Xml.Linq.XName.Get("occur", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arg", "");
        
		public static explicit operator arg(XElement xe) { return XTypedServices.ToXTypedElement<arg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arg() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.arg.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.arg.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.arg.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.arg.OccurEnum? occur {
            get {
                XAttribute x = this.Attribute(occurXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.arg.OccurEnum)(Enum.Parse(typeof(W3C.XMLSpec.arg.OccurEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(occurXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static arg Load(string xmlFile) {
            return XTypedServices.Load<arg>(xmlFile);
        }
        
        public static arg Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<arg>(xmlFile);
        }
        
        public static arg Parse(string xml) {
            return XTypedServices.Parse<arg>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum OccurEnum {
            
            opt,
            
            req,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
    /// </para>
    /// </summary>
    public partial class example : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("example", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator example(XElement xe) { return XTypedServices.ToXTypedElement<example>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static example() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public example() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.example.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.example.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.example.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static example Load(string xmlFile) {
            return XTypedServices.Load<example>(xmlFile);
        }
        
        public static example Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<example>(xmlFile);
        }
        
        public new static example Parse(string xml) {
            return XTypedServices.Parse<example>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<example>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
    /// </para>
    /// </summary>
    public partial class scrap : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prodgroupXName = System.Xml.Linq.XName.Get("prodgroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prodgroup> prodgroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prodXName = System.Xml.Linq.XName.Get("prod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prod> prodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bnfXName = System.Xml.Linq.XName.Get("bnf", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bnf> bnfField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prodrecapXName = System.Xml.Linq.XName.Get("prodrecap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prodrecap> prodrecapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headstyleXName = System.Xml.Linq.XName.Get("headstyle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string headstyleDefaultValue = "show";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("scrap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator scrap(XElement xe) { return XTypedServices.ToXTypedElement<scrap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static scrap() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(prodgroupXName), new NamedContentModelEntity(prodXName), new NamedContentModelEntity(bnfXName), new NamedContentModelEntity(prodrecapXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public scrap() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public virtual IList<prodgroup> prodgroup {
            get {
                if ((this.prodgroupField == null)) {
                    this.prodgroupField = new XTypedList<prodgroup>(this, LinqToXsdTypeManager.Instance, prodgroupXName);
                }
                return this.prodgroupField;
            }
            set {
                if ((value == null)) {
                    this.prodgroupField = null;
                }
                else {
                    if ((this.prodgroupField == null)) {
                        this.prodgroupField = XTypedList<prodgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, prodgroupXName);
                    }
                    else {
                        XTypedServices.SetList<prodgroup>(this.prodgroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public virtual IList<prod> prod {
            get {
                if ((this.prodField == null)) {
                    this.prodField = new XTypedList<prod>(this, LinqToXsdTypeManager.Instance, prodXName);
                }
                return this.prodField;
            }
            set {
                if ((value == null)) {
                    this.prodField = null;
                }
                else {
                    if ((this.prodField == null)) {
                        this.prodField = XTypedList<prod>.Initialize(this, LinqToXsdTypeManager.Instance, value, prodXName);
                    }
                    else {
                        XTypedServices.SetList<prod>(this.prodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public virtual IList<bnf> bnf {
            get {
                if ((this.bnfField == null)) {
                    this.bnfField = new XTypedList<bnf>(this, LinqToXsdTypeManager.Instance, bnfXName);
                }
                return this.bnfField;
            }
            set {
                if ((value == null)) {
                    this.bnfField = null;
                }
                else {
                    if ((this.bnfField == null)) {
                        this.bnfField = XTypedList<bnf>.Initialize(this, LinqToXsdTypeManager.Instance, value, bnfXName);
                    }
                    else {
                        XTypedServices.SetList<bnf>(this.bnfField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head, (prodgroup | prod | bnf | prodrecap)+)
        /// </para>
        /// </summary>
        public virtual IList<prodrecap> prodrecap {
            get {
                if ((this.prodrecapField == null)) {
                    this.prodrecapField = new XTypedList<prodrecap>(this, LinqToXsdTypeManager.Instance, prodrecapXName);
                }
                return this.prodrecapField;
            }
            set {
                if ((value == null)) {
                    this.prodrecapField = null;
                }
                else {
                    if ((this.prodrecapField == null)) {
                        this.prodrecapField = XTypedList<prodrecap>.Initialize(this, LinqToXsdTypeManager.Instance, value, prodrecapXName);
                    }
                    else {
                        XTypedServices.SetList<prodrecap>(this.prodrecapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.scrap.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.scrap.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.scrap.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.scrap.HeadstyleEnum headstyle {
            get {
                XAttribute x = this.Attribute(headstyleXName);
                return ((W3C.XMLSpec.scrap.HeadstyleEnum)(Enum.Parse(typeof(W3C.XMLSpec.scrap.HeadstyleEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype, headstyleDefaultValue))));
            }
            set {
                this.SetAttribute(headstyleXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static scrap Load(string xmlFile) {
            return XTypedServices.Load<scrap>(xmlFile);
        }
        
        public static scrap Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<scrap>(xmlFile);
        }
        
        public new static scrap Parse(string xml) {
            return XTypedServices.Parse<scrap>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<scrap>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(prodgroupXName, typeof(prodgroup));
            localElementDictionary.Add(prodXName, typeof(prod));
            localElementDictionary.Add(bnfXName, typeof(bnf));
            localElementDictionary.Add(prodrecapXName, typeof(prodrecap));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum HeadstyleEnum {
            
            show,
            
            suppress,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (prod+)
    /// </para>
    /// </summary>
    public partial class prodgroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prodXName = System.Xml.Linq.XName.Get("prod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prod> prodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pcw1XName = System.Xml.Linq.XName.Get("pcw1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pcw2XName = System.Xml.Linq.XName.Get("pcw2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pcw3XName = System.Xml.Linq.XName.Get("pcw3", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pcw4XName = System.Xml.Linq.XName.Get("pcw4", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pcw5XName = System.Xml.Linq.XName.Get("pcw5", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prodgroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator prodgroup(XElement xe) { return XTypedServices.ToXTypedElement<prodgroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prodgroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(prodXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (prod+)
        /// </para>
        /// </summary>
        public prodgroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (prod+)
        /// </para>
        /// </summary>
        public virtual IList<prod> prod {
            get {
                if ((this.prodField == null)) {
                    this.prodField = new XTypedList<prod>(this, LinqToXsdTypeManager.Instance, prodXName);
                }
                return this.prodField;
            }
            set {
                if ((value == null)) {
                    this.prodField = null;
                }
                else {
                    if ((this.prodField == null)) {
                        this.prodField = XTypedList<prod>.Initialize(this, LinqToXsdTypeManager.Instance, value, prodXName);
                    }
                    else {
                        XTypedServices.SetList<prod>(this.prodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.prodgroup.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.prodgroup.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.prodgroup.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pcw1 {
            get {
                XAttribute x = this.Attribute(pcw1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(pcw1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pcw2 {
            get {
                XAttribute x = this.Attribute(pcw2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(pcw2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pcw3 {
            get {
                XAttribute x = this.Attribute(pcw3XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(pcw3XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pcw4 {
            get {
                XAttribute x = this.Attribute(pcw4XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(pcw4XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pcw5 {
            get {
                XAttribute x = this.Attribute(pcw5XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(pcw5XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prodgroup Load(string xmlFile) {
            return XTypedServices.Load<prodgroup>(xmlFile);
        }
        
        public static prodgroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prodgroup>(xmlFile);
        }
        
        public static prodgroup Parse(string xml) {
            return XTypedServices.Parse<prodgroup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prodgroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prodXName, typeof(prod));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
    /// </para>
    /// </summary>
    public partial class prod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lhsXName = System.Xml.Linq.XName.Get("lhs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rhsXName = System.Xml.Linq.XName.Get("rhs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rhs> rhsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName comXName = System.Xml.Linq.XName.Get("com", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<com> comField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName wfcXName = System.Xml.Linq.XName.Get("wfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<wfc> wfcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vcXName = System.Xml.Linq.XName.Get("vc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<vc> vcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constraintXName = System.Xml.Linq.XName.Get("constraint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<constraint> constraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator prod(XElement xe) { return XTypedServices.ToXTypedElement<prod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prod() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(lhsXName), new SequenceContentModelEntity(new NamedContentModelEntity(rhsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(comXName), new NamedContentModelEntity(wfcXName), new NamedContentModelEntity(vcXName), new NamedContentModelEntity(constraintXName))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public prod() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual lhs lhs {
            get {
                XElement x = this.GetElement(lhsXName);
                return ((lhs)(x));
            }
            set {
                this.SetElement(lhsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual IList<rhs> rhs {
            get {
                if ((this.rhsField == null)) {
                    this.rhsField = new XTypedList<rhs>(this, LinqToXsdTypeManager.Instance, rhsXName);
                }
                return this.rhsField;
            }
            set {
                if ((value == null)) {
                    this.rhsField = null;
                }
                else {
                    if ((this.rhsField == null)) {
                        this.rhsField = XTypedList<rhs>.Initialize(this, LinqToXsdTypeManager.Instance, value, rhsXName);
                    }
                    else {
                        XTypedServices.SetList<rhs>(this.rhsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual IList<com> com {
            get {
                if ((this.comField == null)) {
                    this.comField = new XTypedList<com>(this, LinqToXsdTypeManager.Instance, comXName);
                }
                return this.comField;
            }
            set {
                if ((value == null)) {
                    this.comField = null;
                }
                else {
                    if ((this.comField == null)) {
                        this.comField = XTypedList<com>.Initialize(this, LinqToXsdTypeManager.Instance, value, comXName);
                    }
                    else {
                        XTypedServices.SetList<com>(this.comField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual IList<wfc> wfc {
            get {
                if ((this.wfcField == null)) {
                    this.wfcField = new XTypedList<wfc>(this, LinqToXsdTypeManager.Instance, wfcXName);
                }
                return this.wfcField;
            }
            set {
                if ((value == null)) {
                    this.wfcField = null;
                }
                else {
                    if ((this.wfcField == null)) {
                        this.wfcField = XTypedList<wfc>.Initialize(this, LinqToXsdTypeManager.Instance, value, wfcXName);
                    }
                    else {
                        XTypedServices.SetList<wfc>(this.wfcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual IList<vc> vc {
            get {
                if ((this.vcField == null)) {
                    this.vcField = new XTypedList<vc>(this, LinqToXsdTypeManager.Instance, vcXName);
                }
                return this.vcField;
            }
            set {
                if ((value == null)) {
                    this.vcField = null;
                }
                else {
                    if ((this.vcField == null)) {
                        this.vcField = XTypedList<vc>.Initialize(this, LinqToXsdTypeManager.Instance, value, vcXName);
                    }
                    else {
                        XTypedServices.SetList<vc>(this.vcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (lhs, (rhs, (com | wfc | vc | constraint)*)+)
        /// </para>
        /// </summary>
        public virtual IList<constraint> constraint {
            get {
                if ((this.constraintField == null)) {
                    this.constraintField = new XTypedList<constraint>(this, LinqToXsdTypeManager.Instance, constraintXName);
                }
                return this.constraintField;
            }
            set {
                if ((value == null)) {
                    this.constraintField = null;
                }
                else {
                    if ((this.constraintField == null)) {
                        this.constraintField = XTypedList<constraint>.Initialize(this, LinqToXsdTypeManager.Instance, value, constraintXName);
                    }
                    else {
                        XTypedServices.SetList<constraint>(this.constraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.prod.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.prod.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.prod.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string num {
            get {
                XAttribute x = this.Attribute(numXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(numXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prod Load(string xmlFile) {
            return XTypedServices.Load<prod>(xmlFile);
        }
        
        public static prod Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prod>(xmlFile);
        }
        
        public static prod Parse(string xml) {
            return XTypedServices.Parse<prod>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prod>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lhsXName, typeof(lhs));
            localElementDictionary.Add(rhsXName, typeof(rhs));
            localElementDictionary.Add(comXName, typeof(com));
            localElementDictionary.Add(wfcXName, typeof(wfc));
            localElementDictionary.Add(vcXName, typeof(vc));
            localElementDictionary.Add(constraintXName, typeof(constraint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class lhs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lhs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator lhs(XElement xe) { return XTypedServices.ToXTypedElement<lhs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static lhs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public lhs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.lhs.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.lhs.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.lhs.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static lhs Load(string xmlFile) {
            return XTypedServices.Load<lhs>(xmlFile);
        }
        
        public static lhs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<lhs>(xmlFile);
        }
        
        public static lhs Parse(string xml) {
            return XTypedServices.Parse<lhs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<lhs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase | nt | xnt | com)*
    /// </para>
    /// </summary>
    public partial class rhs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ntXName = System.Xml.Linq.XName.Get("nt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nt> ntField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xntXName = System.Xml.Linq.XName.Get("xnt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<xnt> xntField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName comXName = System.Xml.Linq.XName.Get("com", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<com> comField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rhs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator rhs(XElement xe) { return XTypedServices.ToXTypedElement<rhs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static rhs() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(ntXName), new NamedContentModelEntity(xntXName), new NamedContentModelEntity(comXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase | nt | xnt | com)*
        /// </para>
        /// </summary>
        public rhs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | nt | xnt | com)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | nt | xnt | com)*
        /// </para>
        /// </summary>
        public virtual IList<nt> nt {
            get {
                if ((this.ntField == null)) {
                    this.ntField = new XTypedList<nt>(this, LinqToXsdTypeManager.Instance, ntXName);
                }
                return this.ntField;
            }
            set {
                if ((value == null)) {
                    this.ntField = null;
                }
                else {
                    if ((this.ntField == null)) {
                        this.ntField = XTypedList<nt>.Initialize(this, LinqToXsdTypeManager.Instance, value, ntXName);
                    }
                    else {
                        XTypedServices.SetList<nt>(this.ntField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | nt | xnt | com)*
        /// </para>
        /// </summary>
        public virtual IList<xnt> xnt {
            get {
                if ((this.xntField == null)) {
                    this.xntField = new XTypedList<xnt>(this, LinqToXsdTypeManager.Instance, xntXName);
                }
                return this.xntField;
            }
            set {
                if ((value == null)) {
                    this.xntField = null;
                }
                else {
                    if ((this.xntField == null)) {
                        this.xntField = XTypedList<xnt>.Initialize(this, LinqToXsdTypeManager.Instance, value, xntXName);
                    }
                    else {
                        XTypedServices.SetList<xnt>(this.xntField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | nt | xnt | com)*
        /// </para>
        /// </summary>
        public virtual IList<com> com {
            get {
                if ((this.comField == null)) {
                    this.comField = new XTypedList<com>(this, LinqToXsdTypeManager.Instance, comXName);
                }
                return this.comField;
            }
            set {
                if ((value == null)) {
                    this.comField = null;
                }
                else {
                    if ((this.comField == null)) {
                        this.comField = XTypedList<com>.Initialize(this, LinqToXsdTypeManager.Instance, value, comXName);
                    }
                    else {
                        XTypedServices.SetList<com>(this.comField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.rhs.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.rhs.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.rhs.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static rhs Load(string xmlFile) {
            return XTypedServices.Load<rhs>(xmlFile);
        }
        
        public static rhs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<rhs>(xmlFile);
        }
        
        public static rhs Parse(string xml) {
            return XTypedServices.Parse<rhs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<rhs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(ntXName, typeof(nt));
            localElementDictionary.Add(xntXName, typeof(xnt));
            localElementDictionary.Add(comXName, typeof(com));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase | loc | bibref)*
    /// </para>
    /// </summary>
    public partial class com : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locXName = System.Xml.Linq.XName.Get("loc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<loc> locField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("com", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator com(XElement xe) { return XTypedServices.ToXTypedElement<com>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static com() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(locXName), new NamedContentModelEntity(bibrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase | loc | bibref)*
        /// </para>
        /// </summary>
        public com() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | loc | bibref)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | loc | bibref)*
        /// </para>
        /// </summary>
        public virtual IList<loc> loc {
            get {
                if ((this.locField == null)) {
                    this.locField = new XTypedList<loc>(this, LinqToXsdTypeManager.Instance, locXName);
                }
                return this.locField;
            }
            set {
                if ((value == null)) {
                    this.locField = null;
                }
                else {
                    if ((this.locField == null)) {
                        this.locField = XTypedList<loc>.Initialize(this, LinqToXsdTypeManager.Instance, value, locXName);
                    }
                    else {
                        XTypedServices.SetList<loc>(this.locField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (phrase | loc | bibref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.com.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.com.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.com.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static com Load(string xmlFile) {
            return XTypedServices.Load<com>(xmlFile);
        }
        
        public static com Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<com>(xmlFile);
        }
        
        public static com Parse(string xml) {
            return XTypedServices.Parse<com>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<com>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(locXName, typeof(loc));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class wfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("wfc", "");
        
		public static explicit operator wfc(XElement xe) { return XTypedServices.ToXTypedElement<wfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public wfc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string def {
            get {
                XAttribute x = this.Attribute(defXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(defXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.wfc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.wfc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.wfc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static wfc Load(string xmlFile) {
            return XTypedServices.Load<wfc>(xmlFile);
        }
        
        public static wfc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<wfc>(xmlFile);
        }
        
        public static wfc Parse(string xml) {
            return XTypedServices.Parse<wfc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<wfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class vc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("vc", "");
        
		public static explicit operator vc(XElement xe) { return XTypedServices.ToXTypedElement<vc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public vc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string def {
            get {
                XAttribute x = this.Attribute(defXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(defXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.vc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.vc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.vc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static vc Load(string xmlFile) {
            return XTypedServices.Load<vc>(xmlFile);
        }
        
        public static vc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<vc>(xmlFile);
        }
        
        public static vc Parse(string xml) {
            return XTypedServices.Parse<vc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<vc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class constraint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constraint", "");
        
		public static explicit operator constraint(XElement xe) { return XTypedServices.ToXTypedElement<constraint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public constraint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string def {
            get {
                XAttribute x = this.Attribute(defXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(defXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.constraint.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.constraint.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.constraint.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static constraint Load(string xmlFile) {
            return XTypedServices.Load<constraint>(xmlFile);
        }
        
        public static constraint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<constraint>(xmlFile);
        }
        
        public static constraint Parse(string xml) {
            return XTypedServices.Parse<constraint>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constraint>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
    /// </para>
    /// </summary>
    public partial class bnf : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constraintXName = System.Xml.Linq.XName.Get("constraint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<constraint> constraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spaceXName = System.Xml.Linq.XName.Get("space", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bnf", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bnf(XElement xe) { return XTypedServices.ToXTypedElement<bnf>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bnf() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(constraintXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public bnf() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | emphclass | locclass | ednoteclass | constraint)?)*
        /// </para>
        /// </summary>
        public virtual IList<constraint> constraint {
            get {
                if ((this.constraintField == null)) {
                    this.constraintField = new XTypedList<constraint>(this, LinqToXsdTypeManager.Instance, constraintXName);
                }
                return this.constraintField;
            }
            set {
                if ((value == null)) {
                    this.constraintField = null;
                }
                else {
                    if ((this.constraintField == null)) {
                        this.constraintField = XTypedList<constraint>.Initialize(this, LinqToXsdTypeManager.Instance, value, constraintXName);
                    }
                    else {
                        XTypedServices.SetList<constraint>(this.constraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.bnf.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.bnf.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.bnf.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.SpaceEnum? space {
            get {
                XAttribute x = this.Attribute(spaceXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.SpaceEnum)(Enum.Parse(typeof(W3C.XMLSpec.SpaceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(spaceXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static bnf Load(string xmlFile) {
            return XTypedServices.Load<bnf>(xmlFile);
        }
        
        public static bnf Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<bnf>(xmlFile);
        }
        
        public static bnf Parse(string xml) {
            return XTypedServices.Parse<bnf>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bnf>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(constraintXName, typeof(constraint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class prodrecap : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prodrecap", "");
        
		public static explicit operator prodrecap(XElement xe) { return XTypedServices.ToXTypedElement<prodrecap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public prodrecap() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.prodrecap.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.prodrecap.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.prodrecap.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string @ref {
            get {
                XAttribute x = this.Attribute(@refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(@refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prodrecap Load(string xmlFile) {
            return XTypedServices.Load<prodrecap>(xmlFile);
        }
        
        public static prodrecap Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prodrecap>(xmlFile);
        }
        
        public static prodrecap Parse(string xml) {
            return XTypedServices.Parse<prodrecap>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prodrecap>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
    /// </para>
    /// </summary>
    public partial class table : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colXName = System.Xml.Linq.XName.Get("col", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<col> colField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colgroupXName = System.Xml.Linq.XName.Get("colgroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<colgroup> colgroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tfootXName = System.Xml.Linq.XName.Get("tfoot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tbodyXName = System.Xml.Linq.XName.Get("tbody", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tbody> tbodyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName summaryXName = System.Xml.Linq.XName.Get("summary", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName borderXName = System.Xml.Linq.XName.Get("border", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frameXName = System.Xml.Linq.XName.Get("frame", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cellspacingXName = System.Xml.Linq.XName.Get("cellspacing", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cellpaddingXName = System.Xml.Linq.XName.Get("cellpadding", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("table", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator table(XElement xe) { return XTypedServices.ToXTypedElement<table>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static table() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new ChoiceContentModelEntity(new NamedContentModelEntity(colXName), new NamedContentModelEntity(colgroupXName)), new NamedContentModelEntity(theadXName), new NamedContentModelEntity(tfootXName), new NamedContentModelEntity(tbodyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public table() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual caption caption {
            get {
                XElement x = this.GetElement(captionXName);
                return ((caption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<col> col {
            get {
                if ((this.colField == null)) {
                    this.colField = new XTypedList<col>(this, LinqToXsdTypeManager.Instance, colXName);
                }
                return this.colField;
            }
            set {
                if ((value == null)) {
                    this.colField = null;
                }
                else {
                    if ((this.colField == null)) {
                        this.colField = XTypedList<col>.Initialize(this, LinqToXsdTypeManager.Instance, value, colXName);
                    }
                    else {
                        XTypedServices.SetList<col>(this.colField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<colgroup> colgroup {
            get {
                if ((this.colgroupField == null)) {
                    this.colgroupField = new XTypedList<colgroup>(this, LinqToXsdTypeManager.Instance, colgroupXName);
                }
                return this.colgroupField;
            }
            set {
                if ((value == null)) {
                    this.colgroupField = null;
                }
                else {
                    if ((this.colgroupField == null)) {
                        this.colgroupField = XTypedList<colgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, colgroupXName);
                    }
                    else {
                        XTypedServices.SetList<colgroup>(this.colgroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual thead thead {
            get {
                XElement x = this.GetElement(theadXName);
                return ((thead)(x));
            }
            set {
                this.SetElement(theadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual tfoot tfoot {
            get {
                XElement x = this.GetElement(tfootXName);
                return ((tfoot)(x));
            }
            set {
                this.SetElement(tfootXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<tbody> tbody {
            get {
                if ((this.tbodyField == null)) {
                    this.tbodyField = new XTypedList<tbody>(this, LinqToXsdTypeManager.Instance, tbodyXName);
                }
                return this.tbodyField;
            }
            set {
                if ((value == null)) {
                    this.tbodyField = null;
                }
                else {
                    if ((this.tbodyField == null)) {
                        this.tbodyField = XTypedList<tbody>.Initialize(this, LinqToXsdTypeManager.Instance, value, tbodyXName);
                    }
                    else {
                        XTypedServices.SetList<tbody>(this.tbodyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.table.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.table.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.table.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string summary {
            get {
                XAttribute x = this.Attribute(summaryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(summaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string border {
            get {
                XAttribute x = this.Attribute(borderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(borderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string frame {
            get {
                XAttribute x = this.Attribute(frameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(frameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.table.RulesEnum? rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.table.RulesEnum)(Enum.Parse(typeof(W3C.XMLSpec.table.RulesEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(rulesXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string cellspacing {
            get {
                XAttribute x = this.Attribute(cellspacingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(cellspacingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string cellpadding {
            get {
                XAttribute x = this.Attribute(cellpaddingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(cellpaddingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static table Load(string xmlFile) {
            return XTypedServices.Load<table>(xmlFile);
        }
        
        public static table Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<table>(xmlFile);
        }
        
        public new static table Parse(string xml) {
            return XTypedServices.Parse<table>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<table>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(caption));
            localElementDictionary.Add(colXName, typeof(col));
            localElementDictionary.Add(colgroupXName, typeof(colgroup));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(tfootXName, typeof(tfoot));
            localElementDictionary.Add(tbodyXName, typeof(tbody));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum RulesEnum {
            
            none,
            
            groups,
            
            rows,
            
            cols,
            
            all,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class caption : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("caption", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator caption(XElement xe) { return XTypedServices.ToXTypedElement<caption>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static caption() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public caption() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.caption.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.caption.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.caption.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static caption Load(string xmlFile) {
            return XTypedServices.Load<caption>(xmlFile);
        }
        
        public static caption Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<caption>(xmlFile);
        }
        
        public static caption Parse(string xml) {
            return XTypedServices.Parse<caption>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<caption>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class col : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string spanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("col", "");
        
		public static explicit operator col(XElement xe) { return XTypedServices.ToXTypedElement<col>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public col() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.col.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.col.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.col.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string span {
            get {
                XAttribute x = this.Attribute(spanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, spanDefaultValue);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.col.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.col.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.col.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static col Load(string xmlFile) {
            return XTypedServices.Load<col>(xmlFile);
        }
        
        public static col Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<col>(xmlFile);
        }
        
        public static col Parse(string xml) {
            return XTypedServices.Parse<col>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<col>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (col*)
    /// </para>
    /// </summary>
    public partial class colgroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colXName = System.Xml.Linq.XName.Get("col", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<col> colField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string spanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("colgroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator colgroup(XElement xe) { return XTypedServices.ToXTypedElement<colgroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static colgroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(colXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (col*)
        /// </para>
        /// </summary>
        public colgroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (col*)
        /// </para>
        /// </summary>
        public virtual IList<col> col {
            get {
                if ((this.colField == null)) {
                    this.colField = new XTypedList<col>(this, LinqToXsdTypeManager.Instance, colXName);
                }
                return this.colField;
            }
            set {
                if ((value == null)) {
                    this.colField = null;
                }
                else {
                    if ((this.colField == null)) {
                        this.colField = XTypedList<col>.Initialize(this, LinqToXsdTypeManager.Instance, value, colXName);
                    }
                    else {
                        XTypedServices.SetList<col>(this.colField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.colgroup.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.colgroup.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.colgroup.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string span {
            get {
                XAttribute x = this.Attribute(spanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, spanDefaultValue);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.colgroup.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.colgroup.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.colgroup.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static colgroup Load(string xmlFile) {
            return XTypedServices.Load<colgroup>(xmlFile);
        }
        
        public static colgroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<colgroup>(xmlFile);
        }
        
        public static colgroup Parse(string xml) {
            return XTypedServices.Parse<colgroup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<colgroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(colXName, typeof(col));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr+)
    /// </para>
    /// </summary>
    public partial class thead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tr> trField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("thead", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator thead(XElement xe) { return XTypedServices.ToXTypedElement<thead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static thead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public thead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public virtual IList<tr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<tr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<tr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<tr>(this.trField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.thead.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.thead.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.thead.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.thead.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.thead.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.thead.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static thead Load(string xmlFile) {
            return XTypedServices.Load<thead>(xmlFile);
        }
        
        public static thead Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<thead>(xmlFile);
        }
        
        public static thead Parse(string xml) {
            return XTypedServices.Parse<thead>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<thead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(tr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr+)
    /// </para>
    /// </summary>
    public partial class tfoot : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tr> trField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tfoot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tfoot(XElement xe) { return XTypedServices.ToXTypedElement<tfoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tfoot() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public tfoot() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public virtual IList<tr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<tr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<tr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<tr>(this.trField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tfoot.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tfoot.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.tfoot.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tfoot.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tfoot.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.tfoot.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tfoot Load(string xmlFile) {
            return XTypedServices.Load<tfoot>(xmlFile);
        }
        
        public static tfoot Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tfoot>(xmlFile);
        }
        
        public static tfoot Parse(string xml) {
            return XTypedServices.Parse<tfoot>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tfoot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(tr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr+)
    /// </para>
    /// </summary>
    public partial class tbody : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tr> trField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tbody", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tbody(XElement xe) { return XTypedServices.ToXTypedElement<tbody>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tbody() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public tbody() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public virtual IList<tr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<tr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<tr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<tr>(this.trField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tbody.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tbody.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.tbody.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tbody.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tbody.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.tbody.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tbody Load(string xmlFile) {
            return XTypedServices.Load<tbody>(xmlFile);
        }
        
        public static tbody Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tbody>(xmlFile);
        }
        
        public static tbody Parse(string xml) {
            return XTypedServices.Parse<tbody>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tbody>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(tr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (th | td)+
    /// </para>
    /// </summary>
    public partial class tr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thXName = System.Xml.Linq.XName.Get("th", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<th> thField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tdXName = System.Xml.Linq.XName.Get("td", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<td> tdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tr(XElement xe) { return XTypedServices.ToXTypedElement<tr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tr() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(thXName), new NamedContentModelEntity(tdXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public tr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public virtual IList<th> th {
            get {
                if ((this.thField == null)) {
                    this.thField = new XTypedList<th>(this, LinqToXsdTypeManager.Instance, thXName);
                }
                return this.thField;
            }
            set {
                if ((value == null)) {
                    this.thField = null;
                }
                else {
                    if ((this.thField == null)) {
                        this.thField = XTypedList<th>.Initialize(this, LinqToXsdTypeManager.Instance, value, thXName);
                    }
                    else {
                        XTypedServices.SetList<th>(this.thField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public virtual IList<td> td {
            get {
                if ((this.tdField == null)) {
                    this.tdField = new XTypedList<td>(this, LinqToXsdTypeManager.Instance, tdXName);
                }
                return this.tdField;
            }
            set {
                if ((value == null)) {
                    this.tdField = null;
                }
                else {
                    if ((this.tdField == null)) {
                        this.tdField = XTypedList<td>.Initialize(this, LinqToXsdTypeManager.Instance, value, tdXName);
                    }
                    else {
                        XTypedServices.SetList<td>(this.tdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tr.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tr.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.tr.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.tr.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.tr.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.tr.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tr Load(string xmlFile) {
            return XTypedServices.Load<tr>(xmlFile);
        }
        
        public static tr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tr>(xmlFile);
        }
        
        public static tr Parse(string xml) {
            return XTypedServices.Parse<tr>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tr>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(thXName, typeof(th));
            localElementDictionary.Add(tdXName, typeof(td));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
    /// </para>
    /// </summary>
    public partial class th : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName axisXName = System.Xml.Linq.XName.Get("axis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headersXName = System.Xml.Linq.XName.Get("headers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopeXName = System.Xml.Linq.XName.Get("scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowspanXName = System.Xml.Linq.XName.Get("rowspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string rowspanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colspanXName = System.Xml.Linq.XName.Get("colspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string colspanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("th", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator th(XElement xe) { return XTypedServices.ToXTypedElement<th>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static th() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public th() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.th.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.th.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.th.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(abbrXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(abbrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string axis {
            get {
                XAttribute x = this.Attribute(axisXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(axisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> headers {
            get {
                XAttribute x = this.Attribute(headersXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(headersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.th.ScopeEnum? scope {
            get {
                XAttribute x = this.Attribute(scopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.th.ScopeEnum)(Enum.Parse(typeof(W3C.XMLSpec.th.ScopeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(scopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowspan {
            get {
                XAttribute x = this.Attribute(rowspanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, rowspanDefaultValue);
            }
            set {
                this.SetAttribute(rowspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colspan {
            get {
                XAttribute x = this.Attribute(colspanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, colspanDefaultValue);
            }
            set {
                this.SetAttribute(colspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.th.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.th.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.th.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static th Load(string xmlFile) {
            return XTypedServices.Load<th>(xmlFile);
        }
        
        public static th Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<th>(xmlFile);
        }
        
        public static th Parse(string xml) {
            return XTypedServices.Parse<th>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<th>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ScopeEnum {
            
            row,
            
            col,
            
            rowgroup,
            
            colgroup,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
    /// </para>
    /// </summary>
    public partial class td : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName axisXName = System.Xml.Linq.XName.Get("axis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headersXName = System.Xml.Linq.XName.Get("headers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopeXName = System.Xml.Linq.XName.Get("scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowspanXName = System.Xml.Linq.XName.Get("rowspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string rowspanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colspanXName = System.Xml.Linq.XName.Get("colspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string colspanDefaultValue = "1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("td", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator td(XElement xe) { return XTypedServices.ToXTypedElement<td>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static td() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public td() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.td.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.td.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.td.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(abbrXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(abbrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string axis {
            get {
                XAttribute x = this.Attribute(axisXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(axisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> headers {
            get {
                XAttribute x = this.Attribute(headersXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(headersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.td.ScopeEnum? scope {
            get {
                XAttribute x = this.Attribute(scopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.td.ScopeEnum)(Enum.Parse(typeof(W3C.XMLSpec.td.ScopeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(scopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowspan {
            get {
                XAttribute x = this.Attribute(rowspanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, rowspanDefaultValue);
            }
            set {
                this.SetAttribute(rowspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colspan {
            get {
                XAttribute x = this.Attribute(colspanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, colspanDefaultValue);
            }
            set {
                this.SetAttribute(colspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.td.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.td.ValignEnum)(Enum.Parse(typeof(W3C.XMLSpec.td.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static td Load(string xmlFile) {
            return XTypedServices.Load<td>(xmlFile);
        }
        
        public static td Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<td>(xmlFile);
        }
        
        public static td Parse(string xml) {
            return XTypedServices.Parse<td>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<td>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ScopeEnum {
            
            row,
            
            col,
            
            rowgroup,
            
            colgroup,
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
    }
    
    public abstract partial class idltdefclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idl-tdef.class", "");
        
		public static explicit operator idltdefclass(XElement xe) {  return (idltdefclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idltdefclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static idltdefclass Load(string xmlFile) {
            return ((idltdefclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idltdefclass Load(System.IO.TextReader xmlFile) {
            return ((idltdefclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idltdefclass Parse(string xml) {
            return ((idltdefclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class idlmodclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idl-mod.class", "");
        
		public static explicit operator idlmodclass(XElement xe) {  return (idlmodclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idlmodclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static idlmodclass Load(string xmlFile) {
            return ((idlmodclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idlmodclass Load(System.IO.TextReader xmlFile) {
            return ((idlmodclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idlmodclass Parse(string xml) {
            return ((idlmodclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class idlstructclass : global::W3C.XMLSpec.idltypemix, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idl-struct.class", "");
        
		public static explicit operator idlstructclass(XElement xe) {  return (idlstructclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idlstructclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static idlstructclass Load(string xmlFile) {
            return ((idlstructclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idlstructclass Load(System.IO.TextReader xmlFile) {
            return ((idlstructclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static idlstructclass Parse(string xml) {
            return ((idlstructclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
    }
    
    public abstract partial class idlmethclass : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idl-meth.class", "");
        
		public static explicit operator idlmethclass(XElement xe) {  return (idlmethclass)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idlmethclass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static idlmethclass Load(string xmlFile) {
            return ((idlmethclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idlmethclass Load(System.IO.TextReader xmlFile) {
            return ((idlmethclass)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idlmethclass Parse(string xml) {
            return ((idlmethclass)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class idltypemix : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idl-type.mix", "");
        
		public static explicit operator idltypemix(XElement xe) {  return (idltypemix)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idltypemix() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static idltypemix Load(string xmlFile) {
            return ((idltypemix)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idltypemix Load(System.IO.TextReader xmlFile) {
            return ((idltypemix)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static idltypemix Parse(string xml) {
            return ((idltypemix)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
    /// </para>
    /// </summary>
    public partial class descr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator descr(XElement xe) { return XTypedServices.ToXTypedElement<descr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descr() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public descr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.descr.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.descr.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.descr.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static descr Load(string xmlFile) {
            return XTypedServices.Load<descr>(xmlFile);
        }
        
        public static descr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<descr>(xmlFile);
        }
        
        public static descr Parse(string xml) {
            return XTypedServices.Parse<descr>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descr>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (p | note | idltdefclass | idlmodclass)+
    /// </para>
    /// </summary>
    public partial class definitions : global::W3C.XMLSpec.illusclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltdefclassXName = System.Xml.Linq.XName.Get("idl-tdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idltdefclass> idltdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlmodclassXName = System.Xml.Linq.XName.Get("idl-mod.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlmodclass> idlmodclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("definitions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator definitions(XElement xe) { return XTypedServices.ToXTypedElement<definitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static definitions() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(pXName), new NamedContentModelEntity(noteXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (p | note | idltdefclass | idlmodclass)+
        /// </para>
        /// </summary>
        public definitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (p | note | idltdefclass | idlmodclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (p | note | idltdefclass | idlmodclass)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: idl-tdef.class, group, reference, typedef, constant, exception
        /// </para>
        /// <para>
        /// Regular expression: (p | note | idltdefclass | idlmodclass)+
        /// </para>
        /// </summary>
        public virtual IList<idltdefclass> idltdefclass {
            get {
                if ((this.idltdefclassField == null)) {
                    this.idltdefclassField = new XTypedSubstitutedList<idltdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                }
                return this.idltdefclassField;
            }
            set {
                if ((value == null)) {
                    this.idltdefclassField = null;
                }
                else {
                    if ((this.idltdefclassField == null)) {
                        this.idltdefclassField = XTypedSubstitutedList<idltdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                    }
                    else {
                        XTypedServices.SetList<idltdefclass>(this.idltdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: idl-mod.class, interface, module
        /// </para>
        /// <para>
        /// Regular expression: (p | note | idltdefclass | idlmodclass)+
        /// </para>
        /// </summary>
        public virtual IList<idlmodclass> idlmodclass {
            get {
                if ((this.idlmodclassField == null)) {
                    this.idlmodclassField = new XTypedSubstitutedList<idlmodclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                }
                return this.idlmodclassField;
            }
            set {
                if ((value == null)) {
                    this.idlmodclassField = null;
                }
                else {
                    if ((this.idlmodclassField == null)) {
                        this.idlmodclassField = XTypedSubstitutedList<idlmodclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                    }
                    else {
                        XTypedServices.SetList<idlmodclass>(this.idlmodclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.definitions.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.definitions.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.definitions.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static definitions Load(string xmlFile) {
            return XTypedServices.Load<definitions>(xmlFile);
        }
        
        public static definitions Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<definitions>(xmlFile);
        }
        
        public new static definitions Parse(string xml) {
            return XTypedServices.Parse<definitions>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<definitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(idltdefclassXName, typeof(idltdefclass));
            localElementDictionary.Add(idlmodclassXName, typeof(idlmodclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
    /// </para>
    /// </summary>
    public partial class group : global::W3C.XMLSpec.idltdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltdefclassXName = System.Xml.Linq.XName.Get("idl-tdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idltdefclass> idltdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlmodclassXName = System.Xml.Linq.XName.Get("idl-mod.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlmodclass> idlmodclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlstructclassXName = System.Xml.Linq.XName.Get("idl-struct.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlstructclass> idlstructclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlmethclassXName = System.Xml.Linq.XName.Get("idl-meth.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlmethclass> idlmethclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("group", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator group(XElement xe) { return XTypedServices.ToXTypedElement<group>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static group() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new ChoiceContentModelEntity(new NamedContentModelEntity(pXName), new NamedContentModelEntity(noteXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public group() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-tdef.class, group, reference, typedef, constant, exception
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idltdefclass> idltdefclass {
            get {
                if ((this.idltdefclassField == null)) {
                    this.idltdefclassField = new XTypedSubstitutedList<idltdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                }
                return this.idltdefclassField;
            }
            set {
                if ((value == null)) {
                    this.idltdefclassField = null;
                }
                else {
                    if ((this.idltdefclassField == null)) {
                        this.idltdefclassField = XTypedSubstitutedList<idltdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                    }
                    else {
                        XTypedServices.SetList<idltdefclass>(this.idltdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-mod.class, interface, module
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idlmodclass> idlmodclass {
            get {
                if ((this.idlmodclassField == null)) {
                    this.idlmodclassField = new XTypedSubstitutedList<idlmodclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                }
                return this.idlmodclassField;
            }
            set {
                if ((value == null)) {
                    this.idlmodclassField = null;
                }
                else {
                    if ((this.idlmodclassField == null)) {
                        this.idlmodclassField = XTypedSubstitutedList<idlmodclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                    }
                    else {
                        XTypedServices.SetList<idlmodclass>(this.idlmodclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-struct.class, struct, union, enum, sequence, typename
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idlstructclass> idlstructclass {
            get {
                if ((this.idlstructclassField == null)) {
                    this.idlstructclassField = new XTypedSubstitutedList<idlstructclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", ""));
                }
                return this.idlstructclassField;
            }
            set {
                if ((value == null)) {
                    this.idlstructclassField = null;
                }
                else {
                    if ((this.idlstructclassField == null)) {
                        this.idlstructclassField = XTypedSubstitutedList<idlstructclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", ""));
                    }
                    else {
                        XTypedServices.SetList<idlstructclass>(this.idlstructclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-meth.class, attribute, method
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass | idlstructclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idlmethclass> idlmethclass {
            get {
                if ((this.idlmethclassField == null)) {
                    this.idlmethclassField = new XTypedSubstitutedList<idlmethclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""));
                }
                return this.idlmethclassField;
            }
            set {
                if ((value == null)) {
                    this.idlmethclassField = null;
                }
                else {
                    if ((this.idlmethclassField == null)) {
                        this.idlmethclassField = XTypedSubstitutedList<idlmethclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""));
                    }
                    else {
                        XTypedServices.SetList<idlmethclass>(this.idlmethclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.group.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.group.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.group.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static group Load(string xmlFile) {
            return XTypedServices.Load<group>(xmlFile);
        }
        
        public static group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<group>(xmlFile);
        }
        
        public new static group Parse(string xml) {
            return XTypedServices.Parse<group>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<group>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(idltdefclassXName, typeof(idltdefclass));
            localElementDictionary.Add(idlmodclassXName, typeof(idlmodclass));
            localElementDictionary.Add(idlstructclassXName, typeof(idlstructclass));
            localElementDictionary.Add(idlmethclassXName, typeof(idlmethclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
    /// </para>
    /// </summary>
    public partial class @interface : global::W3C.XMLSpec.idlmodclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltdefclassXName = System.Xml.Linq.XName.Get("idl-tdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idltdefclass> idltdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlmethclassXName = System.Xml.Linq.XName.Get("idl-meth.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlmethclass> idlmethclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inheritsXName = System.Xml.Linq.XName.Get("inherits", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("interface", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @interface(XElement xe) { return XTypedServices.ToXTypedElement<@interface>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @interface() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new ChoiceContentModelEntity(new NamedContentModelEntity(pXName), new NamedContentModelEntity(noteXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public @interface() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-tdef.class, group, reference, typedef, constant, exception
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idltdefclass> idltdefclass {
            get {
                if ((this.idltdefclassField == null)) {
                    this.idltdefclassField = new XTypedSubstitutedList<idltdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                }
                return this.idltdefclassField;
            }
            set {
                if ((value == null)) {
                    this.idltdefclassField = null;
                }
                else {
                    if ((this.idltdefclassField == null)) {
                        this.idltdefclassField = XTypedSubstitutedList<idltdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                    }
                    else {
                        XTypedServices.SetList<idltdefclass>(this.idltdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-meth.class, attribute, method
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmethclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idlmethclass> idlmethclass {
            get {
                if ((this.idlmethclassField == null)) {
                    this.idlmethclassField = new XTypedSubstitutedList<idlmethclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""));
                }
                return this.idlmethclassField;
            }
            set {
                if ((value == null)) {
                    this.idlmethclassField = null;
                }
                else {
                    if ((this.idlmethclassField == null)) {
                        this.idlmethclassField = XTypedSubstitutedList<idlmethclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-meth.class", ""), System.Xml.Linq.XName.Get("attribute", ""), System.Xml.Linq.XName.Get("method", ""));
                    }
                    else {
                        XTypedServices.SetList<idlmethclass>(this.idlmethclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@interface.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@interface.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@interface.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string inherits {
            get {
                XAttribute x = this.Attribute(inheritsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(inheritsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static @interface Load(string xmlFile) {
            return XTypedServices.Load<@interface>(xmlFile);
        }
        
        public static @interface Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@interface>(xmlFile);
        }
        
        public new static @interface Parse(string xml) {
            return XTypedServices.Parse<@interface>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@interface>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(idltdefclassXName, typeof(idltdefclass));
            localElementDictionary.Add(idlmethclassXName, typeof(idlmethclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
    /// </para>
    /// </summary>
    public partial class module : global::W3C.XMLSpec.idlmodclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltdefclassXName = System.Xml.Linq.XName.Get("idl-tdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idltdefclass> idltdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idlmodclassXName = System.Xml.Linq.XName.Get("idl-mod.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<idlmodclass> idlmodclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("module", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator module(XElement xe) { return XTypedServices.ToXTypedElement<module>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static module() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new ChoiceContentModelEntity(new NamedContentModelEntity(pXName), new NamedContentModelEntity(noteXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
        /// </para>
        /// </summary>
        public module() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-tdef.class, group, reference, typedef, constant, exception
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idltdefclass> idltdefclass {
            get {
                if ((this.idltdefclassField == null)) {
                    this.idltdefclassField = new XTypedSubstitutedList<idltdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                }
                return this.idltdefclassField;
            }
            set {
                if ((value == null)) {
                    this.idltdefclassField = null;
                }
                else {
                    if ((this.idltdefclassField == null)) {
                        this.idltdefclassField = XTypedSubstitutedList<idltdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-tdef.class", ""), System.Xml.Linq.XName.Get("group", ""), System.Xml.Linq.XName.Get("reference", ""), System.Xml.Linq.XName.Get("typedef", ""), System.Xml.Linq.XName.Get("constant", ""), System.Xml.Linq.XName.Get("exception", ""));
                    }
                    else {
                        XTypedServices.SetList<idltdefclass>(this.idltdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: idl-mod.class, interface, module
        /// </para>
        /// <para>
        /// Regular expression: (descr, (p | note | idltdefclass | idlmodclass)*)
        /// </para>
        /// </summary>
        public virtual IList<idlmodclass> idlmodclass {
            get {
                if ((this.idlmodclassField == null)) {
                    this.idlmodclassField = new XTypedSubstitutedList<idlmodclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                }
                return this.idlmodclassField;
            }
            set {
                if ((value == null)) {
                    this.idlmodclassField = null;
                }
                else {
                    if ((this.idlmodclassField == null)) {
                        this.idlmodclassField = XTypedSubstitutedList<idlmodclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("idl-mod.class", ""), System.Xml.Linq.XName.Get("interface", ""), System.Xml.Linq.XName.Get("module", ""));
                    }
                    else {
                        XTypedServices.SetList<idlmodclass>(this.idlmodclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.module.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.module.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.module.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static module Load(string xmlFile) {
            return XTypedServices.Load<module>(xmlFile);
        }
        
        public static module Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<module>(xmlFile);
        }
        
        public new static module Parse(string xml) {
            return XTypedServices.Parse<module>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<module>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(idltdefclassXName, typeof(idltdefclass));
            localElementDictionary.Add(idlmodclassXName, typeof(idlmodclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class reference : global::W3C.XMLSpec.idltdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName declarationXName = System.Xml.Linq.XName.Get("declaration", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("reference", "");
        
		public static explicit operator reference(XElement xe) { return XTypedServices.ToXTypedElement<reference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public reference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.reference.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.reference.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.reference.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string declaration {
            get {
                XAttribute x = this.Attribute(declarationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(declarationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static reference Load(string xmlFile) {
            return XTypedServices.Load<reference>(xmlFile);
        }
        
        public static reference Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<reference>(xmlFile);
        }
        
        public new static reference Parse(string xml) {
            return XTypedServices.Parse<reference>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reference>(this);
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, idltypemix)
    /// </para>
    /// </summary>
    public partial class typedef : global::W3C.XMLSpec.idltdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltypemixXName = System.Xml.Linq.XName.Get("idl-type.mix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arraysizeXName = System.Xml.Linq.XName.Get("array.size", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typedef(XElement xe) { return XTypedServices.ToXTypedElement<typedef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedef() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, idltypemix)
        /// </para>
        /// </summary>
        public typedef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: idl-type.mix, idl-struct.class, struct, union, enum, sequence, typename
        /// </para>
        /// <para>
        /// Regular expression: (descr, idltypemix)
        /// </para>
        /// </summary>
        public virtual idltypemix idltypemix {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", ""));
                return ((idltypemix)(x));
            }
            set {
                this.SetElement(idltypemixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.typedef.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.typedef.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.typedef.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arraysize {
            get {
                XAttribute x = this.Attribute(arraysizeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(arraysizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typedef Load(string xmlFile) {
            return XTypedServices.Load<typedef>(xmlFile);
        }
        
        public static typedef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedef>(xmlFile);
        }
        
        public new static typedef Parse(string xml) {
            return XTypedServices.Parse<typedef>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedef>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(idltypemixXName, typeof(idltypemix));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, component+)
    /// </para>
    /// </summary>
    public partial class @struct : global::W3C.XMLSpec.idlstructclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentXName = System.Xml.Linq.XName.Get("component", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("struct", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @struct(XElement xe) { return XTypedServices.ToXTypedElement<@struct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @struct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new NamedContentModelEntity(componentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, component+)
        /// </para>
        /// </summary>
        public @struct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (descr, component+)
        /// </para>
        /// </summary>
        public virtual IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, componentXName);
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, componentXName);
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@struct.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@struct.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@struct.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static @struct Load(string xmlFile) {
            return XTypedServices.Load<@struct>(xmlFile);
        }
        
        public static @struct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@struct>(xmlFile);
        }
        
        public new static @struct Parse(string xml) {
            return XTypedServices.Parse<@struct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@struct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(componentXName, typeof(component));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (idltypemix)
    /// </para>
    /// </summary>
    public partial class component : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltypemixXName = System.Xml.Linq.XName.Get("idl-type.mix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("component", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator component(XElement xe) { return XTypedServices.ToXTypedElement<component>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static component() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (idltypemix)
        /// </para>
        /// </summary>
        public component() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: idl-type.mix, idl-struct.class, struct, union, enum, sequence, typename
        /// </para>
        /// <para>
        /// Regular expression: (idltypemix)
        /// </para>
        /// </summary>
        public virtual idltypemix idltypemix {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", ""));
                return ((idltypemix)(x));
            }
            set {
                this.SetElement(idltypemixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.component.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.component.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.component.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static component Load(string xmlFile) {
            return XTypedServices.Load<component>(xmlFile);
        }
        
        public static component Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<component>(xmlFile);
        }
        
        public static component Parse(string xml) {
            return XTypedServices.Parse<component>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<component>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(idltypemixXName, typeof(idltypemix));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, @case+)
    /// </para>
    /// </summary>
    public partial class union : global::W3C.XMLSpec.idlstructclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @caseXName = System.Xml.Linq.XName.Get("case", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@case> @caseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName switchtypeXName = System.Xml.Linq.XName.Get("switch.type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("union", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator union(XElement xe) { return XTypedServices.ToXTypedElement<union>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static union() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new NamedContentModelEntity(@caseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, @case+)
        /// </para>
        /// </summary>
        public union() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (descr, @case+)
        /// </para>
        /// </summary>
        public virtual IList<@case> @case {
            get {
                if ((this.@caseField == null)) {
                    this.@caseField = new XTypedList<@case>(this, LinqToXsdTypeManager.Instance, @caseXName);
                }
                return this.@caseField;
            }
            set {
                if ((value == null)) {
                    this.@caseField = null;
                }
                else {
                    if ((this.@caseField == null)) {
                        this.@caseField = XTypedList<@case>.Initialize(this, LinqToXsdTypeManager.Instance, value, @caseXName);
                    }
                    else {
                        XTypedServices.SetList<@case>(this.@caseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.union.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.union.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.union.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string switchtype {
            get {
                XAttribute x = this.Attribute(switchtypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(switchtypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static union Load(string xmlFile) {
            return XTypedServices.Load<union>(xmlFile);
        }
        
        public static union Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<union>(xmlFile);
        }
        
        public new static union Parse(string xml) {
            return XTypedServices.Parse<union>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<union>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(@caseXName, typeof(@case));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, idltypemix)
    /// </para>
    /// </summary>
    public partial class @case : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrXName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idltypemixXName = System.Xml.Linq.XName.Get("idl-type.mix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelsXName = System.Xml.Linq.XName.Get("labels", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("case", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @case(XElement xe) { return XTypedServices.ToXTypedElement<@case>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @case() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, idltypemix)
        /// </para>
        /// </summary>
        public @case() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr, idltypemix)
        /// </para>
        /// </summary>
        public virtual descr descr {
            get {
                XElement x = this.GetElement(descrXName);
                return ((descr)(x));
            }
            set {
                this.SetElement(descrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: idl-type.mix, idl-struct.class, struct, union, enum, sequence, typename
        /// </para>
        /// <para>
        /// Regular expression: (descr, idltypemix)
        /// </para>
        /// </summary>
        public virtual idltypemix idltypemix {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("idl-type.mix", ""), System.Xml.Linq.XName.Get("idl-struct.class", ""), System.Xml.Linq.XName.Get("struct", ""), System.Xml.Linq.XName.Get("union", ""), System.Xml.Linq.XName.Get("enum", ""), System.Xml.Linq.XName.Get("sequence", ""), System.Xml.Linq.XName.Get("typename", ""));
                return ((idltypemix)(x));
            }
            set {
                this.SetElement(idltypemixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@case.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@case.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@case.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string labels {
            get {
                XAttribute x = this.Attribute(labelsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static @case Load(string xmlFile) {
            return XTypedServices.Load<@case>(xmlFile);
        }
        
        public static @case Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@case>(xmlFile);
        }
        
        public static @case Parse(string xml) {
            return XTypedServices.Parse<@case>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@case>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(idltypemixXName, typeof(idltypemix));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, enumerator+)
    /// </para>
    /// </summary>
    public partial class @enum : global::W3C.XMLSpec.idlstructclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName enumeratorXName = System.Xml.Linq.XName.Get("enumerator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<enumerator> enumeratorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("enum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @enum(XElement xe) { return XTypedServices.ToXTypedElement<@enum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @enum() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new NamedContentModelEntity(enumeratorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, enumerator+)
        /// </para>
        /// </summary>
        public @enum() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (descr, enumerator+)
        /// </para>
        /// </summary>
        public virtual IList<enumerator> enumerator {
            get {
                if ((this.enumeratorField == null)) {
                    this.enumeratorField = new XTypedList<enumerator>(this, LinqToXsdTypeManager.Instance, enumeratorXName);
                }
                return this.enumeratorField;
            }
            set {
                if ((value == null)) {
                    this.enumeratorField = null;
                }
                else {
                    if ((this.enumeratorField == null)) {
                        this.enumeratorField = XTypedList<enumerator>.Initialize(this, LinqToXsdTypeManager.Instance, value, enumeratorXName);
                    }
                    else {
                        XTypedServices.SetList<enumerator>(this.enumeratorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@enum.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@enum.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@enum.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static @enum Load(string xmlFile) {
            return XTypedServices.Load<@enum>(xmlFile);
        }
        
        public static @enum Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@enum>(xmlFile);
        }
        
        public new static @enum Parse(string xml) {
            return XTypedServices.Parse<@enum>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@enum>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(enumeratorXName, typeof(enumerator));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class enumerator : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrXName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("enumerator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator enumerator(XElement xe) { return XTypedServices.ToXTypedElement<enumerator>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static enumerator() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public enumerator() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public virtual descr descr {
            get {
                XElement x = this.GetElement(descrXName);
                return ((descr)(x));
            }
            set {
                this.SetElement(descrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.enumerator.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.enumerator.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.enumerator.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static enumerator Load(string xmlFile) {
            return XTypedServices.Load<enumerator>(xmlFile);
        }
        
        public static enumerator Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<enumerator>(xmlFile);
        }
        
        public static enumerator Parse(string xml) {
            return XTypedServices.Parse<enumerator>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<enumerator>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sequence1*)
    /// </para>
    /// </summary>
    public partial class sequence : global::W3C.XMLSpec.idlstructclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequence1XName = System.Xml.Linq.XName.Get("sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sequence> sequence1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sizeXName = System.Xml.Linq.XName.Get("size", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sequence(XElement xe) { return XTypedServices.ToXTypedElement<sequence>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sequence() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sequence1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sequence1*)
        /// </para>
        /// </summary>
        public sequence() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (sequence1*)
        /// </para>
        /// </summary>
        public virtual IList<sequence> sequence1 {
            get {
                if ((this.sequence1Field == null)) {
                    this.sequence1Field = new XTypedList<sequence>(this, LinqToXsdTypeManager.Instance, sequence1XName);
                }
                return this.sequence1Field;
            }
            set {
                if ((value == null)) {
                    this.sequence1Field = null;
                }
                else {
                    if ((this.sequence1Field == null)) {
                        this.sequence1Field = XTypedList<sequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, sequence1XName);
                    }
                    else {
                        XTypedServices.SetList<sequence>(this.sequence1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.sequence.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.sequence.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.sequence.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string size {
            get {
                XAttribute x = this.Attribute(sizeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static sequence Load(string xmlFile) {
            return XTypedServices.Load<sequence>(xmlFile);
        }
        
        public static sequence Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sequence>(xmlFile);
        }
        
        public new static sequence Parse(string xml) {
            return XTypedServices.Parse<sequence>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sequence>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sequence1XName, typeof(sequence));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class constant : global::W3C.XMLSpec.idltdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator constant(XElement xe) { return XTypedServices.ToXTypedElement<constant>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static constant() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public constant() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.constant.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.constant.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.constant.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static constant Load(string xmlFile) {
            return XTypedServices.Load<constant>(xmlFile);
        }
        
        public static constant Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<constant>(xmlFile);
        }
        
        public new static constant Parse(string xml) {
            return XTypedServices.Parse<constant>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constant>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, component*)
    /// </para>
    /// </summary>
    public partial class exception : global::W3C.XMLSpec.idltdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentXName = System.Xml.Linq.XName.Get("component", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component> componentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exception", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator exception(XElement xe) { return XTypedServices.ToXTypedElement<exception>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static exception() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new NamedContentModelEntity(componentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, component*)
        /// </para>
        /// </summary>
        public exception() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (descr, component*)
        /// </para>
        /// </summary>
        public virtual IList<component> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component>(this, LinqToXsdTypeManager.Instance, componentXName);
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component>.Initialize(this, LinqToXsdTypeManager.Instance, value, componentXName);
                    }
                    else {
                        XTypedServices.SetList<component>(this.componentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.exception.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.exception.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.exception.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static exception Load(string xmlFile) {
            return XTypedServices.Load<exception>(xmlFile);
        }
        
        public static exception Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<exception>(xmlFile);
        }
        
        public new static exception Parse(string xml) {
            return XTypedServices.Parse<exception>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exception>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(componentXName, typeof(component));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class attribute : global::W3C.XMLSpec.idlmethclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @readonlyXName = System.Xml.Linq.XName.Get("readonly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string @readonlyDefaultValue = "no";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attribute(XElement xe) { return XTypedServices.ToXTypedElement<attribute>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attribute() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public attribute() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.attribute.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.attribute.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.attribute.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.attribute.@readonlyEnum @readonly {
            get {
                XAttribute x = this.Attribute(@readonlyXName);
                return ((W3C.XMLSpec.attribute.@readonlyEnum)(Enum.Parse(typeof(W3C.XMLSpec.attribute.@readonlyEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype, @readonlyDefaultValue))));
            }
            set {
                this.SetAttribute(@readonlyXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static attribute Load(string xmlFile) {
            return XTypedServices.Load<attribute>(xmlFile);
        }
        
        public static attribute Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attribute>(xmlFile);
        }
        
        public new static attribute Parse(string xml) {
            return XTypedServices.Parse<attribute>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attribute>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum @readonlyEnum {
            
            yes,
            
            no,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr, parameters, returns, raises)
    /// </para>
    /// </summary>
    public partial class method : global::W3C.XMLSpec.idlmethclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parametersXName = System.Xml.Linq.XName.Get("parameters", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName returnsXName = System.Xml.Linq.XName.Get("returns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName raisesXName = System.Xml.Linq.XName.Get("raises", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("method", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator method(XElement xe) { return XTypedServices.ToXTypedElement<method>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static method() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName), new NamedContentModelEntity(parametersXName), new NamedContentModelEntity(returnsXName), new NamedContentModelEntity(raisesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr, parameters, returns, raises)
        /// </para>
        /// </summary>
        public method() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr, parameters, returns, raises)
        /// </para>
        /// </summary>
        public virtual parameters parameters {
            get {
                XElement x = this.GetElement(parametersXName);
                return ((parameters)(x));
            }
            set {
                this.SetElement(parametersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr, parameters, returns, raises)
        /// </para>
        /// </summary>
        public virtual returns returns {
            get {
                XElement x = this.GetElement(returnsXName);
                return ((returns)(x));
            }
            set {
                this.SetElement(returnsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr, parameters, returns, raises)
        /// </para>
        /// </summary>
        public virtual raises raises {
            get {
                XElement x = this.GetElement(raisesXName);
                return ((raises)(x));
            }
            set {
                this.SetElement(raisesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.method.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.method.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.method.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static method Load(string xmlFile) {
            return XTypedServices.Load<method>(xmlFile);
        }
        
        public static method Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<method>(xmlFile);
        }
        
        public new static method Parse(string xml) {
            return XTypedServices.Parse<method>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<method>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
            localElementDictionary.Add(parametersXName, typeof(parameters));
            localElementDictionary.Add(returnsXName, typeof(returns));
            localElementDictionary.Add(raisesXName, typeof(raises));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class parameters : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paramXName = System.Xml.Linq.XName.Get("param", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parameters", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator parameters(XElement xe) { return XTypedServices.ToXTypedElement<parameters>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static parameters() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(paramXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public parameters() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public virtual IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, paramXName);
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, paramXName);
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.parameters.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.parameters.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.parameters.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static parameters Load(string xmlFile) {
            return XTypedServices.Load<parameters>(xmlFile);
        }
        
        public static parameters Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<parameters>(xmlFile);
        }
        
        public static parameters Parse(string xml) {
            return XTypedServices.Parse<parameters>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<parameters>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(paramXName, typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class param : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrXName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attrXName = System.Xml.Linq.XName.Get("attr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string attrDefaultValue = "inout";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("param", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator param(XElement xe) { return XTypedServices.ToXTypedElement<param>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static param() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public param() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public virtual descr descr {
            get {
                XElement x = this.GetElement(descrXName);
                return ((descr)(x));
            }
            set {
                this.SetElement(descrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.param.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.param.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.param.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string attr {
            get {
                XAttribute x = this.Attribute(attrXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype, attrDefaultValue);
            }
            set {
                this.SetAttribute(attrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static param Load(string xmlFile) {
            return XTypedServices.Load<param>(xmlFile);
        }
        
        public static param Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<param>(xmlFile);
        }
        
        public static param Parse(string xml) {
            return XTypedServices.Parse<param>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<param>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class returns : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrXName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("returns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator returns(XElement xe) { return XTypedServices.ToXTypedElement<returns>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static returns() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public returns() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public virtual descr descr {
            get {
                XElement x = this.GetElement(descrXName);
                return ((descr)(x));
            }
            set {
                this.SetElement(descrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.returns.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.returns.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.returns.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returns Load(string xmlFile) {
            return XTypedServices.Load<returns>(xmlFile);
        }
        
        public static returns Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returns>(xmlFile);
        }
        
        public static returns Parse(string xml) {
            return XTypedServices.Parse<returns>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<returns>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (exception*)
    /// </para>
    /// </summary>
    public partial class raises : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exceptionXName = System.Xml.Linq.XName.Get("exception", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exception> exceptionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("raises", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator raises(XElement xe) { return XTypedServices.ToXTypedElement<raises>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static raises() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(exceptionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (exception*)
        /// </para>
        /// </summary>
        public raises() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (exception*)
        /// </para>
        /// </summary>
        public virtual IList<exception> exception {
            get {
                if ((this.exceptionField == null)) {
                    this.exceptionField = new XTypedList<exception>(this, LinqToXsdTypeManager.Instance, exceptionXName);
                }
                return this.exceptionField;
            }
            set {
                if ((value == null)) {
                    this.exceptionField = null;
                }
                else {
                    if ((this.exceptionField == null)) {
                        this.exceptionField = XTypedList<exception>.Initialize(this, LinqToXsdTypeManager.Instance, value, exceptionXName);
                    }
                    else {
                        XTypedServices.SetList<exception>(this.exceptionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static raises Load(string xmlFile) {
            return XTypedServices.Load<raises>(xmlFile);
        }
        
        public static raises Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<raises>(xmlFile);
        }
        
        public static raises Parse(string xml) {
            return XTypedServices.Parse<raises>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<raises>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exceptionXName, typeof(exception));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class typename : global::W3C.XMLSpec.idlstructclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typename", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typename(XElement xe) { return XTypedServices.ToXTypedElement<typename>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typename() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public typename() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.typename.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.typename.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.typename.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typename Load(string xmlFile) {
            return XTypedServices.Load<typename>(xmlFile);
        }
        
        public static typename Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typename>(xmlFile);
        }
        
        public new static typename Parse(string xml) {
            return XTypedServices.Parse<typename>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typename>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class att : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("att", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator att(XElement xe) { return XTypedServices.ToXTypedElement<att>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static att() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public att() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.att.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.att.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.att.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static att Load(string xmlFile) {
            return XTypedServices.Load<att>(xmlFile);
        }
        
        public static att Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<att>(xmlFile);
        }
        
        public new static att Parse(string xml) {
            return XTypedServices.Parse<att>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<att>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class attval : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attval", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attval(XElement xe) { return XTypedServices.ToXTypedElement<attval>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attval() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public attval() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.attval.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.attval.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.attval.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static attval Load(string xmlFile) {
            return XTypedServices.Load<attval>(xmlFile);
        }
        
        public static attval Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attval>(xmlFile);
        }
        
        public new static attval Parse(string xml) {
            return XTypedServices.Parse<attval>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attval>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class bibref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bibref", "");
        
		public static explicit operator bibref(XElement xe) { return XTypedServices.ToXTypedElement<bibref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public bibref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.bibref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.bibref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.bibref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string @ref {
            get {
                XAttribute x = this.Attribute(@refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(@refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static bibref Load(string xmlFile) {
            return XTypedServices.Load<bibref>(xmlFile);
        }
        
        public static bibref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<bibref>(xmlFile);
        }
        
        public new static bibref Parse(string xml) {
            return XTypedServices.Parse<bibref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibref>(this);
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class code : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator code(XElement xe) { return XTypedServices.ToXTypedElement<code>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static code() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public code() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.code.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.code.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.code.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static code Load(string xmlFile) {
            return XTypedServices.Load<code>(xmlFile);
        }
        
        public static code Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<code>(xmlFile);
        }
        
        public new static code Parse(string xml) {
            return XTypedServices.Parse<code>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<code>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name?, date?, edtext)
    /// </para>
    /// </summary>
    public partial class ednote : global::W3C.XMLSpec.ednoteclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edtextXName = System.Xml.Linq.XName.Get("edtext", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ednote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ednote(XElement xe) { return XTypedServices.ToXTypedElement<ednote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ednote() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(edtextXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public ednote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((name)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(dateXName);
                return ((date)(x));
            }
            set {
                this.SetElement(dateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name?, date?, edtext)
        /// </para>
        /// </summary>
        public virtual edtext edtext {
            get {
                XElement x = this.GetElement(edtextXName);
                return ((edtext)(x));
            }
            set {
                this.SetElement(edtextXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.ednote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.ednote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.ednote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static ednote Load(string xmlFile) {
            return XTypedServices.Load<ednote>(xmlFile);
        }
        
        public static ednote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ednote>(xmlFile);
        }
        
        public new static ednote Parse(string xml) {
            return XTypedServices.Parse<ednote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ednote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(edtextXName, typeof(edtext));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class date : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator date(XElement xe) { return XTypedServices.ToXTypedElement<date>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static date() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public date() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.date.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.date.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.date.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static date Load(string xmlFile) {
            return XTypedServices.Load<date>(xmlFile);
        }
        
        public static date Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<date>(xmlFile);
        }
        
        public static date Parse(string xml) {
            return XTypedServices.Parse<date>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<date>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class edtext : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("edtext", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator edtext(XElement xe) { return XTypedServices.ToXTypedElement<edtext>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static edtext() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public edtext() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.edtext.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.edtext.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.edtext.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static edtext Load(string xmlFile) {
            return XTypedServices.Load<edtext>(xmlFile);
        }
        
        public static edtext Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<edtext>(xmlFile);
        }
        
        public static edtext Parse(string xml) {
            return XTypedServices.Parse<edtext>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<edtext>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class el : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("el", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator el(XElement xe) { return XTypedServices.ToXTypedElement<el>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static el() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public el() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.el.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.el.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.el.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static el Load(string xmlFile) {
            return XTypedServices.Load<el>(xmlFile);
        }
        
        public static el Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<el>(xmlFile);
        }
        
        public new static el Parse(string xml) {
            return XTypedServices.Parse<el>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<el>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class emph : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emph", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator emph(XElement xe) { return XTypedServices.ToXTypedElement<emph>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static emph() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public emph() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.emph.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.emph.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.emph.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static emph Load(string xmlFile) {
            return XTypedServices.Load<emph>(xmlFile);
        }
        
        public static emph Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<emph>(xmlFile);
        }
        
        public new static emph Parse(string xml) {
            return XTypedServices.Parse<emph>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emph>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
    /// </para>
    /// </summary>
    public partial class footnote : global::W3C.XMLSpec.annotclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("footnote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator footnote(XElement xe) { return XTypedServices.ToXTypedElement<footnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static footnote() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public footnote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)+
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.footnote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.footnote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.footnote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static footnote Load(string xmlFile) {
            return XTypedServices.Load<footnote>(xmlFile);
        }
        
        public static footnote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<footnote>(xmlFile);
        }
        
        public new static footnote Parse(string xml) {
            return XTypedServices.Parse<footnote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<footnote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class function : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("function", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator function(XElement xe) { return XTypedServices.ToXTypedElement<function>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static function() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public function() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.function.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.function.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.function.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static function Load(string xmlFile) {
            return XTypedServices.Load<function>(xmlFile);
        }
        
        public static function Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<function>(xmlFile);
        }
        
        public new static function Parse(string xml) {
            return XTypedServices.Parse<function>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<function>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class kw : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("kw", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator kw(XElement xe) { return XTypedServices.ToXTypedElement<kw>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static kw() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public kw() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.kw.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.kw.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.kw.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static kw Load(string xmlFile) {
            return XTypedServices.Load<kw>(xmlFile);
        }
        
        public static kw Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<kw>(xmlFile);
        }
        
        public new static kw Parse(string xml) {
            return XTypedServices.Parse<kw>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<kw>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class loc : global::W3C.XMLSpec.locclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("loc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator loc(XElement xe) { return XTypedServices.ToXTypedElement<loc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static loc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public loc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.loc.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.loc.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.loc.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.loc.ShowEnum show {
            get {
                XAttribute x = this.Attribute(showXName);
                return ((W3C.XMLSpec.loc.ShowEnum)(Enum.Parse(typeof(W3C.XMLSpec.loc.ShowEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(showXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.loc.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.loc.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.loc.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static loc Load(string xmlFile) {
            return XTypedServices.Load<loc>(xmlFile);
        }
        
        public static loc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<loc>(xmlFile);
        }
        
        public new static loc Parse(string xml) {
            return XTypedServices.Parse<loc>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<loc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ShowEnum {
            
            replace,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class nt : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator nt(XElement xe) { return XTypedServices.ToXTypedElement<nt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public nt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.nt.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.nt.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.nt.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string def {
            get {
                XAttribute x = this.Attribute(defXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(defXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static nt Load(string xmlFile) {
            return XTypedServices.Load<nt>(xmlFile);
        }
        
        public static nt Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nt>(xmlFile);
        }
        
        public new static nt Parse(string xml) {
            return XTypedServices.Parse<nt>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class phrase : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator phrase(XElement xe) { return XTypedServices.ToXTypedElement<phrase>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static phrase() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public phrase() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.phrase.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.phrase.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.phrase.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static phrase Load(string xmlFile) {
            return XTypedServices.Load<phrase>(xmlFile);
        }
        
        public static phrase Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<phrase>(xmlFile);
        }
        
        public new static phrase Parse(string xml) {
            return XTypedServices.Parse<phrase>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<phrase>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class rfc2119 : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator rfc2119(XElement xe) { return XTypedServices.ToXTypedElement<rfc2119>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static rfc2119() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public rfc2119() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.rfc2119.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.rfc2119.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.rfc2119.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static rfc2119 Load(string xmlFile) {
            return XTypedServices.Load<rfc2119>(xmlFile);
        }
        
        public static rfc2119 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<rfc2119>(xmlFile);
        }
        
        public new static rfc2119 Parse(string xml) {
            return XTypedServices.Parse<rfc2119>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<rfc2119>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
    /// </para>
    /// </summary>
    public partial class quote : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("quote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator quote(XElement xe) { return XTypedServices.ToXTypedElement<quote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static quote() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public quote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.quote.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.quote.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.quote.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static quote Load(string xmlFile) {
            return XTypedServices.Load<quote>(xmlFile);
        }
        
        public static quote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<quote>(xmlFile);
        }
        
        public new static quote Parse(string xml) {
            return XTypedServices.Parse<quote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<quote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    public partial class specref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("specref", "");
        
		public static explicit operator specref(XElement xe) { return XTypedServices.ToXTypedElement<specref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public specref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.specref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.specref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.specref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string @ref {
            get {
                XAttribute x = this.Attribute(@refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(@refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static specref Load(string xmlFile) {
            return XTypedServices.Load<specref>(xmlFile);
        }
        
        public static specref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<specref>(xmlFile);
        }
        
        public new static specref Parse(string xml) {
            return XTypedServices.Parse<specref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<specref>(this);
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class sub : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sub", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sub(XElement xe) { return XTypedServices.ToXTypedElement<sub>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sub() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public sub() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.sub.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.sub.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.sub.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static sub Load(string xmlFile) {
            return XTypedServices.Load<sub>(xmlFile);
        }
        
        public static sub Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sub>(xmlFile);
        }
        
        public new static sub Parse(string xml) {
            return XTypedServices.Parse<sub>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sub>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class sup : global::W3C.XMLSpec.emphclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sup(XElement xe) { return XTypedServices.ToXTypedElement<sup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public sup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.sup.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.sup.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.sup.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static sup Load(string xmlFile) {
            return XTypedServices.Load<sup>(xmlFile);
        }
        
        public static sup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sup>(xmlFile);
        }
        
        public new static sup Parse(string xml) {
            return XTypedServices.Parse<sup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class term : global::W3C.XMLSpec.termdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("term", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator term(XElement xe) { return XTypedServices.ToXTypedElement<term>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static term() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public term() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.term.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.term.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.term.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static term Load(string xmlFile) {
            return XTypedServices.Load<term>(xmlFile);
        }
        
        public static term Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<term>(xmlFile);
        }
        
        public new static term Parse(string xml) {
            return XTypedServices.Parse<term>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<term>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
    /// </para>
    /// </summary>
    public partial class termdef : global::W3C.XMLSpec.termdefclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termXName = System.Xml.Linq.XName.Get("term", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<term> termField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName term1XName = System.Xml.Linq.XName.Get("term", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("termdef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator termdef(XElement xe) { return XTypedServices.ToXTypedElement<termdef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static termdef() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(termXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public termdef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<term> term {
            get {
                if ((this.termField == null)) {
                    this.termField = new XTypedList<term>(this, LinqToXsdTypeManager.Instance, termXName);
                }
                return this.termField;
            }
            set {
                if ((value == null)) {
                    this.termField = null;
                }
                else {
                    if ((this.termField == null)) {
                        this.termField = XTypedList<term>.Initialize(this, LinqToXsdTypeManager.Instance, value, termXName);
                    }
                    else {
                        XTypedServices.SetList<term>(this.termField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (((term | emphclass | refclass | techclass | locclass | ednoteclass)?)|noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.termdef.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.termdef.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.termdef.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string term1 {
            get {
                XAttribute x = this.Attribute(term1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(term1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static termdef Load(string xmlFile) {
            return XTypedServices.Load<termdef>(xmlFile);
        }
        
        public static termdef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<termdef>(xmlFile);
        }
        
        public new static termdef Parse(string xml) {
            return XTypedServices.Parse<termdef>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<termdef>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(termXName, typeof(term));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class termref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defXName = System.Xml.Linq.XName.Get("def", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("termref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator termref(XElement xe) { return XTypedServices.ToXTypedElement<termref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static termref() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public termref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.termref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.termref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.termref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string def {
            get {
                XAttribute x = this.Attribute(defXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(defXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static termref Load(string xmlFile) {
            return XTypedServices.Load<termref>(xmlFile);
        }
        
        public static termref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<termref>(xmlFile);
        }
        
        public new static termref Parse(string xml) {
            return XTypedServices.Parse<termref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<termref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class titleref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("titleref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator titleref(XElement xe) { return XTypedServices.ToXTypedElement<titleref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titleref() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public titleref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.titleref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.titleref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.titleref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.titleref.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.titleref.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.titleref.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static titleref Load(string xmlFile) {
            return XTypedServices.Load<titleref>(xmlFile);
        }
        
        public static titleref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<titleref>(xmlFile);
        }
        
        public new static titleref Parse(string xml) {
            return XTypedServices.Parse<titleref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titleref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
    /// </para>
    /// </summary>
    public partial class @var : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rfc2119XName = System.Xml.Linq.XName.Get("rfc2119", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rfc2119> rfc2119Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("var", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @var(XElement xe) { return XTypedServices.ToXTypedElement<@var>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @var() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(phraseXName), new NamedContentModelEntity(rfc2119XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public @var() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((locclass | ednoteclass | phrase | rfc2119)?)*
        /// </para>
        /// </summary>
        public virtual IList<rfc2119> rfc2119 {
            get {
                if ((this.rfc2119Field == null)) {
                    this.rfc2119Field = new XTypedList<rfc2119>(this, LinqToXsdTypeManager.Instance, rfc2119XName);
                }
                return this.rfc2119Field;
            }
            set {
                if ((value == null)) {
                    this.rfc2119Field = null;
                }
                else {
                    if ((this.rfc2119Field == null)) {
                        this.rfc2119Field = XTypedList<rfc2119>.Initialize(this, LinqToXsdTypeManager.Instance, value, rfc2119XName);
                    }
                    else {
                        XTypedServices.SetList<rfc2119>(this.rfc2119Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.@var.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.@var.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.@var.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static @var Load(string xmlFile) {
            return XTypedServices.Load<@var>(xmlFile);
        }
        
        public static @var Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@var>(xmlFile);
        }
        
        public new static @var Parse(string xml) {
            return XTypedServices.Parse<@var>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@var>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(phraseXName, typeof(phrase));
            localElementDictionary.Add(rfc2119XName, typeof(rfc2119));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class xnt : global::W3C.XMLSpec.techclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("xnt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator xnt(XElement xe) { return XTypedServices.ToXTypedElement<xnt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static xnt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public xnt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xnt.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.xnt.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.xnt.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xnt.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.xnt.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.xnt.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static xnt Load(string xmlFile) {
            return XTypedServices.Load<xnt>(xmlFile);
        }
        
        public static xnt Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<xnt>(xmlFile);
        }
        
        public new static xnt Parse(string xml) {
            return XTypedServices.Parse<xnt>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<xnt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class xspecref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("xspecref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator xspecref(XElement xe) { return XTypedServices.ToXTypedElement<xspecref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static xspecref() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public xspecref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xspecref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.xspecref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.xspecref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xspecref.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.xspecref.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.xspecref.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static xspecref Load(string xmlFile) {
            return XTypedServices.Load<xspecref>(xmlFile);
        }
        
        public static xspecref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<xspecref>(xmlFile);
        }
        
        public new static xspecref Parse(string xml) {
            return XTypedServices.Parse<xspecref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<xspecref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (phrase*)
    /// </para>
    /// </summary>
    public partial class xtermref : global::W3C.XMLSpec.refclass, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phraseXName = System.Xml.Linq.XName.Get("phrase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phrase> phraseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diffXName = System.Xml.Linq.XName.Get("diff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("xtermref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator xtermref(XElement xe) { return XTypedServices.ToXTypedElement<xtermref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static xtermref() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phraseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public xtermref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (phrase*)
        /// </para>
        /// </summary>
        public virtual IList<phrase> phrase {
            get {
                if ((this.phraseField == null)) {
                    this.phraseField = new XTypedList<phrase>(this, LinqToXsdTypeManager.Instance, phraseXName);
                }
                return this.phraseField;
            }
            set {
                if ((value == null)) {
                    this.phraseField = null;
                }
                else {
                    if ((this.phraseField == null)) {
                        this.phraseField = XTypedList<phrase>.Initialize(this, LinqToXsdTypeManager.Instance, value, phraseXName);
                    }
                    else {
                        XTypedServices.SetList<phrase>(this.phraseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xtermref.DiffEnum? diff {
            get {
                XAttribute x = this.Attribute(diffXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.xtermref.DiffEnum)(Enum.Parse(typeof(W3C.XMLSpec.xtermref.DiffEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(diffXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XMLSpec.TypeEnum)(Enum.Parse(typeof(W3C.XMLSpec.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual W3C.XMLSpec.xtermref.ActuateEnum actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                return ((W3C.XMLSpec.xtermref.ActuateEnum)(Enum.Parse(typeof(W3C.XMLSpec.xtermref.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static xtermref Load(string xmlFile) {
            return XTypedServices.Load<xtermref>(xmlFile);
        }
        
        public static xtermref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<xtermref>(xmlFile);
        }
        
        public new static xtermref Parse(string xml) {
            return XTypedServices.Parse<xtermref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<xtermref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phraseXName, typeof(phrase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum DiffEnum {
            
            chg,
            
            add,
            
            del,
            
            off,
        }
        
        public enum ActuateEnum {
            
            onRequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
    /// </para>
    /// </summary>
    public partial class div : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ulXName = System.Xml.Linq.XName.Get("ul", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ul> ulField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName olXName = System.Xml.Linq.XName.Get("ol", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ol> olField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h1XName = System.Xml.Linq.XName.Get("h1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h1> h1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h2XName = System.Xml.Linq.XName.Get("h2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h2> h2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h3XName = System.Xml.Linq.XName.Get("h3", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h3> h3Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h4XName = System.Xml.Linq.XName.Get("h4", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h4> h4Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h5XName = System.Xml.Linq.XName.Get("h5", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h5> h5Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName h6XName = System.Xml.Linq.XName.Get("h6", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<h6> h6Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div1XName = System.Xml.Linq.XName.Get("div", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div> div1Field;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div(XElement xe) { return XTypedServices.ToXTypedElement<div>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(ulXName), new NamedContentModelEntity(olXName), new NamedContentModelEntity(h1XName), new NamedContentModelEntity(h2XName), new NamedContentModelEntity(h3XName), new NamedContentModelEntity(h4XName), new NamedContentModelEntity(h5XName), new NamedContentModelEntity(h6XName), new NamedContentModelEntity(div1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public div() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<ul> ul {
            get {
                if ((this.ulField == null)) {
                    this.ulField = new XTypedList<ul>(this, LinqToXsdTypeManager.Instance, ulXName);
                }
                return this.ulField;
            }
            set {
                if ((value == null)) {
                    this.ulField = null;
                }
                else {
                    if ((this.ulField == null)) {
                        this.ulField = XTypedList<ul>.Initialize(this, LinqToXsdTypeManager.Instance, value, ulXName);
                    }
                    else {
                        XTypedServices.SetList<ul>(this.ulField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<ol> ol {
            get {
                if ((this.olField == null)) {
                    this.olField = new XTypedList<ol>(this, LinqToXsdTypeManager.Instance, olXName);
                }
                return this.olField;
            }
            set {
                if ((value == null)) {
                    this.olField = null;
                }
                else {
                    if ((this.olField == null)) {
                        this.olField = XTypedList<ol>.Initialize(this, LinqToXsdTypeManager.Instance, value, olXName);
                    }
                    else {
                        XTypedServices.SetList<ol>(this.olField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h1> h1 {
            get {
                if ((this.h1Field == null)) {
                    this.h1Field = new XTypedList<h1>(this, LinqToXsdTypeManager.Instance, h1XName);
                }
                return this.h1Field;
            }
            set {
                if ((value == null)) {
                    this.h1Field = null;
                }
                else {
                    if ((this.h1Field == null)) {
                        this.h1Field = XTypedList<h1>.Initialize(this, LinqToXsdTypeManager.Instance, value, h1XName);
                    }
                    else {
                        XTypedServices.SetList<h1>(this.h1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h2> h2 {
            get {
                if ((this.h2Field == null)) {
                    this.h2Field = new XTypedList<h2>(this, LinqToXsdTypeManager.Instance, h2XName);
                }
                return this.h2Field;
            }
            set {
                if ((value == null)) {
                    this.h2Field = null;
                }
                else {
                    if ((this.h2Field == null)) {
                        this.h2Field = XTypedList<h2>.Initialize(this, LinqToXsdTypeManager.Instance, value, h2XName);
                    }
                    else {
                        XTypedServices.SetList<h2>(this.h2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h3> h3 {
            get {
                if ((this.h3Field == null)) {
                    this.h3Field = new XTypedList<h3>(this, LinqToXsdTypeManager.Instance, h3XName);
                }
                return this.h3Field;
            }
            set {
                if ((value == null)) {
                    this.h3Field = null;
                }
                else {
                    if ((this.h3Field == null)) {
                        this.h3Field = XTypedList<h3>.Initialize(this, LinqToXsdTypeManager.Instance, value, h3XName);
                    }
                    else {
                        XTypedServices.SetList<h3>(this.h3Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h4> h4 {
            get {
                if ((this.h4Field == null)) {
                    this.h4Field = new XTypedList<h4>(this, LinqToXsdTypeManager.Instance, h4XName);
                }
                return this.h4Field;
            }
            set {
                if ((value == null)) {
                    this.h4Field = null;
                }
                else {
                    if ((this.h4Field == null)) {
                        this.h4Field = XTypedList<h4>.Initialize(this, LinqToXsdTypeManager.Instance, value, h4XName);
                    }
                    else {
                        XTypedServices.SetList<h4>(this.h4Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h5> h5 {
            get {
                if ((this.h5Field == null)) {
                    this.h5Field = new XTypedList<h5>(this, LinqToXsdTypeManager.Instance, h5XName);
                }
                return this.h5Field;
            }
            set {
                if ((value == null)) {
                    this.h5Field = null;
                }
                else {
                    if ((this.h5Field == null)) {
                        this.h5Field = XTypedList<h5>.Initialize(this, LinqToXsdTypeManager.Instance, value, h5XName);
                    }
                    else {
                        XTypedServices.SetList<h5>(this.h5Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<h6> h6 {
            get {
                if ((this.h6Field == null)) {
                    this.h6Field = new XTypedList<h6>(this, LinqToXsdTypeManager.Instance, h6XName);
                }
                return this.h6Field;
            }
            set {
                if ((value == null)) {
                    this.h6Field = null;
                }
                else {
                    if ((this.h6Field == null)) {
                        this.h6Field = XTypedList<h6>.Initialize(this, LinqToXsdTypeManager.Instance, value, h6XName);
                    }
                    else {
                        XTypedServices.SetList<h6>(this.h6Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass | ul | ol | h1 | h2 | h3 | h4 | h5 | h6 | div1)*)
        /// </para>
        /// </summary>
        public virtual IList<div> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div>(this, LinqToXsdTypeManager.Instance, div1XName);
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div>.Initialize(this, LinqToXsdTypeManager.Instance, value, div1XName);
                    }
                    else {
                        XTypedServices.SetList<div>(this.div1Field, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static div Load(string xmlFile) {
            return XTypedServices.Load<div>(xmlFile);
        }
        
        public static div Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<div>(xmlFile);
        }
        
        public static div Parse(string xml) {
            return XTypedServices.Parse<div>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(ulXName, typeof(ul));
            localElementDictionary.Add(olXName, typeof(ol));
            localElementDictionary.Add(h1XName, typeof(h1));
            localElementDictionary.Add(h2XName, typeof(h2));
            localElementDictionary.Add(h3XName, typeof(h3));
            localElementDictionary.Add(h4XName, typeof(h4));
            localElementDictionary.Add(h5XName, typeof(h5));
            localElementDictionary.Add(h6XName, typeof(h6));
            localElementDictionary.Add(div1XName, typeof(div));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h1(XElement xe) { return XTypedServices.ToXTypedElement<h1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h1() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h1() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h1 Load(string xmlFile) {
            return XTypedServices.Load<h1>(xmlFile);
        }
        
        public static h1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h1>(xmlFile);
        }
        
        public static h1 Parse(string xml) {
            return XTypedServices.Parse<h1>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h1>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h2 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h2(XElement xe) { return XTypedServices.ToXTypedElement<h2>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h2() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h2() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h2 Load(string xmlFile) {
            return XTypedServices.Load<h2>(xmlFile);
        }
        
        public static h2 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h2>(xmlFile);
        }
        
        public static h2 Parse(string xml) {
            return XTypedServices.Parse<h2>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h2>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h3 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h3", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h3(XElement xe) { return XTypedServices.ToXTypedElement<h3>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h3() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h3() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h3 Load(string xmlFile) {
            return XTypedServices.Load<h3>(xmlFile);
        }
        
        public static h3 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h3>(xmlFile);
        }
        
        public static h3 Parse(string xml) {
            return XTypedServices.Parse<h3>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h3>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h4 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h4", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h4(XElement xe) { return XTypedServices.ToXTypedElement<h4>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h4() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h4() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h4 Load(string xmlFile) {
            return XTypedServices.Load<h4>(xmlFile);
        }
        
        public static h4 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h4>(xmlFile);
        }
        
        public static h4 Parse(string xml) {
            return XTypedServices.Parse<h4>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h4>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h5 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h5", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h5(XElement xe) { return XTypedServices.ToXTypedElement<h5>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h5() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h5() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h5 Load(string xmlFile) {
            return XTypedServices.Load<h5>(xmlFile);
        }
        
        public static h5 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h5>(xmlFile);
        }
        
        public static h5 Parse(string xml) {
            return XTypedServices.Parse<h5>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h5>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
    /// </para>
    /// </summary>
    public partial class h6 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aXName = System.Xml.Linq.XName.Get("a", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<a> aField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("h6", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator h6(XElement xe) { return XTypedServices.ToXTypedElement<h6>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static h6() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new NamedContentModelEntity(emXName), new NamedContentModelEntity(aXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public h6() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | techclass | locclass | ednoteclass)?)|em | a)*
        /// </para>
        /// </summary>
        public virtual IList<a> a {
            get {
                if ((this.aField == null)) {
                    this.aField = new XSimpleList<a>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, aXName);
                }
                return this.aField;
            }
            set {
                if ((value == null)) {
                    this.aField = null;
                }
                else {
                    if ((this.aField == null)) {
                        this.aField = XSimpleList<a>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, aXName);
                    }
                    else {
                        XTypedServices.SetList<a>(this.aField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static h6 Load(string xmlFile) {
            return XTypedServices.Load<h6>(xmlFile);
        }
        
        public static h6 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<h6>(xmlFile);
        }
        
        public static h6 Parse(string xml) {
            return XTypedServices.Parse<h6>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<h6>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(emXName, typeof(em));
            localElementDictionary.Add(aXName, typeof(a));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
    /// </para>
    /// </summary>
    public partial class pre : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constraintXName = System.Xml.Linq.XName.Get("constraint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<constraint> constraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emXName = System.Xml.Linq.XName.Get("em", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<em> emField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pre", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pre(XElement xe) { return XTypedServices.ToXTypedElement<pre>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pre() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")), new NamedContentModelEntity(constraintXName))), new NamedContentModelEntity(emXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public pre() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<constraint> constraint {
            get {
                if ((this.constraintField == null)) {
                    this.constraintField = new XTypedList<constraint>(this, LinqToXsdTypeManager.Instance, constraintXName);
                }
                return this.constraintField;
            }
            set {
                if ((value == null)) {
                    this.constraintField = null;
                }
                else {
                    if ((this.constraintField == null)) {
                        this.constraintField = XTypedList<constraint>.Initialize(this, LinqToXsdTypeManager.Instance, value, constraintXName);
                    }
                    else {
                        XTypedServices.SetList<constraint>(this.constraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | emphclass | locclass | ednoteclass | constraint)?)|em)*
        /// </para>
        /// </summary>
        public virtual IList<em> em {
            get {
                if ((this.emField == null)) {
                    this.emField = new XSimpleList<em>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, emXName);
                }
                return this.emField;
            }
            set {
                if ((value == null)) {
                    this.emField = null;
                }
                else {
                    if ((this.emField == null)) {
                        this.emField = XSimpleList<em>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, emXName);
                    }
                    else {
                        XTypedServices.SetList<em>(this.emField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static pre Load(string xmlFile) {
            return XTypedServices.Load<pre>(xmlFile);
        }
        
        public static pre Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pre>(xmlFile);
        }
        
        public static pre Parse(string xml) {
            return XTypedServices.Parse<pre>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pre>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(constraintXName, typeof(constraint));
            localElementDictionary.Add(emXName, typeof(em));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (item | li)*
    /// </para>
    /// </summary>
    public partial class ul : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName liXName = System.Xml.Linq.XName.Get("li", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<li> liField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ul", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ul(XElement xe) { return XTypedServices.ToXTypedElement<ul>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ul() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(itemXName), new NamedContentModelEntity(liXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public ul() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public virtual IList<li> li {
            get {
                if ((this.liField == null)) {
                    this.liField = new XTypedList<li>(this, LinqToXsdTypeManager.Instance, liXName);
                }
                return this.liField;
            }
            set {
                if ((value == null)) {
                    this.liField = null;
                }
                else {
                    if ((this.liField == null)) {
                        this.liField = XTypedList<li>.Initialize(this, LinqToXsdTypeManager.Instance, value, liXName);
                    }
                    else {
                        XTypedServices.SetList<li>(this.liField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ul Load(string xmlFile) {
            return XTypedServices.Load<ul>(xmlFile);
        }
        
        public static ul Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ul>(xmlFile);
        }
        
        public static ul Parse(string xml) {
            return XTypedServices.Parse<ul>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ul>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemXName, typeof(item));
            localElementDictionary.Add(liXName, typeof(li));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (item | li)*
    /// </para>
    /// </summary>
    public partial class ol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName liXName = System.Xml.Linq.XName.Get("li", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<li> liField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ol", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ol(XElement xe) { return XTypedServices.ToXTypedElement<ol>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ol() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(itemXName), new NamedContentModelEntity(liXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public ol() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (item | li)*
        /// </para>
        /// </summary>
        public virtual IList<li> li {
            get {
                if ((this.liField == null)) {
                    this.liField = new XTypedList<li>(this, LinqToXsdTypeManager.Instance, liXName);
                }
                return this.liField;
            }
            set {
                if ((value == null)) {
                    this.liField = null;
                }
                else {
                    if ((this.liField == null)) {
                        this.liField = XTypedList<li>.Initialize(this, LinqToXsdTypeManager.Instance, value, liXName);
                    }
                    else {
                        XTypedServices.SetList<li>(this.liField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ol Load(string xmlFile) {
            return XTypedServices.Load<ol>(xmlFile);
        }
        
        public static ol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ol>(xmlFile);
        }
        
        public static ol Parse(string xml) {
            return XTypedServices.Parse<ol>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ol>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemXName, typeof(item));
            localElementDictionary.Add(liXName, typeof(li));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
    /// </para>
    /// </summary>
    public partial class li : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("li", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator li(XElement xe) { return XTypedServices.ToXTypedElement<li>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static li() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(pXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public li() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: ((p)|listclass | speclistclass | noteclass | illusclass | ednoteclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static li Load(string xmlFile) {
            return XTypedServices.Load<li>(xmlFile);
        }
        
        public static li Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<li>(xmlFile);
        }
        
        public static li Parse(string xml) {
            return XTypedServices.Parse<li>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<li>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
    /// </para>
    /// </summary>
    public partial class htable : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colXName = System.Xml.Linq.XName.Get("col", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<col> colField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colgroupXName = System.Xml.Linq.XName.Get("colgroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<colgroup> colgroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tfootXName = System.Xml.Linq.XName.Get("tfoot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tbodyXName = System.Xml.Linq.XName.Get("tbody", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tbody> tbodyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("htable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator htable(XElement xe) { return XTypedServices.ToXTypedElement<htable>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static htable() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new ChoiceContentModelEntity(new NamedContentModelEntity(colXName), new NamedContentModelEntity(colgroupXName)), new NamedContentModelEntity(theadXName), new NamedContentModelEntity(tfootXName), new NamedContentModelEntity(tbodyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public htable() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual caption caption {
            get {
                XElement x = this.GetElement(captionXName);
                return ((caption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<col> col {
            get {
                if ((this.colField == null)) {
                    this.colField = new XTypedList<col>(this, LinqToXsdTypeManager.Instance, colXName);
                }
                return this.colField;
            }
            set {
                if ((value == null)) {
                    this.colField = null;
                }
                else {
                    if ((this.colField == null)) {
                        this.colField = XTypedList<col>.Initialize(this, LinqToXsdTypeManager.Instance, value, colXName);
                    }
                    else {
                        XTypedServices.SetList<col>(this.colField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<colgroup> colgroup {
            get {
                if ((this.colgroupField == null)) {
                    this.colgroupField = new XTypedList<colgroup>(this, LinqToXsdTypeManager.Instance, colgroupXName);
                }
                return this.colgroupField;
            }
            set {
                if ((value == null)) {
                    this.colgroupField = null;
                }
                else {
                    if ((this.colgroupField == null)) {
                        this.colgroupField = XTypedList<colgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, colgroupXName);
                    }
                    else {
                        XTypedServices.SetList<colgroup>(this.colgroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual thead thead {
            get {
                XElement x = this.GetElement(theadXName);
                return ((thead)(x));
            }
            set {
                this.SetElement(theadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual tfoot tfoot {
            get {
                XElement x = this.GetElement(tfootXName);
                return ((tfoot)(x));
            }
            set {
                this.SetElement(tfootXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<tbody> tbody {
            get {
                if ((this.tbodyField == null)) {
                    this.tbodyField = new XTypedList<tbody>(this, LinqToXsdTypeManager.Instance, tbodyXName);
                }
                return this.tbodyField;
            }
            set {
                if ((value == null)) {
                    this.tbodyField = null;
                }
                else {
                    if ((this.tbodyField == null)) {
                        this.tbodyField = XTypedList<tbody>.Initialize(this, LinqToXsdTypeManager.Instance, value, tbodyXName);
                    }
                    else {
                        XTypedServices.SetList<tbody>(this.tbodyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static htable Load(string xmlFile) {
            return XTypedServices.Load<htable>(xmlFile);
        }
        
        public static htable Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<htable>(xmlFile);
        }
        
        public static htable Parse(string xml) {
            return XTypedServices.Parse<htable>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<htable>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(caption));
            localElementDictionary.Add(colXName, typeof(col));
            localElementDictionary.Add(colgroupXName, typeof(colgroup));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(tfootXName, typeof(tfoot));
            localElementDictionary.Add(tbodyXName, typeof(tbody));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr+)
    /// </para>
    /// </summary>
    public partial class htbody : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tr> trField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("htbody", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator htbody(XElement xe) { return XTypedServices.ToXTypedElement<htbody>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static htbody() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public htbody() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tr+)
        /// </para>
        /// </summary>
        public virtual IList<tr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<tr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<tr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<tr>(this.trField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static htbody Load(string xmlFile) {
            return XTypedServices.Load<htbody>(xmlFile);
        }
        
        public static htbody Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<htbody>(xmlFile);
        }
        
        public static htbody Parse(string xml) {
            return XTypedServices.Parse<htbody>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<htbody>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(tr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
    /// </para>
    /// </summary>
    public partial class statusp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotclassXName = System.Xml.Linq.XName.Get("annot.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<annotclass> annotclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termdefclassXName = System.Xml.Linq.XName.Get("termdef.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<termdefclass> termdefclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphclassXName = System.Xml.Linq.XName.Get("emph.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<emphclass> emphclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refclassXName = System.Xml.Linq.XName.Get("ref.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<refclass> refclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName techclassXName = System.Xml.Linq.XName.Get("tech.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<techclass> techclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locclassXName = System.Xml.Linq.XName.Get("loc.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<locclass> locclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ednoteclassXName = System.Xml.Linq.XName.Get("ednote.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ednoteclass> ednoteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listclassXName = System.Xml.Linq.XName.Get("list.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<listclass> listclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speclistclassXName = System.Xml.Linq.XName.Get("speclist.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<speclistclass> speclistclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteclassXName = System.Xml.Linq.XName.Get("note.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<noteclass> noteclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName illusclassXName = System.Xml.Linq.XName.Get("illus.class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<illusclass> illusclassField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("statusp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator statusp(XElement xe) { return XTypedServices.ToXTypedElement<statusp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static statusp() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", "")))), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", "")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public statusp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: annot.class, footnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<annotclass> annotclass {
            get {
                if ((this.annotclassField == null)) {
                    this.annotclassField = new XTypedSubstitutedList<annotclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                }
                return this.annotclassField;
            }
            set {
                if ((value == null)) {
                    this.annotclassField = null;
                }
                else {
                    if ((this.annotclassField == null)) {
                        this.annotclassField = XTypedSubstitutedList<annotclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annot.class", ""), System.Xml.Linq.XName.Get("footnote", ""));
                    }
                    else {
                        XTypedServices.SetList<annotclass>(this.annotclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: termdef.class, term, termdef
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<termdefclass> termdefclass {
            get {
                if ((this.termdefclassField == null)) {
                    this.termdefclassField = new XTypedSubstitutedList<termdefclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                }
                return this.termdefclassField;
            }
            set {
                if ((value == null)) {
                    this.termdefclassField = null;
                }
                else {
                    if ((this.termdefclassField == null)) {
                        this.termdefclassField = XTypedSubstitutedList<termdefclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("termdef.class", ""), System.Xml.Linq.XName.Get("term", ""), System.Xml.Linq.XName.Get("termdef", ""));
                    }
                    else {
                        XTypedServices.SetList<termdefclass>(this.termdefclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: emph.class, emph, phrase, rfc2119, quote, sub, sup
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<emphclass> emphclass {
            get {
                if ((this.emphclassField == null)) {
                    this.emphclassField = new XTypedSubstitutedList<emphclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                }
                return this.emphclassField;
            }
            set {
                if ((value == null)) {
                    this.emphclassField = null;
                }
                else {
                    if ((this.emphclassField == null)) {
                        this.emphclassField = XTypedSubstitutedList<emphclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph.class", ""), System.Xml.Linq.XName.Get("emph", ""), System.Xml.Linq.XName.Get("phrase", ""), System.Xml.Linq.XName.Get("rfc2119", ""), System.Xml.Linq.XName.Get("quote", ""), System.Xml.Linq.XName.Get("sub", ""), System.Xml.Linq.XName.Get("sup", ""));
                    }
                    else {
                        XTypedServices.SetList<emphclass>(this.emphclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ref.class, bibref, specref, termref, titleref, xspecref, xtermref
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<refclass> refclass {
            get {
                if ((this.refclassField == null)) {
                    this.refclassField = new XTypedSubstitutedList<refclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                }
                return this.refclassField;
            }
            set {
                if ((value == null)) {
                    this.refclassField = null;
                }
                else {
                    if ((this.refclassField == null)) {
                        this.refclassField = XTypedSubstitutedList<refclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref.class", ""), System.Xml.Linq.XName.Get("bibref", ""), System.Xml.Linq.XName.Get("specref", ""), System.Xml.Linq.XName.Get("termref", ""), System.Xml.Linq.XName.Get("titleref", ""), System.Xml.Linq.XName.Get("xspecref", ""), System.Xml.Linq.XName.Get("xtermref", ""));
                    }
                    else {
                        XTypedServices.SetList<refclass>(this.refclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: tech.class, att, attval, code, el, function, kw, nt, var, xnt
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<techclass> techclass {
            get {
                if ((this.techclassField == null)) {
                    this.techclassField = new XTypedSubstitutedList<techclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                }
                return this.techclassField;
            }
            set {
                if ((value == null)) {
                    this.techclassField = null;
                }
                else {
                    if ((this.techclassField == null)) {
                        this.techclassField = XTypedSubstitutedList<techclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tech.class", ""), System.Xml.Linq.XName.Get("att", ""), System.Xml.Linq.XName.Get("attval", ""), System.Xml.Linq.XName.Get("code", ""), System.Xml.Linq.XName.Get("el", ""), System.Xml.Linq.XName.Get("function", ""), System.Xml.Linq.XName.Get("kw", ""), System.Xml.Linq.XName.Get("nt", ""), System.Xml.Linq.XName.Get("var", ""), System.Xml.Linq.XName.Get("xnt", ""));
                    }
                    else {
                        XTypedServices.SetList<techclass>(this.techclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: loc.class, loc
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<locclass> locclass {
            get {
                if ((this.locclassField == null)) {
                    this.locclassField = new XTypedSubstitutedList<locclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                }
                return this.locclassField;
            }
            set {
                if ((value == null)) {
                    this.locclassField = null;
                }
                else {
                    if ((this.locclassField == null)) {
                        this.locclassField = XTypedSubstitutedList<locclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("loc.class", ""), System.Xml.Linq.XName.Get("loc", ""));
                    }
                    else {
                        XTypedServices.SetList<locclass>(this.locclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: ednote.class, ednote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<ednoteclass> ednoteclass {
            get {
                if ((this.ednoteclassField == null)) {
                    this.ednoteclassField = new XTypedSubstitutedList<ednoteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                }
                return this.ednoteclassField;
            }
            set {
                if ((value == null)) {
                    this.ednoteclassField = null;
                }
                else {
                    if ((this.ednoteclassField == null)) {
                        this.ednoteclassField = XTypedSubstitutedList<ednoteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ednote.class", ""), System.Xml.Linq.XName.Get("ednote", ""));
                    }
                    else {
                        XTypedServices.SetList<ednoteclass>(this.ednoteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: list.class, ulist, olist, slist, glist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<listclass> listclass {
            get {
                if ((this.listclassField == null)) {
                    this.listclassField = new XTypedSubstitutedList<listclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                }
                return this.listclassField;
            }
            set {
                if ((value == null)) {
                    this.listclassField = null;
                }
                else {
                    if ((this.listclassField == null)) {
                        this.listclassField = XTypedSubstitutedList<listclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list.class", ""), System.Xml.Linq.XName.Get("ulist", ""), System.Xml.Linq.XName.Get("olist", ""), System.Xml.Linq.XName.Get("slist", ""), System.Xml.Linq.XName.Get("glist", ""));
                    }
                    else {
                        XTypedServices.SetList<listclass>(this.listclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: speclist.class, blist, orglist
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<speclistclass> speclistclass {
            get {
                if ((this.speclistclassField == null)) {
                    this.speclistclassField = new XTypedSubstitutedList<speclistclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                }
                return this.speclistclassField;
            }
            set {
                if ((value == null)) {
                    this.speclistclassField = null;
                }
                else {
                    if ((this.speclistclassField == null)) {
                        this.speclistclassField = XTypedSubstitutedList<speclistclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("speclist.class", ""), System.Xml.Linq.XName.Get("blist", ""), System.Xml.Linq.XName.Get("orglist", ""));
                    }
                    else {
                        XTypedServices.SetList<speclistclass>(this.speclistclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: note.class, note, issue, wfcnote, vcnote, constraintnote
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<noteclass> noteclass {
            get {
                if ((this.noteclassField == null)) {
                    this.noteclassField = new XTypedSubstitutedList<noteclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                }
                return this.noteclassField;
            }
            set {
                if ((value == null)) {
                    this.noteclassField = null;
                }
                else {
                    if ((this.noteclassField == null)) {
                        this.noteclassField = XTypedSubstitutedList<noteclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note.class", ""), System.Xml.Linq.XName.Get("note", ""), System.Xml.Linq.XName.Get("issue", ""), System.Xml.Linq.XName.Get("wfcnote", ""), System.Xml.Linq.XName.Get("vcnote", ""), System.Xml.Linq.XName.Get("constraintnote", ""));
                    }
                    else {
                        XTypedServices.SetList<noteclass>(this.noteclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Substitution members: illus.class, eg, graphic, proto, example, scrap, table, definitions
        /// </para>
        /// <para>
        /// Regular expression: (((annotclass | termdefclass | emphclass | refclass | techclass | locclass | ednoteclass)?)|listclass | speclistclass | noteclass | illusclass)*
        /// </para>
        /// </summary>
        public virtual IList<illusclass> illusclass {
            get {
                if ((this.illusclassField == null)) {
                    this.illusclassField = new XTypedSubstitutedList<illusclass>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                }
                return this.illusclassField;
            }
            set {
                if ((value == null)) {
                    this.illusclassField = null;
                }
                else {
                    if ((this.illusclassField == null)) {
                        this.illusclassField = XTypedSubstitutedList<illusclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("illus.class", ""), System.Xml.Linq.XName.Get("eg", ""), System.Xml.Linq.XName.Get("graphic", ""), System.Xml.Linq.XName.Get("proto", ""), System.Xml.Linq.XName.Get("example", ""), System.Xml.Linq.XName.Get("scrap", ""), System.Xml.Linq.XName.Get("table", ""), System.Xml.Linq.XName.Get("definitions", ""));
                    }
                    else {
                        XTypedServices.SetList<illusclass>(this.illusclassField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static statusp Load(string xmlFile) {
            return XTypedServices.Load<statusp>(xmlFile);
        }
        
        public static statusp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<statusp>(xmlFile);
        }
        
        public static statusp Parse(string xml) {
            return XTypedServices.Parse<statusp>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<statusp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotclassXName, typeof(annotclass));
            localElementDictionary.Add(termdefclassXName, typeof(termdefclass));
            localElementDictionary.Add(emphclassXName, typeof(emphclass));
            localElementDictionary.Add(refclassXName, typeof(refclass));
            localElementDictionary.Add(techclassXName, typeof(techclass));
            localElementDictionary.Add(locclassXName, typeof(locclass));
            localElementDictionary.Add(ednoteclassXName, typeof(ednoteclass));
            localElementDictionary.Add(listclassXName, typeof(listclass));
            localElementDictionary.Add(speclistclassXName, typeof(speclistclass));
            localElementDictionary.Add(noteclassXName, typeof(noteclass));
            localElementDictionary.Add(illusclassXName, typeof(illusclass));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (listitem*)
    /// </para>
    /// </summary>
    public partial class itemizedlist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listitemXName = System.Xml.Linq.XName.Get("listitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<listitem> listitemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("itemizedlist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator itemizedlist(XElement xe) { return XTypedServices.ToXTypedElement<itemizedlist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static itemizedlist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(listitemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (listitem*)
        /// </para>
        /// </summary>
        public itemizedlist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (listitem*)
        /// </para>
        /// </summary>
        public virtual IList<listitem> listitem {
            get {
                if ((this.listitemField == null)) {
                    this.listitemField = new XTypedList<listitem>(this, LinqToXsdTypeManager.Instance, listitemXName);
                }
                return this.listitemField;
            }
            set {
                if ((value == null)) {
                    this.listitemField = null;
                }
                else {
                    if ((this.listitemField == null)) {
                        this.listitemField = XTypedList<listitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, listitemXName);
                    }
                    else {
                        XTypedServices.SetList<listitem>(this.listitemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static itemizedlist Load(string xmlFile) {
            return XTypedServices.Load<itemizedlist>(xmlFile);
        }
        
        public static itemizedlist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<itemizedlist>(xmlFile);
        }
        
        public static itemizedlist Parse(string xml) {
            return XTypedServices.Parse<itemizedlist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<itemizedlist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(listitemXName, typeof(listitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (listitem*)
    /// </para>
    /// </summary>
    public partial class orderedlist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listitemXName = System.Xml.Linq.XName.Get("listitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<listitem> listitemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderedlist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orderedlist(XElement xe) { return XTypedServices.ToXTypedElement<orderedlist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orderedlist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(listitemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (listitem*)
        /// </para>
        /// </summary>
        public orderedlist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (listitem*)
        /// </para>
        /// </summary>
        public virtual IList<listitem> listitem {
            get {
                if ((this.listitemField == null)) {
                    this.listitemField = new XTypedList<listitem>(this, LinqToXsdTypeManager.Instance, listitemXName);
                }
                return this.listitemField;
            }
            set {
                if ((value == null)) {
                    this.listitemField = null;
                }
                else {
                    if ((this.listitemField == null)) {
                        this.listitemField = XTypedList<listitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, listitemXName);
                    }
                    else {
                        XTypedServices.SetList<listitem>(this.listitemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static orderedlist Load(string xmlFile) {
            return XTypedServices.Load<orderedlist>(xmlFile);
        }
        
        public static orderedlist Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderedlist>(xmlFile);
        }
        
        public static orderedlist Parse(string xml) {
            return XTypedServices.Parse<orderedlist>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderedlist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(listitemXName, typeof(listitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (para*)
    /// </para>
    /// </summary>
    public partial class listitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paraXName = System.Xml.Linq.XName.Get("para", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<para> paraField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("listitem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator listitem(XElement xe) { return XTypedServices.ToXTypedElement<listitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static listitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(paraXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (para*)
        /// </para>
        /// </summary>
        public listitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (para*)
        /// </para>
        /// </summary>
        public virtual IList<para> para {
            get {
                if ((this.paraField == null)) {
                    this.paraField = new XSimpleList<para>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, paraXName);
                }
                return this.paraField;
            }
            set {
                if ((value == null)) {
                    this.paraField = null;
                }
                else {
                    if ((this.paraField == null)) {
                        this.paraField = XSimpleList<para>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, paraXName);
                    }
                    else {
                        XTypedServices.SetList<para>(this.paraField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static listitem Load(string xmlFile) {
            return XTypedServices.Load<listitem>(xmlFile);
        }
        
        public static listitem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<listitem>(xmlFile);
        }
        
        public static listitem Parse(string xml) {
            return XTypedServices.Parse<listitem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<listitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(paraXName, typeof(para));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (header, front?, body, back?)
    /// </para>
    /// </summary>
    public partial class specmdl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headerXName = System.Xml.Linq.XName.Get("header", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frontXName = System.Xml.Linq.XName.Get("front", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bodyXName = System.Xml.Linq.XName.Get("body", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName backXName = System.Xml.Linq.XName.Get("back", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("spec.mdl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator specmdl(XElement xe) { return XTypedServices.ToXTypedElement<specmdl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static specmdl() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headerXName), new NamedContentModelEntity(frontXName), new NamedContentModelEntity(bodyXName), new NamedContentModelEntity(backXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public specmdl() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual header header {
            get {
                XElement x = this.GetElement(headerXName);
                return ((header)(x));
            }
            set {
                this.SetElement(headerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual front front {
            get {
                XElement x = this.GetElement(frontXName);
                return ((front)(x));
            }
            set {
                this.SetElement(frontXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual body body {
            get {
                XElement x = this.GetElement(bodyXName);
                return ((body)(x));
            }
            set {
                this.SetElement(bodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (header, front?, body, back?)
        /// </para>
        /// </summary>
        public virtual back back {
            get {
                XElement x = this.GetElement(backXName);
                return ((back)(x));
            }
            set {
                this.SetElement(backXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<specmdl>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headerXName, typeof(header));
            localElementDictionary.Add(frontXName, typeof(front));
            localElementDictionary.Add(bodyXName, typeof(body));
            localElementDictionary.Add(backXName, typeof(back));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
    /// </para>
    /// </summary>
    public partial class headermdl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName w3cdesignationXName = System.Xml.Linq.XName.Get("w3c-designation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName w3cdoctypeXName = System.Xml.Linq.XName.Get("w3c-doctype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubdateXName = System.Xml.Linq.XName.Get("pubdate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noticeXName = System.Xml.Linq.XName.Get("notice", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<notice> noticeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publocXName = System.Xml.Linq.XName.Get("publoc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altlocsXName = System.Xml.Linq.XName.Get("altlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prevlocsXName = System.Xml.Linq.XName.Get("prevlocs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prevlocs> prevlocsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latestlocXName = System.Xml.Linq.XName.Get("latestloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<latestloc> latestlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authlistXName = System.Xml.Linq.XName.Get("authlist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName erratalocXName = System.Xml.Linq.XName.Get("errataloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preverratalocXName = System.Xml.Linq.XName.Get("preverrataloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName translationlocXName = System.Xml.Linq.XName.Get("translationloc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName copyrightXName = System.Xml.Linq.XName.Get("copyright", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<status> statusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @abstractXName = System.Xml.Linq.XName.Get("abstract", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubstmtXName = System.Xml.Linq.XName.Get("pubstmt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourcedescXName = System.Xml.Linq.XName.Get("sourcedesc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langusageXName = System.Xml.Linq.XName.Get("langusage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName revisiondescXName = System.Xml.Linq.XName.Get("revisiondesc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("header.mdl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator headermdl(XElement xe) { return XTypedServices.ToXTypedElement<headermdl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static headermdl() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titleXName), new NamedContentModelEntity(subtitleXName), new NamedContentModelEntity(versionXName), new NamedContentModelEntity(w3cdesignationXName), new NamedContentModelEntity(w3cdoctypeXName), new NamedContentModelEntity(pubdateXName), new NamedContentModelEntity(noticeXName), new NamedContentModelEntity(publocXName), new NamedContentModelEntity(altlocsXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(prevlocsXName), new NamedContentModelEntity(latestlocXName)), new SequenceContentModelEntity(new NamedContentModelEntity(latestlocXName), new NamedContentModelEntity(prevlocsXName))), new NamedContentModelEntity(authlistXName), new NamedContentModelEntity(erratalocXName), new NamedContentModelEntity(preverratalocXName), new NamedContentModelEntity(translationlocXName), new NamedContentModelEntity(copyrightXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(statusXName), new NamedContentModelEntity(@abstractXName)), new SequenceContentModelEntity(new NamedContentModelEntity(@abstractXName), new NamedContentModelEntity(statusXName))), new NamedContentModelEntity(pubstmtXName), new NamedContentModelEntity(sourcedescXName), new NamedContentModelEntity(langusageXName), new NamedContentModelEntity(revisiondescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public headermdl() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual title title {
            get {
                XElement x = this.GetElement(titleXName);
                return ((title)(x));
            }
            set {
                this.SetElement(titleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual subtitle subtitle {
            get {
                XElement x = this.GetElement(subtitleXName);
                return ((subtitle)(x));
            }
            set {
                this.SetElement(subtitleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual version version {
            get {
                XElement x = this.GetElement(versionXName);
                return ((version)(x));
            }
            set {
                this.SetElement(versionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual w3cdesignation w3cdesignation {
            get {
                XElement x = this.GetElement(w3cdesignationXName);
                return ((w3cdesignation)(x));
            }
            set {
                this.SetElement(w3cdesignationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual w3cdoctype w3cdoctype {
            get {
                XElement x = this.GetElement(w3cdoctypeXName);
                return ((w3cdoctype)(x));
            }
            set {
                this.SetElement(w3cdoctypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual pubdate pubdate {
            get {
                XElement x = this.GetElement(pubdateXName);
                return ((pubdate)(x));
            }
            set {
                this.SetElement(pubdateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<notice> notice {
            get {
                if ((this.noticeField == null)) {
                    this.noticeField = new XTypedList<notice>(this, LinqToXsdTypeManager.Instance, noticeXName);
                }
                return this.noticeField;
            }
            set {
                if ((value == null)) {
                    this.noticeField = null;
                }
                else {
                    if ((this.noticeField == null)) {
                        this.noticeField = XTypedList<notice>.Initialize(this, LinqToXsdTypeManager.Instance, value, noticeXName);
                    }
                    else {
                        XTypedServices.SetList<notice>(this.noticeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual publoc publoc {
            get {
                XElement x = this.GetElement(publocXName);
                return ((publoc)(x));
            }
            set {
                this.SetElement(publocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual altlocs altlocs {
            get {
                XElement x = this.GetElement(altlocsXName);
                return ((altlocs)(x));
            }
            set {
                this.SetElement(altlocsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<prevlocs> prevlocs {
            get {
                if ((this.prevlocsField == null)) {
                    this.prevlocsField = new XTypedList<prevlocs>(this, LinqToXsdTypeManager.Instance, prevlocsXName);
                }
                return this.prevlocsField;
            }
            set {
                if ((value == null)) {
                    this.prevlocsField = null;
                }
                else {
                    if ((this.prevlocsField == null)) {
                        this.prevlocsField = XTypedList<prevlocs>.Initialize(this, LinqToXsdTypeManager.Instance, value, prevlocsXName);
                    }
                    else {
                        XTypedServices.SetList<prevlocs>(this.prevlocsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<latestloc> latestloc {
            get {
                if ((this.latestlocField == null)) {
                    this.latestlocField = new XTypedList<latestloc>(this, LinqToXsdTypeManager.Instance, latestlocXName);
                }
                return this.latestlocField;
            }
            set {
                if ((value == null)) {
                    this.latestlocField = null;
                }
                else {
                    if ((this.latestlocField == null)) {
                        this.latestlocField = XTypedList<latestloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, latestlocXName);
                    }
                    else {
                        XTypedServices.SetList<latestloc>(this.latestlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual authlist authlist {
            get {
                XElement x = this.GetElement(authlistXName);
                return ((authlist)(x));
            }
            set {
                this.SetElement(authlistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual errataloc errataloc {
            get {
                XElement x = this.GetElement(erratalocXName);
                return ((errataloc)(x));
            }
            set {
                this.SetElement(erratalocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual preverrataloc preverrataloc {
            get {
                XElement x = this.GetElement(preverratalocXName);
                return ((preverrataloc)(x));
            }
            set {
                this.SetElement(preverratalocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual translationloc translationloc {
            get {
                XElement x = this.GetElement(translationlocXName);
                return ((translationloc)(x));
            }
            set {
                this.SetElement(translationlocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual copyright copyright {
            get {
                XElement x = this.GetElement(copyrightXName);
                return ((copyright)(x));
            }
            set {
                this.SetElement(copyrightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<status> status {
            get {
                if ((this.statusField == null)) {
                    this.statusField = new XTypedList<status>(this, LinqToXsdTypeManager.Instance, statusXName);
                }
                return this.statusField;
            }
            set {
                if ((value == null)) {
                    this.statusField = null;
                }
                else {
                    if ((this.statusField == null)) {
                        this.statusField = XTypedList<status>.Initialize(this, LinqToXsdTypeManager.Instance, value, statusXName);
                    }
                    else {
                        XTypedServices.SetList<status>(this.statusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, @abstractXName);
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, @abstractXName);
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual pubstmt pubstmt {
            get {
                XElement x = this.GetElement(pubstmtXName);
                return ((pubstmt)(x));
            }
            set {
                this.SetElement(pubstmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual sourcedesc sourcedesc {
            get {
                XElement x = this.GetElement(sourcedescXName);
                return ((sourcedesc)(x));
            }
            set {
                this.SetElement(sourcedescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual langusage langusage {
            get {
                XElement x = this.GetElement(langusageXName);
                return ((langusage)(x));
            }
            set {
                this.SetElement(langusageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, subtitle?, version?, w3cdesignation, w3cdoctype, pubdate, notice*, publoc, altlocs?, ((prevlocs, latestloc?)|(latestloc, prevlocs?))?, authlist, errataloc?, preverrataloc?, translationloc?, copyright?, ((status, @abstract)|(@abstract, status)), pubstmt?, sourcedesc?, langusage, revisiondesc)
        /// </para>
        /// </summary>
        public virtual revisiondesc revisiondesc {
            get {
                XElement x = this.GetElement(revisiondescXName);
                return ((revisiondesc)(x));
            }
            set {
                this.SetElement(revisiondescXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<headermdl>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(subtitleXName, typeof(subtitle));
            localElementDictionary.Add(versionXName, typeof(version));
            localElementDictionary.Add(w3cdesignationXName, typeof(w3cdesignation));
            localElementDictionary.Add(w3cdoctypeXName, typeof(w3cdoctype));
            localElementDictionary.Add(pubdateXName, typeof(pubdate));
            localElementDictionary.Add(noticeXName, typeof(notice));
            localElementDictionary.Add(publocXName, typeof(publoc));
            localElementDictionary.Add(altlocsXName, typeof(altlocs));
            localElementDictionary.Add(prevlocsXName, typeof(prevlocs));
            localElementDictionary.Add(latestlocXName, typeof(latestloc));
            localElementDictionary.Add(authlistXName, typeof(authlist));
            localElementDictionary.Add(erratalocXName, typeof(errataloc));
            localElementDictionary.Add(preverratalocXName, typeof(preverrataloc));
            localElementDictionary.Add(translationlocXName, typeof(translationloc));
            localElementDictionary.Add(copyrightXName, typeof(copyright));
            localElementDictionary.Add(statusXName, typeof(status));
            localElementDictionary.Add(@abstractXName, typeof(@abstract));
            localElementDictionary.Add(pubstmtXName, typeof(pubstmt));
            localElementDictionary.Add(sourcedescXName, typeof(sourcedesc));
            localElementDictionary.Add(langusageXName, typeof(langusage));
            localElementDictionary.Add(revisiondescXName, typeof(revisiondesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (day?, month, year)
    /// </para>
    /// </summary>
    public partial class pubdatemdl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dayXName = System.Xml.Linq.XName.Get("day", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName monthXName = System.Xml.Linq.XName.Get("month", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pubdate.mdl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pubdatemdl(XElement xe) { return XTypedServices.ToXTypedElement<pubdatemdl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pubdatemdl() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dayXName), new NamedContentModelEntity(monthXName), new NamedContentModelEntity(yearXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public pubdatemdl() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual day day {
            get {
                XElement x = this.GetElement(dayXName);
                return ((day)(x));
            }
            set {
                this.SetElement(dayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual month month {
            get {
                XElement x = this.GetElement(monthXName);
                return ((month)(x));
            }
            set {
                this.SetElement(monthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (day?, month, year)
        /// </para>
        /// </summary>
        public virtual year year {
            get {
                XElement x = this.GetElement(yearXName);
                return ((year)(x));
            }
            set {
                this.SetElement(yearXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pubdatemdl>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dayXName, typeof(day));
            localElementDictionary.Add(monthXName, typeof(month));
            localElementDictionary.Add(yearXName, typeof(year));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class argtypes {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "boolean",
                        "expression",
                        "location-set",
                        "node-set",
                        "number",
                        "object",
                        "point",
                        "range",
                        "string"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private argtypes() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (descr)
    /// </para>
    /// </summary>
    public partial class descrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrXName = System.Xml.Linq.XName.Get("descr", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("descr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator descrType(XElement xe) { return XTypedServices.ToXTypedElement<descrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(descrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public descrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (descr)
        /// </para>
        /// </summary>
        public virtual descr descr {
            get {
                XElement x = this.GetElement(descrXName);
                return ((descr)(x));
            }
            set {
                this.SetElement(descrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(descrXName, typeof(descr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class em : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("em", "");
        
		public static explicit operator em(XElement xe) { return XTypedServices.ToXTypedElement<em>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public em() {
        }
        
        public em(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static em Load(string xmlFile) {
            return XTypedServices.Load<em>(xmlFile);
        }
        
        public static em Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<em>(xmlFile);
        }
        
        public static em Parse(string xml) {
            return XTypedServices.Parse<em>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<em>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class a : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("a", "");
        
		public static explicit operator a(XElement xe) { return XTypedServices.ToXTypedElement<a>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public a() {
        }
        
        public a(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static a Load(string xmlFile) {
            return XTypedServices.Load<a>(xmlFile);
        }
        
        public static a Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<a>(xmlFile);
        }
        
        public static a Parse(string xml) {
            return XTypedServices.Parse<a>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<a>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class keyterm : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("key-term", "");
        
		public static explicit operator keyterm(XElement xe) { return XTypedServices.ToXTypedElement<keyterm>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public keyterm() {
        }
        
        public keyterm(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static keyterm Load(string xmlFile) {
            return XTypedServices.Load<keyterm>(xmlFile);
        }
        
        public static keyterm Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<keyterm>(xmlFile);
        }
        
        public static keyterm Parse(string xml) {
            return XTypedServices.Parse<keyterm>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keyterm>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class para : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("para", "");
        
		public static explicit operator para(XElement xe) { return XTypedServices.ToXTypedElement<para>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public para() {
        }
        
        public para(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static para Load(string xmlFile) {
            return XTypedServices.Load<para>(xmlFile);
        }
        
        public static para Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<para>(xmlFile);
        }
        
        public static para Parse(string xml) {
            return XTypedServices.Parse<para>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<para>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("spec.mdl", ""), typeof(global::W3C.XMLSpec.specmdl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("header.mdl", ""), typeof(global::W3C.XMLSpec.headermdl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("pubdate.mdl", ""), typeof(global::W3C.XMLSpec.pubdatemdl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("descr", ""), typeof(global::W3C.XMLSpec.descrType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("list.class", ""), typeof(global::W3C.XMLSpec.listclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("speclist.class", ""), typeof(global::W3C.XMLSpec.speclistclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("note.class", ""), typeof(global::W3C.XMLSpec.noteclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("illus.class", ""), typeof(global::W3C.XMLSpec.illusclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("annot.class", ""), typeof(global::W3C.XMLSpec.annotclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("termdef.class", ""), typeof(global::W3C.XMLSpec.termdefclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("emph.class", ""), typeof(global::W3C.XMLSpec.emphclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ref.class", ""), typeof(global::W3C.XMLSpec.refclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("loc.class", ""), typeof(global::W3C.XMLSpec.locclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tech.class", ""), typeof(global::W3C.XMLSpec.techclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ednote.class", ""), typeof(global::W3C.XMLSpec.ednoteclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("head", ""), typeof(global::W3C.XMLSpec.head));
            elementDictionary.Add(System.Xml.Linq.XName.Get("spec", ""), typeof(global::W3C.XMLSpec.spec));
            elementDictionary.Add(System.Xml.Linq.XName.Get("front", ""), typeof(global::W3C.XMLSpec.front));
            elementDictionary.Add(System.Xml.Linq.XName.Get("body", ""), typeof(global::W3C.XMLSpec.body));
            elementDictionary.Add(System.Xml.Linq.XName.Get("back", ""), typeof(global::W3C.XMLSpec.back));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div1", ""), typeof(global::W3C.XMLSpec.div1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("inform-div1", ""), typeof(global::W3C.XMLSpec.informdiv1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div2", ""), typeof(global::W3C.XMLSpec.div2));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div3", ""), typeof(global::W3C.XMLSpec.div3));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div4", ""), typeof(global::W3C.XMLSpec.div4));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div5", ""), typeof(global::W3C.XMLSpec.div5));
            elementDictionary.Add(System.Xml.Linq.XName.Get("header", ""), typeof(global::W3C.XMLSpec.header));
            elementDictionary.Add(System.Xml.Linq.XName.Get("title", ""), typeof(global::W3C.XMLSpec.title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("subtitle", ""), typeof(global::W3C.XMLSpec.subtitle));
            elementDictionary.Add(System.Xml.Linq.XName.Get("version", ""), typeof(global::W3C.XMLSpec.version));
            elementDictionary.Add(System.Xml.Linq.XName.Get("w3c-designation", ""), typeof(global::W3C.XMLSpec.w3cdesignation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("w3c-doctype", ""), typeof(global::W3C.XMLSpec.w3cdoctype));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pubdate", ""), typeof(global::W3C.XMLSpec.pubdate));
            elementDictionary.Add(System.Xml.Linq.XName.Get("day", ""), typeof(global::W3C.XMLSpec.day));
            elementDictionary.Add(System.Xml.Linq.XName.Get("month", ""), typeof(global::W3C.XMLSpec.month));
            elementDictionary.Add(System.Xml.Linq.XName.Get("year", ""), typeof(global::W3C.XMLSpec.year));
            elementDictionary.Add(System.Xml.Linq.XName.Get("copyright", ""), typeof(global::W3C.XMLSpec.copyright));
            elementDictionary.Add(System.Xml.Linq.XName.Get("notice", ""), typeof(global::W3C.XMLSpec.notice));
            elementDictionary.Add(System.Xml.Linq.XName.Get("publoc", ""), typeof(global::W3C.XMLSpec.publoc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("altlocs", ""), typeof(global::W3C.XMLSpec.altlocs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prevlocs", ""), typeof(global::W3C.XMLSpec.prevlocs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("latestloc", ""), typeof(global::W3C.XMLSpec.latestloc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("errataloc", ""), typeof(global::W3C.XMLSpec.errataloc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("preverrataloc", ""), typeof(global::W3C.XMLSpec.preverrataloc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("translationloc", ""), typeof(global::W3C.XMLSpec.translationloc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("authlist", ""), typeof(global::W3C.XMLSpec.authlist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("author", ""), typeof(global::W3C.XMLSpec.author));
            elementDictionary.Add(System.Xml.Linq.XName.Get("name", ""), typeof(global::W3C.XMLSpec.name));
            elementDictionary.Add(System.Xml.Linq.XName.Get("affiliation", ""), typeof(global::W3C.XMLSpec.affiliation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("email", ""), typeof(global::W3C.XMLSpec.email));
            elementDictionary.Add(System.Xml.Linq.XName.Get("status", ""), typeof(global::W3C.XMLSpec.status));
            elementDictionary.Add(System.Xml.Linq.XName.Get("abstract", ""), typeof(global::W3C.XMLSpec.@abstract));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pubstmt", ""), typeof(global::W3C.XMLSpec.pubstmt));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sourcedesc", ""), typeof(global::W3C.XMLSpec.sourcedesc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("langusage", ""), typeof(global::W3C.XMLSpec.langusage));
            elementDictionary.Add(System.Xml.Linq.XName.Get("language", ""), typeof(global::W3C.XMLSpec.language));
            elementDictionary.Add(System.Xml.Linq.XName.Get("revisiondesc", ""), typeof(global::W3C.XMLSpec.revisiondesc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("p", ""), typeof(global::W3C.XMLSpec.p));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ulist", ""), typeof(global::W3C.XMLSpec.ulist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("olist", ""), typeof(global::W3C.XMLSpec.olist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("item", ""), typeof(global::W3C.XMLSpec.item));
            elementDictionary.Add(System.Xml.Linq.XName.Get("slist", ""), typeof(global::W3C.XMLSpec.slist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sitem", ""), typeof(global::W3C.XMLSpec.sitem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("glist", ""), typeof(global::W3C.XMLSpec.glist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("gitem", ""), typeof(global::W3C.XMLSpec.gitem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("label", ""), typeof(global::W3C.XMLSpec.label));
            elementDictionary.Add(System.Xml.Linq.XName.Get("def", ""), typeof(global::W3C.XMLSpec.def));
            elementDictionary.Add(System.Xml.Linq.XName.Get("blist", ""), typeof(global::W3C.XMLSpec.blist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("bibl", ""), typeof(global::W3C.XMLSpec.bibl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orglist", ""), typeof(global::W3C.XMLSpec.orglist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("member", ""), typeof(global::W3C.XMLSpec.member));
            elementDictionary.Add(System.Xml.Linq.XName.Get("role", ""), typeof(global::W3C.XMLSpec.role));
            elementDictionary.Add(System.Xml.Linq.XName.Get("note", ""), typeof(global::W3C.XMLSpec.note));
            elementDictionary.Add(System.Xml.Linq.XName.Get("issue", ""), typeof(global::W3C.XMLSpec.issue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("source", ""), typeof(global::W3C.XMLSpec.source));
            elementDictionary.Add(System.Xml.Linq.XName.Get("resolution", ""), typeof(global::W3C.XMLSpec.resolution));
            elementDictionary.Add(System.Xml.Linq.XName.Get("wfcnote", ""), typeof(global::W3C.XMLSpec.wfcnote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("vcnote", ""), typeof(global::W3C.XMLSpec.vcnote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constraintnote", ""), typeof(global::W3C.XMLSpec.constraintnote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("eg", ""), typeof(global::W3C.XMLSpec.eg));
            elementDictionary.Add(System.Xml.Linq.XName.Get("graphic", ""), typeof(global::W3C.XMLSpec.graphic));
            elementDictionary.Add(System.Xml.Linq.XName.Get("proto", ""), typeof(global::W3C.XMLSpec.proto));
            elementDictionary.Add(System.Xml.Linq.XName.Get("arg", ""), typeof(global::W3C.XMLSpec.arg));
            elementDictionary.Add(System.Xml.Linq.XName.Get("example", ""), typeof(global::W3C.XMLSpec.example));
            elementDictionary.Add(System.Xml.Linq.XName.Get("scrap", ""), typeof(global::W3C.XMLSpec.scrap));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prodgroup", ""), typeof(global::W3C.XMLSpec.prodgroup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prod", ""), typeof(global::W3C.XMLSpec.prod));
            elementDictionary.Add(System.Xml.Linq.XName.Get("lhs", ""), typeof(global::W3C.XMLSpec.lhs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("rhs", ""), typeof(global::W3C.XMLSpec.rhs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("com", ""), typeof(global::W3C.XMLSpec.com));
            elementDictionary.Add(System.Xml.Linq.XName.Get("wfc", ""), typeof(global::W3C.XMLSpec.wfc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("vc", ""), typeof(global::W3C.XMLSpec.vc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constraint", ""), typeof(global::W3C.XMLSpec.constraint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("bnf", ""), typeof(global::W3C.XMLSpec.bnf));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prodrecap", ""), typeof(global::W3C.XMLSpec.prodrecap));
            elementDictionary.Add(System.Xml.Linq.XName.Get("table", ""), typeof(global::W3C.XMLSpec.table));
            elementDictionary.Add(System.Xml.Linq.XName.Get("caption", ""), typeof(global::W3C.XMLSpec.caption));
            elementDictionary.Add(System.Xml.Linq.XName.Get("col", ""), typeof(global::W3C.XMLSpec.col));
            elementDictionary.Add(System.Xml.Linq.XName.Get("colgroup", ""), typeof(global::W3C.XMLSpec.colgroup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("thead", ""), typeof(global::W3C.XMLSpec.thead));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tfoot", ""), typeof(global::W3C.XMLSpec.tfoot));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tbody", ""), typeof(global::W3C.XMLSpec.tbody));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tr", ""), typeof(global::W3C.XMLSpec.tr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("th", ""), typeof(global::W3C.XMLSpec.th));
            elementDictionary.Add(System.Xml.Linq.XName.Get("td", ""), typeof(global::W3C.XMLSpec.td));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idl-tdef.class", ""), typeof(global::W3C.XMLSpec.idltdefclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idl-mod.class", ""), typeof(global::W3C.XMLSpec.idlmodclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idl-struct.class", ""), typeof(global::W3C.XMLSpec.idlstructclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idl-meth.class", ""), typeof(global::W3C.XMLSpec.idlmethclass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idl-type.mix", ""), typeof(global::W3C.XMLSpec.idltypemix));
            elementDictionary.Add(System.Xml.Linq.XName.Get("descr", ""), typeof(global::W3C.XMLSpec.descr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("definitions", ""), typeof(global::W3C.XMLSpec.definitions));
            elementDictionary.Add(System.Xml.Linq.XName.Get("group", ""), typeof(global::W3C.XMLSpec.group));
            elementDictionary.Add(System.Xml.Linq.XName.Get("interface", ""), typeof(global::W3C.XMLSpec.@interface));
            elementDictionary.Add(System.Xml.Linq.XName.Get("module", ""), typeof(global::W3C.XMLSpec.module));
            elementDictionary.Add(System.Xml.Linq.XName.Get("reference", ""), typeof(global::W3C.XMLSpec.reference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typedef", ""), typeof(global::W3C.XMLSpec.typedef));
            elementDictionary.Add(System.Xml.Linq.XName.Get("struct", ""), typeof(global::W3C.XMLSpec.@struct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("component", ""), typeof(global::W3C.XMLSpec.component));
            elementDictionary.Add(System.Xml.Linq.XName.Get("union", ""), typeof(global::W3C.XMLSpec.union));
            elementDictionary.Add(System.Xml.Linq.XName.Get("case", ""), typeof(global::W3C.XMLSpec.@case));
            elementDictionary.Add(System.Xml.Linq.XName.Get("enum", ""), typeof(global::W3C.XMLSpec.@enum));
            elementDictionary.Add(System.Xml.Linq.XName.Get("enumerator", ""), typeof(global::W3C.XMLSpec.enumerator));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sequence", ""), typeof(global::W3C.XMLSpec.sequence));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constant", ""), typeof(global::W3C.XMLSpec.constant));
            elementDictionary.Add(System.Xml.Linq.XName.Get("exception", ""), typeof(global::W3C.XMLSpec.exception));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attribute", ""), typeof(global::W3C.XMLSpec.attribute));
            elementDictionary.Add(System.Xml.Linq.XName.Get("method", ""), typeof(global::W3C.XMLSpec.method));
            elementDictionary.Add(System.Xml.Linq.XName.Get("parameters", ""), typeof(global::W3C.XMLSpec.parameters));
            elementDictionary.Add(System.Xml.Linq.XName.Get("param", ""), typeof(global::W3C.XMLSpec.param));
            elementDictionary.Add(System.Xml.Linq.XName.Get("returns", ""), typeof(global::W3C.XMLSpec.returns));
            elementDictionary.Add(System.Xml.Linq.XName.Get("raises", ""), typeof(global::W3C.XMLSpec.raises));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typename", ""), typeof(global::W3C.XMLSpec.typename));
            elementDictionary.Add(System.Xml.Linq.XName.Get("att", ""), typeof(global::W3C.XMLSpec.att));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attval", ""), typeof(global::W3C.XMLSpec.attval));
            elementDictionary.Add(System.Xml.Linq.XName.Get("bibref", ""), typeof(global::W3C.XMLSpec.bibref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("code", ""), typeof(global::W3C.XMLSpec.code));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ednote", ""), typeof(global::W3C.XMLSpec.ednote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("date", ""), typeof(global::W3C.XMLSpec.date));
            elementDictionary.Add(System.Xml.Linq.XName.Get("edtext", ""), typeof(global::W3C.XMLSpec.edtext));
            elementDictionary.Add(System.Xml.Linq.XName.Get("el", ""), typeof(global::W3C.XMLSpec.el));
            elementDictionary.Add(System.Xml.Linq.XName.Get("emph", ""), typeof(global::W3C.XMLSpec.emph));
            elementDictionary.Add(System.Xml.Linq.XName.Get("footnote", ""), typeof(global::W3C.XMLSpec.footnote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("function", ""), typeof(global::W3C.XMLSpec.function));
            elementDictionary.Add(System.Xml.Linq.XName.Get("kw", ""), typeof(global::W3C.XMLSpec.kw));
            elementDictionary.Add(System.Xml.Linq.XName.Get("loc", ""), typeof(global::W3C.XMLSpec.loc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nt", ""), typeof(global::W3C.XMLSpec.nt));
            elementDictionary.Add(System.Xml.Linq.XName.Get("phrase", ""), typeof(global::W3C.XMLSpec.phrase));
            elementDictionary.Add(System.Xml.Linq.XName.Get("rfc2119", ""), typeof(global::W3C.XMLSpec.rfc2119));
            elementDictionary.Add(System.Xml.Linq.XName.Get("quote", ""), typeof(global::W3C.XMLSpec.quote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("specref", ""), typeof(global::W3C.XMLSpec.specref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sub", ""), typeof(global::W3C.XMLSpec.sub));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sup", ""), typeof(global::W3C.XMLSpec.sup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("term", ""), typeof(global::W3C.XMLSpec.term));
            elementDictionary.Add(System.Xml.Linq.XName.Get("termdef", ""), typeof(global::W3C.XMLSpec.termdef));
            elementDictionary.Add(System.Xml.Linq.XName.Get("termref", ""), typeof(global::W3C.XMLSpec.termref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("titleref", ""), typeof(global::W3C.XMLSpec.titleref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("var", ""), typeof(global::W3C.XMLSpec.@var));
            elementDictionary.Add(System.Xml.Linq.XName.Get("xnt", ""), typeof(global::W3C.XMLSpec.xnt));
            elementDictionary.Add(System.Xml.Linq.XName.Get("xspecref", ""), typeof(global::W3C.XMLSpec.xspecref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("xtermref", ""), typeof(global::W3C.XMLSpec.xtermref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("div", ""), typeof(global::W3C.XMLSpec.div));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h1", ""), typeof(global::W3C.XMLSpec.h1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h2", ""), typeof(global::W3C.XMLSpec.h2));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h3", ""), typeof(global::W3C.XMLSpec.h3));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h4", ""), typeof(global::W3C.XMLSpec.h4));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h5", ""), typeof(global::W3C.XMLSpec.h5));
            elementDictionary.Add(System.Xml.Linq.XName.Get("h6", ""), typeof(global::W3C.XMLSpec.h6));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pre", ""), typeof(global::W3C.XMLSpec.pre));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ul", ""), typeof(global::W3C.XMLSpec.ul));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ol", ""), typeof(global::W3C.XMLSpec.ol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("li", ""), typeof(global::W3C.XMLSpec.li));
            elementDictionary.Add(System.Xml.Linq.XName.Get("htable", ""), typeof(global::W3C.XMLSpec.htable));
            elementDictionary.Add(System.Xml.Linq.XName.Get("htbody", ""), typeof(global::W3C.XMLSpec.htbody));
            elementDictionary.Add(System.Xml.Linq.XName.Get("statusp", ""), typeof(global::W3C.XMLSpec.statusp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("itemizedlist", ""), typeof(global::W3C.XMLSpec.itemizedlist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderedlist", ""), typeof(global::W3C.XMLSpec.orderedlist));
            elementDictionary.Add(System.Xml.Linq.XName.Get("listitem", ""), typeof(global::W3C.XMLSpec.listitem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("em", ""), typeof(global::W3C.XMLSpec.em));
            elementDictionary.Add(System.Xml.Linq.XName.Get("a", ""), typeof(global::W3C.XMLSpec.a));
            elementDictionary.Add(System.Xml.Linq.XName.Get("key-term", ""), typeof(global::W3C.XMLSpec.keyterm));
            elementDictionary.Add(System.Xml.Linq.XName.Get("para", ""), typeof(global::W3C.XMLSpec.para));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("list.class", "")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public listclass listclass {  get {return rootObject as listclass; } }

		public speclistclass speclistclass {  get {return rootObject as speclistclass; } }

		public noteclass noteclass {  get {return rootObject as noteclass; } }

		public illusclass illusclass {  get {return rootObject as illusclass; } }

		public annotclass annotclass {  get {return rootObject as annotclass; } }

		public termdefclass termdefclass {  get {return rootObject as termdefclass; } }

		public emphclass emphclass {  get {return rootObject as emphclass; } }

		public refclass refclass {  get {return rootObject as refclass; } }

		public locclass locclass {  get {return rootObject as locclass; } }

		public techclass techclass {  get {return rootObject as techclass; } }

		public ednoteclass ednoteclass {  get {return rootObject as ednoteclass; } }

		public head head {  get {return rootObject as head; } }

		public spec spec {  get {return rootObject as spec; } }

		public front front {  get {return rootObject as front; } }

		public body body {  get {return rootObject as body; } }

		public back back {  get {return rootObject as back; } }

		public div1 div1 {  get {return rootObject as div1; } }

		public informdiv1 informdiv1 {  get {return rootObject as informdiv1; } }

		public div2 div2 {  get {return rootObject as div2; } }

		public div3 div3 {  get {return rootObject as div3; } }

		public div4 div4 {  get {return rootObject as div4; } }

		public div5 div5 {  get {return rootObject as div5; } }

		public header header {  get {return rootObject as header; } }

		public title title {  get {return rootObject as title; } }

		public subtitle subtitle {  get {return rootObject as subtitle; } }

		public version version {  get {return rootObject as version; } }

		public w3cdesignation w3cdesignation {  get {return rootObject as w3cdesignation; } }

		public w3cdoctype w3cdoctype {  get {return rootObject as w3cdoctype; } }

		public pubdate pubdate {  get {return rootObject as pubdate; } }

		public day day {  get {return rootObject as day; } }

		public month month {  get {return rootObject as month; } }

		public year year {  get {return rootObject as year; } }

		public copyright copyright {  get {return rootObject as copyright; } }

		public notice notice {  get {return rootObject as notice; } }

		public publoc publoc {  get {return rootObject as publoc; } }

		public altlocs altlocs {  get {return rootObject as altlocs; } }

		public prevlocs prevlocs {  get {return rootObject as prevlocs; } }

		public latestloc latestloc {  get {return rootObject as latestloc; } }

		public errataloc errataloc {  get {return rootObject as errataloc; } }

		public preverrataloc preverrataloc {  get {return rootObject as preverrataloc; } }

		public translationloc translationloc {  get {return rootObject as translationloc; } }

		public authlist authlist {  get {return rootObject as authlist; } }

		public author author {  get {return rootObject as author; } }

		public name name {  get {return rootObject as name; } }

		public affiliation affiliation {  get {return rootObject as affiliation; } }

		public email email {  get {return rootObject as email; } }

		public status status {  get {return rootObject as status; } }

		public @abstract @abstract {  get {return rootObject as @abstract; } }

		public pubstmt pubstmt {  get {return rootObject as pubstmt; } }

		public sourcedesc sourcedesc {  get {return rootObject as sourcedesc; } }

		public langusage langusage {  get {return rootObject as langusage; } }

		public language language {  get {return rootObject as language; } }

		public revisiondesc revisiondesc {  get {return rootObject as revisiondesc; } }

		public p p {  get {return rootObject as p; } }

		public ulist ulist {  get {return rootObject as ulist; } }

		public olist olist {  get {return rootObject as olist; } }

		public item item {  get {return rootObject as item; } }

		public slist slist {  get {return rootObject as slist; } }

		public sitem sitem {  get {return rootObject as sitem; } }

		public glist glist {  get {return rootObject as glist; } }

		public gitem gitem {  get {return rootObject as gitem; } }

		public label label {  get {return rootObject as label; } }

		public def def {  get {return rootObject as def; } }

		public blist blist {  get {return rootObject as blist; } }

		public bibl bibl {  get {return rootObject as bibl; } }

		public orglist orglist {  get {return rootObject as orglist; } }

		public member member {  get {return rootObject as member; } }

		public role role {  get {return rootObject as role; } }

		public note note {  get {return rootObject as note; } }

		public issue issue {  get {return rootObject as issue; } }

		public source source {  get {return rootObject as source; } }

		public resolution resolution {  get {return rootObject as resolution; } }

		public wfcnote wfcnote {  get {return rootObject as wfcnote; } }

		public vcnote vcnote {  get {return rootObject as vcnote; } }

		public constraintnote constraintnote {  get {return rootObject as constraintnote; } }

		public eg eg {  get {return rootObject as eg; } }

		public graphic graphic {  get {return rootObject as graphic; } }

		public proto proto {  get {return rootObject as proto; } }

		public arg arg {  get {return rootObject as arg; } }

		public example example {  get {return rootObject as example; } }

		public scrap scrap {  get {return rootObject as scrap; } }

		public prodgroup prodgroup {  get {return rootObject as prodgroup; } }

		public prod prod {  get {return rootObject as prod; } }

		public lhs lhs {  get {return rootObject as lhs; } }

		public rhs rhs {  get {return rootObject as rhs; } }

		public com com {  get {return rootObject as com; } }

		public wfc wfc {  get {return rootObject as wfc; } }

		public vc vc {  get {return rootObject as vc; } }

		public constraint constraint {  get {return rootObject as constraint; } }

		public bnf bnf {  get {return rootObject as bnf; } }

		public prodrecap prodrecap {  get {return rootObject as prodrecap; } }

		public table table {  get {return rootObject as table; } }

		public caption caption {  get {return rootObject as caption; } }

		public col col {  get {return rootObject as col; } }

		public colgroup colgroup {  get {return rootObject as colgroup; } }

		public thead thead {  get {return rootObject as thead; } }

		public tfoot tfoot {  get {return rootObject as tfoot; } }

		public tbody tbody {  get {return rootObject as tbody; } }

		public tr tr {  get {return rootObject as tr; } }

		public th th {  get {return rootObject as th; } }

		public td td {  get {return rootObject as td; } }

		public idltdefclass idltdefclass {  get {return rootObject as idltdefclass; } }

		public idlmodclass idlmodclass {  get {return rootObject as idlmodclass; } }

		public idlstructclass idlstructclass {  get {return rootObject as idlstructclass; } }

		public idlmethclass idlmethclass {  get {return rootObject as idlmethclass; } }

		public idltypemix idltypemix {  get {return rootObject as idltypemix; } }

		public descr descr {  get {return rootObject as descr; } }

		public definitions definitions {  get {return rootObject as definitions; } }

		public group group {  get {return rootObject as group; } }

		public @interface @interface {  get {return rootObject as @interface; } }

		public module module {  get {return rootObject as module; } }

		public reference reference {  get {return rootObject as reference; } }

		public typedef typedef {  get {return rootObject as typedef; } }

		public @struct @struct {  get {return rootObject as @struct; } }

		public component component {  get {return rootObject as component; } }

		public union union {  get {return rootObject as union; } }

		public @case @case {  get {return rootObject as @case; } }

		public @enum @enum {  get {return rootObject as @enum; } }

		public enumerator enumerator {  get {return rootObject as enumerator; } }

		public sequence sequence {  get {return rootObject as sequence; } }

		public constant constant {  get {return rootObject as constant; } }

		public exception exception {  get {return rootObject as exception; } }

		public attribute attribute {  get {return rootObject as attribute; } }

		public method method {  get {return rootObject as method; } }

		public parameters parameters {  get {return rootObject as parameters; } }

		public param param {  get {return rootObject as param; } }

		public returns returns {  get {return rootObject as returns; } }

		public raises raises {  get {return rootObject as raises; } }

		public typename typename {  get {return rootObject as typename; } }

		public att att {  get {return rootObject as att; } }

		public attval attval {  get {return rootObject as attval; } }

		public bibref bibref {  get {return rootObject as bibref; } }

		public code code {  get {return rootObject as code; } }

		public ednote ednote {  get {return rootObject as ednote; } }

		public date date {  get {return rootObject as date; } }

		public edtext edtext {  get {return rootObject as edtext; } }

		public el el {  get {return rootObject as el; } }

		public emph emph {  get {return rootObject as emph; } }

		public footnote footnote {  get {return rootObject as footnote; } }

		public function function {  get {return rootObject as function; } }

		public kw kw {  get {return rootObject as kw; } }

		public loc loc {  get {return rootObject as loc; } }

		public nt nt {  get {return rootObject as nt; } }

		public phrase phrase {  get {return rootObject as phrase; } }

		public rfc2119 rfc2119 {  get {return rootObject as rfc2119; } }

		public quote quote {  get {return rootObject as quote; } }

		public specref specref {  get {return rootObject as specref; } }

		public sub sub {  get {return rootObject as sub; } }

		public sup sup {  get {return rootObject as sup; } }

		public term term {  get {return rootObject as term; } }

		public termdef termdef {  get {return rootObject as termdef; } }

		public termref termref {  get {return rootObject as termref; } }

		public titleref titleref {  get {return rootObject as titleref; } }

		public @var @var {  get {return rootObject as @var; } }

		public xnt xnt {  get {return rootObject as xnt; } }

		public xspecref xspecref {  get {return rootObject as xspecref; } }

		public xtermref xtermref {  get {return rootObject as xtermref; } }

		public div div {  get {return rootObject as div; } }

		public h1 h1 {  get {return rootObject as h1; } }

		public h2 h2 {  get {return rootObject as h2; } }

		public h3 h3 {  get {return rootObject as h3; } }

		public h4 h4 {  get {return rootObject as h4; } }

		public h5 h5 {  get {return rootObject as h5; } }

		public h6 h6 {  get {return rootObject as h6; } }

		public pre pre {  get {return rootObject as pre; } }

		public ul ul {  get {return rootObject as ul; } }

		public ol ol {  get {return rootObject as ol; } }

		public li li {  get {return rootObject as li; } }

		public htable htable {  get {return rootObject as htable; } }

		public htbody htbody {  get {return rootObject as htbody; } }

		public statusp statusp {  get {return rootObject as statusp; } }

		public itemizedlist itemizedlist {  get {return rootObject as itemizedlist; } }

		public orderedlist orderedlist {  get {return rootObject as orderedlist; } }

		public listitem listitem {  get {return rootObject as listitem; } }

		public em em {  get {return rootObject as em; } }

		public a a {  get {return rootObject as a; } }

		public keyterm keyterm {  get {return rootObject as keyterm; } }

		public para para {  get {return rootObject as para; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(listclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(speclistclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(noteclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(illusclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(annotclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(termdefclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(emphclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(refclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(locclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(techclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ednoteclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(head root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(spec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(front root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(body root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(back root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(informdiv1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(subtitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(version root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(w3cdesignation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(w3cdoctype root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pubdate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(day root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(month root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(year root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(copyright root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(notice root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(publoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(altlocs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prevlocs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(latestloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(errataloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(preverrataloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(translationloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(authlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(author root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(name root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(affiliation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(email root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(status root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@abstract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pubstmt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sourcedesc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(langusage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(revisiondesc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(p root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ulist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(olist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(item root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(slist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(glist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(gitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(label root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(def root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(blist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(bibl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orglist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(member root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(role root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(note root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(issue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(source root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(resolution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(wfcnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(vcnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constraintnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(eg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(graphic root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(proto root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(arg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(example root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(scrap root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prodgroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prod root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(lhs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(rhs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(com root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(wfc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(vc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constraint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(bnf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prodrecap root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(table root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(caption root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(col root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(colgroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(thead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tfoot root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tbody root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(th root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(td root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idltdefclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idlmodclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idlstructclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idlmethclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idltypemix root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(descr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(definitions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@interface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(module root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(reference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@struct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(component root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(union root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@case root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@enum root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(enumerator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(exception root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(method root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(parameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returns root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(raises root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typename root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(att root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attval root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(bibref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(code root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ednote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(date root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(edtext root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(el root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(emph root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(footnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(function root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(kw root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(loc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(phrase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(rfc2119 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(quote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(specref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sub root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(term root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(termdef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(termref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(titleref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@var root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(xnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(xspecref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(xtermref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(div root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(h6 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pre root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ul root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(li root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(htable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(htbody root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(statusp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(itemizedlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderedlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(listitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(em root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(a root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(keyterm root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(para root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::W3C.XMLSpec.listclass listclass {  get {return rootObject as global::W3C.XMLSpec.listclass; } }

		public global::W3C.XMLSpec.speclistclass speclistclass {  get {return rootObject as global::W3C.XMLSpec.speclistclass; } }

		public global::W3C.XMLSpec.noteclass noteclass {  get {return rootObject as global::W3C.XMLSpec.noteclass; } }

		public global::W3C.XMLSpec.illusclass illusclass {  get {return rootObject as global::W3C.XMLSpec.illusclass; } }

		public global::W3C.XMLSpec.annotclass annotclass {  get {return rootObject as global::W3C.XMLSpec.annotclass; } }

		public global::W3C.XMLSpec.termdefclass termdefclass {  get {return rootObject as global::W3C.XMLSpec.termdefclass; } }

		public global::W3C.XMLSpec.emphclass emphclass {  get {return rootObject as global::W3C.XMLSpec.emphclass; } }

		public global::W3C.XMLSpec.refclass refclass {  get {return rootObject as global::W3C.XMLSpec.refclass; } }

		public global::W3C.XMLSpec.locclass locclass {  get {return rootObject as global::W3C.XMLSpec.locclass; } }

		public global::W3C.XMLSpec.techclass techclass {  get {return rootObject as global::W3C.XMLSpec.techclass; } }

		public global::W3C.XMLSpec.ednoteclass ednoteclass {  get {return rootObject as global::W3C.XMLSpec.ednoteclass; } }

		public global::W3C.XMLSpec.head head {  get {return rootObject as global::W3C.XMLSpec.head; } }

		public global::W3C.XMLSpec.spec spec {  get {return rootObject as global::W3C.XMLSpec.spec; } }

		public global::W3C.XMLSpec.front front {  get {return rootObject as global::W3C.XMLSpec.front; } }

		public global::W3C.XMLSpec.body body {  get {return rootObject as global::W3C.XMLSpec.body; } }

		public global::W3C.XMLSpec.back back {  get {return rootObject as global::W3C.XMLSpec.back; } }

		public global::W3C.XMLSpec.div1 div1 {  get {return rootObject as global::W3C.XMLSpec.div1; } }

		public global::W3C.XMLSpec.informdiv1 informdiv1 {  get {return rootObject as global::W3C.XMLSpec.informdiv1; } }

		public global::W3C.XMLSpec.div2 div2 {  get {return rootObject as global::W3C.XMLSpec.div2; } }

		public global::W3C.XMLSpec.div3 div3 {  get {return rootObject as global::W3C.XMLSpec.div3; } }

		public global::W3C.XMLSpec.div4 div4 {  get {return rootObject as global::W3C.XMLSpec.div4; } }

		public global::W3C.XMLSpec.div5 div5 {  get {return rootObject as global::W3C.XMLSpec.div5; } }

		public global::W3C.XMLSpec.header header {  get {return rootObject as global::W3C.XMLSpec.header; } }

		public global::W3C.XMLSpec.title title {  get {return rootObject as global::W3C.XMLSpec.title; } }

		public global::W3C.XMLSpec.subtitle subtitle {  get {return rootObject as global::W3C.XMLSpec.subtitle; } }

		public global::W3C.XMLSpec.version version {  get {return rootObject as global::W3C.XMLSpec.version; } }

		public global::W3C.XMLSpec.w3cdesignation w3cdesignation {  get {return rootObject as global::W3C.XMLSpec.w3cdesignation; } }

		public global::W3C.XMLSpec.w3cdoctype w3cdoctype {  get {return rootObject as global::W3C.XMLSpec.w3cdoctype; } }

		public global::W3C.XMLSpec.pubdate pubdate {  get {return rootObject as global::W3C.XMLSpec.pubdate; } }

		public global::W3C.XMLSpec.day day {  get {return rootObject as global::W3C.XMLSpec.day; } }

		public global::W3C.XMLSpec.month month {  get {return rootObject as global::W3C.XMLSpec.month; } }

		public global::W3C.XMLSpec.year year {  get {return rootObject as global::W3C.XMLSpec.year; } }

		public global::W3C.XMLSpec.copyright copyright {  get {return rootObject as global::W3C.XMLSpec.copyright; } }

		public global::W3C.XMLSpec.notice notice {  get {return rootObject as global::W3C.XMLSpec.notice; } }

		public global::W3C.XMLSpec.publoc publoc {  get {return rootObject as global::W3C.XMLSpec.publoc; } }

		public global::W3C.XMLSpec.altlocs altlocs {  get {return rootObject as global::W3C.XMLSpec.altlocs; } }

		public global::W3C.XMLSpec.prevlocs prevlocs {  get {return rootObject as global::W3C.XMLSpec.prevlocs; } }

		public global::W3C.XMLSpec.latestloc latestloc {  get {return rootObject as global::W3C.XMLSpec.latestloc; } }

		public global::W3C.XMLSpec.errataloc errataloc {  get {return rootObject as global::W3C.XMLSpec.errataloc; } }

		public global::W3C.XMLSpec.preverrataloc preverrataloc {  get {return rootObject as global::W3C.XMLSpec.preverrataloc; } }

		public global::W3C.XMLSpec.translationloc translationloc {  get {return rootObject as global::W3C.XMLSpec.translationloc; } }

		public global::W3C.XMLSpec.authlist authlist {  get {return rootObject as global::W3C.XMLSpec.authlist; } }

		public global::W3C.XMLSpec.author author {  get {return rootObject as global::W3C.XMLSpec.author; } }

		public global::W3C.XMLSpec.name name {  get {return rootObject as global::W3C.XMLSpec.name; } }

		public global::W3C.XMLSpec.affiliation affiliation {  get {return rootObject as global::W3C.XMLSpec.affiliation; } }

		public global::W3C.XMLSpec.email email {  get {return rootObject as global::W3C.XMLSpec.email; } }

		public global::W3C.XMLSpec.status status {  get {return rootObject as global::W3C.XMLSpec.status; } }

		public global::W3C.XMLSpec.@abstract @abstract {  get {return rootObject as global::W3C.XMLSpec.@abstract; } }

		public global::W3C.XMLSpec.pubstmt pubstmt {  get {return rootObject as global::W3C.XMLSpec.pubstmt; } }

		public global::W3C.XMLSpec.sourcedesc sourcedesc {  get {return rootObject as global::W3C.XMLSpec.sourcedesc; } }

		public global::W3C.XMLSpec.langusage langusage {  get {return rootObject as global::W3C.XMLSpec.langusage; } }

		public global::W3C.XMLSpec.language language {  get {return rootObject as global::W3C.XMLSpec.language; } }

		public global::W3C.XMLSpec.revisiondesc revisiondesc {  get {return rootObject as global::W3C.XMLSpec.revisiondesc; } }

		public global::W3C.XMLSpec.p p {  get {return rootObject as global::W3C.XMLSpec.p; } }

		public global::W3C.XMLSpec.ulist ulist {  get {return rootObject as global::W3C.XMLSpec.ulist; } }

		public global::W3C.XMLSpec.olist olist {  get {return rootObject as global::W3C.XMLSpec.olist; } }

		public global::W3C.XMLSpec.item item {  get {return rootObject as global::W3C.XMLSpec.item; } }

		public global::W3C.XMLSpec.slist slist {  get {return rootObject as global::W3C.XMLSpec.slist; } }

		public global::W3C.XMLSpec.sitem sitem {  get {return rootObject as global::W3C.XMLSpec.sitem; } }

		public global::W3C.XMLSpec.glist glist {  get {return rootObject as global::W3C.XMLSpec.glist; } }

		public global::W3C.XMLSpec.gitem gitem {  get {return rootObject as global::W3C.XMLSpec.gitem; } }

		public global::W3C.XMLSpec.label label {  get {return rootObject as global::W3C.XMLSpec.label; } }

		public global::W3C.XMLSpec.def def {  get {return rootObject as global::W3C.XMLSpec.def; } }

		public global::W3C.XMLSpec.blist blist {  get {return rootObject as global::W3C.XMLSpec.blist; } }

		public global::W3C.XMLSpec.bibl bibl {  get {return rootObject as global::W3C.XMLSpec.bibl; } }

		public global::W3C.XMLSpec.orglist orglist {  get {return rootObject as global::W3C.XMLSpec.orglist; } }

		public global::W3C.XMLSpec.member member {  get {return rootObject as global::W3C.XMLSpec.member; } }

		public global::W3C.XMLSpec.role role {  get {return rootObject as global::W3C.XMLSpec.role; } }

		public global::W3C.XMLSpec.note note {  get {return rootObject as global::W3C.XMLSpec.note; } }

		public global::W3C.XMLSpec.issue issue {  get {return rootObject as global::W3C.XMLSpec.issue; } }

		public global::W3C.XMLSpec.source source {  get {return rootObject as global::W3C.XMLSpec.source; } }

		public global::W3C.XMLSpec.resolution resolution {  get {return rootObject as global::W3C.XMLSpec.resolution; } }

		public global::W3C.XMLSpec.wfcnote wfcnote {  get {return rootObject as global::W3C.XMLSpec.wfcnote; } }

		public global::W3C.XMLSpec.vcnote vcnote {  get {return rootObject as global::W3C.XMLSpec.vcnote; } }

		public global::W3C.XMLSpec.constraintnote constraintnote {  get {return rootObject as global::W3C.XMLSpec.constraintnote; } }

		public global::W3C.XMLSpec.eg eg {  get {return rootObject as global::W3C.XMLSpec.eg; } }

		public global::W3C.XMLSpec.graphic graphic {  get {return rootObject as global::W3C.XMLSpec.graphic; } }

		public global::W3C.XMLSpec.proto proto {  get {return rootObject as global::W3C.XMLSpec.proto; } }

		public global::W3C.XMLSpec.arg arg {  get {return rootObject as global::W3C.XMLSpec.arg; } }

		public global::W3C.XMLSpec.example example {  get {return rootObject as global::W3C.XMLSpec.example; } }

		public global::W3C.XMLSpec.scrap scrap {  get {return rootObject as global::W3C.XMLSpec.scrap; } }

		public global::W3C.XMLSpec.prodgroup prodgroup {  get {return rootObject as global::W3C.XMLSpec.prodgroup; } }

		public global::W3C.XMLSpec.prod prod {  get {return rootObject as global::W3C.XMLSpec.prod; } }

		public global::W3C.XMLSpec.lhs lhs {  get {return rootObject as global::W3C.XMLSpec.lhs; } }

		public global::W3C.XMLSpec.rhs rhs {  get {return rootObject as global::W3C.XMLSpec.rhs; } }

		public global::W3C.XMLSpec.com com {  get {return rootObject as global::W3C.XMLSpec.com; } }

		public global::W3C.XMLSpec.wfc wfc {  get {return rootObject as global::W3C.XMLSpec.wfc; } }

		public global::W3C.XMLSpec.vc vc {  get {return rootObject as global::W3C.XMLSpec.vc; } }

		public global::W3C.XMLSpec.constraint constraint {  get {return rootObject as global::W3C.XMLSpec.constraint; } }

		public global::W3C.XMLSpec.bnf bnf {  get {return rootObject as global::W3C.XMLSpec.bnf; } }

		public global::W3C.XMLSpec.prodrecap prodrecap {  get {return rootObject as global::W3C.XMLSpec.prodrecap; } }

		public global::W3C.XMLSpec.table table {  get {return rootObject as global::W3C.XMLSpec.table; } }

		public global::W3C.XMLSpec.caption caption {  get {return rootObject as global::W3C.XMLSpec.caption; } }

		public global::W3C.XMLSpec.col col {  get {return rootObject as global::W3C.XMLSpec.col; } }

		public global::W3C.XMLSpec.colgroup colgroup {  get {return rootObject as global::W3C.XMLSpec.colgroup; } }

		public global::W3C.XMLSpec.thead thead {  get {return rootObject as global::W3C.XMLSpec.thead; } }

		public global::W3C.XMLSpec.tfoot tfoot {  get {return rootObject as global::W3C.XMLSpec.tfoot; } }

		public global::W3C.XMLSpec.tbody tbody {  get {return rootObject as global::W3C.XMLSpec.tbody; } }

		public global::W3C.XMLSpec.tr tr {  get {return rootObject as global::W3C.XMLSpec.tr; } }

		public global::W3C.XMLSpec.th th {  get {return rootObject as global::W3C.XMLSpec.th; } }

		public global::W3C.XMLSpec.td td {  get {return rootObject as global::W3C.XMLSpec.td; } }

		public global::W3C.XMLSpec.idltdefclass idltdefclass {  get {return rootObject as global::W3C.XMLSpec.idltdefclass; } }

		public global::W3C.XMLSpec.idlmodclass idlmodclass {  get {return rootObject as global::W3C.XMLSpec.idlmodclass; } }

		public global::W3C.XMLSpec.idlstructclass idlstructclass {  get {return rootObject as global::W3C.XMLSpec.idlstructclass; } }

		public global::W3C.XMLSpec.idlmethclass idlmethclass {  get {return rootObject as global::W3C.XMLSpec.idlmethclass; } }

		public global::W3C.XMLSpec.idltypemix idltypemix {  get {return rootObject as global::W3C.XMLSpec.idltypemix; } }

		public global::W3C.XMLSpec.descr descr {  get {return rootObject as global::W3C.XMLSpec.descr; } }

		public global::W3C.XMLSpec.definitions definitions {  get {return rootObject as global::W3C.XMLSpec.definitions; } }

		public global::W3C.XMLSpec.group group {  get {return rootObject as global::W3C.XMLSpec.group; } }

		public global::W3C.XMLSpec.@interface @interface {  get {return rootObject as global::W3C.XMLSpec.@interface; } }

		public global::W3C.XMLSpec.module module {  get {return rootObject as global::W3C.XMLSpec.module; } }

		public global::W3C.XMLSpec.reference reference {  get {return rootObject as global::W3C.XMLSpec.reference; } }

		public global::W3C.XMLSpec.typedef typedef {  get {return rootObject as global::W3C.XMLSpec.typedef; } }

		public global::W3C.XMLSpec.@struct @struct {  get {return rootObject as global::W3C.XMLSpec.@struct; } }

		public global::W3C.XMLSpec.component component {  get {return rootObject as global::W3C.XMLSpec.component; } }

		public global::W3C.XMLSpec.union union {  get {return rootObject as global::W3C.XMLSpec.union; } }

		public global::W3C.XMLSpec.@case @case {  get {return rootObject as global::W3C.XMLSpec.@case; } }

		public global::W3C.XMLSpec.@enum @enum {  get {return rootObject as global::W3C.XMLSpec.@enum; } }

		public global::W3C.XMLSpec.enumerator enumerator {  get {return rootObject as global::W3C.XMLSpec.enumerator; } }

		public global::W3C.XMLSpec.sequence sequence {  get {return rootObject as global::W3C.XMLSpec.sequence; } }

		public global::W3C.XMLSpec.constant constant {  get {return rootObject as global::W3C.XMLSpec.constant; } }

		public global::W3C.XMLSpec.exception exception {  get {return rootObject as global::W3C.XMLSpec.exception; } }

		public global::W3C.XMLSpec.attribute attribute {  get {return rootObject as global::W3C.XMLSpec.attribute; } }

		public global::W3C.XMLSpec.method method {  get {return rootObject as global::W3C.XMLSpec.method; } }

		public global::W3C.XMLSpec.parameters parameters {  get {return rootObject as global::W3C.XMLSpec.parameters; } }

		public global::W3C.XMLSpec.param param {  get {return rootObject as global::W3C.XMLSpec.param; } }

		public global::W3C.XMLSpec.returns returns {  get {return rootObject as global::W3C.XMLSpec.returns; } }

		public global::W3C.XMLSpec.raises raises {  get {return rootObject as global::W3C.XMLSpec.raises; } }

		public global::W3C.XMLSpec.typename typename {  get {return rootObject as global::W3C.XMLSpec.typename; } }

		public global::W3C.XMLSpec.att att {  get {return rootObject as global::W3C.XMLSpec.att; } }

		public global::W3C.XMLSpec.attval attval {  get {return rootObject as global::W3C.XMLSpec.attval; } }

		public global::W3C.XMLSpec.bibref bibref {  get {return rootObject as global::W3C.XMLSpec.bibref; } }

		public global::W3C.XMLSpec.code code {  get {return rootObject as global::W3C.XMLSpec.code; } }

		public global::W3C.XMLSpec.ednote ednote {  get {return rootObject as global::W3C.XMLSpec.ednote; } }

		public global::W3C.XMLSpec.date date {  get {return rootObject as global::W3C.XMLSpec.date; } }

		public global::W3C.XMLSpec.edtext edtext {  get {return rootObject as global::W3C.XMLSpec.edtext; } }

		public global::W3C.XMLSpec.el el {  get {return rootObject as global::W3C.XMLSpec.el; } }

		public global::W3C.XMLSpec.emph emph {  get {return rootObject as global::W3C.XMLSpec.emph; } }

		public global::W3C.XMLSpec.footnote footnote {  get {return rootObject as global::W3C.XMLSpec.footnote; } }

		public global::W3C.XMLSpec.function function {  get {return rootObject as global::W3C.XMLSpec.function; } }

		public global::W3C.XMLSpec.kw kw {  get {return rootObject as global::W3C.XMLSpec.kw; } }

		public global::W3C.XMLSpec.loc loc {  get {return rootObject as global::W3C.XMLSpec.loc; } }

		public global::W3C.XMLSpec.nt nt {  get {return rootObject as global::W3C.XMLSpec.nt; } }

		public global::W3C.XMLSpec.phrase phrase {  get {return rootObject as global::W3C.XMLSpec.phrase; } }

		public global::W3C.XMLSpec.rfc2119 rfc2119 {  get {return rootObject as global::W3C.XMLSpec.rfc2119; } }

		public global::W3C.XMLSpec.quote quote {  get {return rootObject as global::W3C.XMLSpec.quote; } }

		public global::W3C.XMLSpec.specref specref {  get {return rootObject as global::W3C.XMLSpec.specref; } }

		public global::W3C.XMLSpec.sub sub {  get {return rootObject as global::W3C.XMLSpec.sub; } }

		public global::W3C.XMLSpec.sup sup {  get {return rootObject as global::W3C.XMLSpec.sup; } }

		public global::W3C.XMLSpec.term term {  get {return rootObject as global::W3C.XMLSpec.term; } }

		public global::W3C.XMLSpec.termdef termdef {  get {return rootObject as global::W3C.XMLSpec.termdef; } }

		public global::W3C.XMLSpec.termref termref {  get {return rootObject as global::W3C.XMLSpec.termref; } }

		public global::W3C.XMLSpec.titleref titleref {  get {return rootObject as global::W3C.XMLSpec.titleref; } }

		public global::W3C.XMLSpec.@var @var {  get {return rootObject as global::W3C.XMLSpec.@var; } }

		public global::W3C.XMLSpec.xnt xnt {  get {return rootObject as global::W3C.XMLSpec.xnt; } }

		public global::W3C.XMLSpec.xspecref xspecref {  get {return rootObject as global::W3C.XMLSpec.xspecref; } }

		public global::W3C.XMLSpec.xtermref xtermref {  get {return rootObject as global::W3C.XMLSpec.xtermref; } }

		public global::W3C.XMLSpec.div div {  get {return rootObject as global::W3C.XMLSpec.div; } }

		public global::W3C.XMLSpec.h1 h1 {  get {return rootObject as global::W3C.XMLSpec.h1; } }

		public global::W3C.XMLSpec.h2 h2 {  get {return rootObject as global::W3C.XMLSpec.h2; } }

		public global::W3C.XMLSpec.h3 h3 {  get {return rootObject as global::W3C.XMLSpec.h3; } }

		public global::W3C.XMLSpec.h4 h4 {  get {return rootObject as global::W3C.XMLSpec.h4; } }

		public global::W3C.XMLSpec.h5 h5 {  get {return rootObject as global::W3C.XMLSpec.h5; } }

		public global::W3C.XMLSpec.h6 h6 {  get {return rootObject as global::W3C.XMLSpec.h6; } }

		public global::W3C.XMLSpec.pre pre {  get {return rootObject as global::W3C.XMLSpec.pre; } }

		public global::W3C.XMLSpec.ul ul {  get {return rootObject as global::W3C.XMLSpec.ul; } }

		public global::W3C.XMLSpec.ol ol {  get {return rootObject as global::W3C.XMLSpec.ol; } }

		public global::W3C.XMLSpec.li li {  get {return rootObject as global::W3C.XMLSpec.li; } }

		public global::W3C.XMLSpec.htable htable {  get {return rootObject as global::W3C.XMLSpec.htable; } }

		public global::W3C.XMLSpec.htbody htbody {  get {return rootObject as global::W3C.XMLSpec.htbody; } }

		public global::W3C.XMLSpec.statusp statusp {  get {return rootObject as global::W3C.XMLSpec.statusp; } }

		public global::W3C.XMLSpec.itemizedlist itemizedlist {  get {return rootObject as global::W3C.XMLSpec.itemizedlist; } }

		public global::W3C.XMLSpec.orderedlist orderedlist {  get {return rootObject as global::W3C.XMLSpec.orderedlist; } }

		public global::W3C.XMLSpec.listitem listitem {  get {return rootObject as global::W3C.XMLSpec.listitem; } }

		public global::W3C.XMLSpec.em em {  get {return rootObject as global::W3C.XMLSpec.em; } }

		public global::W3C.XMLSpec.a a {  get {return rootObject as global::W3C.XMLSpec.a; } }

		public global::W3C.XMLSpec.keyterm keyterm {  get {return rootObject as global::W3C.XMLSpec.keyterm; } }

		public global::W3C.XMLSpec.para para {  get {return rootObject as global::W3C.XMLSpec.para; } }
        
        private XRoot() {
        }
        
        public XRoot(global::W3C.XMLSpec.listclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.speclistclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.noteclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.illusclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.annotclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.termdefclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.emphclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.refclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.locclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.techclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.ednoteclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.head root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.spec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.front root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.body root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.back root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.informdiv1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.header root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.subtitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.version root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.w3cdesignation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.w3cdoctype root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.pubdate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.day root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.month root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.year root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.copyright root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.notice root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.publoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.altlocs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.prevlocs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.latestloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.errataloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.preverrataloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.translationloc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.authlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.author root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.name root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.affiliation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.email root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.status root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@abstract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.pubstmt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.sourcedesc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.langusage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.revisiondesc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.p root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.ulist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.olist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.item root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.slist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.sitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.glist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.gitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.label root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.def root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.blist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.bibl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.orglist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.member root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.role root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.note root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.issue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.source root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.resolution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.wfcnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.vcnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.constraintnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.eg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.graphic root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.proto root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.arg root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.example root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.scrap root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.prodgroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.prod root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.lhs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.rhs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.com root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.wfc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.vc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.constraint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.bnf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.prodrecap root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.table root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.caption root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.col root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.colgroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.thead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.tfoot root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.tbody root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.tr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.th root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.td root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.idltdefclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.idlmodclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.idlstructclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.idlmethclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.idltypemix root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.descr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.definitions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@interface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.module root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.reference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.typedef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@struct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.component root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.union root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@case root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@enum root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.enumerator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.sequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.constant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.exception root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.attribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.method root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.parameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.returns root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.raises root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.typename root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.att root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.attval root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.bibref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.code root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.ednote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.date root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.edtext root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.el root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.emph root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.footnote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.function root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.kw root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.loc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.nt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.phrase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.rfc2119 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.quote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.specref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.sub root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.sup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.term root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.termdef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.termref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.titleref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.@var root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.xnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.xspecref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.xtermref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.div root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h3 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h4 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h5 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.h6 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.pre root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.ul root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.ol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.li root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.htable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.htbody root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.statusp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.itemizedlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.orderedlist root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.listitem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.em root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.a root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.keyterm root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XMLSpec.para root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
