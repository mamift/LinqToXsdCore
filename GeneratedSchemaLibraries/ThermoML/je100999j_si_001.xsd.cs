//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace www.iupac.org.namespaces.ThermoML {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
    /// </para>
    /// </summary>
    public partial class TRCRefID : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yrYrPubXName = System.Xml.Linq.XName.Get("yrYrPub", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sAuthor1XName = System.Xml.Linq.XName.Get("sAuthor1", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sAuthor2XName = System.Xml.Linq.XName.Get("sAuthor2", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nAuthornXName = System.Xml.Linq.XName.Get("nAuthorn", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TRCRefID", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TRCRefID(XElement xe) { return XTypedServices.ToXTypedElement<TRCRefID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TRCRefID() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(yrYrPubXName), new NamedContentModelEntity(sAuthor1XName), new NamedContentModelEntity(sAuthor2XName), new NamedContentModelEntity(nAuthornXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
        /// </para>
        /// </summary>
        public TRCRefID() {
        }
        
        /// <summary>
        /// <para>
        /// Integer year of publication
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
        /// </para>
        /// </summary>
        public virtual decimal yrYrPub {
            get {
                XElement x = this.GetElement(yrYrPubXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(yrYrPubXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// First 3 characters of Author 1 last name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
        /// </para>
        /// </summary>
        public virtual string sAuthor1 {
            get {
                XElement x = this.GetElement(sAuthor1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sAuthor1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// First 3 characters of Author 2 last name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
        /// </para>
        /// </summary>
        public virtual string sAuthor2 {
            get {
                XElement x = this.GetElement(sAuthor2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sAuthor2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Integer identifier to distinguish conflicts
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (yrYrPub, sAuthor1, sAuthor2, nAuthorn)
        /// </para>
        /// </summary>
        public virtual decimal nAuthorn {
            get {
                XElement x = this.GetElement(nAuthornXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nAuthornXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TRCRefID Load(string xmlFile) {
            return XTypedServices.Load<TRCRefID>(xmlFile);
        }
        
        public static TRCRefID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TRCRefID>(xmlFile);
        }
        
        public static TRCRefID Parse(string xml) {
            return XTypedServices.Parse<TRCRefID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TRCRefID>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(yrYrPubXName, typeof(decimal));
            localElementDictionary.Add(sAuthor1XName, typeof(string));
            localElementDictionary.Add(sAuthor2XName, typeof(string));
            localElementDictionary.Add(nAuthornXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
    /// </para>
    /// </summary>
    public partial class Compound : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sInChIXName = System.Xml.Linq.XName.Get("sInChI", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCASNameXName = System.Xml.Linq.XName.Get("sCASName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sIUPACNameXName = System.Xml.Linq.XName.Get("sIUPACName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCommonNameXName = System.Xml.Linq.XName.Get("sCommonName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> sCommonNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sFormulaMolecXName = System.Xml.Linq.XName.Get("sFormulaMolec", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sSmilesXName = System.Xml.Linq.XName.Get("sSmiles", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> sSmilesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName polymerXName = System.Xml.Linq.XName.Get("polymer", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ionXName = System.Xml.Linq.XName.Get("ion", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName biomaterialXName = System.Xml.Linq.XName.Get("biomaterial", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MulticomponentSubstanceXName = System.Xml.Linq.XName.Get("MulticomponentSubstance", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleXName = System.Xml.Linq.XName.Get("Sample", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Sample> SampleField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Compound", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Compound(XElement xe) { return XTypedServices.ToXTypedElement<Compound>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Compound() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(sInChIXName), new NamedContentModelEntity(sCASNameXName), new NamedContentModelEntity(sIUPACNameXName), new NamedContentModelEntity(sCommonNameXName), new NamedContentModelEntity(sFormulaMolecXName), new NamedContentModelEntity(sSmilesXName), new ChoiceContentModelEntity(new NamedContentModelEntity(polymerXName), new NamedContentModelEntity(ionXName), new NamedContentModelEntity(biomaterialXName), new NamedContentModelEntity(MulticomponentSubstanceXName)), new NamedContentModelEntity(SampleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public Compound() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual RegNumLocalType RegNum {
            get {
                XElement x = this.GetElement(RegNumXName);
                return ((RegNumLocalType)(x));
            }
            set {
                this.SetElement(RegNumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// InChI, string
        /// </para>
        /// <para>
        /// IUPAC International Chemical Identifier
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual string sInChI {
            get {
                XElement x = this.GetElement(sInChIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sInChIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual string sCASName {
            get {
                XElement x = this.GetElement(sCASNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCASNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// IUPAC name, string
        /// </para>
        /// <para>
        /// International Union of Physics and Applied Chemistry name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual string sIUPACName {
            get {
                XElement x = this.GetElement(sIUPACNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sIUPACNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Common name, string
        /// </para>
        /// <para>
        /// Common name
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual IList<string> sCommonName {
            get {
                if ((this.sCommonNameField == null)) {
                    this.sCommonNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sCommonNameXName);
                }
                return this.sCommonNameField;
            }
            set {
                if ((value == null)) {
                    this.sCommonNameField = null;
                }
                else {
                    if ((this.sCommonNameField == null)) {
                        this.sCommonNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sCommonNameXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.sCommonNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Molecular formula, string
        /// </para>
        /// <para>
        /// Chemical molecular formula
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual string sFormulaMolec {
            get {
                XElement x = this.GetElement(sFormulaMolecXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sFormulaMolecXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// SMILES notation, string
        /// </para>
        /// <para>
        /// SMILES notation
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual IList<string> sSmiles {
            get {
                if ((this.sSmilesField == null)) {
                    this.sSmilesField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sSmilesXName);
                }
                return this.sSmilesField;
            }
            set {
                if ((value == null)) {
                    this.sSmilesField = null;
                }
                else {
                    if ((this.sSmilesField == null)) {
                        this.sSmilesField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sSmilesXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.sSmilesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual polymerLocalType polymer {
            get {
                XElement x = this.GetElement(polymerXName);
                return ((polymerLocalType)(x));
            }
            set {
                this.SetElement(polymerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual ionLocalType ion {
            get {
                XElement x = this.GetElement(ionXName);
                return ((ionLocalType)(x));
            }
            set {
                this.SetElement(ionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual biomaterialLocalType biomaterial {
            get {
                XElement x = this.GetElement(biomaterialXName);
                return ((biomaterialLocalType)(x));
            }
            set {
                this.SetElement(biomaterialXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual MulticomponentSubstanceLocalType MulticomponentSubstance {
            get {
                XElement x = this.GetElement(MulticomponentSubstanceXName);
                return ((MulticomponentSubstanceLocalType)(x));
            }
            set {
                this.SetElement(MulticomponentSubstanceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RegNum, sInChI?, sCASName?, sIUPACName?, sCommonName*, sFormulaMolec?, sSmiles*, (polymer | ion | biomaterial | MulticomponentSubstance)?, Sample*)
        /// </para>
        /// </summary>
        public virtual IList<Sample> Sample {
            get {
                if ((this.SampleField == null)) {
                    this.SampleField = new XTypedList<Sample>(this, LinqToXsdTypeManager.Instance, SampleXName);
                }
                return this.SampleField;
            }
            set {
                if ((value == null)) {
                    this.SampleField = null;
                }
                else {
                    if ((this.SampleField == null)) {
                        this.SampleField = XTypedList<Sample>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleXName);
                    }
                    else {
                        XTypedServices.SetList<Sample>(this.SampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Compound Load(string xmlFile) {
            return XTypedServices.Load<Compound>(xmlFile);
        }
        
        public static Compound Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Compound>(xmlFile);
        }
        
        public static Compound Parse(string xml) {
            return XTypedServices.Parse<Compound>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Compound>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RegNumXName, typeof(RegNumLocalType));
            localElementDictionary.Add(sInChIXName, typeof(string));
            localElementDictionary.Add(sCASNameXName, typeof(string));
            localElementDictionary.Add(sIUPACNameXName, typeof(string));
            localElementDictionary.Add(sCommonNameXName, typeof(string));
            localElementDictionary.Add(sFormulaMolecXName, typeof(string));
            localElementDictionary.Add(sSmilesXName, typeof(string));
            localElementDictionary.Add(polymerXName, typeof(polymerLocalType));
            localElementDictionary.Add(ionXName, typeof(ionLocalType));
            localElementDictionary.Add(biomaterialXName, typeof(biomaterialLocalType));
            localElementDictionary.Add(MulticomponentSubstanceXName, typeof(MulticomponentSubstanceLocalType));
            localElementDictionary.Add(SampleXName, typeof(Sample));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nCASRNum?, nOrgNum?)
        /// </para>
        /// </summary>
        public partial class RegNumLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nCASRNumXName = System.Xml.Linq.XName.Get("nCASRNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nOrgNumXName = System.Xml.Linq.XName.Get("nOrgNum", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator RegNumLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RegNumLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static RegNumLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCASRNumXName), new NamedContentModelEntity(nOrgNumXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nCASRNum?, nOrgNum?)
            /// </para>
            /// </summary>
            public RegNumLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nCASRNum?, nOrgNum?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nCASRNum {
                get {
                    XElement x = this.GetElement(nCASRNumXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nCASRNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nCASRNum?, nOrgNum?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nOrgNum {
                get {
                    XElement x = this.GetElement(nOrgNumXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nOrgNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<RegNumLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nCASRNumXName, typeof(decimal));
                localElementDictionary.Add(nOrgNumXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Polymer-specific information
        /// </para>
        /// <para>
        /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
        /// </para>
        /// </summary>
        public partial class polymerLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nNumberAvgMolWtXName = System.Xml.Linq.XName.Get("nNumberAvgMolWt", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPeakAvgMolWtXName = System.Xml.Linq.XName.Get("nPeakAvgMolWt", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nViscosityAvgMolWtXName = System.Xml.Linq.XName.Get("nViscosityAvgMolWt", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nWeightAvgMolWtXName = System.Xml.Linq.XName.Get("nWeightAvgMolWt", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nZAvgMolWtXName = System.Xml.Linq.XName.Get("nZAvgMolWt", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPolydispersityIndexXName = System.Xml.Linq.XName.Get("nPolydispersityIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("polymer", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator polymerLocalType(XElement xe) { return XTypedServices.ToXTypedElement<polymerLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static polymerLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nNumberAvgMolWtXName), new NamedContentModelEntity(nPeakAvgMolWtXName), new NamedContentModelEntity(nViscosityAvgMolWtXName), new NamedContentModelEntity(nWeightAvgMolWtXName), new NamedContentModelEntity(nZAvgMolWtXName), new NamedContentModelEntity(nPolydispersityIndexXName));
            }
            
            /// <summary>
            /// <para>
            /// Polymer-specific information
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public polymerLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Number average molecular weight, kg/kmol
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nNumberAvgMolWt {
                get {
                    XElement x = this.GetElement(nNumberAvgMolWtXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nNumberAvgMolWtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Peak average molecular weight, kg/kmol
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nPeakAvgMolWt {
                get {
                    XElement x = this.GetElement(nPeakAvgMolWtXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPeakAvgMolWtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Viscosity average molecular weight, kg/kmol
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nViscosityAvgMolWt {
                get {
                    XElement x = this.GetElement(nViscosityAvgMolWtXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nViscosityAvgMolWtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Weight average molecular weight, kg/kmol
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nWeightAvgMolWt {
                get {
                    XElement x = this.GetElement(nWeightAvgMolWtXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nWeightAvgMolWtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Z average molecular weight, kg/kmol
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nZAvgMolWt {
                get {
                    XElement x = this.GetElement(nZAvgMolWtXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nZAvgMolWtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nNumberAvgMolWt?, nPeakAvgMolWt?, nViscosityAvgMolWt?, nWeightAvgMolWt?, nZAvgMolWt?, nPolydispersityIndex?)
            /// </para>
            /// </summary>
            public virtual System.Single? nPolydispersityIndex {
                get {
                    XElement x = this.GetElement(nPolydispersityIndexXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPolydispersityIndexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<polymerLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nNumberAvgMolWtXName, typeof(float));
                localElementDictionary.Add(nPeakAvgMolWtXName, typeof(float));
                localElementDictionary.Add(nViscosityAvgMolWtXName, typeof(float));
                localElementDictionary.Add(nWeightAvgMolWtXName, typeof(float));
                localElementDictionary.Add(nZAvgMolWtXName, typeof(float));
                localElementDictionary.Add(nPolydispersityIndexXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Ion-specific information
        /// </para>
        /// <para>
        /// Regular expression: (nCharge)
        /// </para>
        /// </summary>
        public partial class ionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nChargeXName = System.Xml.Linq.XName.Get("nCharge", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ion", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nChargeXName));
            }
            
            /// <summary>
            /// <para>
            /// Ion-specific information
            /// </para>
            /// <para>
            /// Regular expression: (nCharge)
            /// </para>
            /// </summary>
            public ionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nCharge)
            /// </para>
            /// </summary>
            public virtual decimal nCharge {
                get {
                    XElement x = this.GetElement(nChargeXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nChargeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nChargeXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Bio species information
        /// </para>
        /// <para>
        /// Regular expression: (sECNumber?, sPDBIdentifier?)
        /// </para>
        /// </summary>
        public partial class biomaterialLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sECNumberXName = System.Xml.Linq.XName.Get("sECNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sPDBIdentifierXName = System.Xml.Linq.XName.Get("sPDBIdentifier", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("biomaterial", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator biomaterialLocalType(XElement xe) { return XTypedServices.ToXTypedElement<biomaterialLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static biomaterialLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sECNumberXName), new NamedContentModelEntity(sPDBIdentifierXName));
            }
            
            /// <summary>
            /// <para>
            /// Bio species information
            /// </para>
            /// <para>
            /// Regular expression: (sECNumber?, sPDBIdentifier?)
            /// </para>
            /// </summary>
            public biomaterialLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sECNumber?, sPDBIdentifier?)
            /// </para>
            /// </summary>
            public virtual string sECNumber {
                get {
                    XElement x = this.GetElement(sECNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sECNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sECNumber?, sPDBIdentifier?)
            /// </para>
            /// </summary>
            public virtual string sPDBIdentifier {
                get {
                    XElement x = this.GetElement(sPDBIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sPDBIdentifierXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<biomaterialLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sECNumberXName, typeof(string));
                localElementDictionary.Add(sPDBIdentifierXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Component+)
        /// </para>
        /// </summary>
        public partial class MulticomponentSubstanceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ComponentXName = System.Xml.Linq.XName.Get("Component", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ComponentLocalType> ComponentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName compositionBasisXName = System.Xml.Linq.XName.Get("compositionBasis", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MulticomponentSubstance", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator MulticomponentSubstanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MulticomponentSubstanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static MulticomponentSubstanceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ComponentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Component+)
            /// </para>
            /// </summary>
            public MulticomponentSubstanceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Component+)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.Compound.MulticomponentSubstanceLocalType.ComponentLocalType> Component {
                get {
                    if ((this.ComponentField == null)) {
                        this.ComponentField = new XTypedList<ComponentLocalType>(this, LinqToXsdTypeManager.Instance, ComponentXName);
                    }
                    return this.ComponentField;
                }
                set {
                    if ((value == null)) {
                        this.ComponentField = null;
                    }
                    else {
                        if ((this.ComponentField == null)) {
                            this.ComponentField = XTypedList<ComponentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComponentXName);
                        }
                        else {
                            XTypedServices.SetList<ComponentLocalType>(this.ComponentField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual www.iupac.org.namespaces.ThermoML.MulticomponentType? type {
                get {
                    XAttribute x = this.Attribute(typeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((www.iupac.org.namespaces.ThermoML.MulticomponentType)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.MulticomponentType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string compositionBasis {
                get {
                    XAttribute x = this.Attribute(compositionBasisXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(compositionBasisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<MulticomponentSubstanceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ComponentXName, typeof(ComponentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum, nAmount)
            /// </para>
            /// </summary>
            public partial class ComponentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nAmountXName = System.Xml.Linq.XName.Get("nAmount", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Component", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ComponentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ComponentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nAmountXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (RegNum, nAmount)
                /// </para>
                /// </summary>
                public ComponentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (RegNum, nAmount)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (RegNum, nAmount)
                /// </para>
                /// </summary>
                public virtual float nAmount {
                    get {
                        XElement x = this.GetElement(nAmountXName);
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nAmountXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ComponentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                    localElementDictionary.Add(nAmountXName, typeof(float));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
    /// </para>
    /// </summary>
    public partial class Sample : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eSourceXName = System.Xml.Linq.XName.Get("eSource", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eStatusXName = System.Xml.Linq.XName.Get("eStatus", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purityXName = System.Xml.Linq.XName.Get("purity", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<purityLocalType> purityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComponentSampleXName = System.Xml.Linq.XName.Get("ComponentSample", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComponentSampleLocalType> ComponentSampleField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Sample", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Sample(XElement xe) { return XTypedServices.ToXTypedElement<Sample>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Sample() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nSampleNmXName), new NamedContentModelEntity(eSourceXName), new NamedContentModelEntity(eStatusXName), new NamedContentModelEntity(purityXName), new NamedContentModelEntity(ComponentSampleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public Sample() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public virtual decimal nSampleNm {
            get {
                XElement x = this.GetElement(nSampleNmXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public virtual string eSource {
            get {
                XElement x = this.GetElement(eSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eSourceXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eSourceXName, value, "eSource", global::www.iupac.org.namespaces.ThermoML.eSampleSource.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public virtual www.iupac.org.namespaces.ThermoML.eSampleStatus? eStatus {
            get {
                XElement x = this.GetElement(eStatusXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.iupac.org.namespaces.ThermoML.eSampleStatus)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eSampleStatus), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(eStatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eStatusXName, value.ToString(), "eStatus", global::www.iupac.org.namespaces.ThermoML.eSampleStatusValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Purity of the sample
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Sample.purityLocalType> purity {
            get {
                if ((this.purityField == null)) {
                    this.purityField = new XTypedList<purityLocalType>(this, LinqToXsdTypeManager.Instance, purityXName);
                }
                return this.purityField;
            }
            set {
                if ((value == null)) {
                    this.purityField = null;
                }
                else {
                    if ((this.purityField == null)) {
                        this.purityField = XTypedList<purityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, purityXName);
                    }
                    else {
                        XTypedServices.SetList<purityLocalType>(this.purityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nSampleNm, eSource?, eStatus?, purity*, ComponentSample*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Sample.ComponentSampleLocalType> ComponentSample {
            get {
                if ((this.ComponentSampleField == null)) {
                    this.ComponentSampleField = new XTypedList<ComponentSampleLocalType>(this, LinqToXsdTypeManager.Instance, ComponentSampleXName);
                }
                return this.ComponentSampleField;
            }
            set {
                if ((value == null)) {
                    this.ComponentSampleField = null;
                }
                else {
                    if ((this.ComponentSampleField == null)) {
                        this.ComponentSampleField = XTypedList<ComponentSampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComponentSampleXName);
                    }
                    else {
                        XTypedServices.SetList<ComponentSampleLocalType>(this.ComponentSampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Sample Load(string xmlFile) {
            return XTypedServices.Load<Sample>(xmlFile);
        }
        
        public static Sample Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Sample>(xmlFile);
        }
        
        public static Sample Parse(string xml) {
            return XTypedServices.Parse<Sample>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Sample>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nSampleNmXName, typeof(decimal));
            localElementDictionary.Add(eSourceXName, typeof(string));
            localElementDictionary.Add(eStatusXName, typeof(string));
            localElementDictionary.Add(purityXName, typeof(purityLocalType));
            localElementDictionary.Add(ComponentSampleXName, typeof(ComponentSampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
        /// </para>
        /// </summary>
        public partial class purityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nStepXName = System.Xml.Linq.XName.Get("nStep", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePurifMethodXName = System.Xml.Linq.XName.Get("ePurifMethod", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> ePurifMethodField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sPurifMethodXName = System.Xml.Linq.XName.Get("sPurifMethod", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> sPurifMethodField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityMolXName = System.Xml.Linq.XName.Get("nPurityMol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityMolDigitsXName = System.Xml.Linq.XName.Get("nPurityMolDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityMassXName = System.Xml.Linq.XName.Get("nPurityMass", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityMassDigitsXName = System.Xml.Linq.XName.Get("nPurityMassDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityVolXName = System.Xml.Linq.XName.Get("nPurityVol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPurityVolDigitsXName = System.Xml.Linq.XName.Get("nPurityVolDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nUnknownPerCentXName = System.Xml.Linq.XName.Get("nUnknownPerCent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nUnknownPerCentDigitsXName = System.Xml.Linq.XName.Get("nUnknownPerCentDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nWaterMassPerCentXName = System.Xml.Linq.XName.Get("nWaterMassPerCent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nWaterMassPerCentDigitsXName = System.Xml.Linq.XName.Get("nWaterMassPerCentDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nWaterMolPerCentXName = System.Xml.Linq.XName.Get("nWaterMolPerCent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nWaterMolPerCentDigitsXName = System.Xml.Linq.XName.Get("nWaterMolPerCentDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nHalideMolPerCentXName = System.Xml.Linq.XName.Get("nHalideMolPerCent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nHalideMolPerCentDigitsXName = System.Xml.Linq.XName.Get("nHalideMolPerCentDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nHalideMassPerCentXName = System.Xml.Linq.XName.Get("nHalideMassPerCent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nHalideMassPerCentDigitsXName = System.Xml.Linq.XName.Get("nHalideMassPerCentDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eAnalMethXName = System.Xml.Linq.XName.Get("eAnalMeth", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> eAnalMethField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sAnalMethXName = System.Xml.Linq.XName.Get("sAnalMeth", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> sAnalMethField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("purity", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator purityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<purityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static purityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nStepXName), new NamedContentModelEntity(ePurifMethodXName), new NamedContentModelEntity(sPurifMethodXName), new SequenceContentModelEntity(new NamedContentModelEntity(nPurityMolXName), new NamedContentModelEntity(nPurityMolDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nPurityMassXName), new NamedContentModelEntity(nPurityMassDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nPurityVolXName), new NamedContentModelEntity(nPurityVolDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nUnknownPerCentXName), new NamedContentModelEntity(nUnknownPerCentDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nWaterMassPerCentXName), new NamedContentModelEntity(nWaterMassPerCentDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nWaterMolPerCentXName), new NamedContentModelEntity(nWaterMolPerCentDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nHalideMolPerCentXName), new NamedContentModelEntity(nHalideMolPerCentDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nHalideMassPerCentXName), new NamedContentModelEntity(nHalideMassPerCentDigitsXName)), new NamedContentModelEntity(eAnalMethXName), new NamedContentModelEntity(sAnalMethXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public purityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual decimal nStep {
                get {
                    XElement x = this.GetElement(nStepXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nStepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual IList<string> ePurifMethod {
                get {
                    if ((this.ePurifMethodField == null)) {
                        this.ePurifMethodField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ePurifMethodXName);
                    }
                    return this.ePurifMethodField;
                }
                set {
                    if ((value == null)) {
                        this.ePurifMethodField = null;
                    }
                    else {
                        if ((this.ePurifMethodField == null)) {
                            this.ePurifMethodField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ePurifMethodXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.ePurifMethodField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual IList<string> sPurifMethod {
                get {
                    if ((this.sPurifMethodField == null)) {
                        this.sPurifMethodField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sPurifMethodXName);
                    }
                    return this.sPurifMethodField;
                }
                set {
                    if ((value == null)) {
                        this.sPurifMethodField = null;
                    }
                    else {
                        if ((this.sPurifMethodField == null)) {
                            this.sPurifMethodField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sPurifMethodXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.sPurifMethodField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// purity value in mole percent
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nPurityMol {
                get {
                    XElement x = this.GetElement(nPurityMolXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPurityMolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPurityMolDigits {
                get {
                    XElement x = this.GetElement(nPurityMolDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPurityMolDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// purity value in mass percent
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nPurityMass {
                get {
                    XElement x = this.GetElement(nPurityMassXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPurityMassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPurityMassDigits {
                get {
                    XElement x = this.GetElement(nPurityMassDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPurityMassDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// purity value in volume percent
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nPurityVol {
                get {
                    XElement x = this.GetElement(nPurityVolXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPurityVolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPurityVolDigits {
                get {
                    XElement x = this.GetElement(nPurityVolDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPurityVolDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// purity value in not specified percent
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nUnknownPerCent {
                get {
                    XElement x = this.GetElement(nUnknownPerCentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nUnknownPerCentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nUnknownPerCentDigits {
                get {
                    XElement x = this.GetElement(nUnknownPerCentDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nUnknownPerCentDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// mass per cent of water
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nWaterMassPerCent {
                get {
                    XElement x = this.GetElement(nWaterMassPerCentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nWaterMassPerCentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nWaterMassPerCentDigits {
                get {
                    XElement x = this.GetElement(nWaterMassPerCentDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nWaterMassPerCentDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// mole per cent of water
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nWaterMolPerCent {
                get {
                    XElement x = this.GetElement(nWaterMolPerCentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nWaterMolPerCentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nWaterMolPerCentDigits {
                get {
                    XElement x = this.GetElement(nWaterMolPerCentDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nWaterMolPerCentDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// mass per cent of halide impurity
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nHalideMolPerCent {
                get {
                    XElement x = this.GetElement(nHalideMolPerCentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nHalideMolPerCentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nHalideMolPerCentDigits {
                get {
                    XElement x = this.GetElement(nHalideMolPerCentDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nHalideMolPerCentDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// mass per cent of halide impurity
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Single? nHalideMassPerCent {
                get {
                    XElement x = this.GetElement(nHalideMassPerCentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nHalideMassPerCentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nHalideMassPerCentDigits {
                get {
                    XElement x = this.GetElement(nHalideMassPerCentDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nHalideMassPerCentDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Analytical method used to determine purity
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual IList<string> eAnalMeth {
                get {
                    if ((this.eAnalMethField == null)) {
                        this.eAnalMethField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, eAnalMethXName);
                    }
                    return this.eAnalMethField;
                }
                set {
                    if ((value == null)) {
                        this.eAnalMethField = null;
                    }
                    else {
                        if ((this.eAnalMethField == null)) {
                            this.eAnalMethField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, eAnalMethXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.eAnalMethField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nStep, ePurifMethod*, sPurifMethod*, (nPurityMol, nPurityMolDigits)?, (nPurityMass, nPurityMassDigits)?, (nPurityVol, nPurityVolDigits)?, (nUnknownPerCent, nUnknownPerCentDigits)?, (nWaterMassPerCent, nWaterMassPerCentDigits)?, (nWaterMolPerCent, nWaterMolPerCentDigits)?, (nHalideMolPerCent, nHalideMolPerCentDigits)?, (nHalideMassPerCent, nHalideMassPerCentDigits)?, eAnalMeth*, sAnalMeth*)
            /// </para>
            /// </summary>
            public virtual IList<string> sAnalMeth {
                get {
                    if ((this.sAnalMethField == null)) {
                        this.sAnalMethField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sAnalMethXName);
                    }
                    return this.sAnalMethField;
                }
                set {
                    if ((value == null)) {
                        this.sAnalMethField = null;
                    }
                    else {
                        if ((this.sAnalMethField == null)) {
                            this.sAnalMethField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sAnalMethXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.sAnalMethField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<purityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nStepXName, typeof(decimal));
                localElementDictionary.Add(ePurifMethodXName, typeof(string));
                localElementDictionary.Add(sPurifMethodXName, typeof(string));
                localElementDictionary.Add(nPurityMolXName, typeof(float));
                localElementDictionary.Add(nPurityMolDigitsXName, typeof(decimal));
                localElementDictionary.Add(nPurityMassXName, typeof(float));
                localElementDictionary.Add(nPurityMassDigitsXName, typeof(decimal));
                localElementDictionary.Add(nPurityVolXName, typeof(float));
                localElementDictionary.Add(nPurityVolDigitsXName, typeof(decimal));
                localElementDictionary.Add(nUnknownPerCentXName, typeof(float));
                localElementDictionary.Add(nUnknownPerCentDigitsXName, typeof(decimal));
                localElementDictionary.Add(nWaterMassPerCentXName, typeof(float));
                localElementDictionary.Add(nWaterMassPerCentDigitsXName, typeof(decimal));
                localElementDictionary.Add(nWaterMolPerCentXName, typeof(float));
                localElementDictionary.Add(nWaterMolPerCentDigitsXName, typeof(decimal));
                localElementDictionary.Add(nHalideMolPerCentXName, typeof(float));
                localElementDictionary.Add(nHalideMolPerCentDigitsXName, typeof(decimal));
                localElementDictionary.Add(nHalideMassPerCentXName, typeof(float));
                localElementDictionary.Add(nHalideMassPerCentDigitsXName, typeof(decimal));
                localElementDictionary.Add(eAnalMethXName, typeof(string));
                localElementDictionary.Add(sAnalMethXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum, nSampleNm)
        /// </para>
        /// </summary>
        public partial class ComponentSampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ComponentSample", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ComponentSampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentSampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ComponentSampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nSampleNmXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm)
            /// </para>
            /// </summary>
            public ComponentSampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm)
            /// </para>
            /// </summary>
            public virtual decimal nSampleNm {
                get {
                    XElement x = this.GetElement(nSampleNmXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ComponentSampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(nSampleNmXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
    /// </para>
    /// </summary>
    public partial class PureOrMixtureData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nPureOrMixtureDataNumberXName = System.Xml.Linq.XName.Get("nPureOrMixtureDataNumber", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComponentXName = System.Xml.Linq.XName.Get("Component", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComponentLocalType> ComponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuxiliarySubstanceXName = System.Xml.Linq.XName.Get("AuxiliarySubstance", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AuxiliarySubstanceLocalType> AuxiliarySubstanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eExpPurposeXName = System.Xml.Linq.XName.Get("eExpPurpose", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCompilerXName = System.Xml.Linq.XName.Get("sCompiler", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sContributorXName = System.Xml.Linq.XName.Get("sContributor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateDateAddedXName = System.Xml.Linq.XName.Get("dateDateAdded", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PhaseIDXName = System.Xml.Linq.XName.Get("PhaseID", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PhaseIDLocalType> PhaseIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConstraintXName = System.Xml.Linq.XName.Get("Constraint", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConstraintLocalType> ConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableXName = System.Xml.Linq.XName.Get("Variable", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableLocalType> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumValuesXName = System.Xml.Linq.XName.Get("NumValues", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NumValues> NumValuesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EquationXName = System.Xml.Linq.XName.Get("Equation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Equation> EquationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PureOrMixtureData", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PureOrMixtureData(XElement xe) { return XTypedServices.ToXTypedElement<PureOrMixtureData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PureOrMixtureData() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPureOrMixtureDataNumberXName), new NamedContentModelEntity(ComponentXName), new NamedContentModelEntity(AuxiliarySubstanceXName), new NamedContentModelEntity(eExpPurposeXName), new NamedContentModelEntity(sCompilerXName), new NamedContentModelEntity(sContributorXName), new NamedContentModelEntity(dateDateAddedXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PhaseIDXName), new NamedContentModelEntity(ConstraintXName), new NamedContentModelEntity(VariableXName), new NamedContentModelEntity(NumValuesXName), new NamedContentModelEntity(EquationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public PureOrMixtureData() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nPureOrMixtureDataNumber {
            get {
                XElement x = this.GetElement(nPureOrMixtureDataNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nPureOrMixtureDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.ComponentLocalType> Component {
            get {
                if ((this.ComponentField == null)) {
                    this.ComponentField = new XTypedList<ComponentLocalType>(this, LinqToXsdTypeManager.Instance, ComponentXName);
                }
                return this.ComponentField;
            }
            set {
                if ((value == null)) {
                    this.ComponentField = null;
                }
                else {
                    if ((this.ComponentField == null)) {
                        this.ComponentField = XTypedList<ComponentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComponentXName);
                    }
                    else {
                        XTypedServices.SetList<ComponentLocalType>(this.ComponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.AuxiliarySubstanceLocalType> AuxiliarySubstance {
            get {
                if ((this.AuxiliarySubstanceField == null)) {
                    this.AuxiliarySubstanceField = new XTypedList<AuxiliarySubstanceLocalType>(this, LinqToXsdTypeManager.Instance, AuxiliarySubstanceXName);
                }
                return this.AuxiliarySubstanceField;
            }
            set {
                if ((value == null)) {
                    this.AuxiliarySubstanceField = null;
                }
                else {
                    if ((this.AuxiliarySubstanceField == null)) {
                        this.AuxiliarySubstanceField = XTypedList<AuxiliarySubstanceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AuxiliarySubstanceXName);
                    }
                    else {
                        XTypedServices.SetList<AuxiliarySubstanceLocalType>(this.AuxiliarySubstanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Purpose of measurement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string eExpPurpose {
            get {
                XElement x = this.GetElement(eExpPurposeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eExpPurposeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eExpPurposeXName, value, "eExpPurpose", global::www.iupac.org.namespaces.ThermoML.eExpPurpose.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string sCompiler {
            get {
                XElement x = this.GetElement(sCompilerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCompilerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string sContributor {
            get {
                XElement x = this.GetElement(sContributorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sContributorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual XTypedElement dateDateAdded {
            get {
                XElement x = this.GetElement(dateDateAddedXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(dateDateAddedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  CASRN is necessary for mixtures only
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PhaseIDLocalType> PhaseID {
            get {
                if ((this.PhaseIDField == null)) {
                    this.PhaseIDField = new XTypedList<PhaseIDLocalType>(this, LinqToXsdTypeManager.Instance, PhaseIDXName);
                }
                return this.PhaseIDField;
            }
            set {
                if ((value == null)) {
                    this.PhaseIDField = null;
                }
                else {
                    if ((this.PhaseIDField == null)) {
                        this.PhaseIDField = XTypedList<PhaseIDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PhaseIDXName);
                    }
                    else {
                        XTypedServices.SetList<PhaseIDLocalType>(this.PhaseIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.ConstraintLocalType> Constraint {
            get {
                if ((this.ConstraintField == null)) {
                    this.ConstraintField = new XTypedList<ConstraintLocalType>(this, LinqToXsdTypeManager.Instance, ConstraintXName);
                }
                return this.ConstraintField;
            }
            set {
                if ((value == null)) {
                    this.ConstraintField = null;
                }
                else {
                    if ((this.ConstraintField == null)) {
                        this.ConstraintField = XTypedList<ConstraintLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<ConstraintLocalType>(this.ConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.VariableLocalType> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<VariableLocalType>(this, LinqToXsdTypeManager.Instance, VariableXName);
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<VariableLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableXName);
                    }
                    else {
                        XTypedServices.SetList<VariableLocalType>(this.VariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<NumValues> NumValues {
            get {
                if ((this.NumValuesField == null)) {
                    this.NumValuesField = new XTypedList<NumValues>(this, LinqToXsdTypeManager.Instance, NumValuesXName);
                }
                return this.NumValuesField;
            }
            set {
                if ((value == null)) {
                    this.NumValuesField = null;
                }
                else {
                    if ((this.NumValuesField == null)) {
                        this.NumValuesField = XTypedList<NumValues>.Initialize(this, LinqToXsdTypeManager.Instance, value, NumValuesXName);
                    }
                    else {
                        XTypedServices.SetList<NumValues>(this.NumValuesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nPureOrMixtureDataNumber?, Component+, AuxiliarySubstance*, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, Property+, PhaseID+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<Equation> Equation {
            get {
                if ((this.EquationField == null)) {
                    this.EquationField = new XTypedList<Equation>(this, LinqToXsdTypeManager.Instance, EquationXName);
                }
                return this.EquationField;
            }
            set {
                if ((value == null)) {
                    this.EquationField = null;
                }
                else {
                    if ((this.EquationField == null)) {
                        this.EquationField = XTypedList<Equation>.Initialize(this, LinqToXsdTypeManager.Instance, value, EquationXName);
                    }
                    else {
                        XTypedServices.SetList<Equation>(this.EquationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PureOrMixtureData Load(string xmlFile) {
            return XTypedServices.Load<PureOrMixtureData>(xmlFile);
        }
        
        public static PureOrMixtureData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PureOrMixtureData>(xmlFile);
        }
        
        public static PureOrMixtureData Parse(string xml) {
            return XTypedServices.Parse<PureOrMixtureData>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PureOrMixtureData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nPureOrMixtureDataNumberXName, typeof(decimal));
            localElementDictionary.Add(ComponentXName, typeof(ComponentLocalType));
            localElementDictionary.Add(AuxiliarySubstanceXName, typeof(AuxiliarySubstanceLocalType));
            localElementDictionary.Add(eExpPurposeXName, typeof(string));
            localElementDictionary.Add(sCompilerXName, typeof(string));
            localElementDictionary.Add(sContributorXName, typeof(string));
            localElementDictionary.Add(dateDateAddedXName, typeof(XTypedElement));
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PhaseIDXName, typeof(PhaseIDLocalType));
            localElementDictionary.Add(ConstraintXName, typeof(ConstraintLocalType));
            localElementDictionary.Add(VariableXName, typeof(VariableLocalType));
            localElementDictionary.Add(NumValuesXName, typeof(NumValues));
            localElementDictionary.Add(EquationXName, typeof(Equation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum, nSampleNm?)
        /// </para>
        /// </summary>
        public partial class ComponentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Component", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ComponentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ComponentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ComponentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nSampleNmXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public ComponentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual System.Int32? nSampleNm {
                get {
                    XElement x = this.GetElement(nSampleNmXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ComponentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(nSampleNmXName, typeof(int));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
        /// </para>
        /// </summary>
        public partial class AuxiliarySubstanceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eFunctionXName = System.Xml.Linq.XName.Get("eFunction", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sFunctionXName = System.Xml.Linq.XName.Get("sFunction", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuxiliarySubstance", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AuxiliarySubstanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AuxiliarySubstanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AuxiliarySubstanceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(eFunctionXName), new NamedContentModelEntity(sFunctionXName)), new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nSampleNmXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public AuxiliarySubstanceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual www.iupac.org.namespaces.ThermoML.PureOrMixtureData.AuxiliarySubstanceLocalType.eFunctionEnum? eFunction {
                get {
                    XElement x = this.GetElement(eFunctionXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((www.iupac.org.namespaces.ThermoML.PureOrMixtureData.AuxiliarySubstanceLocalType.eFunctionEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.PureOrMixtureData.AuxiliarySubstanceLocalType.eFunctionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    if (value == null) {
                        this.SetElement(eFunctionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eFunctionXName, value.ToString(), "eFunction", eFunctionEnumValidator.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual string sFunction {
                get {
                    XElement x = this.GetElement(sFunctionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sFunctionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?)
            /// </para>
            /// </summary>
            public virtual System.Int32? nSampleNm {
                get {
                    XElement x = this.GetElement(nSampleNmXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AuxiliarySubstanceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(eFunctionXName, typeof(string));
                localElementDictionary.Add(sFunctionXName, typeof(string));
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(nSampleNmXName, typeof(int));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public enum eFunctionEnum {
                
                Buffer,
                
                Solvent,
                
                Inert,
            }
            
            private class eFunctionEnumValidator {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Buffer",
                                "Solvent",
                                "Inert"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eFunctionEnumValidator() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
        /// </para>
        /// </summary>
        public partial class PropertyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropNumberXName = System.Xml.Linq.XName.Get("nPropNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropertyMethodIDXName = System.Xml.Linq.XName.Get("Property-MethodID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropPhaseIDXName = System.Xml.Linq.XName.Get("PropPhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropPhaseIDLocalType> PropPhaseIDField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePresentationXName = System.Xml.Linq.XName.Get("ePresentation", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eRefStateTypeXName = System.Xml.Linq.XName.Get("eRefStateType", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nRefTempXName = System.Xml.Linq.XName.Get("nRefTemp", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nRefTempDigitsXName = System.Xml.Linq.XName.Get("nRefTempDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nRefPressureXName = System.Xml.Linq.XName.Get("nRefPressure", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nRefPressureDigitsXName = System.Xml.Linq.XName.Get("nRefPressureDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RefPhaseIDXName = System.Xml.Linq.XName.Get("RefPhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SolventXName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eStandardStateXName = System.Xml.Linq.XName.Get("eStandardState", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CombinedUncertaintyXName = System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CombinedUncertainty> CombinedUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropUncertaintyXName = System.Xml.Linq.XName.Get("PropUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropVarUncertaintyType> PropUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropRepeatabilityXName = System.Xml.Linq.XName.Get("PropRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropDeviceSpecXName = System.Xml.Linq.XName.Get("PropDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CurveDevXName = System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CurveDev> CurveDevField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PropertyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPropNumberXName), new NamedContentModelEntity(PropertyMethodIDXName), new NamedContentModelEntity(PropPhaseIDXName), new NamedContentModelEntity(ePresentationXName), new NamedContentModelEntity(eRefStateTypeXName), new SequenceContentModelEntity(new NamedContentModelEntity(nRefTempXName), new NamedContentModelEntity(nRefTempDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nRefPressureXName), new NamedContentModelEntity(nRefPressureDigitsXName)), new NamedContentModelEntity(RefPhaseIDXName), new NamedContentModelEntity(SolventXName), new NamedContentModelEntity(eStandardStateXName), new NamedContentModelEntity(CombinedUncertaintyXName), new NamedContentModelEntity(PropUncertaintyXName), new NamedContentModelEntity(PropRepeatabilityXName), new NamedContentModelEntity(PropDeviceSpecXName), new NamedContentModelEntity(CurveDevXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual decimal nPropNumber {
                get {
                    XElement x = this.GetElement(nPropNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPropNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropertyMethodIDLocalType PropertyMethodID {
                get {
                    XElement x = this.GetElement(PropertyMethodIDXName);
                    return ((PropertyMethodIDLocalType)(x));
                }
                set {
                    this.SetElement(PropertyMethodIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PropertyLocalType.PropPhaseIDLocalType> PropPhaseID {
                get {
                    if ((this.PropPhaseIDField == null)) {
                        this.PropPhaseIDField = new XTypedList<PropPhaseIDLocalType>(this, LinqToXsdTypeManager.Instance, PropPhaseIDXName);
                    }
                    return this.PropPhaseIDField;
                }
                set {
                    if ((value == null)) {
                        this.PropPhaseIDField = null;
                    }
                    else {
                        if ((this.PropPhaseIDField == null)) {
                            this.PropPhaseIDField = XTypedList<PropPhaseIDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropPhaseIDXName);
                        }
                        else {
                            XTypedServices.SetList<PropPhaseIDLocalType>(this.PropPhaseIDField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual string ePresentation {
                get {
                    XElement x = this.GetElement(ePresentationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ePresentationXName, value, "ePresentation", global::www.iupac.org.namespaces.ThermoML.ePresentation.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual string eRefStateType {
                get {
                    XElement x = this.GetElement(eRefStateTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(eRefStateTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eRefStateTypeXName, value, "eRefStateType", global::www.iupac.org.namespaces.ThermoML.eRefStateType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Single? nRefTemp {
                get {
                    XElement x = this.GetElement(nRefTempXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nRefTempXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nRefTempDigits {
                get {
                    XElement x = this.GetElement(nRefTempDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nRefTempDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Single? nRefPressure {
                get {
                    XElement x = this.GetElement(nRefPressureXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nRefPressureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nRefPressureDigits {
                get {
                    XElement x = this.GetElement(nRefPressureDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nRefPressureDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual RefPhaseIDLocalType RefPhaseID {
                get {
                    XElement x = this.GetElement(RefPhaseIDXName);
                    return ((RefPhaseIDLocalType)(x));
                }
                set {
                    this.SetElement(RefPhaseIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual Solvent Solvent {
                get {
                    XElement x = this.GetElement(SolventXName);
                    return ((Solvent)(x));
                }
                set {
                    this.SetElement(SolventXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual string eStandardState {
                get {
                    XElement x = this.GetElement(eStandardStateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(eStandardStateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eStandardStateXName, value, "eStandardState", eStandardStateLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<CombinedUncertainty> CombinedUncertainty {
                get {
                    if ((this.CombinedUncertaintyField == null)) {
                        this.CombinedUncertaintyField = new XTypedList<CombinedUncertainty>(this, LinqToXsdTypeManager.Instance, CombinedUncertaintyXName);
                    }
                    return this.CombinedUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.CombinedUncertaintyField = null;
                    }
                    else {
                        if ((this.CombinedUncertaintyField == null)) {
                            this.CombinedUncertaintyField = XTypedList<CombinedUncertainty>.Initialize(this, LinqToXsdTypeManager.Instance, value, CombinedUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<CombinedUncertainty>(this.CombinedUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<PropVarUncertaintyType> PropUncertainty {
                get {
                    if ((this.PropUncertaintyField == null)) {
                        this.PropUncertaintyField = new XTypedList<PropVarUncertaintyType>(this, LinqToXsdTypeManager.Instance, PropUncertaintyXName);
                    }
                    return this.PropUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.PropUncertaintyField = null;
                    }
                    else {
                        if ((this.PropUncertaintyField == null)) {
                            this.PropUncertaintyField = XTypedList<PropVarUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<PropVarUncertaintyType>(this.PropUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropVarRepeatabilityType PropRepeatability {
                get {
                    XElement x = this.GetElement(PropRepeatabilityXName);
                    return ((PropVarRepeatabilityType)(x));
                }
                set {
                    this.SetElement(PropRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropVarDeviceSpecType PropDeviceSpec {
                get {
                    XElement x = this.GetElement(PropDeviceSpecXName);
                    return ((PropVarDeviceSpecType)(x));
                }
                set {
                    this.SetElement(PropDeviceSpecXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, PropPhaseID*, ePresentation, eRefStateType?, (nRefTemp, nRefTempDigits)?, (nRefPressure, nRefPressureDigits)?, RefPhaseID?, Solvent?, eStandardState?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<CurveDev> CurveDev {
                get {
                    if ((this.CurveDevField == null)) {
                        this.CurveDevField = new XTypedList<CurveDev>(this, LinqToXsdTypeManager.Instance, CurveDevXName);
                    }
                    return this.CurveDevField;
                }
                set {
                    if ((value == null)) {
                        this.CurveDevField = null;
                    }
                    else {
                        if ((this.CurveDevField == null)) {
                            this.CurveDevField = XTypedList<CurveDev>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurveDevXName);
                        }
                        else {
                            XTypedServices.SetList<CurveDev>(this.CurveDevField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPropNumberXName, typeof(decimal));
                localElementDictionary.Add(PropertyMethodIDXName, typeof(PropertyMethodIDLocalType));
                localElementDictionary.Add(PropPhaseIDXName, typeof(PropPhaseIDLocalType));
                localElementDictionary.Add(ePresentationXName, typeof(string));
                localElementDictionary.Add(eRefStateTypeXName, typeof(string));
                localElementDictionary.Add(nRefTempXName, typeof(float));
                localElementDictionary.Add(nRefTempDigitsXName, typeof(decimal));
                localElementDictionary.Add(nRefPressureXName, typeof(float));
                localElementDictionary.Add(nRefPressureDigitsXName, typeof(decimal));
                localElementDictionary.Add(RefPhaseIDXName, typeof(RefPhaseIDLocalType));
                localElementDictionary.Add(SolventXName, typeof(Solvent));
                localElementDictionary.Add(eStandardStateXName, typeof(string));
                localElementDictionary.Add(CombinedUncertaintyXName, typeof(CombinedUncertainty));
                localElementDictionary.Add(PropUncertaintyXName, typeof(PropVarUncertaintyType));
                localElementDictionary.Add(PropRepeatabilityXName, typeof(PropVarRepeatabilityType));
                localElementDictionary.Add(PropDeviceSpecXName, typeof(PropVarDeviceSpecType));
                localElementDictionary.Add(CurveDevXName, typeof(CurveDev));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PropertyGroup, RegNum?)
            /// </para>
            /// </summary>
            public partial class PropertyMethodIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PropertyGroupXName = System.Xml.Linq.XName.Get("PropertyGroup", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property-MethodID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropertyMethodIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyMethodIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropertyMethodIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyGroupXName), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (PropertyGroup, RegNum?)
                /// </para>
                /// </summary>
                public PropertyMethodIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (PropertyGroup, RegNum?)
                /// </para>
                /// </summary>
                public virtual PropertyGroupLocalType PropertyGroup {
                    get {
                        XElement x = this.GetElement(PropertyGroupXName);
                        return ((PropertyGroupLocalType)(x));
                    }
                    set {
                        this.SetElement(PropertyGroupXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (PropertyGroup, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropertyMethodIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(PropertyGroupXName, typeof(PropertyGroupLocalType));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                /// </para>
                /// </summary>
                public partial class PropertyGroupLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CriticalsXName = System.Xml.Linq.XName.Get("Criticals", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName VaporPBoilingTAzeotropTandPXName = System.Xml.Linq.XName.Get("VaporPBoilingTAzeotropTandP", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName PhaseTransitionXName = System.Xml.Linq.XName.Get("PhaseTransition", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CompositionAtPhaseEquilibriumXName = System.Xml.Linq.XName.Get("CompositionAtPhaseEquilibrium", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ActivityFugacityOsmoticPropXName = System.Xml.Linq.XName.Get("ActivityFugacityOsmoticProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName VolumetricPropXName = System.Xml.Linq.XName.Get("VolumetricProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName HeatCapacityAndDerivedPropXName = System.Xml.Linq.XName.Get("HeatCapacityAndDerivedProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ExcessPartialApparentEnergyPropXName = System.Xml.Linq.XName.Get("ExcessPartialApparentEnergyProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TransportPropXName = System.Xml.Linq.XName.Get("TransportProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName RefractionSurfaceTensionSoundSpeedXName = System.Xml.Linq.XName.Get("RefractionSurfaceTensionSoundSpeed", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BioPropertiesXName = System.Xml.Linq.XName.Get("BioProperties", "http://www.iupac.org/namespaces/ThermoML");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyGroup", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator PropertyGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static PropertyGroupLocalType() {
                        BuildElementDictionary();
                        contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(CriticalsXName), new NamedContentModelEntity(VaporPBoilingTAzeotropTandPXName), new NamedContentModelEntity(PhaseTransitionXName), new NamedContentModelEntity(CompositionAtPhaseEquilibriumXName), new NamedContentModelEntity(ActivityFugacityOsmoticPropXName), new NamedContentModelEntity(VolumetricPropXName), new NamedContentModelEntity(HeatCapacityAndDerivedPropXName), new NamedContentModelEntity(ExcessPartialApparentEnergyPropXName), new NamedContentModelEntity(TransportPropXName), new NamedContentModelEntity(RefractionSurfaceTensionSoundSpeedXName), new NamedContentModelEntity(BioPropertiesXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public PropertyGroupLocalType() {
                    }
                    
                    public PropertyGroupLocalType(CriticalsLocalType Criticals) {
                        this.Criticals = Criticals;
                    }
                    
                    public PropertyGroupLocalType(VaporPBoilingTAzeotropTandPLocalType VaporPBoilingTAzeotropTandP) {
                        this.VaporPBoilingTAzeotropTandP = VaporPBoilingTAzeotropTandP;
                    }
                    
                    public PropertyGroupLocalType(PhaseTransitionLocalType PhaseTransition) {
                        this.PhaseTransition = PhaseTransition;
                    }
                    
                    public PropertyGroupLocalType(CompositionAtPhaseEquilibriumLocalType CompositionAtPhaseEquilibrium) {
                        this.CompositionAtPhaseEquilibrium = CompositionAtPhaseEquilibrium;
                    }
                    
                    public PropertyGroupLocalType(ActivityFugacityOsmoticPropLocalType ActivityFugacityOsmoticProp) {
                        this.ActivityFugacityOsmoticProp = ActivityFugacityOsmoticProp;
                    }
                    
                    public PropertyGroupLocalType(VolumetricPropLocalType VolumetricProp) {
                        this.VolumetricProp = VolumetricProp;
                    }
                    
                    public PropertyGroupLocalType(HeatCapacityAndDerivedPropLocalType HeatCapacityAndDerivedProp) {
                        this.HeatCapacityAndDerivedProp = HeatCapacityAndDerivedProp;
                    }
                    
                    public PropertyGroupLocalType(ExcessPartialApparentEnergyPropLocalType ExcessPartialApparentEnergyProp) {
                        this.ExcessPartialApparentEnergyProp = ExcessPartialApparentEnergyProp;
                    }
                    
                    public PropertyGroupLocalType(TransportPropLocalType TransportProp) {
                        this.TransportProp = TransportProp;
                    }
                    
                    public PropertyGroupLocalType(RefractionSurfaceTensionSoundSpeedLocalType RefractionSurfaceTensionSoundSpeed) {
                        this.RefractionSurfaceTensionSoundSpeed = RefractionSurfaceTensionSoundSpeed;
                    }
                    
                    public PropertyGroupLocalType(BioPropertiesLocalType BioProperties) {
                        this.BioProperties = BioProperties;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual CriticalsLocalType Criticals {
                        get {
                            XElement x = this.GetElement(CriticalsXName);
                            return ((CriticalsLocalType)(x));
                        }
                        set {
                            this.SetElement(CriticalsXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual VaporPBoilingTAzeotropTandPLocalType VaporPBoilingTAzeotropTandP {
                        get {
                            XElement x = this.GetElement(VaporPBoilingTAzeotropTandPXName);
                            return ((VaporPBoilingTAzeotropTandPLocalType)(x));
                        }
                        set {
                            this.SetElement(VaporPBoilingTAzeotropTandPXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual PhaseTransitionLocalType PhaseTransition {
                        get {
                            XElement x = this.GetElement(PhaseTransitionXName);
                            return ((PhaseTransitionLocalType)(x));
                        }
                        set {
                            this.SetElement(PhaseTransitionXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual CompositionAtPhaseEquilibriumLocalType CompositionAtPhaseEquilibrium {
                        get {
                            XElement x = this.GetElement(CompositionAtPhaseEquilibriumXName);
                            return ((CompositionAtPhaseEquilibriumLocalType)(x));
                        }
                        set {
                            this.SetElement(CompositionAtPhaseEquilibriumXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual ActivityFugacityOsmoticPropLocalType ActivityFugacityOsmoticProp {
                        get {
                            XElement x = this.GetElement(ActivityFugacityOsmoticPropXName);
                            return ((ActivityFugacityOsmoticPropLocalType)(x));
                        }
                        set {
                            this.SetElement(ActivityFugacityOsmoticPropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual VolumetricPropLocalType VolumetricProp {
                        get {
                            XElement x = this.GetElement(VolumetricPropXName);
                            return ((VolumetricPropLocalType)(x));
                        }
                        set {
                            this.SetElement(VolumetricPropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual HeatCapacityAndDerivedPropLocalType HeatCapacityAndDerivedProp {
                        get {
                            XElement x = this.GetElement(HeatCapacityAndDerivedPropXName);
                            return ((HeatCapacityAndDerivedPropLocalType)(x));
                        }
                        set {
                            this.SetElement(HeatCapacityAndDerivedPropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual ExcessPartialApparentEnergyPropLocalType ExcessPartialApparentEnergyProp {
                        get {
                            XElement x = this.GetElement(ExcessPartialApparentEnergyPropXName);
                            return ((ExcessPartialApparentEnergyPropLocalType)(x));
                        }
                        set {
                            this.SetElement(ExcessPartialApparentEnergyPropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual TransportPropLocalType TransportProp {
                        get {
                            XElement x = this.GetElement(TransportPropXName);
                            return ((TransportPropLocalType)(x));
                        }
                        set {
                            this.SetElement(TransportPropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual RefractionSurfaceTensionSoundSpeedLocalType RefractionSurfaceTensionSoundSpeed {
                        get {
                            XElement x = this.GetElement(RefractionSurfaceTensionSoundSpeedXName);
                            return ((RefractionSurfaceTensionSoundSpeedLocalType)(x));
                        }
                        set {
                            this.SetElement(RefractionSurfaceTensionSoundSpeedXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (Criticals | VaporPBoilingTAzeotropTandP | PhaseTransition | CompositionAtPhaseEquilibrium | ActivityFugacityOsmoticProp | VolumetricProp | HeatCapacityAndDerivedProp | ExcessPartialApparentEnergyProp | TransportProp | RefractionSurfaceTensionSoundSpeed | BioProperties)
                    /// </para>
                    /// </summary>
                    public virtual BioPropertiesLocalType BioProperties {
                        get {
                            XElement x = this.GetElement(BioPropertiesXName);
                            return ((BioPropertiesLocalType)(x));
                        }
                        set {
                            this.SetElement(BioPropertiesXName, value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<PropertyGroupLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(CriticalsXName, typeof(CriticalsLocalType));
                        localElementDictionary.Add(VaporPBoilingTAzeotropTandPXName, typeof(VaporPBoilingTAzeotropTandPLocalType));
                        localElementDictionary.Add(PhaseTransitionXName, typeof(PhaseTransitionLocalType));
                        localElementDictionary.Add(CompositionAtPhaseEquilibriumXName, typeof(CompositionAtPhaseEquilibriumLocalType));
                        localElementDictionary.Add(ActivityFugacityOsmoticPropXName, typeof(ActivityFugacityOsmoticPropLocalType));
                        localElementDictionary.Add(VolumetricPropXName, typeof(VolumetricPropLocalType));
                        localElementDictionary.Add(HeatCapacityAndDerivedPropXName, typeof(HeatCapacityAndDerivedPropLocalType));
                        localElementDictionary.Add(ExcessPartialApparentEnergyPropXName, typeof(ExcessPartialApparentEnergyPropLocalType));
                        localElementDictionary.Add(TransportPropXName, typeof(TransportPropLocalType));
                        localElementDictionary.Add(RefractionSurfaceTensionSoundSpeedXName, typeof(RefractionSurfaceTensionSoundSpeedLocalType));
                        localElementDictionary.Add(BioPropertiesXName, typeof(BioPropertiesLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class CriticalsLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Criticals", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator CriticalsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CriticalsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static CriticalsLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public CriticalsLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<CriticalsLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Critical temperature, K",
                                            "Critical pressure, kPa",
                                            "Critical density, kg/m3",
                                            "Critical molar volume, m3/mol",
                                            "Critical specific volume, m3/kg",
                                            "Critical compressibility factor",
                                            "Lower consolute temperature, K",
                                            "Upper consolute temperature, K",
                                            "Lower consolute pressure, kPa",
                                            "Upper consolute pressure, kPa"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Visual observation in an unstirred cell",
                                            "Visual observation in a stirred cell",
                                            "DSC/DTA",
                                            "Derived from PVT data",
                                            "Extrapolated vapor pressure",
                                            "Rectilinear diameter",
                                            "Relative permittivity measurements",
                                            "Refractive index measurements",
                                            "Direct measurement",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class VaporPBoilingTAzeotropTandPLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VaporPBoilingTAzeotropTandP", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator VaporPBoilingTAzeotropTandPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VaporPBoilingTAzeotropTandPLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static VaporPBoilingTAzeotropTandPLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public VaporPBoilingTAzeotropTandPLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<VaporPBoilingTAzeotropTandPLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Vapor or sublimation pressure, kPa",
                                            "Normal boiling temperature, K",
                                            "Boiling temperature at pressure P, K",
                                            "Azeotropic pressure, kPa",
                                            "Azeotropic temperature, K"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Manometric method",
                                            "Closed cell (Static) method",
                                            "Diaphragm manometer",
                                            "Inclined piston gauge",
                                            "Isochoric PVT apparatus",
                                            "Isoteniscope",
                                            "Knudsen effusion method",
                                            "Distillation",
                                            "Ebulliometric method (Recirculating still)",
                                            "Twin ebulliometer",
                                            "Transpiration method",
                                            "Rate of evaporation",
                                            "Torsion effusion method",
                                            "Gas chromatography",
                                            "Laser pulse heating",
                                            "Levitation methods",
                                            "By X=Y",
                                            "By P(X) extreme",
                                            "By T(X) extreme",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class PhaseTransitionLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PhaseTransition", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator PhaseTransitionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PhaseTransitionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static PhaseTransitionLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public PhaseTransitionLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<PhaseTransitionLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Triple point temperature, K",
                                            "Triple point pressure, kPa",
                                            "Normal melting temperature, K",
                                            "Molar enthalpy of transition or fusion, kJ/mol",
                                            "Molar entropy of transition or fusion, J/K/mol",
                                            "Cryoscopic constant (mole fraction scale), 1/K",
                                            "Cryoscopic constant (molality scale), kg/mol/K",
                                            "Molar enthalpy of vaporization or sublimation, kJ/mol",
                                            "Molar entropy of vaporization or sublimation, J/K/mol",
                                            "Molar Gibbs energy of vaporization or sublimation, kJ/mol",
                                            "Quadruple (quintuple) point temperature, K",
                                            "Quadruple (quintuple) point pressure, kPa",
                                            "Solid-liquid equilibrium temperature, K",
                                            "Liquid-liquid equilibrium temperature, K",
                                            "Phase boundary pressure, kPa",
                                            "Eutectic temperature, K",
                                            "Peritectic temperature, K",
                                            "Monotectic temperature, K",
                                            "Molar lattice energy at 0 K, kJ/mol"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Visual observation",
                                            "Heating/Cooling curves",
                                            "DSC/DTA",
                                            "Adiabatic calorimetry",
                                            "Large-sample thermal analysis",
                                            "Drop calorimetry",
                                            "Drop ice or diphenyl ether calorimetry",
                                            "Obtained from cryoscopic constant",
                                            "Derived from phase diagram analysis",
                                            "Static calorimetry",
                                            "Flow calorimetry",
                                            "Derived by Second law",
                                            "Derived by Second law from precise ebulliometry",
                                            "Depression of a freezing temperature of a dilute solution",
                                            "AC calorimetry",
                                            "Resistive pulse heating",
                                            "Laser pulse heating",
                                            "Levitation methods",
                                            "Correlation gas chromatography",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class CompositionAtPhaseEquilibriumLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CompositionAtPhaseEquilibrium", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator CompositionAtPhaseEquilibriumLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CompositionAtPhaseEquilibriumLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static CompositionAtPhaseEquilibriumLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public CompositionAtPhaseEquilibriumLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<CompositionAtPhaseEquilibriumLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Azeotropic composition: mole fraction",
                                            "Azeotropic composition: mass fraction",
                                            "Eutectic composition: mole fraction",
                                            "Eutectic composition: mass fraction",
                                            "Eutectic composition: volume fraction",
                                            "Monotectic composition: mole fraction",
                                            "Monotectic composition: mass fraction",
                                            "Lower consolute composition: volume fraction",
                                            "Lower consolute composition: mole fraction",
                                            "Lower consolute composition: mass fraction",
                                            "Mass concentration, kg/m3",
                                            "Ratio of amount of solute to mass of solution, mol/kg",
                                            "Mass ratio of solute to solvent",
                                            "Molality, mol/kg",
                                            "Amount concentration (molarity), mol/dm3",
                                            "Mole fraction",
                                            "Mole fraction in LLG critical state",
                                            "Amount ratio of solute to solvent",
                                            "Upper consolute composition: volume fraction",
                                            "Upper consolute composition: mole fraction",
                                            "Upper consolute composition: mass fraction",
                                            "Volume fraction",
                                            "Volume ratio of solute to solvent",
                                            "Mass fraction",
                                            "Mass fraction in LLG critical state",
                                            "Henry\'s Law constant (mole fraction scale), kPa",
                                            "Henry\'s Law constant (molality scale), kPa*kg/mol",
                                            "Henry\'s Law constant (amount concentration scale), kPa*dm3/mol",
                                            "Bunsen coefficient",
                                            "Ostwald coefficient",
                                            "Partial pressure, kPa"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "By X=Y",
                                            "By T or P extreme",
                                            "Chromatography",
                                            "Spectrophotometry",
                                            "Density calibration data",
                                            "Index of refraction calibration data",
                                            "Speed of sound calibration data",
                                            "Calculated by Gibbs-Duhem equation",
                                            "Titration method",
                                            "Phase equilibration",
                                            "Derived from phase diagram analysis",
                                            "Photoacoustic method",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class ActivityFugacityOsmoticPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityFugacityOsmoticProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator ActivityFugacityOsmoticPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityFugacityOsmoticPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ActivityFugacityOsmoticPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public ActivityFugacityOsmoticPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ActivityFugacityOsmoticPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "(Relative) activity",
                                            "Activity coefficient",
                                            "Mean ionic activity coefficient",
                                            "Mean ionic activity, (mol/dm3)^n",
                                            "Fugacity, kPa",
                                            "Fugacity coefficient",
                                            "Osmotic pressure, kPa",
                                            "Osmotic coefficient"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Chromatography",
                                            "Differential ebulliometry",
                                            "Spectroscopy",
                                            "Mass-spectrometry",
                                            "NMR spectrometry",
                                            "Static method",
                                            "Isopiestic method",
                                            "Potential difference of an electrochemical cell",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class VolumetricPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VolumetricProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator VolumetricPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VolumetricPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static VolumetricPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public VolumetricPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<VolumetricPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Mass density, kg/m3",
                                            "Specific volume, m3/kg",
                                            "Amount density, mol/m3",
                                            "Molar volume, m3/mol",
                                            "2nd virial coefficient, m3/mol",
                                            "2nd acoustic virial coefficient, m3/mol",
                                            "3rd virial coefficient, m6/mol2",
                                            "3rd acoustic virial coefficient, m6/mol2",
                                            "3rd interaction virial coefficient C112, m6/mol2",
                                            "3rd interaction virial coefficient C122, m6/mol2",
                                            "Excess virial coefficient, m3/mol",
                                            "Interaction virial coefficient, m3/mol",
                                            "Excess molar volume, m3/mol",
                                            "Partial molar volume, m3/mol",
                                            "Relative partial molar volume, m3/mol",
                                            "Apparent molar volume, m3/mol",
                                            "Adiabatic compressibility, 1/kPa",
                                            "Excess adiabatic compressibility, 1/kPa",
                                            "Isothermal compressibility, 1/kPa",
                                            "Excess isothermal compressibility, 1/kPa",
                                            "Isobaric coefficient of expansion, 1/K",
                                            "Excess coefficient of expansion, 1/K",
                                            "Compressibility factor",
                                            "Thermal pressure coefficient, kPa/K"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Pycnometric method",
                                            "X-ray diffraction",
                                            "Buoyancy - hydrostatic balance",
                                            "Buoyancy - magnetic float or magnetic suspension",
                                            "Buoyancy - hydrostatic balance with magnetic float",
                                            "Buoyancy - hydrostatic balance with magnetic suspension - one sinker",
                                            "Buoyancy - hydrostatic balance with magnetic suspension - two sinkers",
                                            "Vibrating tube method",
                                            "Isochoric PVT measurement",
                                            "Other PVT measurement",
                                            "Burnett expansion method",
                                            "Constant-volume piezometry",
                                            "Hydrostatic balance",
                                            "Bellows volumetry",
                                            "Derived from speed of sound",
                                            "Resistive pulse heating",
                                            "Laser pulse heating",
                                            "Levitation methods",
                                            "Direct dilatometry",
                                            "Derived analytically",
                                            "Derived graphically",
                                            "Calculated with densities of this investigation",
                                            "Calculated with a solvent density reported elsewhere",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class HeatCapacityAndDerivedPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HeatCapacityAndDerivedProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator HeatCapacityAndDerivedPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeatCapacityAndDerivedPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static HeatCapacityAndDerivedPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public HeatCapacityAndDerivedPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<HeatCapacityAndDerivedPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Molar heat capacity at constant pressure, J/K/mol",
                                            "Specific heat capacity at constant pressure, J/K/kg",
                                            "Heat capacity at constant pressure per volume, J/K/m3",
                                            "Molar heat capacity at saturation pressure, J/K/mol",
                                            "Specific heat capacity at saturation pressure, J/K/kg",
                                            "Heat capacity at saturation pressure per volume, J/K/m3",
                                            "Molar heat capacity at constant volume, J/K/mol",
                                            "Specific heat capacity at constant volume, J/K/kg",
                                            "Heat capacity at constant volume per volume, J/K/m3",
                                            "Heat capacity ratio cp/cv",
                                            "Molar entropy, J/K/mol",
                                            "Molar enthalpy, kJ/mol",
                                            "Molar enthalpy function {Hm(T)-Hm(0)}/T, J/K/mol",
                                            "Molar Gibbs energy function {Gm(T)-Hm(0)}/T, J/K/mol",
                                            "Molar Gibbs energy function {Gm(T)-Hm(298.15)}/T, J/K/mol",
                                            "Molar Gibbs energy, kJ/mol",
                                            "Molar Helmholtz energy, kJ/mol",
                                            "Molar internal energy, kJ/mol",
                                            "Joule-Thomson coefficient, K/kPa",
                                            "Pressure coefficient of molar enthalpy, J/kPa/mol"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Vacuum adiabatic calorimetry",
                                            "Small (less than 1 g) adiabatic calorimetry",
                                            "Flow calorimetry",
                                            "Large sample (1 g) DSC",
                                            "Small sample (50 mg) DSC",
                                            "Drop calorimetry",
                                            "Drop ice or diphenyl ether calorimetry",
                                            "Open cup calorimetry",
                                            "Closed cup calorimetry",
                                            "Differential flow calorimetry",
                                            "Extra sensitive DSC",
                                            "Twin closed calorimetry",
                                            "Thin-film microcalorimeter",
                                            "AC calorimetry",
                                            "Resistive pulse heating",
                                            "Laser pulse heating",
                                            "Levitation methods",
                                            "Derived from speed of sound",
                                            "Derived from equation of state",
                                            "Expansion technique",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class ExcessPartialApparentEnergyPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExcessPartialApparentEnergyProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator ExcessPartialApparentEnergyPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExcessPartialApparentEnergyPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ExcessPartialApparentEnergyPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public ExcessPartialApparentEnergyPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ExcessPartialApparentEnergyPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Apparent molar enthalpy, kJ/mol",
                                            "Apparent molar entropy, J/K/mol",
                                            "Apparent molar Gibbs energy, kJ/mol",
                                            "Apparent molar heat capacity, J/K/mol",
                                            "Excess molar enthalpy (molar enthalpy of mixing), kJ/mol",
                                            "Molar enthalpy of mixing with solvent, kJ/mol",
                                            "Molar enthalpy of solution, kJ/mol",
                                            "Molar enthalpy of dilution, kJ/mol",
                                            "Excess molar entropy, J/K/mol",
                                            "Excess molar Gibbs energy, kJ/mol",
                                            "Excess molar heat capacity, J/K/mol",
                                            "Partial molar enthalpy, kJ/mol",
                                            "Partial molar entropy, J/K/mol",
                                            "Partial molar Gibbs energy, kJ/mol",
                                            "Partial molar heat capacity, J/K/mol",
                                            "Relative partial molar enthalpy, kJ/mol",
                                            "Relative partial molar entropy, J/K/mol",
                                            "Relative partial molar Gibbs energy, kJ/mol",
                                            "Relative partial molar heat capacity, J/K/mol",
                                            "Standard state molar enthalpy, kJ/mol",
                                            "Standard state molar entropy, J/K/mol",
                                            "Standard state molar Gibbs energy, kJ/mol",
                                            "Standard state molar heat capacity, J/K/mol"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Vacuum adiabatic calorimetry",
                                            "Small (less than 1 g) adiabatic calorimetry",
                                            "Flow calorimetry",
                                            "Differential flow calorimetry",
                                            "Calvet calorimetry",
                                            "Large sample (1 g) DSC",
                                            "Small sample (50 mg) DSC",
                                            "Extra sensitive DSC",
                                            "Twin closed calorimetry",
                                            "Isoperibol calorimetry",
                                            "Isothermal displacement",
                                            "Power-compensation calorimetry",
                                            "Titration calorimetry",
                                            "Potential difference of an electrochemical cell",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class TransportPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransportProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator TransportPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TransportPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static TransportPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public TransportPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<TransportPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Viscosity, Pa*s",
                                            "Excess viscosity, Pa*s",
                                            "Kinematic viscosity, m2/s",
                                            "Fluidity, 1/Pa/s",
                                            "Thermal conductivity, W/m/K",
                                            "Thermal diffusivity, m2/s",
                                            "Binary diffusion coefficient, m2/s",
                                            "Self diffusion coefficient, m2/s",
                                            "Tracer diffusion coefficient, m2/s",
                                            "Electrical conductivity, S/m",
                                            "Molar conductivity, S*m2/mol",
                                            "Transport number"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Capillary tube (Ostwald; Ubbelohde) method",
                                            "Cone and plate viscometry",
                                            "Concentric cylinders viscometry",
                                            "Falling or rolling sphere viscometry",
                                            "Moving piston method",
                                            "Oscillating disk viscometry",
                                            "Vibrating wire viscometry",
                                            "Parallel plate method",
                                            "Coaxial cylinder method",
                                            "Hot wire method",
                                            "Optical interferometry",
                                            "Dispersion",
                                            "Diaphragm Cell",
                                            "Open capillary",
                                            "Closed capillary",
                                            "Taylor dispersion method",
                                            "NMR spin-echo technique",
                                            "Hot disk method",
                                            "Resistive pulse heating",
                                            "Laser pulse heating",
                                            "Levitation methods",
                                            "Alternating current cell with electrodes",
                                            "Direct current cell with electrodes",
                                            "Voltage change across transformer (no electrode)",
                                            "Gouy interferometer",
                                            "Lamb interferometer",
                                            "Oscillating sinker",
                                            "Speed of sound measurements",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class RefractionSurfaceTensionSoundSpeedLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RefractionSurfaceTensionSoundSpeed", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator RefractionSurfaceTensionSoundSpeedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RefractionSurfaceTensionSoundSpeedLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static RefractionSurfaceTensionSoundSpeedLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public RefractionSurfaceTensionSoundSpeedLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<RefractionSurfaceTensionSoundSpeedLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Refractive index (Na D-line)",
                                            "Excess refractive index (Na D-line)",
                                            "Refractive index (other wavelength)",
                                            "Excess refractive index (other wavelength)",
                                            "Relative permittivity at zero frequency",
                                            "Excess relative permittivity at zero frequency",
                                            "Relative permittivity at various frequencies",
                                            "Complex relative permittivity (Real part) at various frequencies",
                                            "Complex relative permittivity (Imaginary part) at various frequencies",
                                            "Surface tension liquid-gas, N/m",
                                            "Excess surface tension liquid-gas, N/m",
                                            "Interfacial tension, N/m",
                                            "Speed of sound, m/s",
                                            "Excess speed of sound, m/s"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Standard Abbe refractometry",
                                            "Precision Abbe refractometry",
                                            "Dipping refractometry (monochromatic)",
                                            "Interferometer",
                                            "Capillary rise",
                                            "Drop weight",
                                            "Drop volume",
                                            "Maximal bubble pressure",
                                            "Pendant drop shape",
                                            "Ring tensiometer",
                                            "Linear variable-path acoustic interferometer",
                                            "Sing-around technique in a fixed-path interferometer",
                                            "Annular interferometer",
                                            "Pulse-echo method",
                                            "Spherical resonator",
                                            "Light diffraction method",
                                            "Parallel plate capacitor",
                                            "Coaxial cylinder capacitor",
                                            "Cross capacitor",
                                            "Reentrant cavity resonator",
                                            "Coaxial line",
                                            "Wave guide",
                                            "Far infrared free space",
                                            "Single path-length method",
                                            "Dual path-length method",
                                            "Multiple path-length method",
                                            "Cylindrical cavity resonance method",
                                            "Spherical cavity resonance method",
                                            "Toroidal cavity resonance method",
                                            "Levitation methods",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class BioPropertiesLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BioProperties", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator BioPropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BioPropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static BioPropertiesLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public BioPropertiesLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string sMethodName {
                            get {
                                XElement x = this.GetElement(sMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(sMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<BioPropertiesLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Temperature of 1/2 conversion, K",
                                            "Peak temperature, K",
                                            "Zero-Gibbs energy temperature, K",
                                            "Heat capacity change at transition, J/K/mol",
                                            "van\'t Hoff enthalpy of transition, kJ/mol"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "DSC/DTA"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
            /// </para>
            /// </summary>
            public partial class PropPhaseIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ePropPhaseXName = System.Xml.Linq.XName.Get("ePropPhase", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eBioStateXName = System.Xml.Linq.XName.Get("eBioState", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sBioStateXName = System.Xml.Linq.XName.Get("sBioState", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropPhaseID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropPhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropPhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropPhaseIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropPhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eBioStateXName), new NamedContentModelEntity(sBioStateXName)));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public PropPhaseIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual string ePropPhase {
                    get {
                        XElement x = this.GetElement(ePropPhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(ePropPhaseXName, value, "ePropPhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                    get {
                        XElement x = this.GetElement(eCrystalLatticeTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual string sPhaseDescription {
                    get {
                        XElement x = this.GetElement(sPhaseDescriptionXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                ///  CASRN is necessary for mixtures only
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PropertyLocalType.PropPhaseIDLocalType.eBioStateEnum? eBioState {
                    get {
                        XElement x = this.GetElement(eBioStateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PropertyLocalType.PropPhaseIDLocalType.eBioStateEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.PureOrMixtureData.PropertyLocalType.PropPhaseIDLocalType.eBioStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eBioStateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eBioStateXName, value.ToString(), "eBioState", eBioStateEnumValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (ePropPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?, (eBioState | sBioState)?)
                /// </para>
                /// </summary>
                public virtual string sBioState {
                    get {
                        XElement x = this.GetElement(sBioStateXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sBioStateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropPhaseIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(ePropPhaseXName, typeof(string));
                    localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                    localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                    localElementDictionary.Add(eBioStateXName, typeof(string));
                    localElementDictionary.Add(sBioStateXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                public enum eBioStateEnum {
                    
                    Native,
                    
                    Denaturated,
                }
                
                private class eBioStateEnumValidator {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "Native",
                                    "Denaturated"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private eBioStateEnumValidator() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public partial class RefPhaseIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eRefPhaseXName = System.Xml.Linq.XName.Get("eRefPhase", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RefPhaseID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator RefPhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RefPhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static RefPhaseIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eRefPhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public RefPhaseIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string eRefPhase {
                    get {
                        XElement x = this.GetElement(eRefPhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(eRefPhaseXName, value, "eRefPhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                    get {
                        XElement x = this.GetElement(eCrystalLatticeTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string sPhaseDescription {
                    get {
                        XElement x = this.GetElement(sPhaseDescriptionXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (eRefPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<RefPhaseIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(eRefPhaseXName, typeof(string));
                    localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                    localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            private class eStandardStateLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Pure compound",
                                "Pure liquid solute",
                                "Standard molality (1 mol/kg) solute",
                                "Standard concentration (1 mol/dm3) solute",
                                "Infinite dilution solute"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eStandardStateLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
        /// </para>
        /// </summary>
        public partial class PhaseIDLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PhaseIDLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public PhaseIDLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public virtual string ePhase {
                get {
                    XElement x = this.GetElement(ePhaseXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                get {
                    XElement x = this.GetElement(eCrystalLatticeTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    if (value == null) {
                        this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public virtual string sPhaseDescription {
                get {
                    XElement x = this.GetElement(sPhaseDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ePhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PhaseIDLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ePhaseXName, typeof(string));
                localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
        /// </para>
        /// </summary>
        public partial class ConstraintLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstraintNumberXName = System.Xml.Linq.XName.Get("nConstraintNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstraintIDXName = System.Xml.Linq.XName.Get("ConstraintID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstraintPhaseIDXName = System.Xml.Linq.XName.Get("ConstraintPhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SolventXName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstraintValueXName = System.Xml.Linq.XName.Get("nConstraintValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstrDigitsXName = System.Xml.Linq.XName.Get("nConstrDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrUncertaintyXName = System.Xml.Linq.XName.Get("ConstrUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ConstrUncertaintyType> ConstrUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrRepeatabilityXName = System.Xml.Linq.XName.Get("ConstrRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrDeviceSpecXName = System.Xml.Linq.XName.Get("ConstrDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Constraint", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ConstraintLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ConstraintLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nConstraintNumberXName), new NamedContentModelEntity(ConstraintIDXName), new NamedContentModelEntity(ConstraintPhaseIDXName), new NamedContentModelEntity(SolventXName), new NamedContentModelEntity(nConstraintValueXName), new NamedContentModelEntity(nConstrDigitsXName), new NamedContentModelEntity(ConstrUncertaintyXName), new NamedContentModelEntity(ConstrRepeatabilityXName), new NamedContentModelEntity(ConstrDeviceSpecXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public ConstraintLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nConstraintNumber {
                get {
                    XElement x = this.GetElement(nConstraintNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nConstraintNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstraintIDLocalType ConstraintID {
                get {
                    XElement x = this.GetElement(ConstraintIDXName);
                    return ((ConstraintIDLocalType)(x));
                }
                set {
                    this.SetElement(ConstraintIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstraintPhaseIDLocalType ConstraintPhaseID {
                get {
                    XElement x = this.GetElement(ConstraintPhaseIDXName);
                    return ((ConstraintPhaseIDLocalType)(x));
                }
                set {
                    this.SetElement(ConstraintPhaseIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual Solvent Solvent {
                get {
                    XElement x = this.GetElement(SolventXName);
                    return ((Solvent)(x));
                }
                set {
                    this.SetElement(SolventXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual float nConstraintValue {
                get {
                    XElement x = this.GetElement(nConstraintValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nConstraintValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual decimal nConstrDigits {
                get {
                    XElement x = this.GetElement(nConstrDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nConstrDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual IList<ConstrUncertaintyType> ConstrUncertainty {
                get {
                    if ((this.ConstrUncertaintyField == null)) {
                        this.ConstrUncertaintyField = new XTypedList<ConstrUncertaintyType>(this, LinqToXsdTypeManager.Instance, ConstrUncertaintyXName);
                    }
                    return this.ConstrUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.ConstrUncertaintyField = null;
                    }
                    else {
                        if ((this.ConstrUncertaintyField == null)) {
                            this.ConstrUncertaintyField = XTypedList<ConstrUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstrUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<ConstrUncertaintyType>(this.ConstrUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstrRepeatabilityType ConstrRepeatability {
                get {
                    XElement x = this.GetElement(ConstrRepeatabilityXName);
                    return ((ConstrRepeatabilityType)(x));
                }
                set {
                    this.SetElement(ConstrRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, ConstraintPhaseID?, Solvent?, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstrDeviceSpecType ConstrDeviceSpec {
                get {
                    XElement x = this.GetElement(ConstrDeviceSpecXName);
                    return ((ConstrDeviceSpecType)(x));
                }
                set {
                    this.SetElement(ConstrDeviceSpecXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ConstraintLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nConstraintNumberXName, typeof(decimal));
                localElementDictionary.Add(ConstraintIDXName, typeof(ConstraintIDLocalType));
                localElementDictionary.Add(ConstraintPhaseIDXName, typeof(ConstraintPhaseIDLocalType));
                localElementDictionary.Add(SolventXName, typeof(Solvent));
                localElementDictionary.Add(nConstraintValueXName, typeof(float));
                localElementDictionary.Add(nConstrDigitsXName, typeof(decimal));
                localElementDictionary.Add(ConstrUncertaintyXName, typeof(ConstrUncertaintyType));
                localElementDictionary.Add(ConstrRepeatabilityXName, typeof(ConstrRepeatabilityType));
                localElementDictionary.Add(ConstrDeviceSpecXName, typeof(ConstrDeviceSpecType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ConstraintType, RegNum?)
            /// </para>
            /// </summary>
            public partial class ConstraintIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ConstraintTypeXName = System.Xml.Linq.XName.Get("ConstraintType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstraintID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ConstraintIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ConstraintIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConstraintTypeXName), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public ConstraintIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public virtual ConstraintVariableType ConstraintType {
                    get {
                        XElement x = this.GetElement(ConstraintTypeXName);
                        return ((ConstraintVariableType)(x));
                    }
                    set {
                        this.SetElement(ConstraintTypeXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ConstraintIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(ConstraintTypeXName, typeof(ConstraintVariableType));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public partial class ConstraintPhaseIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eConstraintPhaseXName = System.Xml.Linq.XName.Get("eConstraintPhase", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstraintPhaseID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ConstraintPhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintPhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ConstraintPhaseIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eConstraintPhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public ConstraintPhaseIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string eConstraintPhase {
                    get {
                        XElement x = this.GetElement(eConstraintPhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(eConstraintPhaseXName, value, "eConstraintPhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                    get {
                        XElement x = this.GetElement(eCrystalLatticeTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string sPhaseDescription {
                    get {
                        XElement x = this.GetElement(sPhaseDescriptionXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (eConstraintPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ConstraintPhaseIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(eConstraintPhaseXName, typeof(string));
                    localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                    localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
        /// </para>
        /// </summary>
        public partial class VariableLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarNumberXName = System.Xml.Linq.XName.Get("nVarNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VariableIDXName = System.Xml.Linq.XName.Get("VariableID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarPhaseIDXName = System.Xml.Linq.XName.Get("VarPhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SolventXName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarUncertaintyXName = System.Xml.Linq.XName.Get("VarUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropVarUncertaintyType> VarUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarRepeatabilityXName = System.Xml.Linq.XName.Get("VarRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarDeviceSpecXName = System.Xml.Linq.XName.Get("VarDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Variable", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VariableLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VariableLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nVarNumberXName), new NamedContentModelEntity(VariableIDXName), new NamedContentModelEntity(VarPhaseIDXName), new NamedContentModelEntity(SolventXName), new NamedContentModelEntity(VarUncertaintyXName), new NamedContentModelEntity(VarRepeatabilityXName), new NamedContentModelEntity(VarDeviceSpecXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public VariableLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual decimal nVarNumber {
                get {
                    XElement x = this.GetElement(nVarNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVarNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual VariableIDLocalType VariableID {
                get {
                    XElement x = this.GetElement(VariableIDXName);
                    return ((VariableIDLocalType)(x));
                }
                set {
                    this.SetElement(VariableIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  CASRN is necessary for mixtures only
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual VarPhaseIDLocalType VarPhaseID {
                get {
                    XElement x = this.GetElement(VarPhaseIDXName);
                    return ((VarPhaseIDLocalType)(x));
                }
                set {
                    this.SetElement(VarPhaseIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual Solvent Solvent {
                get {
                    XElement x = this.GetElement(SolventXName);
                    return ((Solvent)(x));
                }
                set {
                    this.SetElement(SolventXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual IList<PropVarUncertaintyType> VarUncertainty {
                get {
                    if ((this.VarUncertaintyField == null)) {
                        this.VarUncertaintyField = new XTypedList<PropVarUncertaintyType>(this, LinqToXsdTypeManager.Instance, VarUncertaintyXName);
                    }
                    return this.VarUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.VarUncertaintyField = null;
                    }
                    else {
                        if ((this.VarUncertaintyField == null)) {
                            this.VarUncertaintyField = XTypedList<PropVarUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VarUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<PropVarUncertaintyType>(this.VarUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual PropVarRepeatabilityType VarRepeatability {
                get {
                    XElement x = this.GetElement(VarRepeatabilityXName);
                    return ((PropVarRepeatabilityType)(x));
                }
                set {
                    this.SetElement(VarRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, Solvent?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual PropVarDeviceSpecType VarDeviceSpec {
                get {
                    XElement x = this.GetElement(VarDeviceSpecXName);
                    return ((PropVarDeviceSpecType)(x));
                }
                set {
                    this.SetElement(VarDeviceSpecXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VariableLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nVarNumberXName, typeof(decimal));
                localElementDictionary.Add(VariableIDXName, typeof(VariableIDLocalType));
                localElementDictionary.Add(VarPhaseIDXName, typeof(VarPhaseIDLocalType));
                localElementDictionary.Add(SolventXName, typeof(Solvent));
                localElementDictionary.Add(VarUncertaintyXName, typeof(PropVarUncertaintyType));
                localElementDictionary.Add(VarRepeatabilityXName, typeof(PropVarRepeatabilityType));
                localElementDictionary.Add(VarDeviceSpecXName, typeof(PropVarDeviceSpecType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (VariableType, RegNum?)
            /// </para>
            /// </summary>
            public partial class VariableIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName VariableTypeXName = System.Xml.Linq.XName.Get("VariableType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VariableID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VariableIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VariableIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VariableTypeXName), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public VariableIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public virtual ConstraintVariableType VariableType {
                    get {
                        XElement x = this.GetElement(VariableTypeXName);
                        return ((ConstraintVariableType)(x));
                    }
                    set {
                        this.SetElement(VariableTypeXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VariableIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(VariableTypeXName, typeof(ConstraintVariableType));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public partial class VarPhaseIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eVarPhaseXName = System.Xml.Linq.XName.Get("eVarPhase", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VarPhaseID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VarPhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VarPhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VarPhaseIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eVarPhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public VarPhaseIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string eVarPhase {
                    get {
                        XElement x = this.GetElement(eVarPhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(eVarPhaseXName, value, "eVarPhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                    get {
                        XElement x = this.GetElement(eCrystalLatticeTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string sPhaseDescription {
                    get {
                        XElement x = this.GetElement(sPhaseDescriptionXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VarPhaseIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(eVarPhaseXName, typeof(string));
                    localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                    localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
    /// </para>
    /// </summary>
    public partial class ReactionData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nReactionDataNumberXName = System.Xml.Linq.XName.Get("nReactionDataNumber", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParticipantXName = System.Xml.Linq.XName.Get("Participant", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParticipantLocalType> ParticipantField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nElectronNumberXName = System.Xml.Linq.XName.Get("nElectronNumber", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuxiliarySubstanceXName = System.Xml.Linq.XName.Get("AuxiliarySubstance", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AuxiliarySubstanceLocalType> AuxiliarySubstanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolventXName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SolventLocalType> SolventField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eReactionFormalismXName = System.Xml.Linq.XName.Get("eReactionFormalism", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eExpPurposeXName = System.Xml.Linq.XName.Get("eExpPurpose", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCompilerXName = System.Xml.Linq.XName.Get("sCompiler", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sContributorXName = System.Xml.Linq.XName.Get("sContributor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateDateAddedXName = System.Xml.Linq.XName.Get("dateDateAdded", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eReactionTypeXName = System.Xml.Linq.XName.Get("eReactionType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConstraintXName = System.Xml.Linq.XName.Get("Constraint", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConstraintLocalType> ConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableXName = System.Xml.Linq.XName.Get("Variable", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableLocalType> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumValuesXName = System.Xml.Linq.XName.Get("NumValues", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NumValues> NumValuesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EquationXName = System.Xml.Linq.XName.Get("Equation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Equation> EquationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReactionData", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReactionData(XElement xe) { return XTypedServices.ToXTypedElement<ReactionData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReactionData() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nReactionDataNumberXName), new NamedContentModelEntity(ParticipantXName), new NamedContentModelEntity(nElectronNumberXName), new NamedContentModelEntity(AuxiliarySubstanceXName), new NamedContentModelEntity(SolventXName), new NamedContentModelEntity(eReactionFormalismXName), new NamedContentModelEntity(eExpPurposeXName), new NamedContentModelEntity(sCompilerXName), new NamedContentModelEntity(sContributorXName), new NamedContentModelEntity(dateDateAddedXName), new NamedContentModelEntity(eReactionTypeXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ConstraintXName), new NamedContentModelEntity(VariableXName), new NamedContentModelEntity(NumValuesXName), new NamedContentModelEntity(EquationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public ReactionData() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nReactionDataNumber {
            get {
                XElement x = this.GetElement(nReactionDataNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nReactionDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.ParticipantLocalType> Participant {
            get {
                if ((this.ParticipantField == null)) {
                    this.ParticipantField = new XTypedList<ParticipantLocalType>(this, LinqToXsdTypeManager.Instance, ParticipantXName);
                }
                return this.ParticipantField;
            }
            set {
                if ((value == null)) {
                    this.ParticipantField = null;
                }
                else {
                    if ((this.ParticipantField == null)) {
                        this.ParticipantField = XTypedList<ParticipantLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParticipantXName);
                    }
                    else {
                        XTypedServices.SetList<ParticipantLocalType>(this.ParticipantField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nElectronNumber {
            get {
                XElement x = this.GetElement(nElectronNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nElectronNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.AuxiliarySubstanceLocalType> AuxiliarySubstance {
            get {
                if ((this.AuxiliarySubstanceField == null)) {
                    this.AuxiliarySubstanceField = new XTypedList<AuxiliarySubstanceLocalType>(this, LinqToXsdTypeManager.Instance, AuxiliarySubstanceXName);
                }
                return this.AuxiliarySubstanceField;
            }
            set {
                if ((value == null)) {
                    this.AuxiliarySubstanceField = null;
                }
                else {
                    if ((this.AuxiliarySubstanceField == null)) {
                        this.AuxiliarySubstanceField = XTypedList<AuxiliarySubstanceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AuxiliarySubstanceXName);
                    }
                    else {
                        XTypedServices.SetList<AuxiliarySubstanceLocalType>(this.AuxiliarySubstanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.SolventLocalType> Solvent {
            get {
                if ((this.SolventField == null)) {
                    this.SolventField = new XTypedList<SolventLocalType>(this, LinqToXsdTypeManager.Instance, SolventXName);
                }
                return this.SolventField;
            }
            set {
                if ((value == null)) {
                    this.SolventField = null;
                }
                else {
                    if ((this.SolventField == null)) {
                        this.SolventField = XTypedList<SolventLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SolventXName);
                    }
                    else {
                        XTypedServices.SetList<SolventLocalType>(this.SolventField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual www.iupac.org.namespaces.ThermoML.ReactionData.eReactionFormalismEnum? eReactionFormalism {
            get {
                XElement x = this.GetElement(eReactionFormalismXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.iupac.org.namespaces.ThermoML.ReactionData.eReactionFormalismEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.ReactionData.eReactionFormalismEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(eReactionFormalismXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eReactionFormalismXName, value.ToString(), "eReactionFormalism", eReactionFormalismEnumValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Purpose of measurement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string eExpPurpose {
            get {
                XElement x = this.GetElement(eExpPurposeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eExpPurposeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eExpPurposeXName, value, "eExpPurpose", global::www.iupac.org.namespaces.ThermoML.eExpPurpose.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string sCompiler {
            get {
                XElement x = this.GetElement(sCompilerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCompilerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string sContributor {
            get {
                XElement x = this.GetElement(sContributorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sContributorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual XTypedElement dateDateAdded {
            get {
                XElement x = this.GetElement(dateDateAddedXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(dateDateAddedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual string eReactionType {
            get {
                XElement x = this.GetElement(eReactionTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eReactionTypeXName, value, "eReactionType", eReactionTypeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Only for reactions in equilibrium
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.ConstraintLocalType> Constraint {
            get {
                if ((this.ConstraintField == null)) {
                    this.ConstraintField = new XTypedList<ConstraintLocalType>(this, LinqToXsdTypeManager.Instance, ConstraintXName);
                }
                return this.ConstraintField;
            }
            set {
                if ((value == null)) {
                    this.ConstraintField = null;
                }
                else {
                    if ((this.ConstraintField == null)) {
                        this.ConstraintField = XTypedList<ConstraintLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<ConstraintLocalType>(this.ConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Only for reactions in equilibrium
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.VariableLocalType> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<VariableLocalType>(this, LinqToXsdTypeManager.Instance, VariableXName);
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<VariableLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableXName);
                    }
                    else {
                        XTypedServices.SetList<VariableLocalType>(this.VariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<NumValues> NumValues {
            get {
                if ((this.NumValuesField == null)) {
                    this.NumValuesField = new XTypedList<NumValues>(this, LinqToXsdTypeManager.Instance, NumValuesXName);
                }
                return this.NumValuesField;
            }
            set {
                if ((value == null)) {
                    this.NumValuesField = null;
                }
                else {
                    if ((this.NumValuesField == null)) {
                        this.NumValuesField = XTypedList<NumValues>.Initialize(this, LinqToXsdTypeManager.Instance, value, NumValuesXName);
                    }
                    else {
                        XTypedServices.SetList<NumValues>(this.NumValuesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (nReactionDataNumber?, Participant+, nElectronNumber?, AuxiliarySubstance*, Solvent*, eReactionFormalism?, eExpPurpose?, sCompiler?, sContributor?, dateDateAdded?, eReactionType, Property+, Constraint*, Variable*, NumValues*, Equation*)
        /// </para>
        /// </summary>
        public virtual IList<Equation> Equation {
            get {
                if ((this.EquationField == null)) {
                    this.EquationField = new XTypedList<Equation>(this, LinqToXsdTypeManager.Instance, EquationXName);
                }
                return this.EquationField;
            }
            set {
                if ((value == null)) {
                    this.EquationField = null;
                }
                else {
                    if ((this.EquationField == null)) {
                        this.EquationField = XTypedList<Equation>.Initialize(this, LinqToXsdTypeManager.Instance, value, EquationXName);
                    }
                    else {
                        XTypedServices.SetList<Equation>(this.EquationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReactionData Load(string xmlFile) {
            return XTypedServices.Load<ReactionData>(xmlFile);
        }
        
        public static ReactionData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReactionData>(xmlFile);
        }
        
        public static ReactionData Parse(string xml) {
            return XTypedServices.Parse<ReactionData>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReactionData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nReactionDataNumberXName, typeof(decimal));
            localElementDictionary.Add(ParticipantXName, typeof(ParticipantLocalType));
            localElementDictionary.Add(nElectronNumberXName, typeof(decimal));
            localElementDictionary.Add(AuxiliarySubstanceXName, typeof(AuxiliarySubstanceLocalType));
            localElementDictionary.Add(SolventXName, typeof(SolventLocalType));
            localElementDictionary.Add(eReactionFormalismXName, typeof(string));
            localElementDictionary.Add(eExpPurposeXName, typeof(string));
            localElementDictionary.Add(sCompilerXName, typeof(string));
            localElementDictionary.Add(sContributorXName, typeof(string));
            localElementDictionary.Add(dateDateAddedXName, typeof(XTypedElement));
            localElementDictionary.Add(eReactionTypeXName, typeof(string));
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(ConstraintXName, typeof(ConstraintLocalType));
            localElementDictionary.Add(VariableXName, typeof(VariableLocalType));
            localElementDictionary.Add(NumValuesXName, typeof(NumValues));
            localElementDictionary.Add(EquationXName, typeof(Equation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum eReactionFormalismEnum {
            
            chemical,
            
            biochemical,
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
        /// </para>
        /// </summary>
        public partial class ParticipantLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nStoichiometricCoefXName = System.Xml.Linq.XName.Get("nStoichiometricCoef", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eStandardStateXName = System.Xml.Linq.XName.Get("eStandardState", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eCompositionRepresentationXName = System.Xml.Linq.XName.Get("eCompositionRepresentation", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nNumericalCompositionXName = System.Xml.Linq.XName.Get("nNumericalComposition", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Participant", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ParticipantLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ParticipantLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ParticipantLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nSampleNmXName), new NamedContentModelEntity(nStoichiometricCoefXName), new NamedContentModelEntity(ePhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(eStandardStateXName), new NamedContentModelEntity(eCompositionRepresentationXName), new NamedContentModelEntity(nNumericalCompositionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public ParticipantLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual System.Int32? nSampleNm {
                get {
                    XElement x = this.GetElement(nSampleNmXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual float nStoichiometricCoef {
                get {
                    XElement x = this.GetElement(nStoichiometricCoefXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nStoichiometricCoefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual string ePhase {
                get {
                    XElement x = this.GetElement(ePhaseXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                get {
                    XElement x = this.GetElement(eCrystalLatticeTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    if (value == null) {
                        this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual string sPhaseDescription {
                get {
                    XElement x = this.GetElement(sPhaseDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual string eStandardState {
                get {
                    XElement x = this.GetElement(eStandardStateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(eStandardStateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eStandardStateXName, value, "eStandardState", eStandardStateLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Only for reactions with the initial state change
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual string eCompositionRepresentation {
                get {
                    XElement x = this.GetElement(eCompositionRepresentationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(eCompositionRepresentationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eCompositionRepresentationXName, value, "eCompositionRepresentation", eCompositionRepresentationLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (RegNum, nSampleNm?, nStoichiometricCoef, ePhase, (eCrystalLatticeType | sPhaseDescription)?, eStandardState?, eCompositionRepresentation?, nNumericalComposition?)
            /// </para>
            /// </summary>
            public virtual System.Single? nNumericalComposition {
                get {
                    XElement x = this.GetElement(nNumericalCompositionXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nNumericalCompositionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ParticipantLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(nSampleNmXName, typeof(int));
                localElementDictionary.Add(nStoichiometricCoefXName, typeof(float));
                localElementDictionary.Add(ePhaseXName, typeof(string));
                localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                localElementDictionary.Add(eStandardStateXName, typeof(string));
                localElementDictionary.Add(eCompositionRepresentationXName, typeof(string));
                localElementDictionary.Add(nNumericalCompositionXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class eStandardStateLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Pure compound",
                                "Pure liquid solute",
                                "Standard molality (1 mol/kg) solute",
                                "Standard concentration (1 mol/dm3) solute",
                                "Infinite dilution solute"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eStandardStateLocalType() {
                }
            }
            
            private class eCompositionRepresentationLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Amount ratio of solvent to participant",
                                "Molality - amount of participant per mass of solvent, mol/kg",
                                "Amount of participant per mass of solution, mol/kg",
                                "Amount concentration - amount of participant per volume of solution, mol/dm3",
                                "Amount ratio of participant to solvent",
                                "Mass ratio of participant to solvent",
                                "Volume ratio of participant to solvent",
                                "Mass of participant per volume of solution, kg/m3"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eCompositionRepresentationLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
        /// </para>
        /// </summary>
        public partial class AuxiliarySubstanceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eFunctionXName = System.Xml.Linq.XName.Get("eFunction", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sFunctionXName = System.Xml.Linq.XName.Get("sFunction", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nSampleNmXName = System.Xml.Linq.XName.Get("nSampleNm", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuxiliarySubstance", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AuxiliarySubstanceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AuxiliarySubstanceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AuxiliarySubstanceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(eFunctionXName), new NamedContentModelEntity(sFunctionXName)), new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(nSampleNmXName), new NamedContentModelEntity(ePhaseXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public AuxiliarySubstanceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public virtual www.iupac.org.namespaces.ThermoML.ReactionData.AuxiliarySubstanceLocalType.eFunctionEnum? eFunction {
                get {
                    XElement x = this.GetElement(eFunctionXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((www.iupac.org.namespaces.ThermoML.ReactionData.AuxiliarySubstanceLocalType.eFunctionEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.ReactionData.AuxiliarySubstanceLocalType.eFunctionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    if (value == null) {
                        this.SetElement(eFunctionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eFunctionXName, value.ToString(), "eFunction", eFunctionEnumValidator.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public virtual string sFunction {
                get {
                    XElement x = this.GetElement(sFunctionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sFunctionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public virtual RegNum RegNum {
                get {
                    XElement x = this.GetElement(RegNumXName);
                    return ((RegNum)(x));
                }
                set {
                    this.SetElement(RegNumXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public virtual System.Int32? nSampleNm {
                get {
                    XElement x = this.GetElement(nSampleNmXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetElement(nSampleNmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((eFunction | sFunction)?, RegNum, nSampleNm?, ePhase?)
            /// </para>
            /// </summary>
            public virtual string ePhase {
                get {
                    XElement x = this.GetElement(ePhaseXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ePhaseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AuxiliarySubstanceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(eFunctionXName, typeof(string));
                localElementDictionary.Add(sFunctionXName, typeof(string));
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(nSampleNmXName, typeof(int));
                localElementDictionary.Add(ePhaseXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public enum eFunctionEnum {
                
                Cofactor,
                
                Buffer,
                
                Inert,
            }
            
            private class eFunctionEnumValidator {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Cofactor",
                                "Buffer",
                                "Inert"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eFunctionEnumValidator() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum+, ePhase)
        /// </para>
        /// </summary>
        public partial class SolventLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<RegNum> RegNumField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SolventLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SolventLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SolventLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(ePhaseXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum+, ePhase)
            /// </para>
            /// </summary>
            public SolventLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (RegNum+, ePhase)
            /// </para>
            /// </summary>
            public virtual IList<RegNum> RegNum {
                get {
                    if ((this.RegNumField == null)) {
                        this.RegNumField = new XTypedList<RegNum>(this, LinqToXsdTypeManager.Instance, RegNumXName);
                    }
                    return this.RegNumField;
                }
                set {
                    if ((value == null)) {
                        this.RegNumField = null;
                    }
                    else {
                        if ((this.RegNumField == null)) {
                            this.RegNumField = XTypedList<RegNum>.Initialize(this, LinqToXsdTypeManager.Instance, value, RegNumXName);
                        }
                        else {
                            XTypedServices.SetList<RegNum>(this.RegNumField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (RegNum+, ePhase)
            /// </para>
            /// </summary>
            public virtual string ePhase {
                get {
                    XElement x = this.GetElement(ePhaseXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SolventLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(RegNumXName, typeof(RegNum));
                localElementDictionary.Add(ePhaseXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        private class eReactionFormalismEnumValidator {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "chemical",
                            "biochemical"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eReactionFormalismEnumValidator() {
            }
        }
        
        private class eReactionTypeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Combustion with oxygen",
                            "Addition of various compounds to unsaturated compounds",
                            "Addition of water to a liquid or solid to produce a hydrate",
                            "Atomization (or formation from atoms)",
                            "Combustion with other elements or compounds",
                            "Esterification",
                            "Exchange of alkyl groups",
                            "Exchange of hydrogen (atoms) with other groups",
                            "Formation of a compound from elements in their stable state",
                            "Halogenation (addition of or replacement by a halogen)",
                            "Hydrogenation (addition of hydrogen to unsaturated compounds)",
                            "Hydrohalogenation",
                            "Hydrolysis of ions",
                            "Other reactions with water",
                            "Ion exchange",
                            "Neutralization (reaction of an acid with a base)",
                            "Oxidation with oxidizing agents other than oxygen",
                            "Oxidation with oxygen (not complete)",
                            "Polymerization (all other types)",
                            "Homonuclear dimerization",
                            "Solvolyis (solvents other than water)",
                            "Stereoisomerism",
                            "Structural isomerization",
                            "Formation of ion",
                            "Other reactions"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eReactionTypeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
        /// </para>
        /// </summary>
        public partial class PropertyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropNumberXName = System.Xml.Linq.XName.Get("nPropNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropertyMethodIDXName = System.Xml.Linq.XName.Get("Property-MethodID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SolventXName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CatalystXName = System.Xml.Linq.XName.Get("Catalyst", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CatalystLocalType> CatalystField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName eStandardStateXName = System.Xml.Linq.XName.Get("eStandardState", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nTemperatureKXName = System.Xml.Linq.XName.Get("nTemperature-K", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nTemperatureDigitsXName = System.Xml.Linq.XName.Get("nTemperatureDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPressurekPaXName = System.Xml.Linq.XName.Get("nPressure-kPa", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPressureDigitsXName = System.Xml.Linq.XName.Get("nPressureDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CombinedUncertaintyXName = System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CombinedUncertainty> CombinedUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropUncertaintyXName = System.Xml.Linq.XName.Get("PropUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropVarUncertaintyType> PropUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropRepeatabilityXName = System.Xml.Linq.XName.Get("PropRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropDeviceSpecXName = System.Xml.Linq.XName.Get("PropDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CurveDevXName = System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CurveDev> CurveDevField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PropertyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPropNumberXName), new NamedContentModelEntity(PropertyMethodIDXName), new NamedContentModelEntity(SolventXName), new NamedContentModelEntity(CatalystXName), new NamedContentModelEntity(eStandardStateXName), new SequenceContentModelEntity(new NamedContentModelEntity(nTemperatureKXName), new NamedContentModelEntity(nTemperatureDigitsXName)), new SequenceContentModelEntity(new NamedContentModelEntity(nPressurekPaXName), new NamedContentModelEntity(nPressureDigitsXName)), new NamedContentModelEntity(CombinedUncertaintyXName), new NamedContentModelEntity(PropUncertaintyXName), new NamedContentModelEntity(PropRepeatabilityXName), new NamedContentModelEntity(PropDeviceSpecXName), new NamedContentModelEntity(CurveDevXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual decimal nPropNumber {
                get {
                    XElement x = this.GetElement(nPropNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPropNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropertyMethodIDLocalType PropertyMethodID {
                get {
                    XElement x = this.GetElement(PropertyMethodIDXName);
                    return ((PropertyMethodIDLocalType)(x));
                }
                set {
                    this.SetElement(PropertyMethodIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual SolventLocalType Solvent {
                get {
                    XElement x = this.GetElement(SolventXName);
                    return ((SolventLocalType)(x));
                }
                set {
                    this.SetElement(SolventXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.ReactionData.PropertyLocalType.CatalystLocalType> Catalyst {
                get {
                    if ((this.CatalystField == null)) {
                        this.CatalystField = new XTypedList<CatalystLocalType>(this, LinqToXsdTypeManager.Instance, CatalystXName);
                    }
                    return this.CatalystField;
                }
                set {
                    if ((value == null)) {
                        this.CatalystField = null;
                    }
                    else {
                        if ((this.CatalystField == null)) {
                            this.CatalystField = XTypedList<CatalystLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CatalystXName);
                        }
                        else {
                            XTypedServices.SetList<CatalystLocalType>(this.CatalystField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual string eStandardState {
                get {
                    XElement x = this.GetElement(eStandardStateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(eStandardStateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(eStandardStateXName, value, "eStandardState", eStandardStateLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  Only for reactions with the initial state change
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Single? nTemperatureK {
                get {
                    XElement x = this.GetElement(nTemperatureKXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nTemperatureKXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nTemperatureDigits {
                get {
                    XElement x = this.GetElement(nTemperatureDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nTemperatureDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  Only for reactions with the initial state change
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Single? nPressurekPa {
                get {
                    XElement x = this.GetElement(nPressurekPaXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPressurekPaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPressureDigits {
                get {
                    XElement x = this.GetElement(nPressureDigitsXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPressureDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<CombinedUncertainty> CombinedUncertainty {
                get {
                    if ((this.CombinedUncertaintyField == null)) {
                        this.CombinedUncertaintyField = new XTypedList<CombinedUncertainty>(this, LinqToXsdTypeManager.Instance, CombinedUncertaintyXName);
                    }
                    return this.CombinedUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.CombinedUncertaintyField = null;
                    }
                    else {
                        if ((this.CombinedUncertaintyField == null)) {
                            this.CombinedUncertaintyField = XTypedList<CombinedUncertainty>.Initialize(this, LinqToXsdTypeManager.Instance, value, CombinedUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<CombinedUncertainty>(this.CombinedUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<PropVarUncertaintyType> PropUncertainty {
                get {
                    if ((this.PropUncertaintyField == null)) {
                        this.PropUncertaintyField = new XTypedList<PropVarUncertaintyType>(this, LinqToXsdTypeManager.Instance, PropUncertaintyXName);
                    }
                    return this.PropUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.PropUncertaintyField = null;
                    }
                    else {
                        if ((this.PropUncertaintyField == null)) {
                            this.PropUncertaintyField = XTypedList<PropVarUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<PropVarUncertaintyType>(this.PropUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropVarRepeatabilityType PropRepeatability {
                get {
                    XElement x = this.GetElement(PropRepeatabilityXName);
                    return ((PropVarRepeatabilityType)(x));
                }
                set {
                    this.SetElement(PropRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropVarDeviceSpecType PropDeviceSpec {
                get {
                    XElement x = this.GetElement(PropDeviceSpecXName);
                    return ((PropVarDeviceSpecType)(x));
                }
                set {
                    this.SetElement(PropDeviceSpecXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, PropertyMethodID, Solvent?, Catalyst*, eStandardState?, (nTemperatureK, nTemperatureDigits)?, (nPressurekPa, nPressureDigits)?, CombinedUncertainty*, PropUncertainty*, PropRepeatability?, PropDeviceSpec?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<CurveDev> CurveDev {
                get {
                    if ((this.CurveDevField == null)) {
                        this.CurveDevField = new XTypedList<CurveDev>(this, LinqToXsdTypeManager.Instance, CurveDevXName);
                    }
                    return this.CurveDevField;
                }
                set {
                    if ((value == null)) {
                        this.CurveDevField = null;
                    }
                    else {
                        if ((this.CurveDevField == null)) {
                            this.CurveDevField = XTypedList<CurveDev>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurveDevXName);
                        }
                        else {
                            XTypedServices.SetList<CurveDev>(this.CurveDevField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPropNumberXName, typeof(decimal));
                localElementDictionary.Add(PropertyMethodIDXName, typeof(PropertyMethodIDLocalType));
                localElementDictionary.Add(SolventXName, typeof(SolventLocalType));
                localElementDictionary.Add(CatalystXName, typeof(CatalystLocalType));
                localElementDictionary.Add(eStandardStateXName, typeof(string));
                localElementDictionary.Add(nTemperatureKXName, typeof(float));
                localElementDictionary.Add(nTemperatureDigitsXName, typeof(decimal));
                localElementDictionary.Add(nPressurekPaXName, typeof(float));
                localElementDictionary.Add(nPressureDigitsXName, typeof(decimal));
                localElementDictionary.Add(CombinedUncertaintyXName, typeof(CombinedUncertainty));
                localElementDictionary.Add(PropUncertaintyXName, typeof(PropVarUncertaintyType));
                localElementDictionary.Add(PropRepeatabilityXName, typeof(PropVarRepeatabilityType));
                localElementDictionary.Add(PropDeviceSpecXName, typeof(PropVarDeviceSpecType));
                localElementDictionary.Add(CurveDevXName, typeof(CurveDev));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PropertyGroup)
            /// </para>
            /// </summary>
            public partial class PropertyMethodIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PropertyGroupXName = System.Xml.Linq.XName.Get("PropertyGroup", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property-MethodID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropertyMethodIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyMethodIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropertyMethodIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyGroupXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (PropertyGroup)
                /// </para>
                /// </summary>
                public PropertyMethodIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (PropertyGroup)
                /// </para>
                /// </summary>
                public virtual PropertyGroupLocalType PropertyGroup {
                    get {
                        XElement x = this.GetElement(PropertyGroupXName);
                        return ((PropertyGroupLocalType)(x));
                    }
                    set {
                        this.SetElement(PropertyGroupXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropertyMethodIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(PropertyGroupXName, typeof(PropertyGroupLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (ReactionStateChangeProp | ReactionEquilibriumProp)
                /// </para>
                /// </summary>
                public partial class PropertyGroupLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ReactionStateChangePropXName = System.Xml.Linq.XName.Get("ReactionStateChangeProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ReactionEquilibriumPropXName = System.Xml.Linq.XName.Get("ReactionEquilibriumProp", "http://www.iupac.org/namespaces/ThermoML");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyGroup", "http://www.iupac.org/namespaces/ThermoML");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator PropertyGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static PropertyGroupLocalType() {
                        BuildElementDictionary();
                        contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ReactionStateChangePropXName), new NamedContentModelEntity(ReactionEquilibriumPropXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ReactionStateChangeProp | ReactionEquilibriumProp)
                    /// </para>
                    /// </summary>
                    public PropertyGroupLocalType() {
                    }
                    
                    public PropertyGroupLocalType(ReactionStateChangePropLocalType ReactionStateChangeProp) {
                        this.ReactionStateChangeProp = ReactionStateChangeProp;
                    }
                    
                    public PropertyGroupLocalType(ReactionEquilibriumPropLocalType ReactionEquilibriumProp) {
                        this.ReactionEquilibriumProp = ReactionEquilibriumProp;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (ReactionStateChangeProp | ReactionEquilibriumProp)
                    /// </para>
                    /// </summary>
                    public virtual ReactionStateChangePropLocalType ReactionStateChangeProp {
                        get {
                            XElement x = this.GetElement(ReactionStateChangePropXName);
                            return ((ReactionStateChangePropLocalType)(x));
                        }
                        set {
                            this.SetElement(ReactionStateChangePropXName, value);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (ReactionStateChangeProp | ReactionEquilibriumProp)
                    /// </para>
                    /// </summary>
                    public virtual ReactionEquilibriumPropLocalType ReactionEquilibriumProp {
                        get {
                            XElement x = this.GetElement(ReactionEquilibriumPropXName);
                            return ((ReactionEquilibriumPropLocalType)(x));
                        }
                        set {
                            this.SetElement(ReactionEquilibriumPropXName, value);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<PropertyGroupLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(ReactionStateChangePropXName, typeof(ReactionStateChangePropLocalType));
                        localElementDictionary.Add(ReactionEquilibriumPropXName, typeof(ReactionEquilibriumPropLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                    /// </para>
                    /// </summary>
                    public partial class ReactionStateChangePropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XSimpleList<string> eMethodNameField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XSimpleList<string> sMethodNameField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<CriticalEvaluation> CriticalEvaluationField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<Prediction> PredictionField;
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReactionStateChangeProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator ReactionStateChangePropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReactionStateChangePropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ReactionStateChangePropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public ReactionStateChangePropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public virtual IList<string> eMethodName {
                            get {
                                if ((this.eMethodNameField == null)) {
                                    this.eMethodNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, eMethodNameXName);
                                }
                                return this.eMethodNameField;
                            }
                            set {
                                if ((value == null)) {
                                    this.eMethodNameField = null;
                                }
                                else {
                                    if ((this.eMethodNameField == null)) {
                                        this.eMethodNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, eMethodNameXName);
                                    }
                                    else {
                                        XTypedServices.SetList<System.String>(this.eMethodNameField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, repeating, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public virtual IList<string> sMethodName {
                            get {
                                if ((this.sMethodNameField == null)) {
                                    this.sMethodNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sMethodNameXName);
                                }
                                return this.sMethodNameField;
                            }
                            set {
                                if ((value == null)) {
                                    this.sMethodNameField = null;
                                }
                                else {
                                    if ((this.sMethodNameField == null)) {
                                        this.sMethodNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sMethodNameXName);
                                    }
                                    else {
                                        XTypedServices.SetList<System.String>(this.sMethodNameField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public virtual IList<CriticalEvaluation> CriticalEvaluation {
                            get {
                                if ((this.CriticalEvaluationField == null)) {
                                    this.CriticalEvaluationField = new XTypedList<CriticalEvaluation>(this, LinqToXsdTypeManager.Instance, CriticalEvaluationXName);
                                }
                                return this.CriticalEvaluationField;
                            }
                            set {
                                if ((value == null)) {
                                    this.CriticalEvaluationField = null;
                                }
                                else {
                                    if ((this.CriticalEvaluationField == null)) {
                                        this.CriticalEvaluationField = XTypedList<CriticalEvaluation>.Initialize(this, LinqToXsdTypeManager.Instance, value, CriticalEvaluationXName);
                                    }
                                    else {
                                        XTypedServices.SetList<CriticalEvaluation>(this.CriticalEvaluationField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction)+)
                        /// </para>
                        /// </summary>
                        public virtual IList<Prediction> Prediction {
                            get {
                                if ((this.PredictionField == null)) {
                                    this.PredictionField = new XTypedList<Prediction>(this, LinqToXsdTypeManager.Instance, PredictionXName);
                                }
                                return this.PredictionField;
                            }
                            set {
                                if ((value == null)) {
                                    this.PredictionField = null;
                                }
                                else {
                                    if ((this.PredictionField == null)) {
                                        this.PredictionField = XTypedList<Prediction>.Initialize(this, LinqToXsdTypeManager.Instance, value, PredictionXName);
                                    }
                                    else {
                                        XTypedServices.SetList<Prediction>(this.PredictionField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ReactionStateChangePropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Molar enthalpy of reaction, kJ/mol",
                                            "Specific internal energy of reaction at constant volume, J/g",
                                            "Molar internal energy of reaction at constant volume, kJ/mol",
                                            "Molar Gibbs energy of reaction, kJ/mol",
                                            "Molar entropy of reaction, J/K/mol",
                                            "Potential difference of an electrochemical cell, V"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Static bomb calorimetry",
                                            "Rotating bomb calorimetry",
                                            "Micro-bomb calorimetry",
                                            "Flame calorimetry",
                                            "Solution calorimetry",
                                            "Potential difference of an electrochemical cell",
                                            "Anion exchange",
                                            "Cation exchange",
                                            "Cell potential with glass electrode",
                                            "Cell potential with platinum electrode",
                                            "Cell potential with quinhydrone electrode",
                                            "Cell potential with redox electrode",
                                            "Colorimetry",
                                            "Conductivity measurement",
                                            "Coulometry",
                                            "Cryoscopy",
                                            "Distribution between two phases",
                                            "Ion selective electrode",
                                            "Molar volume determination",
                                            "Polarography",
                                            "Potentiometry",
                                            "Proton relaxation",
                                            "Rate of reaction",
                                            "Solubility measurement",
                                            "Spectrophotometry",
                                            "Thermal lensing spectrophotometry",
                                            "Transient conductivity measurement",
                                            "Solvent extraction",
                                            "Voltammetry",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                    /// </para>
                    /// </summary>
                    public partial class ReactionEquilibriumPropLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ePropNameXName = System.Xml.Linq.XName.Get("ePropName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName eMethodNameXName = System.Xml.Linq.XName.Get("eMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName sMethodNameXName = System.Xml.Linq.XName.Get("sMethodName", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XSimpleList<string> sMethodNameField;
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CriticalEvaluationXName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReactionEquilibriumProp", "http://www.iupac.org/namespaces/ThermoML");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator ReactionEquilibriumPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReactionEquilibriumPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ReactionEquilibriumPropLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePropNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eMethodNameXName), new NamedContentModelEntity(sMethodNameXName), new NamedContentModelEntity(CriticalEvaluationXName), new NamedContentModelEntity(PredictionXName)));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public ReactionEquilibriumPropLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string ePropName {
                            get {
                                XElement x = this.GetElement(ePropNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(ePropNameXName, value, "ePropName", ePropNameLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual string eMethodName {
                            get {
                                XElement x = this.GetElement(eMethodNameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(eMethodNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(eMethodNameXName, value, "eMethodName", eMethodNameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, repeating, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual IList<string> sMethodName {
                            get {
                                if ((this.sMethodNameField == null)) {
                                    this.sMethodNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sMethodNameXName);
                                }
                                return this.sMethodNameField;
                            }
                            set {
                                if ((value == null)) {
                                    this.sMethodNameField = null;
                                }
                                else {
                                    if ((this.sMethodNameField == null)) {
                                        this.sMethodNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sMethodNameXName);
                                    }
                                    else {
                                        XTypedServices.SetList<System.String>(this.sMethodNameField, value);
                                    }
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual CriticalEvaluation CriticalEvaluation {
                            get {
                                XElement x = this.GetElement(CriticalEvaluationXName);
                                return ((CriticalEvaluation)(x));
                            }
                            set {
                                this.SetElement(CriticalEvaluationXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: required, choice
                        /// </para>
                        /// <para>
                        /// Setter: Appends
                        /// </para>
                        /// <para>
                        /// Regular expression: (ePropName, (eMethodName | sMethodName+ | CriticalEvaluation | Prediction))
                        /// </para>
                        /// </summary>
                        public virtual Prediction Prediction {
                            get {
                                XElement x = this.GetElement(PredictionXName);
                                return ((Prediction)(x));
                            }
                            set {
                                this.SetElement(PredictionXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ReactionEquilibriumPropLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ePropNameXName, typeof(string));
                            localElementDictionary.Add(eMethodNameXName, typeof(string));
                            localElementDictionary.Add(sMethodNameXName, typeof(string));
                            localElementDictionary.Add(CriticalEvaluationXName, typeof(CriticalEvaluation));
                            localElementDictionary.Add(PredictionXName, typeof(Prediction));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class ePropNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Thermodynamic equilibrium constant",
                                            "Equilibrium constant in terms of molality, (mol/kg)^n",
                                            "Equilibrium constant in terms of amount concentration (molarity), (mol/dm3)^n",
                                            "Equilibrium constant in terms of partial pressure, kPa^n",
                                            "Equilibrium constant in terms of mole fraction",
                                            "Natural logarithm of thermodynamic equilibrium constant",
                                            "Natural logarithm of equilibrium constant in terms of molality, (mol/kg)^n",
                                            "Natural logarithm of equilibrium constant in terms of amount concentration (molar" +
                                                "ity), (mol/dm3)^n",
                                            "Natural logarithm of equilibrium constant in terms of partial pressure, kPa^n",
                                            "Natural logarithm of equilibrium constant in terms of mole fraction",
                                            "Decadic logarithm of thermodynamic equilibrium constant",
                                            "Decadic logarithm of equilibrium constant in terms of molality, (mol/kg)^n",
                                            "Decadic logarithm of equilibrium constant in terms of amount concentration (molar" +
                                                "ity), (mol/dm3)^n",
                                            "Decadic logarithm of equilibrium constant in terms of partial pressure, kPa^n",
                                            "Decadic logarithm of equilibrium constant in terms of mole fraction"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private ePropNameLocalType() {
                            }
                        }
                        
                        private class eMethodNameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            "Static equilibration",
                                            "Dynamic equilibration",
                                            "Chromatography",
                                            "IR spectrometry",
                                            "UV spectroscopy",
                                            "NMR spectrometry",
                                            "Titration",
                                            "Potential difference of an electrochemical cell",
                                            "Anion exchange",
                                            "Cation exchange",
                                            "Cell potential with glass electrode",
                                            "Cell potential with platinum electrode",
                                            "Cell potential with quinhydrone electrode",
                                            "Cell potential with redox electrode",
                                            "Colorimetry",
                                            "Conductivity measurement",
                                            "Coulometry",
                                            "Cryoscopy",
                                            "Distribution between two phases",
                                            "Ion selective electrode",
                                            "Molar volume determination",
                                            "Polarography",
                                            "Potentiometry",
                                            "Proton relaxation",
                                            "Rate of reaction",
                                            "Solubility measurement",
                                            "Spectrophotometry",
                                            "Thermal lensing spectrophotometry",
                                            "Transient conductivity measurement",
                                            "Solvent extraction",
                                            "Voltammetry",
                                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private eMethodNameLocalType() {
                            }
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum+, ePhase)
            /// </para>
            /// </summary>
            public partial class SolventLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<RegNum> RegNumField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator SolventLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SolventLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static SolventLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(ePhaseXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (RegNum+, ePhase)
                /// </para>
                /// </summary>
                public SolventLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (RegNum+, ePhase)
                /// </para>
                /// </summary>
                public virtual IList<RegNum> RegNum {
                    get {
                        if ((this.RegNumField == null)) {
                            this.RegNumField = new XTypedList<RegNum>(this, LinqToXsdTypeManager.Instance, RegNumXName);
                        }
                        return this.RegNumField;
                    }
                    set {
                        if ((value == null)) {
                            this.RegNumField = null;
                        }
                        else {
                            if ((this.RegNumField == null)) {
                                this.RegNumField = XTypedList<RegNum>.Initialize(this, LinqToXsdTypeManager.Instance, value, RegNumXName);
                            }
                            else {
                                XTypedServices.SetList<RegNum>(this.RegNumField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (RegNum+, ePhase)
                /// </para>
                /// </summary>
                public virtual string ePhase {
                    get {
                        XElement x = this.GetElement(ePhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<SolventLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                    localElementDictionary.Add(ePhaseXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RegNum, ePhase?)
            /// </para>
            /// </summary>
            public partial class CatalystLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ePhaseXName = System.Xml.Linq.XName.Get("ePhase", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Catalyst", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator CatalystLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CatalystLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CatalystLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName), new NamedContentModelEntity(ePhaseXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (RegNum, ePhase?)
                /// </para>
                /// </summary>
                public CatalystLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (RegNum, ePhase?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (RegNum, ePhase?)
                /// </para>
                /// </summary>
                public virtual string ePhase {
                    get {
                        XElement x = this.GetElement(ePhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ePhaseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ePhaseXName, value, "ePhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CatalystLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                    localElementDictionary.Add(ePhaseXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            private class eStandardStateLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Pure compound",
                                "Pure liquid solute",
                                "Standard molality (1 mol/kg) solute",
                                "Standard concentration (1 mol/dm3) solute",
                                "Infinite dilution solute"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private eStandardStateLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
        /// </para>
        /// </summary>
        public partial class ConstraintLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstraintNumberXName = System.Xml.Linq.XName.Get("nConstraintNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstraintIDXName = System.Xml.Linq.XName.Get("ConstraintID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstraintValueXName = System.Xml.Linq.XName.Get("nConstraintValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstrDigitsXName = System.Xml.Linq.XName.Get("nConstrDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrUncertaintyXName = System.Xml.Linq.XName.Get("ConstrUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ConstrUncertaintyType> ConstrUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrRepeatabilityXName = System.Xml.Linq.XName.Get("ConstrRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConstrDeviceSpecXName = System.Xml.Linq.XName.Get("ConstrDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Constraint", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ConstraintLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ConstraintLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nConstraintNumberXName), new NamedContentModelEntity(ConstraintIDXName), new NamedContentModelEntity(nConstraintValueXName), new NamedContentModelEntity(nConstrDigitsXName), new NamedContentModelEntity(ConstrUncertaintyXName), new NamedContentModelEntity(ConstrRepeatabilityXName), new NamedContentModelEntity(ConstrDeviceSpecXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public ConstraintLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nConstraintNumber {
                get {
                    XElement x = this.GetElement(nConstraintNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nConstraintNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstraintIDLocalType ConstraintID {
                get {
                    XElement x = this.GetElement(ConstraintIDXName);
                    return ((ConstraintIDLocalType)(x));
                }
                set {
                    this.SetElement(ConstraintIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual float nConstraintValue {
                get {
                    XElement x = this.GetElement(nConstraintValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nConstraintValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual decimal nConstrDigits {
                get {
                    XElement x = this.GetElement(nConstrDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nConstrDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual IList<ConstrUncertaintyType> ConstrUncertainty {
                get {
                    if ((this.ConstrUncertaintyField == null)) {
                        this.ConstrUncertaintyField = new XTypedList<ConstrUncertaintyType>(this, LinqToXsdTypeManager.Instance, ConstrUncertaintyXName);
                    }
                    return this.ConstrUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.ConstrUncertaintyField = null;
                    }
                    else {
                        if ((this.ConstrUncertaintyField == null)) {
                            this.ConstrUncertaintyField = XTypedList<ConstrUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstrUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<ConstrUncertaintyType>(this.ConstrUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstrRepeatabilityType ConstrRepeatability {
                get {
                    XElement x = this.GetElement(ConstrRepeatabilityXName);
                    return ((ConstrRepeatabilityType)(x));
                }
                set {
                    this.SetElement(ConstrRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nConstraintNumber?, ConstraintID, nConstraintValue, nConstrDigits, ConstrUncertainty*, ConstrRepeatability?, ConstrDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual ConstrDeviceSpecType ConstrDeviceSpec {
                get {
                    XElement x = this.GetElement(ConstrDeviceSpecXName);
                    return ((ConstrDeviceSpecType)(x));
                }
                set {
                    this.SetElement(ConstrDeviceSpecXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ConstraintLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nConstraintNumberXName, typeof(decimal));
                localElementDictionary.Add(ConstraintIDXName, typeof(ConstraintIDLocalType));
                localElementDictionary.Add(nConstraintValueXName, typeof(float));
                localElementDictionary.Add(nConstrDigitsXName, typeof(decimal));
                localElementDictionary.Add(ConstrUncertaintyXName, typeof(ConstrUncertaintyType));
                localElementDictionary.Add(ConstrRepeatabilityXName, typeof(ConstrRepeatabilityType));
                localElementDictionary.Add(ConstrDeviceSpecXName, typeof(ConstrDeviceSpecType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ConstraintType, RegNum?)
            /// </para>
            /// </summary>
            public partial class ConstraintIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ConstraintTypeXName = System.Xml.Linq.XName.Get("ConstraintType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstraintID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ConstraintIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ConstraintIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConstraintTypeXName), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public ConstraintIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public virtual ConstraintVariableType ConstraintType {
                    get {
                        XElement x = this.GetElement(ConstraintTypeXName);
                        return ((ConstraintVariableType)(x));
                    }
                    set {
                        this.SetElement(ConstraintTypeXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (ConstraintType, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ConstraintIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(ConstraintTypeXName, typeof(ConstraintVariableType));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
        /// </para>
        /// </summary>
        public partial class VariableLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarNumberXName = System.Xml.Linq.XName.Get("nVarNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VariableIDXName = System.Xml.Linq.XName.Get("VariableID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarPhaseIDXName = System.Xml.Linq.XName.Get("VarPhaseID", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarUncertaintyXName = System.Xml.Linq.XName.Get("VarUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropVarUncertaintyType> VarUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarRepeatabilityXName = System.Xml.Linq.XName.Get("VarRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarDeviceSpecXName = System.Xml.Linq.XName.Get("VarDeviceSpec", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Variable", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VariableLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VariableLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nVarNumberXName), new NamedContentModelEntity(VariableIDXName), new NamedContentModelEntity(VarPhaseIDXName), new NamedContentModelEntity(VarUncertaintyXName), new NamedContentModelEntity(VarRepeatabilityXName), new NamedContentModelEntity(VarDeviceSpecXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public VariableLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual decimal nVarNumber {
                get {
                    XElement x = this.GetElement(nVarNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVarNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual VariableIDLocalType VariableID {
                get {
                    XElement x = this.GetElement(VariableIDXName);
                    return ((VariableIDLocalType)(x));
                }
                set {
                    this.SetElement(VariableIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual VarPhaseIDLocalType VarPhaseID {
                get {
                    XElement x = this.GetElement(VarPhaseIDXName);
                    return ((VarPhaseIDLocalType)(x));
                }
                set {
                    this.SetElement(VarPhaseIDXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual IList<PropVarUncertaintyType> VarUncertainty {
                get {
                    if ((this.VarUncertaintyField == null)) {
                        this.VarUncertaintyField = new XTypedList<PropVarUncertaintyType>(this, LinqToXsdTypeManager.Instance, VarUncertaintyXName);
                    }
                    return this.VarUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.VarUncertaintyField = null;
                    }
                    else {
                        if ((this.VarUncertaintyField == null)) {
                            this.VarUncertaintyField = XTypedList<PropVarUncertaintyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VarUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<PropVarUncertaintyType>(this.VarUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual PropVarRepeatabilityType VarRepeatability {
                get {
                    XElement x = this.GetElement(VarRepeatabilityXName);
                    return ((PropVarRepeatabilityType)(x));
                }
                set {
                    this.SetElement(VarRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, VariableID, VarPhaseID?, VarUncertainty*, VarRepeatability?, VarDeviceSpec?)
            /// </para>
            /// </summary>
            public virtual PropVarDeviceSpecType VarDeviceSpec {
                get {
                    XElement x = this.GetElement(VarDeviceSpecXName);
                    return ((PropVarDeviceSpecType)(x));
                }
                set {
                    this.SetElement(VarDeviceSpecXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VariableLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nVarNumberXName, typeof(decimal));
                localElementDictionary.Add(VariableIDXName, typeof(VariableIDLocalType));
                localElementDictionary.Add(VarPhaseIDXName, typeof(VarPhaseIDLocalType));
                localElementDictionary.Add(VarUncertaintyXName, typeof(PropVarUncertaintyType));
                localElementDictionary.Add(VarRepeatabilityXName, typeof(PropVarRepeatabilityType));
                localElementDictionary.Add(VarDeviceSpecXName, typeof(PropVarDeviceSpecType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (VariableType, RegNum?)
            /// </para>
            /// </summary>
            public partial class VariableIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName VariableTypeXName = System.Xml.Linq.XName.Get("VariableType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VariableID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VariableIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VariableIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VariableTypeXName), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public VariableIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public virtual ConstraintVariableType VariableType {
                    get {
                        XElement x = this.GetElement(VariableTypeXName);
                        return ((ConstraintVariableType)(x));
                    }
                    set {
                        this.SetElement(VariableTypeXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (VariableType, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VariableIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(VariableTypeXName, typeof(ConstraintVariableType));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
            /// </para>
            /// </summary>
            public partial class VarPhaseIDLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eVarPhaseXName = System.Xml.Linq.XName.Get("eVarPhase", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName eCrystalLatticeTypeXName = System.Xml.Linq.XName.Get("eCrystalLatticeType", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName sPhaseDescriptionXName = System.Xml.Linq.XName.Get("sPhaseDescription", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VarPhaseID", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VarPhaseIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VarPhaseIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VarPhaseIDLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eVarPhaseXName), new ChoiceContentModelEntity(new NamedContentModelEntity(eCrystalLatticeTypeXName), new NamedContentModelEntity(sPhaseDescriptionXName)), new NamedContentModelEntity(RegNumXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public VarPhaseIDLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string eVarPhase {
                    get {
                        XElement x = this.GetElement(eVarPhaseXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(eVarPhaseXName, value, "eVarPhase", global::www.iupac.org.namespaces.ThermoML.ePhaseName.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection? eCrystalLatticeType {
                    get {
                        XElement x = this.GetElement(eCrystalLatticeTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return ((www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelection), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                    }
                    set {
                        if (value == null) {
                            this.SetElement(eCrystalLatticeTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(eCrystalLatticeTypeXName, value.ToString(), "eCrystalLatticeType", global::www.iupac.org.namespaces.ThermoML.eCrystalLatticeTypeSelectionValidator.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual string sPhaseDescription {
                    get {
                        XElement x = this.GetElement(sPhaseDescriptionXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(sPhaseDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (eVarPhase, (eCrystalLatticeType | sPhaseDescription)?, RegNum?)
                /// </para>
                /// </summary>
                public virtual RegNum RegNum {
                    get {
                        XElement x = this.GetElement(RegNumXName);
                        return ((RegNum)(x));
                    }
                    set {
                        this.SetElement(RegNumXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VarPhaseIDLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(eVarPhaseXName, typeof(string));
                    localElementDictionary.Add(eCrystalLatticeTypeXName, typeof(string));
                    localElementDictionary.Add(sPhaseDescriptionXName, typeof(string));
                    localElementDictionary.Add(RegNumXName, typeof(RegNum));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nCASRNum?, nOrgNum?)
    /// </para>
    /// </summary>
    public partial class RegNum : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCASRNumXName = System.Xml.Linq.XName.Get("nCASRNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nOrgNumXName = System.Xml.Linq.XName.Get("nOrgNum", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RegNum(XElement xe) { return XTypedServices.ToXTypedElement<RegNum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RegNum() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCASRNumXName), new NamedContentModelEntity(nOrgNumXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nCASRNum?, nOrgNum?)
        /// </para>
        /// </summary>
        public RegNum() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCASRNum?, nOrgNum?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nCASRNum {
            get {
                XElement x = this.GetElement(nCASRNumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nCASRNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCASRNum?, nOrgNum?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nOrgNum {
            get {
                XElement x = this.GetElement(nOrgNumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nOrgNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RegNum Load(string xmlFile) {
            return XTypedServices.Load<RegNum>(xmlFile);
        }
        
        public static RegNum Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RegNum>(xmlFile);
        }
        
        public static RegNum Parse(string xml) {
            return XTypedServices.Parse<RegNum>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegNum>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nCASRNumXName, typeof(decimal));
            localElementDictionary.Add(nOrgNumXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RegNum+)
    /// </para>
    /// </summary>
    public partial class Solvent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegNumXName = System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RegNum> RegNumField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Solvent(XElement xe) { return XTypedServices.ToXTypedElement<Solvent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Solvent() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegNumXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegNum+)
        /// </para>
        /// </summary>
        public Solvent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RegNum+)
        /// </para>
        /// </summary>
        public virtual IList<RegNum> RegNum {
            get {
                if ((this.RegNumField == null)) {
                    this.RegNumField = new XTypedList<RegNum>(this, LinqToXsdTypeManager.Instance, RegNumXName);
                }
                return this.RegNumField;
            }
            set {
                if ((value == null)) {
                    this.RegNumField = null;
                }
                else {
                    if ((this.RegNumField == null)) {
                        this.RegNumField = XTypedList<RegNum>.Initialize(this, LinqToXsdTypeManager.Instance, value, RegNumXName);
                    }
                    else {
                        XTypedServices.SetList<RegNum>(this.RegNumField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Solvent Load(string xmlFile) {
            return XTypedServices.Load<Solvent>(xmlFile);
        }
        
        public static Solvent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Solvent>(xmlFile);
        }
        
        public static Solvent Parse(string xml) {
            return XTypedServices.Parse<Solvent>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Solvent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RegNumXName, typeof(RegNum));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
    /// </para>
    /// </summary>
    public partial class CurveDev : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCurveDevAssessNumXName = System.Xml.Linq.XName.Get("nCurveDevAssessNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCurveDevEvaluatorXName = System.Xml.Linq.XName.Get("sCurveDevEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCurveSpecXName = System.Xml.Linq.XName.Get("sCurveSpec", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCurveRmsDevValueXName = System.Xml.Linq.XName.Get("nCurveRmsDevValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCurveRmsRelativeDevValueXName = System.Xml.Linq.XName.Get("nCurveRmsRelativeDevValue", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CurveDev(XElement xe) { return XTypedServices.ToXTypedElement<CurveDev>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CurveDev() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCurveDevAssessNumXName), new NamedContentModelEntity(sCurveDevEvaluatorXName), new NamedContentModelEntity(sCurveSpecXName), new NamedContentModelEntity(nCurveRmsDevValueXName), new NamedContentModelEntity(nCurveRmsRelativeDevValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public CurveDev() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public virtual decimal nCurveDevAssessNum {
            get {
                XElement x = this.GetElement(nCurveDevAssessNumXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nCurveDevAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public virtual string sCurveDevEvaluator {
            get {
                XElement x = this.GetElement(sCurveDevEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCurveDevEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public virtual string sCurveSpec {
            get {
                XElement x = this.GetElement(sCurveSpecXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCurveSpecXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCurveRmsDevValue {
            get {
                XElement x = this.GetElement(nCurveRmsDevValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCurveRmsDevValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCurveDevAssessNum, sCurveDevEvaluator?, sCurveSpec, nCurveRmsDevValue?, nCurveRmsRelativeDevValue?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCurveRmsRelativeDevValue {
            get {
                XElement x = this.GetElement(nCurveRmsRelativeDevValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCurveRmsRelativeDevValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CurveDev Load(string xmlFile) {
            return XTypedServices.Load<CurveDev>(xmlFile);
        }
        
        public static CurveDev Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CurveDev>(xmlFile);
        }
        
        public static CurveDev Parse(string xml) {
            return XTypedServices.Parse<CurveDev>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CurveDev>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nCurveDevAssessNumXName, typeof(decimal));
            localElementDictionary.Add(sCurveDevEvaluatorXName, typeof(string));
            localElementDictionary.Add(sCurveSpecXName, typeof(string));
            localElementDictionary.Add(nCurveRmsDevValueXName, typeof(float));
            localElementDictionary.Add(nCurveRmsRelativeDevValueXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class CombinedUncertainty : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCombUncertAssessNumXName = System.Xml.Linq.XName.Get("nCombUncertAssessNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCombUncertEvaluatorXName = System.Xml.Linq.XName.Get("sCombUncertEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eCombUncertEvalMethodXName = System.Xml.Linq.XName.Get("eCombUncertEvalMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCombUncertEvalMethodXName = System.Xml.Linq.XName.Get("sCombUncertEvalMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCombCoverageFactorXName = System.Xml.Linq.XName.Get("nCombCoverageFactor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCombUncertLevOfConfidXName = System.Xml.Linq.XName.Get("nCombUncertLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CombinedUncertainty(XElement xe) { return XTypedServices.ToXTypedElement<CombinedUncertainty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CombinedUncertainty() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCombUncertAssessNumXName), new NamedContentModelEntity(sCombUncertEvaluatorXName), new NamedContentModelEntity(eCombUncertEvalMethodXName), new NamedContentModelEntity(sCombUncertEvalMethodXName), new NamedContentModelEntity(nCombCoverageFactorXName), new NamedContentModelEntity(nCombUncertLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public CombinedUncertainty() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual decimal nCombUncertAssessNum {
            get {
                XElement x = this.GetElement(nCombUncertAssessNumXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nCombUncertAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sCombUncertEvaluator {
            get {
                XElement x = this.GetElement(sCombUncertEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCombUncertEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string eCombUncertEvalMethod {
            get {
                XElement x = this.GetElement(eCombUncertEvalMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eCombUncertEvalMethodXName, value, "eCombUncertEvalMethod", eCombUncertEvalMethodLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sCombUncertEvalMethod {
            get {
                XElement x = this.GetElement(sCombUncertEvalMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCombUncertEvalMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCombCoverageFactor {
            get {
                XElement x = this.GetElement(nCombCoverageFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCombCoverageFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nCombUncertAssessNum, sCombUncertEvaluator?, eCombUncertEvalMethod, sCombUncertEvalMethod?, nCombCoverageFactor?, nCombUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCombUncertLevOfConfid {
            get {
                XElement x = this.GetElement(nCombUncertLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCombUncertLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CombinedUncertainty Load(string xmlFile) {
            return XTypedServices.Load<CombinedUncertainty>(xmlFile);
        }
        
        public static CombinedUncertainty Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CombinedUncertainty>(xmlFile);
        }
        
        public static CombinedUncertainty Parse(string xml) {
            return XTypedServices.Parse<CombinedUncertainty>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CombinedUncertainty>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nCombUncertAssessNumXName, typeof(decimal));
            localElementDictionary.Add(sCombUncertEvaluatorXName, typeof(string));
            localElementDictionary.Add(eCombUncertEvalMethodXName, typeof(string));
            localElementDictionary.Add(sCombUncertEvalMethodXName, typeof(string));
            localElementDictionary.Add(nCombCoverageFactorXName, typeof(float));
            localElementDictionary.Add(nCombUncertLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eCombUncertEvalMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Propagation of evaluated standard uncertainties",
                            "Comparison with reference property values"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eCombUncertEvalMethodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VariableValue*, PropertyValue+)
    /// </para>
    /// </summary>
    public partial class NumValues : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableValueXName = System.Xml.Linq.XName.Get("VariableValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableValueLocalType> VariableValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyValueXName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueLocalType> PropertyValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NumValues", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NumValues(XElement xe) { return XTypedServices.ToXTypedElement<NumValues>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NumValues() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VariableValueXName), new NamedContentModelEntity(PropertyValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VariableValue*, PropertyValue+)
        /// </para>
        /// </summary>
        public NumValues() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VariableValue*, PropertyValue+)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.VariableValueLocalType> VariableValue {
            get {
                if ((this.VariableValueField == null)) {
                    this.VariableValueField = new XTypedList<VariableValueLocalType>(this, LinqToXsdTypeManager.Instance, VariableValueXName);
                }
                return this.VariableValueField;
            }
            set {
                if ((value == null)) {
                    this.VariableValueField = null;
                }
                else {
                    if ((this.VariableValueField == null)) {
                        this.VariableValueField = XTypedList<VariableValueLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableValueXName);
                    }
                    else {
                        XTypedServices.SetList<VariableValueLocalType>(this.VariableValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VariableValue*, PropertyValue+)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.PropertyValueLocalType> PropertyValue {
            get {
                if ((this.PropertyValueField == null)) {
                    this.PropertyValueField = new XTypedList<PropertyValueLocalType>(this, LinqToXsdTypeManager.Instance, PropertyValueXName);
                }
                return this.PropertyValueField;
            }
            set {
                if ((value == null)) {
                    this.PropertyValueField = null;
                }
                else {
                    if ((this.PropertyValueField == null)) {
                        this.PropertyValueField = XTypedList<PropertyValueLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyValueXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyValueLocalType>(this.PropertyValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NumValues Load(string xmlFile) {
            return XTypedServices.Load<NumValues>(xmlFile);
        }
        
        public static NumValues Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NumValues>(xmlFile);
        }
        
        public static NumValues Parse(string xml) {
            return XTypedServices.Parse<NumValues>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NumValues>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VariableValueXName, typeof(VariableValueLocalType));
            localElementDictionary.Add(PropertyValueXName, typeof(PropertyValueLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
        /// </para>
        /// </summary>
        public partial class VariableValueLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarNumberXName = System.Xml.Linq.XName.Get("nVarNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarValueXName = System.Xml.Linq.XName.Get("nVarValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarDigitsXName = System.Xml.Linq.XName.Get("nVarDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarUncertaintyXName = System.Xml.Linq.XName.Get("VarUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<VarUncertaintyLocalType> VarUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VarRepeatabilityXName = System.Xml.Linq.XName.Get("VarRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarDeviceSpecValueXName = System.Xml.Linq.XName.Get("nVarDeviceSpecValue", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VariableValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VariableValueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableValueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VariableValueLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nVarNumberXName), new NamedContentModelEntity(nVarValueXName), new NamedContentModelEntity(nVarDigitsXName), new NamedContentModelEntity(VarUncertaintyXName), new NamedContentModelEntity(VarRepeatabilityXName), new NamedContentModelEntity(nVarDeviceSpecValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public VariableValueLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual decimal nVarNumber {
                get {
                    XElement x = this.GetElement(nVarNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVarNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual float nVarValue {
                get {
                    XElement x = this.GetElement(nVarValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nVarValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual decimal nVarDigits {
                get {
                    XElement x = this.GetElement(nVarDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVarDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.VariableValueLocalType.VarUncertaintyLocalType> VarUncertainty {
                get {
                    if ((this.VarUncertaintyField == null)) {
                        this.VarUncertaintyField = new XTypedList<VarUncertaintyLocalType>(this, LinqToXsdTypeManager.Instance, VarUncertaintyXName);
                    }
                    return this.VarUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.VarUncertaintyField = null;
                    }
                    else {
                        if ((this.VarUncertaintyField == null)) {
                            this.VarUncertaintyField = XTypedList<VarUncertaintyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VarUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<VarUncertaintyLocalType>(this.VarUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual VarRepeatabilityLocalType VarRepeatability {
                get {
                    XElement x = this.GetElement(VarRepeatabilityXName);
                    return ((VarRepeatabilityLocalType)(x));
                }
                set {
                    this.SetElement(VarRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nVarNumber, nVarValue, nVarDigits, VarUncertainty*, VarRepeatability?, nVarDeviceSpecValue?)
            /// </para>
            /// </summary>
            public virtual System.Single? nVarDeviceSpecValue {
                get {
                    XElement x = this.GetElement(nVarDeviceSpecValueXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nVarDeviceSpecValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VariableValueLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nVarNumberXName, typeof(decimal));
                localElementDictionary.Add(nVarValueXName, typeof(float));
                localElementDictionary.Add(nVarDigitsXName, typeof(decimal));
                localElementDictionary.Add(VarUncertaintyXName, typeof(VarUncertaintyLocalType));
                localElementDictionary.Add(VarRepeatabilityXName, typeof(VarRepeatabilityLocalType));
                localElementDictionary.Add(nVarDeviceSpecValueXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nUncertAssessNum, nStdUncertValue?, nExpandUncertValue?)
            /// </para>
            /// </summary>
            public partial class VarUncertaintyLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nUncertAssessNumXName = System.Xml.Linq.XName.Get("nUncertAssessNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nStdUncertValueXName = System.Xml.Linq.XName.Get("nStdUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nExpandUncertValueXName = System.Xml.Linq.XName.Get("nExpandUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VarUncertainty", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VarUncertaintyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VarUncertaintyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VarUncertaintyLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nUncertAssessNumXName), new NamedContentModelEntity(nStdUncertValueXName), new NamedContentModelEntity(nExpandUncertValueXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nUncertAssessNum, nStdUncertValue?, nExpandUncertValue?)
                /// </para>
                /// </summary>
                public VarUncertaintyLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, nStdUncertValue?, nExpandUncertValue?)
                /// </para>
                /// </summary>
                public virtual decimal nUncertAssessNum {
                    get {
                        XElement x = this.GetElement(nUncertAssessNumXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nUncertAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, nStdUncertValue?, nExpandUncertValue?)
                /// </para>
                /// </summary>
                public virtual System.Single? nStdUncertValue {
                    get {
                        XElement x = this.GetElement(nStdUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nStdUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, nStdUncertValue?, nExpandUncertValue?)
                /// </para>
                /// </summary>
                public virtual System.Single? nExpandUncertValue {
                    get {
                        XElement x = this.GetElement(nExpandUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nExpandUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VarUncertaintyLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nUncertAssessNumXName, typeof(decimal));
                    localElementDictionary.Add(nStdUncertValueXName, typeof(float));
                    localElementDictionary.Add(nExpandUncertValueXName, typeof(float));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nVarRepeatValue, nRepetitions)
            /// </para>
            /// </summary>
            public partial class VarRepeatabilityLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nVarRepeatValueXName = System.Xml.Linq.XName.Get("nVarRepeatValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nRepetitionsXName = System.Xml.Linq.XName.Get("nRepetitions", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VarRepeatability", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator VarRepeatabilityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VarRepeatabilityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VarRepeatabilityLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nVarRepeatValueXName), new NamedContentModelEntity(nRepetitionsXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nVarRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public VarRepeatabilityLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nVarRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public virtual float nVarRepeatValue {
                    get {
                        XElement x = this.GetElement(nVarRepeatValueXName);
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nVarRepeatValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nVarRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public virtual decimal nRepetitions {
                    get {
                        XElement x = this.GetElement(nRepetitionsXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nRepetitionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VarRepeatabilityLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nVarRepeatValueXName, typeof(float));
                    localElementDictionary.Add(nRepetitionsXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
        /// </para>
        /// </summary>
        public partial class PropertyValueLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropNumberXName = System.Xml.Linq.XName.Get("nPropNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropValueXName = System.Xml.Linq.XName.Get("nPropValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropDigitsXName = System.Xml.Linq.XName.Get("nPropDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropLimitXName = System.Xml.Linq.XName.Get("PropLimit", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CombinedUncertaintyXName = System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CombinedUncertaintyLocalType> CombinedUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropUncertaintyXName = System.Xml.Linq.XName.Get("PropUncertainty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PropUncertaintyLocalType> PropUncertaintyField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropRepeatabilityXName = System.Xml.Linq.XName.Get("PropRepeatability", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropDeviceSpecValueXName = System.Xml.Linq.XName.Get("nPropDeviceSpecValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CurveDevXName = System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CurveDevLocalType> CurveDevField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PropertyValueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyValueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PropertyValueLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPropNumberXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(nPropValueXName), new NamedContentModelEntity(nPropDigitsXName)), new NamedContentModelEntity(PropLimitXName)), new NamedContentModelEntity(CombinedUncertaintyXName), new NamedContentModelEntity(PropUncertaintyXName), new NamedContentModelEntity(PropRepeatabilityXName), new NamedContentModelEntity(nPropDeviceSpecValueXName), new NamedContentModelEntity(CurveDevXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public PropertyValueLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual decimal nPropNumber {
                get {
                    XElement x = this.GetElement(nPropNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPropNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual float nPropValue {
                get {
                    XElement x = this.GetElement(nPropValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPropValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual decimal nPropDigits {
                get {
                    XElement x = this.GetElement(nPropDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPropDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropLimitLocalType PropLimit {
                get {
                    XElement x = this.GetElement(PropLimitXName);
                    return ((PropLimitLocalType)(x));
                }
                set {
                    this.SetElement(PropLimitXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.PropertyValueLocalType.CombinedUncertaintyLocalType> CombinedUncertainty {
                get {
                    if ((this.CombinedUncertaintyField == null)) {
                        this.CombinedUncertaintyField = new XTypedList<CombinedUncertaintyLocalType>(this, LinqToXsdTypeManager.Instance, CombinedUncertaintyXName);
                    }
                    return this.CombinedUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.CombinedUncertaintyField = null;
                    }
                    else {
                        if ((this.CombinedUncertaintyField == null)) {
                            this.CombinedUncertaintyField = XTypedList<CombinedUncertaintyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CombinedUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<CombinedUncertaintyLocalType>(this.CombinedUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.PropertyValueLocalType.PropUncertaintyLocalType> PropUncertainty {
                get {
                    if ((this.PropUncertaintyField == null)) {
                        this.PropUncertaintyField = new XTypedList<PropUncertaintyLocalType>(this, LinqToXsdTypeManager.Instance, PropUncertaintyXName);
                    }
                    return this.PropUncertaintyField;
                }
                set {
                    if ((value == null)) {
                        this.PropUncertaintyField = null;
                    }
                    else {
                        if ((this.PropUncertaintyField == null)) {
                            this.PropUncertaintyField = XTypedList<PropUncertaintyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropUncertaintyXName);
                        }
                        else {
                            XTypedServices.SetList<PropUncertaintyLocalType>(this.PropUncertaintyField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual PropRepeatabilityLocalType PropRepeatability {
                get {
                    XElement x = this.GetElement(PropRepeatabilityXName);
                    return ((PropRepeatabilityLocalType)(x));
                }
                set {
                    this.SetElement(PropRepeatabilityXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual System.Single? nPropDeviceSpecValue {
                get {
                    XElement x = this.GetElement(nPropDeviceSpecValueXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nPropDeviceSpecValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (nPropNumber, ((nPropValue, nPropDigits)|PropLimit), CombinedUncertainty*, PropUncertainty*, PropRepeatability?, nPropDeviceSpecValue?, CurveDev*)
            /// </para>
            /// </summary>
            public virtual IList<www.iupac.org.namespaces.ThermoML.NumValues.PropertyValueLocalType.CurveDevLocalType> CurveDev {
                get {
                    if ((this.CurveDevField == null)) {
                        this.CurveDevField = new XTypedList<CurveDevLocalType>(this, LinqToXsdTypeManager.Instance, CurveDevXName);
                    }
                    return this.CurveDevField;
                }
                set {
                    if ((value == null)) {
                        this.CurveDevField = null;
                    }
                    else {
                        if ((this.CurveDevField == null)) {
                            this.CurveDevField = XTypedList<CurveDevLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurveDevXName);
                        }
                        else {
                            XTypedServices.SetList<CurveDevLocalType>(this.CurveDevField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyValueLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPropNumberXName, typeof(decimal));
                localElementDictionary.Add(nPropValueXName, typeof(float));
                localElementDictionary.Add(nPropDigitsXName, typeof(decimal));
                localElementDictionary.Add(PropLimitXName, typeof(PropLimitLocalType));
                localElementDictionary.Add(CombinedUncertaintyXName, typeof(CombinedUncertaintyLocalType));
                localElementDictionary.Add(PropUncertaintyXName, typeof(PropUncertaintyLocalType));
                localElementDictionary.Add(PropRepeatabilityXName, typeof(PropRepeatabilityLocalType));
                localElementDictionary.Add(nPropDeviceSpecValueXName, typeof(float));
                localElementDictionary.Add(CurveDevXName, typeof(CurveDevLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((nPropUpperLimitValue | nPropLowerLimitValue), nPropLimitDigits)
            /// </para>
            /// </summary>
            public partial class PropLimitLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nPropUpperLimitValueXName = System.Xml.Linq.XName.Get("nPropUpperLimitValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nPropLowerLimitValueXName = System.Xml.Linq.XName.Get("nPropLowerLimitValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nPropLimitDigitsXName = System.Xml.Linq.XName.Get("nPropLimitDigits", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropLimit", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropLimitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropLimitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropLimitLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(nPropUpperLimitValueXName), new NamedContentModelEntity(nPropLowerLimitValueXName)), new NamedContentModelEntity(nPropLimitDigitsXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: ((nPropUpperLimitValue | nPropLowerLimitValue), nPropLimitDigits)
                /// </para>
                /// </summary>
                public PropLimitLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((nPropUpperLimitValue | nPropLowerLimitValue), nPropLimitDigits)
                /// </para>
                /// </summary>
                public virtual System.Single? nPropUpperLimitValue {
                    get {
                        XElement x = this.GetElement(nPropUpperLimitValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nPropUpperLimitValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, choice
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((nPropUpperLimitValue | nPropLowerLimitValue), nPropLimitDigits)
                /// </para>
                /// </summary>
                public virtual System.Single? nPropLowerLimitValue {
                    get {
                        XElement x = this.GetElement(nPropLowerLimitValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nPropLowerLimitValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: ((nPropUpperLimitValue | nPropLowerLimitValue), nPropLimitDigits)
                /// </para>
                /// </summary>
                public virtual decimal nPropLimitDigits {
                    get {
                        XElement x = this.GetElement(nPropLimitDigitsXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nPropLimitDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropLimitLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nPropUpperLimitValueXName, typeof(float));
                    localElementDictionary.Add(nPropLowerLimitValueXName, typeof(float));
                    localElementDictionary.Add(nPropLimitDigitsXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
            /// </para>
            /// </summary>
            public partial class CombinedUncertaintyLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nCombUncertAssessNumXName = System.Xml.Linq.XName.Get("nCombUncertAssessNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nCombStdUncertValueXName = System.Xml.Linq.XName.Get("nCombStdUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nCombExpandUncertValueXName = System.Xml.Linq.XName.Get("nCombExpandUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AsymCombStdUncertXName = System.Xml.Linq.XName.Get("AsymCombStdUncert", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AsymCombExpandUncertXName = System.Xml.Linq.XName.Get("AsymCombExpandUncert", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator CombinedUncertaintyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CombinedUncertaintyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CombinedUncertaintyLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCombUncertAssessNumXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(nCombStdUncertValueXName), new NamedContentModelEntity(nCombExpandUncertValueXName)), new SequenceContentModelEntity(new NamedContentModelEntity(AsymCombStdUncertXName), new NamedContentModelEntity(AsymCombExpandUncertXName))));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public CombinedUncertaintyLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual decimal nCombUncertAssessNum {
                    get {
                        XElement x = this.GetElement(nCombUncertAssessNumXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nCombUncertAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual System.Single? nCombStdUncertValue {
                    get {
                        XElement x = this.GetElement(nCombStdUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nCombStdUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual System.Single? nCombExpandUncertValue {
                    get {
                        XElement x = this.GetElement(nCombExpandUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nCombExpandUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual AsymUncertType AsymCombStdUncert {
                    get {
                        XElement x = this.GetElement(AsymCombStdUncertXName);
                        return ((AsymUncertType)(x));
                    }
                    set {
                        this.SetElement(AsymCombStdUncertXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nCombUncertAssessNum, ((nCombStdUncertValue?, nCombExpandUncertValue?)|(AsymCombStdUncert?, AsymCombExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual AsymUncertType AsymCombExpandUncert {
                    get {
                        XElement x = this.GetElement(AsymCombExpandUncertXName);
                        return ((AsymUncertType)(x));
                    }
                    set {
                        this.SetElement(AsymCombExpandUncertXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CombinedUncertaintyLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nCombUncertAssessNumXName, typeof(decimal));
                    localElementDictionary.Add(nCombStdUncertValueXName, typeof(float));
                    localElementDictionary.Add(nCombExpandUncertValueXName, typeof(float));
                    localElementDictionary.Add(AsymCombStdUncertXName, typeof(AsymUncertType));
                    localElementDictionary.Add(AsymCombExpandUncertXName, typeof(AsymUncertType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
            /// </para>
            /// </summary>
            public partial class PropUncertaintyLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nUncertAssessNumXName = System.Xml.Linq.XName.Get("nUncertAssessNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nStdUncertValueXName = System.Xml.Linq.XName.Get("nStdUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nExpandUncertValueXName = System.Xml.Linq.XName.Get("nExpandUncertValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AsymStdUncertXName = System.Xml.Linq.XName.Get("AsymStdUncert", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AsymExpandUncertXName = System.Xml.Linq.XName.Get("AsymExpandUncert", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropUncertainty", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropUncertaintyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropUncertaintyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropUncertaintyLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nUncertAssessNumXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(nStdUncertValueXName), new NamedContentModelEntity(nExpandUncertValueXName)), new SequenceContentModelEntity(new NamedContentModelEntity(AsymStdUncertXName), new NamedContentModelEntity(AsymExpandUncertXName))));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public PropUncertaintyLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual decimal nUncertAssessNum {
                    get {
                        XElement x = this.GetElement(nUncertAssessNumXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nUncertAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual System.Single? nStdUncertValue {
                    get {
                        XElement x = this.GetElement(nStdUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nStdUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual System.Single? nExpandUncertValue {
                    get {
                        XElement x = this.GetElement(nExpandUncertValueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nExpandUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual AsymUncertType AsymStdUncert {
                    get {
                        XElement x = this.GetElement(AsymStdUncertXName);
                        return ((AsymUncertType)(x));
                    }
                    set {
                        this.SetElement(AsymStdUncertXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: (nUncertAssessNum, ((nStdUncertValue?, nExpandUncertValue?)|(AsymStdUncert?, AsymExpandUncert?)))
                /// </para>
                /// </summary>
                public virtual AsymUncertType AsymExpandUncert {
                    get {
                        XElement x = this.GetElement(AsymExpandUncertXName);
                        return ((AsymUncertType)(x));
                    }
                    set {
                        this.SetElement(AsymExpandUncertXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropUncertaintyLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nUncertAssessNumXName, typeof(decimal));
                    localElementDictionary.Add(nStdUncertValueXName, typeof(float));
                    localElementDictionary.Add(nExpandUncertValueXName, typeof(float));
                    localElementDictionary.Add(AsymStdUncertXName, typeof(AsymUncertType));
                    localElementDictionary.Add(AsymExpandUncertXName, typeof(AsymUncertType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nPropRepeatValue, nRepetitions)
            /// </para>
            /// </summary>
            public partial class PropRepeatabilityLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nPropRepeatValueXName = System.Xml.Linq.XName.Get("nPropRepeatValue", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nRepetitionsXName = System.Xml.Linq.XName.Get("nRepetitions", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropRepeatability", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PropRepeatabilityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropRepeatabilityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PropRepeatabilityLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPropRepeatValueXName), new NamedContentModelEntity(nRepetitionsXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nPropRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public PropRepeatabilityLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nPropRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public virtual float nPropRepeatValue {
                    get {
                        XElement x = this.GetElement(nPropRepeatValueXName);
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nPropRepeatValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nPropRepeatValue, nRepetitions)
                /// </para>
                /// </summary>
                public virtual decimal nRepetitions {
                    get {
                        XElement x = this.GetElement(nRepetitionsXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nRepetitionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PropRepeatabilityLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nPropRepeatValueXName, typeof(float));
                    localElementDictionary.Add(nRepetitionsXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nCurveDevAssessNum, nCurveDevValue)
            /// </para>
            /// </summary>
            public partial class CurveDevLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nCurveDevAssessNumXName = System.Xml.Linq.XName.Get("nCurveDevAssessNum", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nCurveDevValueXName = System.Xml.Linq.XName.Get("nCurveDevValue", "http://www.iupac.org/namespaces/ThermoML");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator CurveDevLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CurveDevLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CurveDevLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nCurveDevAssessNumXName), new NamedContentModelEntity(nCurveDevValueXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (nCurveDevAssessNum, nCurveDevValue)
                /// </para>
                /// </summary>
                public CurveDevLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nCurveDevAssessNum, nCurveDevValue)
                /// </para>
                /// </summary>
                public virtual decimal nCurveDevAssessNum {
                    get {
                        XElement x = this.GetElement(nCurveDevAssessNumXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(nCurveDevAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (nCurveDevAssessNum, nCurveDevValue)
                /// </para>
                /// </summary>
                public virtual float nCurveDevValue {
                    get {
                        XElement x = this.GetElement(nCurveDevValueXName);
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(nCurveDevValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CurveDevLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(nCurveDevAssessNumXName, typeof(decimal));
                    localElementDictionary.Add(nCurveDevValueXName, typeof(float));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SingleProp | MultiProp | EquationOfState)
    /// </para>
    /// </summary>
    public partial class CriticalEvaluation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SinglePropXName = System.Xml.Linq.XName.Get("SingleProp", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultiPropXName = System.Xml.Linq.XName.Get("MultiProp", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EquationOfStateXName = System.Xml.Linq.XName.Get("EquationOfState", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CriticalEvaluation(XElement xe) { return XTypedServices.ToXTypedElement<CriticalEvaluation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CriticalEvaluation() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(SinglePropXName), new NamedContentModelEntity(MultiPropXName), new NamedContentModelEntity(EquationOfStateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SingleProp | MultiProp | EquationOfState)
        /// </para>
        /// </summary>
        public CriticalEvaluation() {
        }
        
        public CriticalEvaluation(SinglePropLocalType SingleProp) {
            this.SingleProp = SingleProp;
        }
        
        public CriticalEvaluation(MultiPropLocalType MultiProp) {
            this.MultiProp = MultiProp;
        }
        
        public CriticalEvaluation(EquationOfStateLocalType EquationOfState) {
            this.EquationOfState = EquationOfState;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (SingleProp | MultiProp | EquationOfState)
        /// </para>
        /// </summary>
        public virtual SinglePropLocalType SingleProp {
            get {
                XElement x = this.GetElement(SinglePropXName);
                return ((SinglePropLocalType)(x));
            }
            set {
                this.SetElement(SinglePropXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (SingleProp | MultiProp | EquationOfState)
        /// </para>
        /// </summary>
        public virtual MultiPropLocalType MultiProp {
            get {
                XElement x = this.GetElement(MultiPropXName);
                return ((MultiPropLocalType)(x));
            }
            set {
                this.SetElement(MultiPropXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (SingleProp | MultiProp | EquationOfState)
        /// </para>
        /// </summary>
        public virtual EquationOfStateLocalType EquationOfState {
            get {
                XElement x = this.GetElement(EquationOfStateXName);
                return ((EquationOfStateLocalType)(x));
            }
            set {
                this.SetElement(EquationOfStateXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CriticalEvaluation Load(string xmlFile) {
            return XTypedServices.Load<CriticalEvaluation>(xmlFile);
        }
        
        public static CriticalEvaluation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CriticalEvaluation>(xmlFile);
        }
        
        public static CriticalEvaluation Parse(string xml) {
            return XTypedServices.Parse<CriticalEvaluation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CriticalEvaluation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SinglePropXName, typeof(SinglePropLocalType));
            localElementDictionary.Add(MultiPropXName, typeof(MultiPropLocalType));
            localElementDictionary.Add(EquationOfStateXName, typeof(EquationOfStateLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sEvalSinglePropDescription?, EvalSinglePropRef*)
        /// </para>
        /// </summary>
        public partial class SinglePropLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEvalSinglePropDescriptionXName = System.Xml.Linq.XName.Get("sEvalSinglePropDescription", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EvalSinglePropRefXName = System.Xml.Linq.XName.Get("EvalSinglePropRef", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CitationType> EvalSinglePropRefField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SingleProp", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SinglePropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SinglePropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SinglePropLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sEvalSinglePropDescriptionXName), new NamedContentModelEntity(EvalSinglePropRefXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sEvalSinglePropDescription?, EvalSinglePropRef*)
            /// </para>
            /// </summary>
            public SinglePropLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sEvalSinglePropDescription?, EvalSinglePropRef*)
            /// </para>
            /// </summary>
            public virtual string sEvalSinglePropDescription {
                get {
                    XElement x = this.GetElement(sEvalSinglePropDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEvalSinglePropDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sEvalSinglePropDescription?, EvalSinglePropRef*)
            /// </para>
            /// </summary>
            public virtual IList<CitationType> EvalSinglePropRef {
                get {
                    if ((this.EvalSinglePropRefField == null)) {
                        this.EvalSinglePropRefField = new XTypedList<CitationType>(this, LinqToXsdTypeManager.Instance, EvalSinglePropRefXName);
                    }
                    return this.EvalSinglePropRefField;
                }
                set {
                    if ((value == null)) {
                        this.EvalSinglePropRefField = null;
                    }
                    else {
                        if ((this.EvalSinglePropRefField == null)) {
                            this.EvalSinglePropRefField = XTypedList<CitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EvalSinglePropRefXName);
                        }
                        else {
                            XTypedServices.SetList<CitationType>(this.EvalSinglePropRefField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SinglePropLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sEvalSinglePropDescriptionXName, typeof(string));
                localElementDictionary.Add(EvalSinglePropRefXName, typeof(CitationType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sEvalMultiPropList?, sEvalMultiPropDescription?, EvalMultiPropRef*)
        /// </para>
        /// </summary>
        public partial class MultiPropLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEvalMultiPropListXName = System.Xml.Linq.XName.Get("sEvalMultiPropList", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEvalMultiPropDescriptionXName = System.Xml.Linq.XName.Get("sEvalMultiPropDescription", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EvalMultiPropRefXName = System.Xml.Linq.XName.Get("EvalMultiPropRef", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CitationType> EvalMultiPropRefField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MultiProp", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator MultiPropLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MultiPropLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static MultiPropLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sEvalMultiPropListXName), new NamedContentModelEntity(sEvalMultiPropDescriptionXName), new NamedContentModelEntity(EvalMultiPropRefXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sEvalMultiPropList?, sEvalMultiPropDescription?, EvalMultiPropRef*)
            /// </para>
            /// </summary>
            public MultiPropLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sEvalMultiPropList?, sEvalMultiPropDescription?, EvalMultiPropRef*)
            /// </para>
            /// </summary>
            public virtual string sEvalMultiPropList {
                get {
                    XElement x = this.GetElement(sEvalMultiPropListXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEvalMultiPropListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sEvalMultiPropList?, sEvalMultiPropDescription?, EvalMultiPropRef*)
            /// </para>
            /// </summary>
            public virtual string sEvalMultiPropDescription {
                get {
                    XElement x = this.GetElement(sEvalMultiPropDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEvalMultiPropDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sEvalMultiPropList?, sEvalMultiPropDescription?, EvalMultiPropRef*)
            /// </para>
            /// </summary>
            public virtual IList<CitationType> EvalMultiPropRef {
                get {
                    if ((this.EvalMultiPropRefField == null)) {
                        this.EvalMultiPropRefField = new XTypedList<CitationType>(this, LinqToXsdTypeManager.Instance, EvalMultiPropRefXName);
                    }
                    return this.EvalMultiPropRefField;
                }
                set {
                    if ((value == null)) {
                        this.EvalMultiPropRefField = null;
                    }
                    else {
                        if ((this.EvalMultiPropRefField == null)) {
                            this.EvalMultiPropRefField = XTypedList<CitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EvalMultiPropRefXName);
                        }
                        else {
                            XTypedServices.SetList<CitationType>(this.EvalMultiPropRefField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<MultiPropLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sEvalMultiPropListXName, typeof(string));
                localElementDictionary.Add(sEvalMultiPropDescriptionXName, typeof(string));
                localElementDictionary.Add(EvalMultiPropRefXName, typeof(CitationType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sEvalEOSName?, sEvalEOSDescription?, EvalEOSRef*)
        /// </para>
        /// </summary>
        public partial class EquationOfStateLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEvalEOSNameXName = System.Xml.Linq.XName.Get("sEvalEOSName", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEvalEOSDescriptionXName = System.Xml.Linq.XName.Get("sEvalEOSDescription", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EvalEOSRefXName = System.Xml.Linq.XName.Get("EvalEOSRef", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CitationType> EvalEOSRefField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EquationOfState", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EquationOfStateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EquationOfStateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EquationOfStateLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sEvalEOSNameXName), new NamedContentModelEntity(sEvalEOSDescriptionXName), new NamedContentModelEntity(EvalEOSRefXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sEvalEOSName?, sEvalEOSDescription?, EvalEOSRef*)
            /// </para>
            /// </summary>
            public EquationOfStateLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sEvalEOSName?, sEvalEOSDescription?, EvalEOSRef*)
            /// </para>
            /// </summary>
            public virtual string sEvalEOSName {
                get {
                    XElement x = this.GetElement(sEvalEOSNameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEvalEOSNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sEvalEOSName?, sEvalEOSDescription?, EvalEOSRef*)
            /// </para>
            /// </summary>
            public virtual string sEvalEOSDescription {
                get {
                    XElement x = this.GetElement(sEvalEOSDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEvalEOSDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sEvalEOSName?, sEvalEOSDescription?, EvalEOSRef*)
            /// </para>
            /// </summary>
            public virtual IList<CitationType> EvalEOSRef {
                get {
                    if ((this.EvalEOSRefField == null)) {
                        this.EvalEOSRefField = new XTypedList<CitationType>(this, LinqToXsdTypeManager.Instance, EvalEOSRefXName);
                    }
                    return this.EvalEOSRefField;
                }
                set {
                    if ((value == null)) {
                        this.EvalEOSRefField = null;
                    }
                    else {
                        if ((this.EvalEOSRefField == null)) {
                            this.EvalEOSRefField = XTypedList<CitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EvalEOSRefXName);
                        }
                        else {
                            XTypedServices.SetList<CitationType>(this.EvalEOSRefField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EquationOfStateLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sEvalEOSNameXName, typeof(string));
                localElementDictionary.Add(sEvalEOSDescriptionXName, typeof(string));
                localElementDictionary.Add(EvalEOSRefXName, typeof(CitationType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
    /// </para>
    /// </summary>
    public partial class Prediction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ePredictionTypeXName = System.Xml.Linq.XName.Get("ePredictionType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sPredictionMethodNameXName = System.Xml.Linq.XName.Get("sPredictionMethodName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sPredictionMethodDescriptionXName = System.Xml.Linq.XName.Get("sPredictionMethodDescription", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PredictionMethodRefXName = System.Xml.Linq.XName.Get("PredictionMethodRef", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CitationType> PredictionMethodRefField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Prediction(XElement xe) { return XTypedServices.ToXTypedElement<Prediction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Prediction() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ePredictionTypeXName), new NamedContentModelEntity(sPredictionMethodNameXName), new NamedContentModelEntity(sPredictionMethodDescriptionXName), new NamedContentModelEntity(PredictionMethodRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
        /// </para>
        /// </summary>
        public Prediction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
        /// </para>
        /// </summary>
        public virtual string ePredictionType {
            get {
                XElement x = this.GetElement(ePredictionTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ePredictionTypeXName, value, "ePredictionType", ePredictionTypeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
        /// </para>
        /// </summary>
        public virtual string sPredictionMethodName {
            get {
                XElement x = this.GetElement(sPredictionMethodNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sPredictionMethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
        /// </para>
        /// </summary>
        public virtual string sPredictionMethodDescription {
            get {
                XElement x = this.GetElement(sPredictionMethodDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sPredictionMethodDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ePredictionType, sPredictionMethodName?, sPredictionMethodDescription?, PredictionMethodRef*)
        /// </para>
        /// </summary>
        public virtual IList<CitationType> PredictionMethodRef {
            get {
                if ((this.PredictionMethodRefField == null)) {
                    this.PredictionMethodRefField = new XTypedList<CitationType>(this, LinqToXsdTypeManager.Instance, PredictionMethodRefXName);
                }
                return this.PredictionMethodRefField;
            }
            set {
                if ((value == null)) {
                    this.PredictionMethodRefField = null;
                }
                else {
                    if ((this.PredictionMethodRefField == null)) {
                        this.PredictionMethodRefField = XTypedList<CitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PredictionMethodRefXName);
                    }
                    else {
                        XTypedServices.SetList<CitationType>(this.PredictionMethodRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Prediction Load(string xmlFile) {
            return XTypedServices.Load<Prediction>(xmlFile);
        }
        
        public static Prediction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Prediction>(xmlFile);
        }
        
        public static Prediction Parse(string xml) {
            return XTypedServices.Parse<Prediction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Prediction>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ePredictionTypeXName, typeof(string));
            localElementDictionary.Add(sPredictionMethodNameXName, typeof(string));
            localElementDictionary.Add(sPredictionMethodDescriptionXName, typeof(string));
            localElementDictionary.Add(PredictionMethodRefXName, typeof(CitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ePredictionTypeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Ab initio",
                            "Molecular dynamics",
                            "Semiempirical quantum methods",
                            "Molecular mechanics",
                            "Statistical mechanics",
                            "Corresponding states",
                            "Correlation",
                            "Group contribution"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ePredictionTypeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class Equation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eEqNameXName = System.Xml.Linq.XName.Get("eEqName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> eEqNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sEqNameXName = System.Xml.Linq.XName.Get("sEqName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> sEqNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlMathSourceXName = System.Xml.Linq.XName.Get("urlMathSource", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> urlMathSourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqPropertyXName = System.Xml.Linq.XName.Get("EqProperty", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EqPropertyLocalType> EqPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqConstraintXName = System.Xml.Linq.XName.Get("EqConstraint", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EqConstraintLocalType> EqConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqVariableXName = System.Xml.Linq.XName.Get("EqVariable", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EqVariableLocalType> EqVariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqParameterXName = System.Xml.Linq.XName.Get("EqParameter", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EqParameterLocalType> EqParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqConstantXName = System.Xml.Linq.XName.Get("EqConstant", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EqConstantLocalType> EqConstantField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CovarianceXName = System.Xml.Linq.XName.Get("Covariance", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CovarianceLocalType> CovarianceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCovarianceLevOfConfidXName = System.Xml.Linq.XName.Get("nCovarianceLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Equation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Equation(XElement xe) { return XTypedServices.ToXTypedElement<Equation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Equation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(eEqNameXName), new NamedContentModelEntity(sEqNameXName)), new NamedContentModelEntity(urlMathSourceXName)), new NamedContentModelEntity(EqPropertyXName), new NamedContentModelEntity(EqConstraintXName), new NamedContentModelEntity(EqVariableXName), new NamedContentModelEntity(EqParameterXName), new NamedContentModelEntity(EqConstantXName), new NamedContentModelEntity(CovarianceXName), new NamedContentModelEntity(nCovarianceLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public Equation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<string> eEqName {
            get {
                if ((this.eEqNameField == null)) {
                    this.eEqNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, eEqNameXName);
                }
                return this.eEqNameField;
            }
            set {
                if ((value == null)) {
                    this.eEqNameField = null;
                }
                else {
                    if ((this.eEqNameField == null)) {
                        this.eEqNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, eEqNameXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.eEqNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<string> sEqName {
            get {
                if ((this.sEqNameField == null)) {
                    this.sEqNameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sEqNameXName);
                }
                return this.sEqNameField;
            }
            set {
                if ((value == null)) {
                    this.sEqNameField = null;
                }
                else {
                    if ((this.sEqNameField == null)) {
                        this.sEqNameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sEqNameXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.sEqNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<string> urlMathSource {
            get {
                if ((this.urlMathSourceField == null)) {
                    this.urlMathSourceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, urlMathSourceXName);
                }
                return this.urlMathSourceField;
            }
            set {
                if ((value == null)) {
                    this.urlMathSourceField = null;
                }
                else {
                    if ((this.urlMathSourceField == null)) {
                        this.urlMathSourceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, urlMathSourceXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.urlMathSourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.EqPropertyLocalType> EqProperty {
            get {
                if ((this.EqPropertyField == null)) {
                    this.EqPropertyField = new XTypedList<EqPropertyLocalType>(this, LinqToXsdTypeManager.Instance, EqPropertyXName);
                }
                return this.EqPropertyField;
            }
            set {
                if ((value == null)) {
                    this.EqPropertyField = null;
                }
                else {
                    if ((this.EqPropertyField == null)) {
                        this.EqPropertyField = XTypedList<EqPropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<EqPropertyLocalType>(this.EqPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.EqConstraintLocalType> EqConstraint {
            get {
                if ((this.EqConstraintField == null)) {
                    this.EqConstraintField = new XTypedList<EqConstraintLocalType>(this, LinqToXsdTypeManager.Instance, EqConstraintXName);
                }
                return this.EqConstraintField;
            }
            set {
                if ((value == null)) {
                    this.EqConstraintField = null;
                }
                else {
                    if ((this.EqConstraintField == null)) {
                        this.EqConstraintField = XTypedList<EqConstraintLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<EqConstraintLocalType>(this.EqConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.EqVariableLocalType> EqVariable {
            get {
                if ((this.EqVariableField == null)) {
                    this.EqVariableField = new XTypedList<EqVariableLocalType>(this, LinqToXsdTypeManager.Instance, EqVariableXName);
                }
                return this.EqVariableField;
            }
            set {
                if ((value == null)) {
                    this.EqVariableField = null;
                }
                else {
                    if ((this.EqVariableField == null)) {
                        this.EqVariableField = XTypedList<EqVariableLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqVariableXName);
                    }
                    else {
                        XTypedServices.SetList<EqVariableLocalType>(this.EqVariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.EqParameterLocalType> EqParameter {
            get {
                if ((this.EqParameterField == null)) {
                    this.EqParameterField = new XTypedList<EqParameterLocalType>(this, LinqToXsdTypeManager.Instance, EqParameterXName);
                }
                return this.EqParameterField;
            }
            set {
                if ((value == null)) {
                    this.EqParameterField = null;
                }
                else {
                    if ((this.EqParameterField == null)) {
                        this.EqParameterField = XTypedList<EqParameterLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqParameterXName);
                    }
                    else {
                        XTypedServices.SetList<EqParameterLocalType>(this.EqParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.EqConstantLocalType> EqConstant {
            get {
                if ((this.EqConstantField == null)) {
                    this.EqConstantField = new XTypedList<EqConstantLocalType>(this, LinqToXsdTypeManager.Instance, EqConstantXName);
                }
                return this.EqConstantField;
            }
            set {
                if ((value == null)) {
                    this.EqConstantField = null;
                }
                else {
                    if ((this.EqConstantField == null)) {
                        this.EqConstantField = XTypedList<EqConstantLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqConstantXName);
                    }
                    else {
                        XTypedServices.SetList<EqConstantLocalType>(this.EqConstantField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual IList<www.iupac.org.namespaces.ThermoML.Equation.CovarianceLocalType> Covariance {
            get {
                if ((this.CovarianceField == null)) {
                    this.CovarianceField = new XTypedList<CovarianceLocalType>(this, LinqToXsdTypeManager.Instance, CovarianceXName);
                }
                return this.CovarianceField;
            }
            set {
                if ((value == null)) {
                    this.CovarianceField = null;
                }
                else {
                    if ((this.CovarianceField == null)) {
                        this.CovarianceField = XTypedList<CovarianceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CovarianceXName);
                    }
                    else {
                        XTypedServices.SetList<CovarianceLocalType>(this.CovarianceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (((eEqName | sEqName), urlMathSource)+, EqProperty*, EqConstraint*, EqVariable*, EqParameter*, EqConstant*, Covariance*, nCovarianceLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCovarianceLevOfConfid {
            get {
                XElement x = this.GetElement(nCovarianceLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCovarianceLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Equation Load(string xmlFile) {
            return XTypedServices.Load<Equation>(xmlFile);
        }
        
        public static Equation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Equation>(xmlFile);
        }
        
        public static Equation Parse(string xml) {
            return XTypedServices.Parse<Equation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Equation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(eEqNameXName, typeof(string));
            localElementDictionary.Add(sEqNameXName, typeof(string));
            localElementDictionary.Add(urlMathSourceXName, typeof(string));
            localElementDictionary.Add(EqPropertyXName, typeof(EqPropertyLocalType));
            localElementDictionary.Add(EqConstraintXName, typeof(EqConstraintLocalType));
            localElementDictionary.Add(EqVariableXName, typeof(EqVariableLocalType));
            localElementDictionary.Add(EqParameterXName, typeof(EqParameterLocalType));
            localElementDictionary.Add(EqConstantXName, typeof(EqConstantLocalType));
            localElementDictionary.Add(CovarianceXName, typeof(CovarianceLocalType));
            localElementDictionary.Add(nCovarianceLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eEqNameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "ThermoML.Antoine.VaporPressure",
                            "ThermoML.CustomExpansion",
                            "ThermoML.Helmholtz3General.EOS",
                            "ThermoML.Helmholtz4General.EOS",
                            "ThermoML.WagnerLinear.VaporPressure",
                            "ThermoML.Wagner25Linear.VaporPressure",
                            "ThermoML.Wagner36Linear.VaporPressure",
                            "ThermoML.PolynomialExpansion",
                            "ThermoML.SpanWagner12Nonpolar.EOS",
                            "ThermoML.SpanWagner12Polar.EOS"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eEqNameLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
        /// </para>
        /// </summary>
        public partial class EqPropertyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPureOrMixtureDataNumberXName = System.Xml.Linq.XName.Get("nPureOrMixtureDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nReactionDataNumberXName = System.Xml.Linq.XName.Get("nReactionDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPropNumberXName = System.Xml.Linq.XName.Get("nPropNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEqSymbolXName = System.Xml.Linq.XName.Get("sEqSymbol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqPropIndexXName = System.Xml.Linq.XName.Get("nEqPropIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> nEqPropIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sOtherPropUnitXName = System.Xml.Linq.XName.Get("sOtherPropUnit", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqPropRangeMinXName = System.Xml.Linq.XName.Get("nEqPropRangeMin", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqPropRangeMaxXName = System.Xml.Linq.XName.Get("nEqPropRangeMax", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EqProperty", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EqPropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EqPropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EqPropertyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(nPureOrMixtureDataNumberXName), new NamedContentModelEntity(nReactionDataNumberXName)), new NamedContentModelEntity(nPropNumberXName), new NamedContentModelEntity(sEqSymbolXName), new NamedContentModelEntity(nEqPropIndexXName), new NamedContentModelEntity(sOtherPropUnitXName), new NamedContentModelEntity(nEqPropRangeMinXName), new NamedContentModelEntity(nEqPropRangeMaxXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public EqPropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPureOrMixtureDataNumber {
                get {
                    XElement x = this.GetElement(nPureOrMixtureDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPureOrMixtureDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nReactionDataNumber {
                get {
                    XElement x = this.GetElement(nReactionDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nReactionDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual decimal nPropNumber {
                get {
                    XElement x = this.GetElement(nPropNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPropNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sEqSymbol {
                get {
                    XElement x = this.GetElement(sEqSymbolXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEqSymbolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual IList<decimal> nEqPropIndex {
                get {
                    if ((this.nEqPropIndexField == null)) {
                        this.nEqPropIndexField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, nEqPropIndexXName);
                    }
                    return this.nEqPropIndexField;
                }
                set {
                    if ((value == null)) {
                        this.nEqPropIndexField = null;
                    }
                    else {
                        if ((this.nEqPropIndexField == null)) {
                            this.nEqPropIndexField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, nEqPropIndexXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.nEqPropIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sOtherPropUnit {
                get {
                    XElement x = this.GetElement(sOtherPropUnitXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sOtherPropUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqPropRangeMin {
                get {
                    XElement x = this.GetElement(nEqPropRangeMinXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqPropRangeMinXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nPropNumber, sEqSymbol, nEqPropIndex*, sOtherPropUnit?, nEqPropRangeMin?, nEqPropRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqPropRangeMax {
                get {
                    XElement x = this.GetElement(nEqPropRangeMaxXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqPropRangeMaxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EqPropertyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPureOrMixtureDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nReactionDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nPropNumberXName, typeof(decimal));
                localElementDictionary.Add(sEqSymbolXName, typeof(string));
                localElementDictionary.Add(nEqPropIndexXName, typeof(decimal));
                localElementDictionary.Add(sOtherPropUnitXName, typeof(string));
                localElementDictionary.Add(nEqPropRangeMinXName, typeof(float));
                localElementDictionary.Add(nEqPropRangeMaxXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
        /// </para>
        /// </summary>
        public partial class EqConstraintLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPureOrMixtureDataNumberXName = System.Xml.Linq.XName.Get("nPureOrMixtureDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nReactionDataNumberXName = System.Xml.Linq.XName.Get("nReactionDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nConstraintNumberXName = System.Xml.Linq.XName.Get("nConstraintNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEqSymbolXName = System.Xml.Linq.XName.Get("sEqSymbol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstraintIndexXName = System.Xml.Linq.XName.Get("nEqConstraintIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> nEqConstraintIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sOtherConstraintUnitXName = System.Xml.Linq.XName.Get("sOtherConstraintUnit", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstraintRangeMinXName = System.Xml.Linq.XName.Get("nEqConstraintRangeMin", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstraintRangeMaxXName = System.Xml.Linq.XName.Get("nEqConstraintRangeMax", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EqConstraint", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EqConstraintLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EqConstraintLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EqConstraintLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(nPureOrMixtureDataNumberXName), new NamedContentModelEntity(nReactionDataNumberXName)), new NamedContentModelEntity(nConstraintNumberXName), new NamedContentModelEntity(sEqSymbolXName), new NamedContentModelEntity(nEqConstraintIndexXName), new NamedContentModelEntity(sOtherConstraintUnitXName), new NamedContentModelEntity(nEqConstraintRangeMinXName), new NamedContentModelEntity(nEqConstraintRangeMaxXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public EqConstraintLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPureOrMixtureDataNumber {
                get {
                    XElement x = this.GetElement(nPureOrMixtureDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPureOrMixtureDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nReactionDataNumber {
                get {
                    XElement x = this.GetElement(nReactionDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nReactionDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual decimal nConstraintNumber {
                get {
                    XElement x = this.GetElement(nConstraintNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nConstraintNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sEqSymbol {
                get {
                    XElement x = this.GetElement(sEqSymbolXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEqSymbolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual IList<decimal> nEqConstraintIndex {
                get {
                    if ((this.nEqConstraintIndexField == null)) {
                        this.nEqConstraintIndexField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, nEqConstraintIndexXName);
                    }
                    return this.nEqConstraintIndexField;
                }
                set {
                    if ((value == null)) {
                        this.nEqConstraintIndexField = null;
                    }
                    else {
                        if ((this.nEqConstraintIndexField == null)) {
                            this.nEqConstraintIndexField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, nEqConstraintIndexXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.nEqConstraintIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sOtherConstraintUnit {
                get {
                    XElement x = this.GetElement(sOtherConstraintUnitXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sOtherConstraintUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqConstraintRangeMin {
                get {
                    XElement x = this.GetElement(nEqConstraintRangeMinXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqConstraintRangeMinXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nConstraintNumber, sEqSymbol, nEqConstraintIndex*, sOtherConstraintUnit?, nEqConstraintRangeMin?, nEqConstraintRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqConstraintRangeMax {
                get {
                    XElement x = this.GetElement(nEqConstraintRangeMaxXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqConstraintRangeMaxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EqConstraintLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPureOrMixtureDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nReactionDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nConstraintNumberXName, typeof(decimal));
                localElementDictionary.Add(sEqSymbolXName, typeof(string));
                localElementDictionary.Add(nEqConstraintIndexXName, typeof(decimal));
                localElementDictionary.Add(sOtherConstraintUnitXName, typeof(string));
                localElementDictionary.Add(nEqConstraintRangeMinXName, typeof(float));
                localElementDictionary.Add(nEqConstraintRangeMaxXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
        /// </para>
        /// </summary>
        public partial class EqVariableLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nPureOrMixtureDataNumberXName = System.Xml.Linq.XName.Get("nPureOrMixtureDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nReactionDataNumberXName = System.Xml.Linq.XName.Get("nReactionDataNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVarNumberXName = System.Xml.Linq.XName.Get("nVarNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEqSymbolXName = System.Xml.Linq.XName.Get("sEqSymbol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqVarIndexXName = System.Xml.Linq.XName.Get("nEqVarIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> nEqVarIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sOtherVarUnitXName = System.Xml.Linq.XName.Get("sOtherVarUnit", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqVarRangeMinXName = System.Xml.Linq.XName.Get("nEqVarRangeMin", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqVarRangeMaxXName = System.Xml.Linq.XName.Get("nEqVarRangeMax", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EqVariable", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EqVariableLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EqVariableLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EqVariableLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(nPureOrMixtureDataNumberXName), new NamedContentModelEntity(nReactionDataNumberXName)), new NamedContentModelEntity(nVarNumberXName), new NamedContentModelEntity(sEqSymbolXName), new NamedContentModelEntity(nEqVarIndexXName), new NamedContentModelEntity(sOtherVarUnitXName), new NamedContentModelEntity(nEqVarRangeMinXName), new NamedContentModelEntity(nEqVarRangeMaxXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public EqVariableLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nPureOrMixtureDataNumber {
                get {
                    XElement x = this.GetElement(nPureOrMixtureDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nPureOrMixtureDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nReactionDataNumber {
                get {
                    XElement x = this.GetElement(nReactionDataNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nReactionDataNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual decimal nVarNumber {
                get {
                    XElement x = this.GetElement(nVarNumberXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVarNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sEqSymbol {
                get {
                    XElement x = this.GetElement(sEqSymbolXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEqSymbolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual IList<decimal> nEqVarIndex {
                get {
                    if ((this.nEqVarIndexField == null)) {
                        this.nEqVarIndexField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, nEqVarIndexXName);
                    }
                    return this.nEqVarIndexField;
                }
                set {
                    if ((value == null)) {
                        this.nEqVarIndexField = null;
                    }
                    else {
                        if ((this.nEqVarIndexField == null)) {
                            this.nEqVarIndexField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, nEqVarIndexXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.nEqVarIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual string sOtherVarUnit {
                get {
                    XElement x = this.GetElement(sOtherVarUnitXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sOtherVarUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqVarRangeMin {
                get {
                    XElement x = this.GetElement(nEqVarRangeMinXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqVarRangeMinXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((nPureOrMixtureDataNumber | nReactionDataNumber)?, nVarNumber, sEqSymbol, nEqVarIndex*, sOtherVarUnit?, nEqVarRangeMin?, nEqVarRangeMax?)
            /// </para>
            /// </summary>
            public virtual System.Single? nEqVarRangeMax {
                get {
                    XElement x = this.GetElement(nEqVarRangeMaxXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqVarRangeMaxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EqVariableLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nPureOrMixtureDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nReactionDataNumberXName, typeof(decimal));
                localElementDictionary.Add(nVarNumberXName, typeof(decimal));
                localElementDictionary.Add(sEqSymbolXName, typeof(string));
                localElementDictionary.Add(nEqVarIndexXName, typeof(decimal));
                localElementDictionary.Add(sOtherVarUnitXName, typeof(string));
                localElementDictionary.Add(nEqVarRangeMinXName, typeof(float));
                localElementDictionary.Add(nEqVarRangeMaxXName, typeof(float));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
        /// </para>
        /// </summary>
        public partial class EqParameterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParNumberXName = System.Xml.Linq.XName.Get("nEqParNumber", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEqParSymbolXName = System.Xml.Linq.XName.Get("sEqParSymbol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> sEqParSymbolField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParIndexXName = System.Xml.Linq.XName.Get("nEqParIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> nEqParIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParValueXName = System.Xml.Linq.XName.Get("nEqParValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParDigitsXName = System.Xml.Linq.XName.Get("nEqParDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EqParameter", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EqParameterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EqParameterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EqParameterLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nEqParNumberXName), new SequenceContentModelEntity(new NamedContentModelEntity(sEqParSymbolXName), new NamedContentModelEntity(nEqParIndexXName)), new NamedContentModelEntity(nEqParValueXName), new NamedContentModelEntity(nEqParDigitsXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public EqParameterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public virtual System.Decimal? nEqParNumber {
                get {
                    XElement x = this.GetElement(nEqParNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nEqParNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public virtual IList<string> sEqParSymbol {
                get {
                    if ((this.sEqParSymbolField == null)) {
                        this.sEqParSymbolField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sEqParSymbolXName);
                    }
                    return this.sEqParSymbolField;
                }
                set {
                    if ((value == null)) {
                        this.sEqParSymbolField = null;
                    }
                    else {
                        if ((this.sEqParSymbolField == null)) {
                            this.sEqParSymbolField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sEqParSymbolXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.sEqParSymbolField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public virtual IList<decimal> nEqParIndex {
                get {
                    if ((this.nEqParIndexField == null)) {
                        this.nEqParIndexField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, nEqParIndexXName);
                    }
                    return this.nEqParIndexField;
                }
                set {
                    if ((value == null)) {
                        this.nEqParIndexField = null;
                    }
                    else {
                        if ((this.nEqParIndexField == null)) {
                            this.nEqParIndexField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, nEqParIndexXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.nEqParIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public virtual float nEqParValue {
                get {
                    XElement x = this.GetElement(nEqParValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqParValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber?, (sEqParSymbol, nEqParIndex*)+, nEqParValue, nEqParDigits)
            /// </para>
            /// </summary>
            public virtual decimal nEqParDigits {
                get {
                    XElement x = this.GetElement(nEqParDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nEqParDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EqParameterLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nEqParNumberXName, typeof(decimal));
                localElementDictionary.Add(sEqParSymbolXName, typeof(string));
                localElementDictionary.Add(nEqParIndexXName, typeof(decimal));
                localElementDictionary.Add(nEqParValueXName, typeof(float));
                localElementDictionary.Add(nEqParDigitsXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
        /// </para>
        /// </summary>
        public partial class EqConstantLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEqConstantSymbolXName = System.Xml.Linq.XName.Get("sEqConstantSymbol", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstantIndexXName = System.Xml.Linq.XName.Get("nEqConstantIndex", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> nEqConstantIndexField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstantValueXName = System.Xml.Linq.XName.Get("nEqConstantValue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqConstantDigitsXName = System.Xml.Linq.XName.Get("nEqConstantDigits", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EqConstant", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EqConstantLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EqConstantLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EqConstantLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sEqConstantSymbolXName), new NamedContentModelEntity(nEqConstantIndexXName), new NamedContentModelEntity(nEqConstantValueXName), new NamedContentModelEntity(nEqConstantDigitsXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
            /// </para>
            /// </summary>
            public EqConstantLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
            /// </para>
            /// </summary>
            public virtual string sEqConstantSymbol {
                get {
                    XElement x = this.GetElement(sEqConstantSymbolXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEqConstantSymbolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
            /// </para>
            /// </summary>
            public virtual IList<decimal> nEqConstantIndex {
                get {
                    if ((this.nEqConstantIndexField == null)) {
                        this.nEqConstantIndexField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, nEqConstantIndexXName);
                    }
                    return this.nEqConstantIndexField;
                }
                set {
                    if ((value == null)) {
                        this.nEqConstantIndexField = null;
                    }
                    else {
                        if ((this.nEqConstantIndexField == null)) {
                            this.nEqConstantIndexField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, nEqConstantIndexXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.nEqConstantIndexField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
            /// </para>
            /// </summary>
            public virtual float nEqConstantValue {
                get {
                    XElement x = this.GetElement(nEqConstantValueXName);
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetElement(nEqConstantValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (sEqConstantSymbol, nEqConstantIndex*, nEqConstantValue, nEqConstantDigits)
            /// </para>
            /// </summary>
            public virtual decimal nEqConstantDigits {
                get {
                    XElement x = this.GetElement(nEqConstantDigitsXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nEqConstantDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EqConstantLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sEqConstantSymbolXName, typeof(string));
                localElementDictionary.Add(nEqConstantIndexXName, typeof(decimal));
                localElementDictionary.Add(nEqConstantValueXName, typeof(float));
                localElementDictionary.Add(nEqConstantDigitsXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nEqParNumber1, nEqParNumber2, nCovarianceValue)
        /// </para>
        /// </summary>
        public partial class CovarianceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParNumber1XName = System.Xml.Linq.XName.Get("nEqParNumber1", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nEqParNumber2XName = System.Xml.Linq.XName.Get("nEqParNumber2", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nCovarianceValueXName = System.Xml.Linq.XName.Get("nCovarianceValue", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Covariance", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CovarianceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CovarianceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CovarianceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nEqParNumber1XName), new NamedContentModelEntity(nEqParNumber2XName), new NamedContentModelEntity(nCovarianceValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nEqParNumber1, nEqParNumber2, nCovarianceValue)
            /// </para>
            /// </summary>
            public CovarianceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber1, nEqParNumber2, nCovarianceValue)
            /// </para>
            /// </summary>
            public virtual decimal nEqParNumber1 {
                get {
                    XElement x = this.GetElement(nEqParNumber1XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nEqParNumber1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber1, nEqParNumber2, nCovarianceValue)
            /// </para>
            /// </summary>
            public virtual decimal nEqParNumber2 {
                get {
                    XElement x = this.GetElement(nEqParNumber2XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nEqParNumber2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nEqParNumber1, nEqParNumber2, nCovarianceValue)
            /// </para>
            /// </summary>
            public virtual double nCovarianceValue {
                get {
                    XElement x = this.GetElement(nCovarianceValueXName);
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
                set {
                    this.SetElement(nCovarianceValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CovarianceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nEqParNumber1XName, typeof(decimal));
                localElementDictionary.Add(nEqParNumber2XName, typeof(decimal));
                localElementDictionary.Add(nCovarianceValueXName, typeof(double));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// DataReport complex type
    /// </para>
    /// <para>
    /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
    /// </para>
    /// </summary>
    public partial class DataReportType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CitationXName = System.Xml.Linq.XName.Get("Citation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompoundXName = System.Xml.Linq.XName.Get("Compound", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Compound> CompoundField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PureOrMixtureDataXName = System.Xml.Linq.XName.Get("PureOrMixtureData", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PureOrMixtureData> PureOrMixtureDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReactionDataXName = System.Xml.Linq.XName.Get("ReactionData", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReactionData> ReactionDataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataReport", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataReportType(XElement xe) { return XTypedServices.ToXTypedElement<DataReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataReportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VersionXName), new NamedContentModelEntity(CitationXName), new NamedContentModelEntity(CompoundXName), new NamedContentModelEntity(PureOrMixtureDataXName), new NamedContentModelEntity(ReactionDataXName));
        }
        
        /// <summary>
        /// <para>
        /// DataReport complex type
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public DataReportType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual VersionLocalType Version {
            get {
                XElement x = this.GetElement(VersionXName);
                return ((VersionLocalType)(x));
            }
            set {
                this.SetElement(VersionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual CitationType Citation {
            get {
                XElement x = this.GetElement(CitationXName);
                return ((CitationType)(x));
            }
            set {
                this.SetElement(CitationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<Compound> Compound {
            get {
                if ((this.CompoundField == null)) {
                    this.CompoundField = new XTypedList<Compound>(this, LinqToXsdTypeManager.Instance, CompoundXName);
                }
                return this.CompoundField;
            }
            set {
                if ((value == null)) {
                    this.CompoundField = null;
                }
                else {
                    if ((this.CompoundField == null)) {
                        this.CompoundField = XTypedList<Compound>.Initialize(this, LinqToXsdTypeManager.Instance, value, CompoundXName);
                    }
                    else {
                        XTypedServices.SetList<Compound>(this.CompoundField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<PureOrMixtureData> PureOrMixtureData {
            get {
                if ((this.PureOrMixtureDataField == null)) {
                    this.PureOrMixtureDataField = new XTypedList<PureOrMixtureData>(this, LinqToXsdTypeManager.Instance, PureOrMixtureDataXName);
                }
                return this.PureOrMixtureDataField;
            }
            set {
                if ((value == null)) {
                    this.PureOrMixtureDataField = null;
                }
                else {
                    if ((this.PureOrMixtureDataField == null)) {
                        this.PureOrMixtureDataField = XTypedList<PureOrMixtureData>.Initialize(this, LinqToXsdTypeManager.Instance, value, PureOrMixtureDataXName);
                    }
                    else {
                        XTypedServices.SetList<PureOrMixtureData>(this.PureOrMixtureDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<ReactionData> ReactionData {
            get {
                if ((this.ReactionDataField == null)) {
                    this.ReactionDataField = new XTypedList<ReactionData>(this, LinqToXsdTypeManager.Instance, ReactionDataXName);
                }
                return this.ReactionDataField;
            }
            set {
                if ((value == null)) {
                    this.ReactionDataField = null;
                }
                else {
                    if ((this.ReactionDataField == null)) {
                        this.ReactionDataField = XTypedList<ReactionData>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReactionDataXName);
                    }
                    else {
                        XTypedServices.SetList<ReactionData>(this.ReactionDataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataReportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VersionXName, typeof(VersionLocalType));
            localElementDictionary.Add(CitationXName, typeof(CitationType));
            localElementDictionary.Add(CompoundXName, typeof(Compound));
            localElementDictionary.Add(PureOrMixtureDataXName, typeof(PureOrMixtureData));
            localElementDictionary.Add(ReactionDataXName, typeof(ReactionData));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nVersionMajor, nVersionMinor)
        /// </para>
        /// </summary>
        public partial class VersionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVersionMajorXName = System.Xml.Linq.XName.Get("nVersionMajor", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName nVersionMinorXName = System.Xml.Linq.XName.Get("nVersionMinor", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Version", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VersionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VersionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VersionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nVersionMajorXName), new NamedContentModelEntity(nVersionMinorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (nVersionMajor, nVersionMinor)
            /// </para>
            /// </summary>
            public VersionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVersionMajor, nVersionMinor)
            /// </para>
            /// </summary>
            public virtual decimal nVersionMajor {
                get {
                    XElement x = this.GetElement(nVersionMajorXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVersionMajorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (nVersionMajor, nVersionMinor)
            /// </para>
            /// </summary>
            public virtual decimal nVersionMinor {
                get {
                    XElement x = this.GetElement(nVersionMinorXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElement(nVersionMinorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VersionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(nVersionMajorXName, typeof(decimal));
                localElementDictionary.Add(nVersionMinorXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
    /// </para>
    /// </summary>
    public partial class CitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TRCRefIDXName = System.Xml.Linq.XName.Get("TRCRefID", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eTypeXName = System.Xml.Linq.XName.Get("eType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eSourceTypeXName = System.Xml.Linq.XName.Get("eSourceType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDocumentOriginXName = System.Xml.Linq.XName.Get("sDocumentOrigin", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sAuthorXName = System.Xml.Linq.XName.Get("sAuthor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> sAuthorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sPubNameXName = System.Xml.Linq.XName.Get("sPubName", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yrPubYrXName = System.Xml.Linq.XName.Get("yrPubYr", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateCitXName = System.Xml.Linq.XName.Get("dateCit", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sTitleXName = System.Xml.Linq.XName.Get("sTitle", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sAbstractXName = System.Xml.Linq.XName.Get("sAbstract", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sKeywordXName = System.Xml.Linq.XName.Get("sKeyword", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> sKeywordField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eLanguageXName = System.Xml.Linq.XName.Get("eLanguage", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDOIXName = System.Xml.Linq.XName.Get("sDOI", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlCitXName = System.Xml.Linq.XName.Get("urlCit", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sCASCitXName = System.Xml.Linq.XName.Get("sCASCit", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sIDNumXName = System.Xml.Linq.XName.Get("sIDNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sLocationXName = System.Xml.Linq.XName.Get("sLocation", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sVolXName = System.Xml.Linq.XName.Get("sVol", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sPageXName = System.Xml.Linq.XName.Get("sPage", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bookXName = System.Xml.Linq.XName.Get("book", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName journalXName = System.Xml.Linq.XName.Get("journal", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thesisXName = System.Xml.Linq.XName.Get("thesis", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CitationType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CitationType(XElement xe) { return XTypedServices.ToXTypedElement<CitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TRCRefIDXName), new NamedContentModelEntity(eTypeXName), new NamedContentModelEntity(eSourceTypeXName), new NamedContentModelEntity(sDocumentOriginXName), new NamedContentModelEntity(sAuthorXName), new NamedContentModelEntity(sPubNameXName), new NamedContentModelEntity(yrPubYrXName), new NamedContentModelEntity(dateCitXName), new NamedContentModelEntity(sTitleXName), new NamedContentModelEntity(sAbstractXName), new NamedContentModelEntity(sKeywordXName), new NamedContentModelEntity(eLanguageXName), new NamedContentModelEntity(sDOIXName), new NamedContentModelEntity(urlCitXName), new NamedContentModelEntity(sCASCitXName), new NamedContentModelEntity(sIDNumXName), new NamedContentModelEntity(sLocationXName), new NamedContentModelEntity(sVolXName), new NamedContentModelEntity(sPageXName), new ChoiceContentModelEntity(new NamedContentModelEntity(bookXName), new NamedContentModelEntity(journalXName), new NamedContentModelEntity(thesisXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public CitationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual TRCRefID TRCRefID {
            get {
                XElement x = this.GetElement(TRCRefIDXName);
                return ((TRCRefID)(x));
            }
            set {
                this.SetElement(TRCRefIDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The type of publication
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual www.iupac.org.namespaces.ThermoML.CitationType.eTypeEnum? eType {
            get {
                XElement x = this.GetElement(eTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.iupac.org.namespaces.ThermoML.CitationType.eTypeEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.CitationType.eTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(eTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eTypeXName, value.ToString(), "eType", eTypeEnumValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The source status type for a citation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual www.iupac.org.namespaces.ThermoML.CitationType.eSourceTypeEnum? eSourceType {
            get {
                XElement x = this.GetElement(eSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.iupac.org.namespaces.ThermoML.CitationType.eSourceTypeEnum)(Enum.Parse(typeof(www.iupac.org.namespaces.ThermoML.CitationType.eSourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(eSourceTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eSourceTypeXName, value.ToString(), "eSourceType", eSourceTypeEnumValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Company, institution, or conference name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sDocumentOrigin {
            get {
                XElement x = this.GetElement(sDocumentOriginXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDocumentOriginXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Author of publication
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual IList<string> sAuthor {
            get {
                if ((this.sAuthorField == null)) {
                    this.sAuthorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sAuthorXName);
                }
                return this.sAuthorField;
            }
            set {
                if ((value == null)) {
                    this.sAuthorField = null;
                }
                else {
                    if ((this.sAuthorField == null)) {
                        this.sAuthorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sAuthorXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.sAuthorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Name of the publication.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sPubName {
            get {
                XElement x = this.GetElement(sPubNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sPubNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Publication year
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? yrPubYr {
            get {
                XElement x = this.GetElement(yrPubYrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(yrPubYrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Date of the citation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? dateCit {
            get {
                XElement x = this.GetElement(dateCitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(dateCitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Title of the publication
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sTitle {
            get {
                XElement x = this.GetElement(sTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An abstract of the publication
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sAbstract {
            get {
                XElement x = this.GetElement(sAbstractXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sAbstractXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual IList<string> sKeyword {
            get {
                if ((this.sKeywordField == null)) {
                    this.sKeywordField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sKeywordXName);
                }
                return this.sKeywordField;
            }
            set {
                if ((value == null)) {
                    this.sKeywordField = null;
                }
                else {
                    if ((this.sKeywordField == null)) {
                        this.sKeywordField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sKeywordXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.sKeywordField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Language of publication
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string eLanguage {
            get {
                XElement x = this.GetElement(eLanguageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eLanguageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eLanguageXName, value, "eLanguage", eLanguageLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DOI
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sDOI {
            get {
                XElement x = this.GetElement(sDOIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDOIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// URL to the publication
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string urlCit {
            get {
                XElement x = this.GetElement(urlCitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(urlCitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Chemical Abstracts Service citation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sCASCit {
            get {
                XElement x = this.GetElement(sCASCitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sCASCitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identification number, e.g., a patent number or a document number
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sIDNum {
            get {
                XElement x = this.GetElement(sIDNumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sIDNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a location
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sLocation {
            get {
                XElement x = this.GetElement(sLocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sLocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Volume number
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sVol {
            get {
                XElement x = this.GetElement(sVolXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sVolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Page range where the publication can be found
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual string sPage {
            get {
                XElement x = this.GetElement(sPageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sPageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual bookLocalType book {
            get {
                XElement x = this.GetElement(bookXName);
                return ((bookLocalType)(x));
            }
            set {
                this.SetElement(bookXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual journalLocalType journal {
            get {
                XElement x = this.GetElement(journalXName);
                return ((journalLocalType)(x));
            }
            set {
                this.SetElement(journalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TRCRefID?, eType?, eSourceType?, sDocumentOrigin?, sAuthor*, sPubName?, yrPubYr?, dateCit?, sTitle?, sAbstract?, sKeyword*, eLanguage?, sDOI?, urlCit?, sCASCit?, sIDNum?, sLocation?, sVol?, sPage?, (book | journal | thesis)?)
        /// </para>
        /// </summary>
        public virtual thesisLocalType thesis {
            get {
                XElement x = this.GetElement(thesisXName);
                return ((thesisLocalType)(x));
            }
            set {
                this.SetElement(thesisXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TRCRefIDXName, typeof(TRCRefID));
            localElementDictionary.Add(eTypeXName, typeof(string));
            localElementDictionary.Add(eSourceTypeXName, typeof(string));
            localElementDictionary.Add(sDocumentOriginXName, typeof(string));
            localElementDictionary.Add(sAuthorXName, typeof(string));
            localElementDictionary.Add(sPubNameXName, typeof(string));
            localElementDictionary.Add(yrPubYrXName, typeof(System.DateTime));
            localElementDictionary.Add(dateCitXName, typeof(System.DateTime));
            localElementDictionary.Add(sTitleXName, typeof(string));
            localElementDictionary.Add(sAbstractXName, typeof(string));
            localElementDictionary.Add(sKeywordXName, typeof(string));
            localElementDictionary.Add(eLanguageXName, typeof(string));
            localElementDictionary.Add(sDOIXName, typeof(string));
            localElementDictionary.Add(urlCitXName, typeof(string));
            localElementDictionary.Add(sCASCitXName, typeof(string));
            localElementDictionary.Add(sIDNumXName, typeof(string));
            localElementDictionary.Add(sLocationXName, typeof(string));
            localElementDictionary.Add(sVolXName, typeof(string));
            localElementDictionary.Add(sPageXName, typeof(string));
            localElementDictionary.Add(bookXName, typeof(bookLocalType));
            localElementDictionary.Add(journalXName, typeof(journalLocalType));
            localElementDictionary.Add(thesisXName, typeof(thesisLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum eTypeEnum {
            
            book,
            
            journal,
            
            report,
            
            patent,
            
            thesis,
            
            conferenceProceedings,
            
            archivedDocument,
            
            personalCorrespondence,
            
            publishedTranslation,
            
            unspecified,
        }
        
        public enum eSourceTypeEnum {
            
            Original,
            
            ChemicalAbstracts,
            
            Other,
        }
        
        private class eTypeEnumValidator {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "book",
                            "journal",
                            "report",
                            "patent",
                            "thesis",
                            "conferenceProceedings",
                            "archivedDocument",
                            "personalCorrespondence",
                            "publishedTranslation",
                            "unspecified"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eTypeEnumValidator() {
            }
        }
        
        private class eSourceTypeEnumValidator {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Original",
                            "ChemicalAbstracts",
                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eSourceTypeEnumValidator() {
            }
        }
        
        private class eLanguageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Chinese",
                            "English",
                            "French",
                            "German",
                            "Japanese",
                            "Polish",
                            "Russian",
                            "Other language"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eLanguageLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
        /// </para>
        /// </summary>
        public partial class bookLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sChapterXName = System.Xml.Linq.XName.Get("sChapter", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEditionXName = System.Xml.Linq.XName.Get("sEdition", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sEditorXName = System.Xml.Linq.XName.Get("sEditor", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> sEditorField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sISBNXName = System.Xml.Linq.XName.Get("sISBN", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sPublisherXName = System.Xml.Linq.XName.Get("sPublisher", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("book", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator bookLocalType(XElement xe) { return XTypedServices.ToXTypedElement<bookLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static bookLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sChapterXName), new NamedContentModelEntity(sEditionXName), new NamedContentModelEntity(sEditorXName), new NamedContentModelEntity(sISBNXName), new NamedContentModelEntity(sPublisherXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public bookLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Chapter number
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public virtual string sChapter {
                get {
                    XElement x = this.GetElement(sChapterXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sChapterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Edition number of the book
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public virtual string sEdition {
                get {
                    XElement x = this.GetElement(sEditionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sEditionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Editor of the book
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public virtual IList<string> sEditor {
                get {
                    if ((this.sEditorField == null)) {
                        this.sEditorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, sEditorXName);
                    }
                    return this.sEditorField;
                }
                set {
                    if ((value == null)) {
                        this.sEditorField = null;
                    }
                    else {
                        if ((this.sEditorField == null)) {
                            this.sEditorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, sEditorXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.sEditorField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// The International Standard Book Number
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public virtual string sISBN {
                get {
                    XElement x = this.GetElement(sISBNXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sISBNXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Publisher name and city
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sChapter?, sEdition?, sEditor*, sISBN?, sPublisher?)
            /// </para>
            /// </summary>
            public virtual string sPublisher {
                get {
                    XElement x = this.GetElement(sPublisherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sPublisherXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<bookLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sChapterXName, typeof(string));
                localElementDictionary.Add(sEditionXName, typeof(string));
                localElementDictionary.Add(sEditorXName, typeof(string));
                localElementDictionary.Add(sISBNXName, typeof(string));
                localElementDictionary.Add(sPublisherXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sISSN?, sIssue?, sCODEN?)
        /// </para>
        /// </summary>
        public partial class journalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sISSNXName = System.Xml.Linq.XName.Get("sISSN", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sIssueXName = System.Xml.Linq.XName.Get("sIssue", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sCODENXName = System.Xml.Linq.XName.Get("sCODEN", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("journal", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator journalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<journalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static journalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sISSNXName), new NamedContentModelEntity(sIssueXName), new NamedContentModelEntity(sCODENXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sISSN?, sIssue?, sCODEN?)
            /// </para>
            /// </summary>
            public journalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// The International Standard Subscription Number
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sISSN?, sIssue?, sCODEN?)
            /// </para>
            /// </summary>
            public virtual string sISSN {
                get {
                    XElement x = this.GetElement(sISSNXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sISSNXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Issue number, usually indicates month
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sISSN?, sIssue?, sCODEN?)
            /// </para>
            /// </summary>
            public virtual string sIssue {
                get {
                    XElement x = this.GetElement(sIssueXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sIssueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// The CODEN identification of the journal
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sISSN?, sIssue?, sCODEN?)
            /// </para>
            /// </summary>
            public virtual string sCODEN {
                get {
                    XElement x = this.GetElement(sCODENXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sCODENXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<journalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sISSNXName, typeof(string));
                localElementDictionary.Add(sIssueXName, typeof(string));
                localElementDictionary.Add(sCODENXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sDeg?, sDegInst?, sUMIPubNum?)
        /// </para>
        /// </summary>
        public partial class thesisLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sDegXName = System.Xml.Linq.XName.Get("sDeg", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sDegInstXName = System.Xml.Linq.XName.Get("sDegInst", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sUMIPubNumXName = System.Xml.Linq.XName.Get("sUMIPubNum", "http://www.iupac.org/namespaces/ThermoML");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("thesis", "http://www.iupac.org/namespaces/ThermoML");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator thesisLocalType(XElement xe) { return XTypedServices.ToXTypedElement<thesisLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static thesisLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sDegXName), new NamedContentModelEntity(sDegInstXName), new NamedContentModelEntity(sUMIPubNumXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (sDeg?, sDegInst?, sUMIPubNum?)
            /// </para>
            /// </summary>
            public thesisLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Academic degree designation, e.g., MS or PhD
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sDeg?, sDegInst?, sUMIPubNum?)
            /// </para>
            /// </summary>
            public virtual string sDeg {
                get {
                    XElement x = this.GetElement(sDegXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sDegXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Academic degree granting institution
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sDeg?, sDegInst?, sUMIPubNum?)
            /// </para>
            /// </summary>
            public virtual string sDegInst {
                get {
                    XElement x = this.GetElement(sDegInstXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sDegInstXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// University Microfilms International Publication Number
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (sDeg?, sDegInst?, sUMIPubNum?)
            /// </para>
            /// </summary>
            public virtual string sUMIPubNum {
                get {
                    XElement x = this.GetElement(sUMIPubNumXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(sUMIPubNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<thesisLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(sDegXName, typeof(string));
                localElementDictionary.Add(sDegInstXName, typeof(string));
                localElementDictionary.Add(sUMIPubNumXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// The sample status
    /// </para>
    /// </summary>
    public enum eSampleStatus {
        
        unknown,
        
        notDescribed,
        
        previousPaper,
        
        noSample,
    }
    
    /// <summary>
    /// <para>
    /// The sample status
    /// </para>
    /// </summary>
    public sealed class eSampleStatusValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "unknown",
                        "notDescribed",
                        "previousPaper",
                        "noSample"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eSampleStatusValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Source(s) of the sample
    /// </para>
    /// </summary>
    public sealed class eSampleSource {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Commercial source",
                        "Synthesized by the authors",
                        "Synthesized by others",
                        "Standard Reference Material (SRM)",
                        "Isolated from a natural product",
                        "Not stated in the document",
                        "No sample used"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eSampleSource() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Purification method(s) used to purify sample
    /// </para>
    /// </summary>
    public sealed class ePurifMethod {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Impurity adsorption",
                        "Vacuum degasification",
                        "Chemical reagent treatment",
                        "Crystallization from melt",
                        "Crystallization from solution",
                        "Liquid chromatography",
                        "Dried with chemical reagent",
                        "Dried in a desiccator",
                        "Dried by oven heating",
                        "Dried by vacuum heating",
                        "De-gassed by boiling or ultrasonically",
                        "De-gassed by evacuation",
                        "De-gassed by freezing and melting in vacuum",
                        "Fractional crystallization",
                        "Fractional distillation",
                        "Molecular sieve treatment",
                        "Unspecified",
                        "Preparative gas chromatography",
                        "Sublimation",
                        "Steam distillation",
                        "Solvent extraction",
                        "Salting out of solution",
                        "Zone refining",
                        "Other",
                        "None used"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ePurifMethod() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Analytical method used to measure purity.
    /// </para>
    /// </summary>
    public sealed class ePurityAnalMethod {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Chemical analysis",
                        "Difference between bubble and dew temperatures",
                        "Density",
                        "DSC",
                        "Estimation",
                        "Gas chromatography",
                        "Fraction melting in an adiabatic calorimeter",
                        "Mass spectrometry",
                        "NMR (proton)",
                        "NMR (other)",
                        "Not known",
                        "Spectroscopy",
                        "Thermal analysis using temperature-time measurement",
                        "Acid-base titration",
                        "Other types of titration",
                        "Mass loss on drying",
                        "Karl Fischer titration",
                        "HPLC",
                        "Ion chromatography",
                        "Ion-selective electrode",
                        "CO2 yield in combustion products",
                        "Other",
                        "Estimated by the compiler",
                        "Stated by supplier"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ePurityAnalMethod() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Purpose of measurement
    /// </para>
    /// </summary>
    public sealed class eExpPurpose {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Principal objective of the work",
                        "Secondary purpose (by-product of other objective)",
                        "Determined for identification of a synthesized compound"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eExpPurpose() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Phase description
    /// </para>
    /// </summary>
    public sealed class ePhaseName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Crystal 5",
                        "Crystal 4",
                        "Crystal 3",
                        "Crystal 2",
                        "Crystal 1",
                        "Crystal",
                        "Crystal of unknown type",
                        "Crystal of intercomponent compound 1",
                        "Crystal of intercomponent compound 2",
                        "Crystal of intercomponent compound 3",
                        "Metastable crystal",
                        "Glass",
                        "Smectic liquid crystal",
                        "Smectic liquid crystal 1",
                        "Smectic liquid crystal 2",
                        "Nematic liquid crystal",
                        "Nematic liquid crystal 1",
                        "Nematic liquid crystal 2",
                        "Cholesteric liquid crystal",
                        "Liquid crystal of unknown type",
                        "Liquid",
                        "Liquid mixture 1",
                        "Liquid mixture 2",
                        "Liquid mixture 3",
                        "Solution",
                        "Solution 1",
                        "Solution 2",
                        "Solution 3",
                        "Fluid (supercritical or subcritical phases)",
                        "Ideal gas",
                        "Gas",
                        "Air at 1 atmosphere"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ePhaseName() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Crystal Lattice Type
    /// </para>
    /// </summary>
    public enum eCrystalLatticeTypeSelection {
        
        Cubic,
        
        Tetragonal,
        
        Hexagonal,
        
        Rhombohedral,
        
        Orthorhombic,
        
        Monoclinic,
        
        Triclinic,
    }
    
    /// <summary>
    /// <para>
    /// Crystal Lattice Type
    /// </para>
    /// </summary>
    public sealed class eCrystalLatticeTypeSelectionValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Cubic",
                        "Tetragonal",
                        "Hexagonal",
                        "Rhombohedral",
                        "Orthorhombic",
                        "Monoclinic",
                        "Triclinic"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eCrystalLatticeTypeSelectionValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Means of property presentation
    /// </para>
    /// </summary>
    public sealed class ePresentation {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Direct value, X",
                        "Difference between upper and lower temperature, X(T2)-X(T1)",
                        "Difference between upper and lower pressure, X(P2)-X(P1)",
                        "Mean between upper and lower temperature, [X(T2)+X(T1)]/2",
                        "Difference with the reference state, X-X(REF)",
                        "Ratio with the reference state, X/X(REF)",
                        "Ratio of difference with the reference state to the reference state, [X-X(REF)]/X" +
                            "(REF)"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ePresentation() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Type of reference state
    /// </para>
    /// </summary>
    public sealed class eRefStateType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Reference phase with the same composition at fixed temperature and pressure",
                        "Reference phase with the same composition, temperature and pressure",
                        "Reference phase at fixed temperature and the same pressure",
                        "Reference phase at the same temperature and fixed pressure",
                        "Ideal gas at the same amount density, temperature, and composition",
                        "Ideal mixture of pure fluid components at the same amount density, temperature, a" +
                            "nd composition",
                        "Phase in equilibrium with primary phase at the same temperature and pressure",
                        "Pure components in the same proportion at fixed temperature and pressure",
                        "Pure components in the same proportion at the same temperature and pressure",
                        "Pure solvent at the temperature of the same phase equilibrium",
                        "Pure solvent at the same temperature and pressure",
                        "Pure solute at the same temperature and pressure"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private eRefStateType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
    /// </para>
    /// </summary>
    public partial class ConstraintVariableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eTemperatureXName = System.Xml.Linq.XName.Get("eTemperature", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ePressureXName = System.Xml.Linq.XName.Get("ePressure", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eComponentCompositionXName = System.Xml.Linq.XName.Get("eComponentComposition", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eSolventCompositionXName = System.Xml.Linq.XName.Get("eSolventComposition", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eMiscellaneousXName = System.Xml.Linq.XName.Get("eMiscellaneous", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eBioVariablesXName = System.Xml.Linq.XName.Get("eBioVariables", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstraintVariableType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConstraintVariableType(XElement xe) { return XTypedServices.ToXTypedElement<ConstraintVariableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConstraintVariableType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(eTemperatureXName), new NamedContentModelEntity(ePressureXName), new NamedContentModelEntity(eComponentCompositionXName), new NamedContentModelEntity(eSolventCompositionXName), new NamedContentModelEntity(eMiscellaneousXName), new NamedContentModelEntity(eBioVariablesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public ConstraintVariableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string eTemperature {
            get {
                XElement x = this.GetElement(eTemperatureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eTemperatureXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eTemperatureXName, value, "eTemperature", eTemperatureLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string ePressure {
            get {
                XElement x = this.GetElement(ePressureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ePressureXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ePressureXName, value, "ePressure", ePressureLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string eComponentComposition {
            get {
                XElement x = this.GetElement(eComponentCompositionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eComponentCompositionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eComponentCompositionXName, value, "eComponentComposition", eComponentCompositionLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string eSolventComposition {
            get {
                XElement x = this.GetElement(eSolventCompositionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eSolventCompositionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eSolventCompositionXName, value, "eSolventComposition", eSolventCompositionLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string eMiscellaneous {
            get {
                XElement x = this.GetElement(eMiscellaneousXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eMiscellaneousXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eMiscellaneousXName, value, "eMiscellaneous", eMiscellaneousLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (eTemperature | ePressure | eComponentComposition | eSolventComposition | eMiscellaneous | eBioVariables)
        /// </para>
        /// </summary>
        public virtual string eBioVariables {
            get {
                XElement x = this.GetElement(eBioVariablesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(eBioVariablesXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(eBioVariablesXName, value, "eBioVariables", eBioVariablesLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConstraintVariableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(eTemperatureXName, typeof(string));
            localElementDictionary.Add(ePressureXName, typeof(string));
            localElementDictionary.Add(eComponentCompositionXName, typeof(string));
            localElementDictionary.Add(eSolventCompositionXName, typeof(string));
            localElementDictionary.Add(eMiscellaneousXName, typeof(string));
            localElementDictionary.Add(eBioVariablesXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eTemperatureLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Temperature, K",
                            "Upper temperature, K",
                            "Lower temperature, K"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eTemperatureLocalType() {
            }
        }
        
        private class ePressureLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Pressure, kPa",
                            "Partial pressure, kPa",
                            "Upper pressure, kPa",
                            "Lower pressure, kPa"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ePressureLocalType() {
            }
        }
        
        private class eComponentCompositionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Mole fraction",
                            "Mass fraction",
                            "Molality, mol/kg",
                            "Amount concentration (molarity), mol/dm3",
                            "Volume fraction",
                            "Ratio of amount of solute to mass of solution, mol/kg",
                            "Ratio of mass of solute to volume of solution, kg/m3",
                            "Amount ratio of solute to solvent",
                            "Mass ratio of solute to solvent",
                            "Volume ratio of solute to solvent",
                            "Initial mole fraction of solute",
                            "Final mole fraction of solute",
                            "Initial mass fraction of solute",
                            "Final mass fraction of solute",
                            "Initial molality of solute, mol/kg",
                            "Final molality of solute, mol/kg"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eComponentCompositionLocalType() {
            }
        }
        
        private class eSolventCompositionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Solvent: Mole fraction",
                            "Solvent: Mass fraction",
                            "Solvent: Volume fraction",
                            "Solvent: Molality, mol/kg",
                            "Solvent: Amount concentration (molarity), mol/dm3",
                            "Solvent: Amount ratio of component to other component of binary solvent",
                            "Solvent: Mass ratio of component to other component of binary solvent",
                            "Solvent: Volume ratio of component to other component of binary solvent",
                            "Solvent: Ratio of amount of component to mass of solvent, mol/kg",
                            "Solvent: Ratio of component mass to volume of solvent, kg/m3"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eSolventCompositionLocalType() {
            }
        }
        
        private class eMiscellaneousLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Wavelength, nm",
                            "Frequency, MHz",
                            "Molar volume, m3/mol",
                            "Specific volume, m3/kg",
                            "Mass density, kg/m3",
                            "Amount density, mol/m3",
                            "Molar entropy, J/K/mol",
                            "(Relative) activity",
                            "Activity coefficient"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eMiscellaneousLocalType() {
            }
        }
        
        private class eBioVariablesLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "pH",
                            "Ionic strength (molality basis), mol/kg",
                            "Ionic strength (amount concentration basis), mol/dm3",
                            "pC (molality basis)",
                            "Solvent: pC (molality basis)"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eBioVariablesLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class ConstrDeviceSpecType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDeviceSpecEvaluatorXName = System.Xml.Linq.XName.Get("sDeviceSpecEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eDeviceSpecMethodXName = System.Xml.Linq.XName.Get("eDeviceSpecMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDeviceSpecMethodXName = System.Xml.Linq.XName.Get("sDeviceSpecMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nDeviceSpecValueXName = System.Xml.Linq.XName.Get("nDeviceSpecValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nDeviceSpecLevOfConfidXName = System.Xml.Linq.XName.Get("nDeviceSpecLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstrDeviceSpecType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConstrDeviceSpecType(XElement xe) { return XTypedServices.ToXTypedElement<ConstrDeviceSpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConstrDeviceSpecType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sDeviceSpecEvaluatorXName), new NamedContentModelEntity(eDeviceSpecMethodXName), new NamedContentModelEntity(sDeviceSpecMethodXName), new NamedContentModelEntity(nDeviceSpecValueXName), new NamedContentModelEntity(nDeviceSpecLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public ConstrDeviceSpecType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sDeviceSpecEvaluator {
            get {
                XElement x = this.GetElement(sDeviceSpecEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDeviceSpecEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string eDeviceSpecMethod {
            get {
                XElement x = this.GetElement(eDeviceSpecMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eDeviceSpecMethodXName, value, "eDeviceSpecMethod", eDeviceSpecMethodLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sDeviceSpecMethod {
            get {
                XElement x = this.GetElement(sDeviceSpecMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDeviceSpecMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nDeviceSpecValue {
            get {
                XElement x = this.GetElement(nDeviceSpecValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nDeviceSpecValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecValue?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nDeviceSpecLevOfConfid {
            get {
                XElement x = this.GetElement(nDeviceSpecLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nDeviceSpecLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConstrDeviceSpecType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sDeviceSpecEvaluatorXName, typeof(string));
            localElementDictionary.Add(eDeviceSpecMethodXName, typeof(string));
            localElementDictionary.Add(sDeviceSpecMethodXName, typeof(string));
            localElementDictionary.Add(nDeviceSpecValueXName, typeof(float));
            localElementDictionary.Add(nDeviceSpecLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eDeviceSpecMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Specified by the manufacturer",
                            "Certified or calibrated by a third party",
                            "Calibrated by the experimentalist"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eDeviceSpecMethodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class PropVarDeviceSpecType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDeviceSpecEvaluatorXName = System.Xml.Linq.XName.Get("sDeviceSpecEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eDeviceSpecMethodXName = System.Xml.Linq.XName.Get("eDeviceSpecMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sDeviceSpecMethodXName = System.Xml.Linq.XName.Get("sDeviceSpecMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nDeviceSpecLevOfConfidXName = System.Xml.Linq.XName.Get("nDeviceSpecLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropVarDeviceSpecType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PropVarDeviceSpecType(XElement xe) { return XTypedServices.ToXTypedElement<PropVarDeviceSpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropVarDeviceSpecType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sDeviceSpecEvaluatorXName), new NamedContentModelEntity(eDeviceSpecMethodXName), new NamedContentModelEntity(sDeviceSpecMethodXName), new NamedContentModelEntity(nDeviceSpecLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public PropVarDeviceSpecType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sDeviceSpecEvaluator {
            get {
                XElement x = this.GetElement(sDeviceSpecEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDeviceSpecEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string eDeviceSpecMethod {
            get {
                XElement x = this.GetElement(eDeviceSpecMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eDeviceSpecMethodXName, value, "eDeviceSpecMethod", eDeviceSpecMethodLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sDeviceSpecMethod {
            get {
                XElement x = this.GetElement(sDeviceSpecMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sDeviceSpecMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sDeviceSpecEvaluator?, eDeviceSpecMethod, sDeviceSpecMethod?, nDeviceSpecLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nDeviceSpecLevOfConfid {
            get {
                XElement x = this.GetElement(nDeviceSpecLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nDeviceSpecLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropVarDeviceSpecType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sDeviceSpecEvaluatorXName, typeof(string));
            localElementDictionary.Add(eDeviceSpecMethodXName, typeof(string));
            localElementDictionary.Add(sDeviceSpecMethodXName, typeof(string));
            localElementDictionary.Add(nDeviceSpecLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eDeviceSpecMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Specified by the manufacturer",
                            "Certified or calibrated by a third party",
                            "Calibrated by the experimentalist"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eDeviceSpecMethodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
    /// </para>
    /// </summary>
    public partial class ConstrRepeatabilityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sRepeatEvaluatorXName = System.Xml.Linq.XName.Get("sRepeatEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eRepeatMethodXName = System.Xml.Linq.XName.Get("eRepeatMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sRepeatMethodXName = System.Xml.Linq.XName.Get("sRepeatMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nRepeatValueXName = System.Xml.Linq.XName.Get("nRepeatValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nRepetitionsXName = System.Xml.Linq.XName.Get("nRepetitions", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstrRepeatabilityType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConstrRepeatabilityType(XElement xe) { return XTypedServices.ToXTypedElement<ConstrRepeatabilityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConstrRepeatabilityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sRepeatEvaluatorXName), new NamedContentModelEntity(eRepeatMethodXName), new NamedContentModelEntity(sRepeatMethodXName), new NamedContentModelEntity(nRepeatValueXName), new NamedContentModelEntity(nRepetitionsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public ConstrRepeatabilityType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public virtual string sRepeatEvaluator {
            get {
                XElement x = this.GetElement(sRepeatEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sRepeatEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public virtual string eRepeatMethod {
            get {
                XElement x = this.GetElement(eRepeatMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eRepeatMethodXName, value, "eRepeatMethod", eRepeatMethodLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public virtual string sRepeatMethod {
            get {
                XElement x = this.GetElement(sRepeatMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sRepeatMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public virtual System.Single? nRepeatValue {
            get {
                XElement x = this.GetElement(nRepeatValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nRepeatValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?, nRepeatValue?, nRepetitions?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? nRepetitions {
            get {
                XElement x = this.GetElement(nRepetitionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nRepetitionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConstrRepeatabilityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sRepeatEvaluatorXName, typeof(string));
            localElementDictionary.Add(eRepeatMethodXName, typeof(string));
            localElementDictionary.Add(sRepeatMethodXName, typeof(string));
            localElementDictionary.Add(nRepeatValueXName, typeof(float));
            localElementDictionary.Add(nRepetitionsXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eRepeatMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Standard deviation of a single value (biased)",
                            "Standard deviation of a single value (unbiased)",
                            "Standard deviation of the mean",
                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eRepeatMethodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?)
    /// </para>
    /// </summary>
    public partial class PropVarRepeatabilityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sRepeatEvaluatorXName = System.Xml.Linq.XName.Get("sRepeatEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eRepeatMethodXName = System.Xml.Linq.XName.Get("eRepeatMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sRepeatMethodXName = System.Xml.Linq.XName.Get("sRepeatMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropVarRepeatabilityType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PropVarRepeatabilityType(XElement xe) { return XTypedServices.ToXTypedElement<PropVarRepeatabilityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropVarRepeatabilityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sRepeatEvaluatorXName), new NamedContentModelEntity(eRepeatMethodXName), new NamedContentModelEntity(sRepeatMethodXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?)
        /// </para>
        /// </summary>
        public PropVarRepeatabilityType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?)
        /// </para>
        /// </summary>
        public virtual string sRepeatEvaluator {
            get {
                XElement x = this.GetElement(sRepeatEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sRepeatEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?)
        /// </para>
        /// </summary>
        public virtual string eRepeatMethod {
            get {
                XElement x = this.GetElement(eRepeatMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(eRepeatMethodXName, value, "eRepeatMethod", eRepeatMethodLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sRepeatEvaluator?, eRepeatMethod, sRepeatMethod?)
        /// </para>
        /// </summary>
        public virtual string sRepeatMethod {
            get {
                XElement x = this.GetElement(sRepeatMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sRepeatMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropVarRepeatabilityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sRepeatEvaluatorXName, typeof(string));
            localElementDictionary.Add(eRepeatMethodXName, typeof(string));
            localElementDictionary.Add(sRepeatMethodXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class eRepeatMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Standard deviation of a single value (biased)",
                            "Standard deviation of a single value (unbiased)",
                            "Standard deviation of the mean",
                            "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private eRepeatMethodLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class ConstrUncertaintyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sUncertEvaluatorXName = System.Xml.Linq.XName.Get("sUncertEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sUncertEvalMethodXName = System.Xml.Linq.XName.Get("sUncertEvalMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nStdUncertValueXName = System.Xml.Linq.XName.Get("nStdUncertValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCoverageFactorXName = System.Xml.Linq.XName.Get("nCoverageFactor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nExpandUncertValueXName = System.Xml.Linq.XName.Get("nExpandUncertValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nUncertLevOfConfidXName = System.Xml.Linq.XName.Get("nUncertLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConstrUncertaintyType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConstrUncertaintyType(XElement xe) { return XTypedServices.ToXTypedElement<ConstrUncertaintyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConstrUncertaintyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sUncertEvaluatorXName), new NamedContentModelEntity(sUncertEvalMethodXName), new NamedContentModelEntity(nStdUncertValueXName), new NamedContentModelEntity(nCoverageFactorXName), new NamedContentModelEntity(nExpandUncertValueXName), new NamedContentModelEntity(nUncertLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public ConstrUncertaintyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sUncertEvaluator {
            get {
                XElement x = this.GetElement(sUncertEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sUncertEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sUncertEvalMethod {
            get {
                XElement x = this.GetElement(sUncertEvalMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sUncertEvalMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nStdUncertValue {
            get {
                XElement x = this.GetElement(nStdUncertValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nStdUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCoverageFactor {
            get {
                XElement x = this.GetElement(nCoverageFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCoverageFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nExpandUncertValue {
            get {
                XElement x = this.GetElement(nExpandUncertValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nExpandUncertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (sUncertEvaluator?, sUncertEvalMethod?, nStdUncertValue?, nCoverageFactor?, nExpandUncertValue?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nUncertLevOfConfid {
            get {
                XElement x = this.GetElement(nUncertLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nUncertLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConstrUncertaintyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sUncertEvaluatorXName, typeof(string));
            localElementDictionary.Add(sUncertEvalMethodXName, typeof(string));
            localElementDictionary.Add(nStdUncertValueXName, typeof(float));
            localElementDictionary.Add(nCoverageFactorXName, typeof(float));
            localElementDictionary.Add(nExpandUncertValueXName, typeof(float));
            localElementDictionary.Add(nUncertLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
    /// </para>
    /// </summary>
    public partial class PropVarUncertaintyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nUncertAssessNumXName = System.Xml.Linq.XName.Get("nUncertAssessNum", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sUncertEvaluatorXName = System.Xml.Linq.XName.Get("sUncertEvaluator", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sUncertEvalMethodXName = System.Xml.Linq.XName.Get("sUncertEvalMethod", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nCoverageFactorXName = System.Xml.Linq.XName.Get("nCoverageFactor", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nUncertLevOfConfidXName = System.Xml.Linq.XName.Get("nUncertLevOfConfid", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropVarUncertaintyType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PropVarUncertaintyType(XElement xe) { return XTypedServices.ToXTypedElement<PropVarUncertaintyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropVarUncertaintyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nUncertAssessNumXName), new NamedContentModelEntity(sUncertEvaluatorXName), new NamedContentModelEntity(sUncertEvalMethodXName), new NamedContentModelEntity(nCoverageFactorXName), new NamedContentModelEntity(nUncertLevOfConfidXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public PropVarUncertaintyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual decimal nUncertAssessNum {
            get {
                XElement x = this.GetElement(nUncertAssessNumXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(nUncertAssessNumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sUncertEvaluator {
            get {
                XElement x = this.GetElement(sUncertEvaluatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sUncertEvaluatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual string sUncertEvalMethod {
            get {
                XElement x = this.GetElement(sUncertEvalMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sUncertEvalMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nCoverageFactor {
            get {
                XElement x = this.GetElement(nCoverageFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nCoverageFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nUncertAssessNum, sUncertEvaluator?, sUncertEvalMethod?, nCoverageFactor?, nUncertLevOfConfid?)
        /// </para>
        /// </summary>
        public virtual System.Single? nUncertLevOfConfid {
            get {
                XElement x = this.GetElement(nUncertLevOfConfidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nUncertLevOfConfidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropVarUncertaintyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nUncertAssessNumXName, typeof(decimal));
            localElementDictionary.Add(sUncertEvaluatorXName, typeof(string));
            localElementDictionary.Add(sUncertEvalMethodXName, typeof(string));
            localElementDictionary.Add(nCoverageFactorXName, typeof(float));
            localElementDictionary.Add(nUncertLevOfConfidXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nPositiveValue?, nNegativeValue?)
    /// </para>
    /// </summary>
    public partial class AsymUncertType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nPositiveValueXName = System.Xml.Linq.XName.Get("nPositiveValue", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nNegativeValueXName = System.Xml.Linq.XName.Get("nNegativeValue", "http://www.iupac.org/namespaces/ThermoML");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AsymUncertType", "http://www.iupac.org/namespaces/ThermoML");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AsymUncertType(XElement xe) { return XTypedServices.ToXTypedElement<AsymUncertType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AsymUncertType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nPositiveValueXName), new NamedContentModelEntity(nNegativeValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (nPositiveValue?, nNegativeValue?)
        /// </para>
        /// </summary>
        public AsymUncertType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPositiveValue?, nNegativeValue?)
        /// </para>
        /// </summary>
        public virtual System.Single? nPositiveValue {
            get {
                XElement x = this.GetElement(nPositiveValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nPositiveValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (nPositiveValue?, nNegativeValue?)
        /// </para>
        /// </summary>
        public virtual System.Single? nNegativeValue {
            get {
                XElement x = this.GetElement(nNegativeValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(nNegativeValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AsymUncertType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nPositiveValueXName, typeof(float));
            localElementDictionary.Add(nNegativeValueXName, typeof(float));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum MulticomponentType {
        
        complex,
    }
    
    public sealed class MulticomponentTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "complex"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MulticomponentTypeValidator() {
        }
    }
    
    public sealed class MulticomponentComposition {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "number of molecules",
                        "mole fraction",
                        "mass fraction"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MulticomponentComposition() {
        }
    }
    
    /// <summary>
    /// <para>
    /// DataReport complex type
    /// </para>
    /// </summary>
    public partial class DataReport : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DataReportType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataReport", "http://www.iupac.org/namespaces/ThermoML");
        
		public static explicit operator DataReport(XElement xe) { return XTypedServices.ToXTypedElement<DataReport, DataReportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DataReport complex type
        /// </para>
        /// </summary>
        public DataReport() {
            SetInnerType(new DataReportType());
        }
        
        /// <summary>
        /// <para>
        /// DataReport complex type
        /// </para>
        /// </summary>
        public DataReport(DataReportType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DataReportType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual www.iupac.org.namespaces.ThermoML.DataReportType.VersionLocalType Version {
            get {
                return this.ContentField.Version;
            }
            set {
                this.ContentField.Version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual CitationType Citation {
            get {
                return this.ContentField.Citation;
            }
            set {
                this.ContentField.Citation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<Compound> Compound {
            get {
                return this.ContentField.Compound;
            }
            set {
                this.ContentField.Compound = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<PureOrMixtureData> PureOrMixtureData {
            get {
                return this.ContentField.PureOrMixtureData;
            }
            set {
                this.ContentField.PureOrMixtureData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version, Citation, Compound*, PureOrMixtureData*, ReactionData*)
        /// </para>
        /// </summary>
        public virtual IList<ReactionData> ReactionData {
            get {
                return this.ContentField.ReactionData;
            }
            set {
                this.ContentField.ReactionData = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataReport Load(string xmlFile) {
            return XTypedServices.Load<DataReport, DataReportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataReport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataReport, DataReportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataReport Parse(string xml) {
            return XTypedServices.Parse<DataReport, DataReportType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataReport(((DataReportType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DataReportType ContentField) {
            this.ContentField = ((DataReportType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataReport", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.DataReportType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CitationType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.CitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConstraintVariableType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.ConstraintVariableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConstrDeviceSpecType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.ConstrDeviceSpecType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropVarDeviceSpecType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.PropVarDeviceSpecType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConstrRepeatabilityType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.ConstrRepeatabilityType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropVarRepeatabilityType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.PropVarRepeatabilityType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConstrUncertaintyType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.ConstrUncertaintyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropVarUncertaintyType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.PropVarUncertaintyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AsymUncertType", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.AsymUncertType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("TRCRefID", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.TRCRefID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Compound", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.Compound));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Sample", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.Sample));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PureOrMixtureData", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.PureOrMixtureData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReactionData", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.ReactionData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RegNum", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.RegNum));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Solvent", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.Solvent));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CurveDev", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.CurveDev));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CombinedUncertainty", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.CombinedUncertainty));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NumValues", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.NumValues));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CriticalEvaluation", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.CriticalEvaluation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Prediction", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.Prediction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Equation", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.Equation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DataReport", "http://www.iupac.org/namespaces/ThermoML"), typeof(global::www.iupac.org.namespaces.ThermoML.DataReport));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(www.iupac.org.namespaces.ThermoML.DataReport), typeof(global::www.iupac.org.namespaces.ThermoML.DataReportType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("TRCRefID", "http://www.iupac.org/namespaces/ThermoML")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public TRCRefID TRCRefID {  get {return rootObject as TRCRefID; } }

		public Compound Compound {  get {return rootObject as Compound; } }

		public Sample Sample {  get {return rootObject as Sample; } }

		public PureOrMixtureData PureOrMixtureData {  get {return rootObject as PureOrMixtureData; } }

		public ReactionData ReactionData {  get {return rootObject as ReactionData; } }

		public RegNum RegNum {  get {return rootObject as RegNum; } }

		public Solvent Solvent {  get {return rootObject as Solvent; } }

		public CurveDev CurveDev {  get {return rootObject as CurveDev; } }

		public CombinedUncertainty CombinedUncertainty {  get {return rootObject as CombinedUncertainty; } }

		public NumValues NumValues {  get {return rootObject as NumValues; } }

		public CriticalEvaluation CriticalEvaluation {  get {return rootObject as CriticalEvaluation; } }

		public Prediction Prediction {  get {return rootObject as Prediction; } }

		public Equation Equation {  get {return rootObject as Equation; } }

		public DataReport DataReport {  get {return rootObject as DataReport; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(TRCRefID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Compound root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Sample root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PureOrMixtureData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReactionData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RegNum root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Solvent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CurveDev root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CombinedUncertainty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NumValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CriticalEvaluation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Prediction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Equation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DataReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::www.iupac.org.namespaces.ThermoML.TRCRefID TRCRefID {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.TRCRefID; } }

		public global::www.iupac.org.namespaces.ThermoML.Compound Compound {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.Compound; } }

		public global::www.iupac.org.namespaces.ThermoML.Sample Sample {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.Sample; } }

		public global::www.iupac.org.namespaces.ThermoML.PureOrMixtureData PureOrMixtureData {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.PureOrMixtureData; } }

		public global::www.iupac.org.namespaces.ThermoML.ReactionData ReactionData {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.ReactionData; } }

		public global::www.iupac.org.namespaces.ThermoML.RegNum RegNum {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.RegNum; } }

		public global::www.iupac.org.namespaces.ThermoML.Solvent Solvent {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.Solvent; } }

		public global::www.iupac.org.namespaces.ThermoML.CurveDev CurveDev {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.CurveDev; } }

		public global::www.iupac.org.namespaces.ThermoML.CombinedUncertainty CombinedUncertainty {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.CombinedUncertainty; } }

		public global::www.iupac.org.namespaces.ThermoML.NumValues NumValues {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.NumValues; } }

		public global::www.iupac.org.namespaces.ThermoML.CriticalEvaluation CriticalEvaluation {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.CriticalEvaluation; } }

		public global::www.iupac.org.namespaces.ThermoML.Prediction Prediction {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.Prediction; } }

		public global::www.iupac.org.namespaces.ThermoML.Equation Equation {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.Equation; } }

		public global::www.iupac.org.namespaces.ThermoML.DataReport DataReport {  get {return rootObject as global::www.iupac.org.namespaces.ThermoML.DataReport; } }
        
        private XRoot() {
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.TRCRefID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.Compound root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.Sample root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.PureOrMixtureData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.ReactionData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.RegNum root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.Solvent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.CurveDev root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.CombinedUncertainty root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.NumValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.CriticalEvaluation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.Prediction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.Equation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.iupac.org.namespaces.ThermoML.DataReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
