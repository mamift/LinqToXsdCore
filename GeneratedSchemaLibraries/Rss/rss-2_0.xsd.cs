//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rss {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (channel, any)
    /// </para>
    /// </summary>
    public partial class rss : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName channelXName = System.Xml.Linq.XName.Get("channel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal versionFixedValue = System.Xml.XmlConvert.ToDecimal("2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rss", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator rss(XElement xe) { return XTypedServices.ToXTypedElement<rss>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static rss() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (channel, any)
        /// </para>
        /// </summary>
        public rss() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (channel, any)
        /// </para>
        /// </summary>
        public virtual RssChannel channel {
            get {
                XElement x = this.GetElement(channelXName);
                return ((RssChannel)(x));
            }
            set {
                this.SetElement(channelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (channel, any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal version {
            get {
                return versionFixedValue;
            }
            set {
                if (value.Equals(versionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, versionFixedValue);
                }
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static rss Load(string xmlFile) {
            return XTypedServices.Load<rss>(xmlFile);
        }
        
        public static rss Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<rss>(xmlFile);
        }
        
        public static rss Parse(string xml) {
            return XTypedServices.Parse<rss>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<rss>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(channelXName, typeof(RssChannel));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("channel", ""), 2)));
            transitions.Add(2, new Transitions(new SingleTransition(new WildCard("##other", ""), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// An item may represent a "story" -- much like a story in a newspaper or magazine; if so its description is a synopsis of the story, and the link points to the full story. An item may also be complete in itself, if so, the description contains the text (entity-encoded HTML is allowed), and the link and title may be omitted.
    /// </para>
    /// <para>
    /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
    /// </para>
    /// </summary>
    public partial class RssItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> descriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Category> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName commentsXName = System.Xml.Linq.XName.Get("comments", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> commentsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName enclosureXName = System.Xml.Linq.XName.Get("enclosure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Enclosure> enclosureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName guidXName = System.Xml.Linq.XName.Get("guid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Guid> guidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubDateXName = System.Xml.Linq.XName.Get("pubDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> pubDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Source> sourceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RssItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator RssItem(XElement xe) { return XTypedServices.ToXTypedElement<RssItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RssItem() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// An item may represent a "story" -- much like a story in a newspaper or magazine; if so its description is a synopsis of the story, and the link points to the full story. An item may also be complete in itself, if so, the description contains the text (entity-encoded HTML is allowed), and the link and title may be omitted.
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public RssItem() {
        }
        
        /// <summary>
        /// <para>
        /// The title of the item.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<string> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The item synopsis.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<string> description {
            get {
                if ((this.descriptionField == null)) {
                    this.descriptionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, descriptionXName);
                }
                return this.descriptionField;
            }
            set {
                if ((value == null)) {
                    this.descriptionField = null;
                }
                else {
                    if ((this.descriptionField == null)) {
                        this.descriptionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, descriptionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.descriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The URL of the item.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, linkXName);
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, linkXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Email address of the author of the item.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<string> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Includes the item in one or more categories. 
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<Category> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<Category>(this, LinqToXsdTypeManager.Instance, categoryXName);
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<Category>.Initialize(this, LinqToXsdTypeManager.Instance, value, categoryXName);
                    }
                    else {
                        XTypedServices.SetList<Category>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// URL of a page for comments relating to the item.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> comments {
            get {
                if ((this.commentsField == null)) {
                    this.commentsField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, commentsXName);
                }
                return this.commentsField;
            }
            set {
                if ((value == null)) {
                    this.commentsField = null;
                }
                else {
                    if ((this.commentsField == null)) {
                        this.commentsField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, commentsXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.commentsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Describes a media object that is attached to the item.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<Enclosure> enclosure {
            get {
                if ((this.enclosureField == null)) {
                    this.enclosureField = new XTypedList<Enclosure>(this, LinqToXsdTypeManager.Instance, enclosureXName);
                }
                return this.enclosureField;
            }
            set {
                if ((value == null)) {
                    this.enclosureField = null;
                }
                else {
                    if ((this.enclosureField == null)) {
                        this.enclosureField = XTypedList<Enclosure>.Initialize(this, LinqToXsdTypeManager.Instance, value, enclosureXName);
                    }
                    else {
                        XTypedServices.SetList<Enclosure>(this.enclosureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// guid or permalink URL for this entry
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<Guid> guid {
            get {
                if ((this.guidField == null)) {
                    this.guidField = new XTypedList<Guid>(this, LinqToXsdTypeManager.Instance, guidXName);
                }
                return this.guidField;
            }
            set {
                if ((value == null)) {
                    this.guidField = null;
                }
                else {
                    if ((this.guidField == null)) {
                        this.guidField = XTypedList<Guid>.Initialize(this, LinqToXsdTypeManager.Instance, value, guidXName);
                    }
                    else {
                        XTypedServices.SetList<Guid>(this.guidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Indicates when the item was published.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<string> pubDate {
            get {
                if ((this.pubDateField == null)) {
                    this.pubDateField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, pubDateXName);
                }
                return this.pubDateField;
            }
            set {
                if ((value == null)) {
                    this.pubDateField = null;
                }
                else {
                    if ((this.pubDateField == null)) {
                        this.pubDateField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, pubDateXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.pubDateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The RSS channel that the item came from.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IList<Source> source {
            get {
                if ((this.sourceField == null)) {
                    this.sourceField = new XTypedList<Source>(this, LinqToXsdTypeManager.Instance, sourceXName);
                }
                return this.sourceField;
            }
            set {
                if ((value == null)) {
                    this.sourceField = null;
                }
                else {
                    if ((this.sourceField == null)) {
                        this.sourceField = XTypedList<Source>.Initialize(this, LinqToXsdTypeManager.Instance, value, sourceXName);
                    }
                    else {
                        XTypedServices.SetList<Source>(this.sourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((title? | description? | link? | author? | category? | comments? | enclosure? | guid? | pubDate? | source? | any)+)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RssItem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(string));
            localElementDictionary.Add(descriptionXName, typeof(string));
            localElementDictionary.Add(linkXName, typeof(System.Uri));
            localElementDictionary.Add(authorXName, typeof(string));
            localElementDictionary.Add(categoryXName, typeof(Category));
            localElementDictionary.Add(commentsXName, typeof(System.Uri));
            localElementDictionary.Add(enclosureXName, typeof(Enclosure));
            localElementDictionary.Add(guidXName, typeof(Guid));
            localElementDictionary.Add(pubDateXName, typeof(string));
            localElementDictionary.Add(sourceXName, typeof(Source));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(2, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(4, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(6, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(8, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(10, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(12, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(14, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(16, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(18, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(20, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            transitions.Add(21, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("author", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("comments", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("enclosure", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("guid", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("source", ""), 20), new SingleTransition(new WildCard("##other", ""), 21)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1,
                            4,
                            6,
                            8,
                            10,
                            12,
                            14,
                            16,
                            18,
                            20,
                            21}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
    /// </para>
    /// </summary>
    public partial class RssChannel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> descriptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName copyrightXName = System.Xml.Linq.XName.Get("copyright", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> copyrightField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName managingEditorXName = System.Xml.Linq.XName.Get("managingEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> managingEditorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName webMasterXName = System.Xml.Linq.XName.Get("webMaster", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> webMasterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pubDateXName = System.Xml.Linq.XName.Get("pubDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> pubDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lastBuildDateXName = System.Xml.Linq.XName.Get("lastBuildDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> lastBuildDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Category> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName generatorXName = System.Xml.Linq.XName.Get("generator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> generatorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName docsXName = System.Xml.Linq.XName.Get("docs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> docsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cloudXName = System.Xml.Linq.XName.Get("cloud", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Cloud> cloudField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ttlXName = System.Xml.Linq.XName.Get("ttl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<decimal> ttlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName imageXName = System.Xml.Linq.XName.Get("image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Image> imageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ratingXName = System.Xml.Linq.XName.Get("rating", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ratingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName textInputXName = System.Xml.Linq.XName.Get("textInput", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextInput> textInputField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName skipHoursXName = System.Xml.Linq.XName.Get("skipHours", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SkipHoursList> skipHoursField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName skipDaysXName = System.Xml.Linq.XName.Get("skipDays", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SkipDaysList> skipDaysField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RssItem> itemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RssChannel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator RssChannel(XElement xe) { return XTypedServices.ToXTypedElement<RssChannel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RssChannel() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public RssChannel() {
        }
        
        /// <summary>
        /// <para>
        /// The name of the channel. It's how people refer to your service. If you have an HTML website that contains the same information as your RSS file, the title of your channel should be the same as the title of your website.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The URL to the HTML website corresponding to the channel.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, linkXName);
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, linkXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Phrase or sentence describing the channel.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> description {
            get {
                if ((this.descriptionField == null)) {
                    this.descriptionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, descriptionXName);
                }
                return this.descriptionField;
            }
            set {
                if ((value == null)) {
                    this.descriptionField = null;
                }
                else {
                    if ((this.descriptionField == null)) {
                        this.descriptionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, descriptionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.descriptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page. A list of allowable values for this element, as provided by Netscape, is here. You may also use values defined by the W3C.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, languageXName);
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, value, languageXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Copyright notice for content in the channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> copyright {
            get {
                if ((this.copyrightField == null)) {
                    this.copyrightField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, copyrightXName);
                }
                return this.copyrightField;
            }
            set {
                if ((value == null)) {
                    this.copyrightField = null;
                }
                else {
                    if ((this.copyrightField == null)) {
                        this.copyrightField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, copyrightXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.copyrightField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Email address for person responsible for editorial content.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> managingEditor {
            get {
                if ((this.managingEditorField == null)) {
                    this.managingEditorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, managingEditorXName);
                }
                return this.managingEditorField;
            }
            set {
                if ((value == null)) {
                    this.managingEditorField = null;
                }
                else {
                    if ((this.managingEditorField == null)) {
                        this.managingEditorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, managingEditorXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.managingEditorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Email address for person responsible for technical issues relating to channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> webMaster {
            get {
                if ((this.webMasterField == null)) {
                    this.webMasterField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, webMasterXName);
                }
                return this.webMasterField;
            }
            set {
                if ((value == null)) {
                    this.webMasterField = null;
                }
                else {
                    if ((this.webMasterField == null)) {
                        this.webMasterField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, webMasterXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.webMasterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The publication date for the content in the channel. All date-times in RSS conform to the Date and Time Specification of RFC 822, with the exception that the year may be expressed with two characters or four characters (four preferred).
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> pubDate {
            get {
                if ((this.pubDateField == null)) {
                    this.pubDateField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, pubDateXName);
                }
                return this.pubDateField;
            }
            set {
                if ((value == null)) {
                    this.pubDateField = null;
                }
                else {
                    if ((this.pubDateField == null)) {
                        this.pubDateField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, pubDateXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.pubDateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The last time the content of the channel changed.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> lastBuildDate {
            get {
                if ((this.lastBuildDateField == null)) {
                    this.lastBuildDateField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, lastBuildDateXName);
                }
                return this.lastBuildDateField;
            }
            set {
                if ((value == null)) {
                    this.lastBuildDateField = null;
                }
                else {
                    if ((this.lastBuildDateField == null)) {
                        this.lastBuildDateField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, lastBuildDateXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.lastBuildDateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Specify one or more categories that the channel belongs to.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<Category> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<Category>(this, LinqToXsdTypeManager.Instance, categoryXName);
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<Category>.Initialize(this, LinqToXsdTypeManager.Instance, value, categoryXName);
                    }
                    else {
                        XTypedServices.SetList<Category>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A string indicating the program used to generate the channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> generator {
            get {
                if ((this.generatorField == null)) {
                    this.generatorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, generatorXName);
                }
                return this.generatorField;
            }
            set {
                if ((value == null)) {
                    this.generatorField = null;
                }
                else {
                    if ((this.generatorField == null)) {
                        this.generatorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, generatorXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.generatorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> docs {
            get {
                if ((this.docsField == null)) {
                    this.docsField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, docsXName);
                }
                return this.docsField;
            }
            set {
                if ((value == null)) {
                    this.docsField = null;
                }
                else {
                    if ((this.docsField == null)) {
                        this.docsField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, docsXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.docsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Allows processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<Cloud> cloud {
            get {
                if ((this.cloudField == null)) {
                    this.cloudField = new XTypedList<Cloud>(this, LinqToXsdTypeManager.Instance, cloudXName);
                }
                return this.cloudField;
            }
            set {
                if ((value == null)) {
                    this.cloudField = null;
                }
                else {
                    if ((this.cloudField == null)) {
                        this.cloudField = XTypedList<Cloud>.Initialize(this, LinqToXsdTypeManager.Instance, value, cloudXName);
                    }
                    else {
                        XTypedServices.SetList<Cloud>(this.cloudField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// ttl stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<decimal> ttl {
            get {
                if ((this.ttlField == null)) {
                    this.ttlField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, ttlXName);
                }
                return this.ttlField;
            }
            set {
                if ((value == null)) {
                    this.ttlField = null;
                }
                else {
                    if ((this.ttlField == null)) {
                        this.ttlField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, value, ttlXName);
                    }
                    else {
                        XTypedServices.SetList<System.Decimal>(this.ttlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Specifies a GIF, JPEG or PNG image that can be displayed with the channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<Image> image {
            get {
                if ((this.imageField == null)) {
                    this.imageField = new XTypedList<Image>(this, LinqToXsdTypeManager.Instance, imageXName);
                }
                return this.imageField;
            }
            set {
                if ((value == null)) {
                    this.imageField = null;
                }
                else {
                    if ((this.imageField == null)) {
                        this.imageField = XTypedList<Image>.Initialize(this, LinqToXsdTypeManager.Instance, value, imageXName);
                    }
                    else {
                        XTypedServices.SetList<Image>(this.imageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The PICS rating for the channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<string> rating {
            get {
                if ((this.ratingField == null)) {
                    this.ratingField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ratingXName);
                }
                return this.ratingField;
            }
            set {
                if ((value == null)) {
                    this.ratingField = null;
                }
                else {
                    if ((this.ratingField == null)) {
                        this.ratingField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ratingXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ratingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Specifies a text input box that can be displayed with the channel.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<TextInput> textInput {
            get {
                if ((this.textInputField == null)) {
                    this.textInputField = new XTypedList<TextInput>(this, LinqToXsdTypeManager.Instance, textInputXName);
                }
                return this.textInputField;
            }
            set {
                if ((value == null)) {
                    this.textInputField = null;
                }
                else {
                    if ((this.textInputField == null)) {
                        this.textInputField = XTypedList<TextInput>.Initialize(this, LinqToXsdTypeManager.Instance, value, textInputXName);
                    }
                    else {
                        XTypedServices.SetList<TextInput>(this.textInputField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A hint for aggregators telling them which hours they can skip.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<SkipHoursList> skipHours {
            get {
                if ((this.skipHoursField == null)) {
                    this.skipHoursField = new XTypedList<SkipHoursList>(this, LinqToXsdTypeManager.Instance, skipHoursXName);
                }
                return this.skipHoursField;
            }
            set {
                if ((value == null)) {
                    this.skipHoursField = null;
                }
                else {
                    if ((this.skipHoursField == null)) {
                        this.skipHoursField = XTypedList<SkipHoursList>.Initialize(this, LinqToXsdTypeManager.Instance, value, skipHoursXName);
                    }
                    else {
                        XTypedServices.SetList<SkipHoursList>(this.skipHoursField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A hint for aggregators telling them which days they can skip.
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<SkipDaysList> skipDays {
            get {
                if ((this.skipDaysField == null)) {
                    this.skipDaysField = new XTypedList<SkipDaysList>(this, LinqToXsdTypeManager.Instance, skipDaysXName);
                }
                return this.skipDaysField;
            }
            set {
                if ((value == null)) {
                    this.skipDaysField = null;
                }
                else {
                    if ((this.skipDaysField == null)) {
                        this.skipDaysField = XTypedList<SkipDaysList>.Initialize(this, LinqToXsdTypeManager.Instance, value, skipDaysXName);
                    }
                    else {
                        XTypedServices.SetList<SkipDaysList>(this.skipDaysField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((title | link | description | language? | copyright? | managingEditor? | webMaster? | pubDate? | lastBuildDate? | category? | generator? | docs? | cloud? | ttl? | image? | rating? | textInput? | skipHours? | skipDays? | any)+, item+, any)
        /// </para>
        /// </summary>
        public virtual IList<RssItem> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<RssItem>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<RssItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<RssItem>(this.itemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RssChannel>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(string));
            localElementDictionary.Add(linkXName, typeof(System.Uri));
            localElementDictionary.Add(descriptionXName, typeof(string));
            localElementDictionary.Add(languageXName, typeof(string));
            localElementDictionary.Add(copyrightXName, typeof(string));
            localElementDictionary.Add(managingEditorXName, typeof(string));
            localElementDictionary.Add(webMasterXName, typeof(string));
            localElementDictionary.Add(pubDateXName, typeof(string));
            localElementDictionary.Add(lastBuildDateXName, typeof(string));
            localElementDictionary.Add(categoryXName, typeof(Category));
            localElementDictionary.Add(generatorXName, typeof(string));
            localElementDictionary.Add(docsXName, typeof(System.Uri));
            localElementDictionary.Add(cloudXName, typeof(Cloud));
            localElementDictionary.Add(ttlXName, typeof(decimal));
            localElementDictionary.Add(imageXName, typeof(Image));
            localElementDictionary.Add(ratingXName, typeof(string));
            localElementDictionary.Add(textInputXName, typeof(TextInput));
            localElementDictionary.Add(skipHoursXName, typeof(SkipHoursList));
            localElementDictionary.Add(skipDaysXName, typeof(SkipDaysList));
            localElementDictionary.Add(itemXName, typeof(RssItem));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(2, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(4, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(6, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(8, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(10, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(12, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(14, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(16, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(18, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(20, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(22, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(24, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(26, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(28, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(30, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(32, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(34, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(36, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(38, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            transitions.Add(42, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 43)));
            transitions.Add(43, new Transitions(new SingleTransition(new WildCard("##other", ""), 43)));
            transitions.Add(39, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("title", ""), 2), new SingleTransition(System.Xml.Linq.XName.Get("link", ""), 4), new SingleTransition(System.Xml.Linq.XName.Get("description", ""), 6), new SingleTransition(System.Xml.Linq.XName.Get("language", ""), 8), new SingleTransition(System.Xml.Linq.XName.Get("copyright", ""), 10), new SingleTransition(System.Xml.Linq.XName.Get("managingEditor", ""), 12), new SingleTransition(System.Xml.Linq.XName.Get("webMaster", ""), 14), new SingleTransition(System.Xml.Linq.XName.Get("pubDate", ""), 16), new SingleTransition(System.Xml.Linq.XName.Get("lastBuildDate", ""), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", ""), 20), new SingleTransition(System.Xml.Linq.XName.Get("generator", ""), 22), new SingleTransition(System.Xml.Linq.XName.Get("docs", ""), 24), new SingleTransition(System.Xml.Linq.XName.Get("cloud", ""), 26), new SingleTransition(System.Xml.Linq.XName.Get("ttl", ""), 28), new SingleTransition(System.Xml.Linq.XName.Get("image", ""), 30), new SingleTransition(System.Xml.Linq.XName.Get("rating", ""), 32), new SingleTransition(System.Xml.Linq.XName.Get("textInput", ""), 34), new SingleTransition(System.Xml.Linq.XName.Get("skipHours", ""), 36), new SingleTransition(System.Xml.Linq.XName.Get("skipDays", ""), 38), new SingleTransition(System.Xml.Linq.XName.Get("item", ""), 42), new SingleTransition(new WildCard("##other", ""), 39)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            42,
                            43}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// A time in GMT when aggregators should not request the channel data. The hour beginning at midnight is hour zero.
    /// </para>
    /// </summary>
    public sealed class SkipHour {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 23m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SkipHour() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (hour*)
    /// </para>
    /// </summary>
    public partial class SkipHoursList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hourXName = System.Xml.Linq.XName.Get("hour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<decimal> hourField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SkipHoursList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SkipHoursList(XElement xe) { return XTypedServices.ToXTypedElement<SkipHoursList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SkipHoursList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(hourXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hour*)
        /// </para>
        /// </summary>
        public SkipHoursList() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (hour*)
        /// </para>
        /// </summary>
        public virtual IList<decimal> hour {
            get {
                if ((this.hourField == null)) {
                    this.hourField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, hourXName);
                }
                return this.hourField;
            }
            set {
                if ((value == null)) {
                    this.hourField = null;
                }
                else {
                    if ((this.hourField == null)) {
                        this.hourField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, value, hourXName);
                    }
                    else {
                        XTypedServices.SetList<System.Decimal>(this.hourField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SkipHoursList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(hourXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A day when aggregators should not request the channel data.
    /// </para>
    /// </summary>
    public enum SkipDay {
        
        Monday,
        
        Tuesday,
        
        Wednesday,
        
        Thursday,
        
        Friday,
        
        Saturday,
        
        Sunday,
    }
    
    /// <summary>
    /// <para>
    /// A day when aggregators should not request the channel data.
    /// </para>
    /// </summary>
    public sealed class SkipDayValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SkipDayValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (day*)
    /// </para>
    /// </summary>
    public partial class SkipDaysList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dayXName = System.Xml.Linq.XName.Get("day", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> dayField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SkipDaysList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SkipDaysList(XElement xe) { return XTypedServices.ToXTypedElement<SkipDaysList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SkipDaysList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (day*)
        /// </para>
        /// </summary>
        public SkipDaysList() {
        }
        
        /// <summary>
        /// <para>
        /// A time in GMT, when aggregators should not request the channel data. The hour beginning at midnight is hour zero.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (day*)
        /// </para>
        /// </summary>
        public virtual IList<Rss.SkipDay> day {
            get {
                if ((this.dayField == null)) {
                    this.dayField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, dayXName);
                }
                return this.dayField.Select(item => (Rss.SkipDay) Enum.Parse(typeof(Rss.SkipDay), item)).ToList();
            }
            set {
                if ((value == null)) {
                    this.dayField = null;
                }
                else {
                    if ((this.dayField == null)) {
                        this.dayField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value.Select(item => item.ToString()), dayXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.dayField, value.Select(item => item.ToString()).ToList());
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SkipDaysList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dayXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Category : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName domainXName = System.Xml.Linq.XName.Get("domain", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Category", "");
        
		public static explicit operator Category(XElement xe) { return XTypedServices.ToXTypedElement<Category>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Category() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string domain {
            get {
                XAttribute x = this.Attribute(domainXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(domainXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Category>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (url, title, link, width?, height?, description?)
    /// </para>
    /// </summary>
    public partial class Image : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlXName = System.Xml.Linq.XName.Get("url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator Image(XElement xe) { return XTypedServices.ToXTypedElement<Image>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Image() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public Image() {
        }
        
        /// <summary>
        /// <para>
        /// The URL of the image file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual System.Uri url {
            get {
                XElement x = this.GetElement(urlXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(urlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Describes the image, it's used in the ALT attribute of the HTML <img> tag when the channel is rendered in HTML.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XElement x = this.GetElement(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The URL of the site, when the channel is rendered, the image is a link to the site. (Note, in practice the image <title> and <link> should have the same value as the channel's <title> and <link>. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual System.Uri link {
            get {
                XElement x = this.GetElement(linkXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(linkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The width of the image in pixels.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? width {
            get {
                XElement x = this.GetElement(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(widthXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(widthXName, value, "width", global::Rss.ImageWidth.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The height of the image in pixels.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? height {
            get {
                XElement x = this.GetElement(heightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(heightXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(heightXName, value, "height", global::Rss.ImageHeight.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Text that is included in the TITLE attribute of the link formed around the image in the HTML rendering.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (url, title, link, width?, height?, description?)
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XElement x = this.GetElement(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Image>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(urlXName, typeof(System.Uri));
            localElementDictionary.Add(titleXName, typeof(string));
            localElementDictionary.Add(linkXName, typeof(System.Uri));
            localElementDictionary.Add(widthXName, typeof(decimal));
            localElementDictionary.Add(heightXName, typeof(decimal));
            localElementDictionary.Add(descriptionXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The height of the image in pixels.
    /// </para>
    /// </summary>
    public sealed class ImageHeight {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 400m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ImageHeight() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The width of the image in pixels.
    /// </para>
    /// </summary>
    public sealed class ImageWidth {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 144m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ImageWidth() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1. Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
    /// </para>
    /// </summary>
    public partial class Cloud : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName domainXName = System.Xml.Linq.XName.Get("domain", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName portXName = System.Xml.Linq.XName.Get("port", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pathXName = System.Xml.Linq.XName.Get("path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName registerProcedureXName = System.Xml.Linq.XName.Get("registerProcedure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolXName = System.Xml.Linq.XName.Get("protocol", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Cloud", "");
        
		public static explicit operator Cloud(XElement xe) { return XTypedServices.ToXTypedElement<Cloud>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1. Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
        /// </para>
        /// </summary>
        public Cloud() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string domain {
            get {
                XAttribute x = this.Attribute(domainXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(domainXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal port {
            get {
                XAttribute x = this.Attribute(portXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(portXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string path {
            get {
                XAttribute x = this.Attribute(pathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string registerProcedure {
            get {
                XAttribute x = this.Attribute(registerProcedureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(registerProcedureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string protocol {
            get {
                XAttribute x = this.Attribute(protocolXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(protocolXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Cloud>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class CloudProtocol {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "xml-rpc",
                        "http-post",
                        "soap"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CloudProtocol() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The purpose of this element is something of a mystery! You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
    /// </para>
    /// <para>
    /// Regular expression: (title, description, name, link)
    /// </para>
    /// </summary>
    public partial class TextInput : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TextInput", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator TextInput(XElement xe) { return XTypedServices.ToXTypedElement<TextInput>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TextInput() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// The purpose of this element is something of a mystery! You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
        /// </para>
        /// <para>
        /// Regular expression: (title, description, name, link)
        /// </para>
        /// </summary>
        public TextInput() {
        }
        
        /// <summary>
        /// <para>
        /// The label of the Submit button in the text input area.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, description, name, link)
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XElement x = this.GetElement(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Explains the text input area.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, description, name, link)
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XElement x = this.GetElement(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the text object in the text input area.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, description, name, link)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The URL of the CGI script that processes text input requests.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (title, description, name, link)
        /// </para>
        /// </summary>
        public virtual System.Uri link {
            get {
                XElement x = this.GetElement(linkXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(linkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextInput>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(string));
            localElementDictionary.Add(descriptionXName, typeof(string));
            localElementDictionary.Add(nameXName, typeof(string));
            localElementDictionary.Add(linkXName, typeof(System.Uri));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Using the regexp definiton of E-Mail Address by Lucadean from the .NET RegExp Pattern Repository at http://www.3leaf.com/default/NetRegExpRepository.aspx 
    /// </para>
    /// </summary>
    public sealed class EmailAddress {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([a-zA-Z0-9_\\-])([a-zA-Z0-9_\\-\\.]*)@(\\[((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-" +
                            "9]|[0-9])\\.){3}|((([a-zA-Z0-9\\-]+)\\.)+))([a-zA-Z]{2,}|(25[0-5]|2[0-4][0-9]|1[0-9" +
                            "][0-9]|[1-9][0-9]|[0-9])\\])"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EmailAddress() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A date-time displayed in RFC-822 format.
    /// </para>
    /// <para>
    /// Using the regexp definiton of rfc-822 date by Sam Ruby at http://www.intertwingly.net/blog/1360.html 
    /// </para>
    /// </summary>
    public sealed class Rfc822FormatDate {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(((Mon)|(Tue)|(Wed)|(Thu)|(Fri)|(Sat)|(Sun)), *)?\\d\\d? +((Jan)|(Feb)|(Mar)|(Apr)|" +
                            "(May)|(Jun)|(Jul)|(Aug)|(Sep)|(Oct)|(Nov)|(Dec)) +\\d\\d(\\d\\d)? +\\d\\d:\\d\\d(:\\d\\d)?" +
                            " +(([+\\-]?\\d\\d\\d\\d)|(UT)|(GMT)|(EST)|(EDT)|(CST)|(CDT)|(MST)|(MDT)|(PST)|(PDT)|\\" +
                            "w)"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Rfc822FormatDate() {
        }
    }
    
    public partial class Source : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlXName = System.Xml.Linq.XName.Get("url", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Source", "");
        
		public static explicit operator Source(XElement xe) { return XTypedServices.ToXTypedElement<Source>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Source() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri url {
            get {
                XAttribute x = this.Attribute(urlXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(urlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Source>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Enclosure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlXName = System.Xml.Linq.XName.Get("url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Enclosure", "");
        
		public static explicit operator Enclosure(XElement xe) { return XTypedServices.ToXTypedElement<Enclosure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Enclosure() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// URL where the enclosure is located
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri url {
            get {
                XAttribute x = this.Attribute(urlXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(urlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Size in bytes
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// MIME media-type of the enclosure
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Enclosure>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Guid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isPermaLinkXName = System.Xml.Linq.XName.Get("isPermaLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isPermaLinkDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Guid", "");
        
		public static explicit operator Guid(XElement xe) { return XTypedServices.ToXTypedElement<Guid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Guid() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool isPermaLink {
            get {
                XAttribute x = this.Attribute(isPermaLinkXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isPermaLinkDefaultValue);
            }
            set {
                this.SetAttribute(isPermaLinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Guid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("RssItem", ""), typeof(global::Rss.RssItem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RssChannel", ""), typeof(global::Rss.RssChannel));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SkipHoursList", ""), typeof(global::Rss.SkipHoursList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SkipDaysList", ""), typeof(global::Rss.SkipDaysList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Category", ""), typeof(global::Rss.Category));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Image", ""), typeof(global::Rss.Image));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Cloud", ""), typeof(global::Rss.Cloud));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TextInput", ""), typeof(global::Rss.TextInput));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Source", ""), typeof(global::Rss.Source));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Enclosure", ""), typeof(global::Rss.Enclosure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Guid", ""), typeof(global::Rss.Guid));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("rss", ""), typeof(global::Rss.rss));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("rss", "")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public rss rss {  get {return rootObject as rss; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(rss root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Rss.rss rss {  get {return rootObject as global::Rss.rss; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Rss.rss root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
