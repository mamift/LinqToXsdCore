//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.SqlServer.Dts {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts.Tasks.WebServiceTask;
    using Microsoft.SqlServer.Dts.Tasks.MessageQueueTask;
    using Microsoft.SqlServer.Dts.Tasks.SendMailTask;
    using Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask;
    using Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask;
    using Microsoft.SqlServer.Dts.Tasks.BulkInsertTask;
    using Microsoft.SqlServer.Dts.Tasks.Sqltask;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
    /// </para>
    /// </summary>
    public partial class ExecutableTypePackage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionManagerXName = System.Xml.Linq.XName.Get("ConnectionManager", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConnectionManagerType> ConnectionManagerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationXName = System.Xml.Linq.XName.Get("Configuration", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConfigurationType> ConfigurationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LogProviderXName = System.Xml.Linq.XName.Get("LogProvider", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogProviderType> LogProviderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableXName = System.Xml.Linq.XName.Get("Variable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableType> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoggingOptionsXName = System.Xml.Linq.XName.Get("LoggingOptions", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableXName = System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnyNonPackageExecutableType> ExecutableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrecedenceConstraintXName = System.Xml.Linq.XName.Get("PrecedenceConstraint", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PrecedenceConstraintType> PrecedenceConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventHandlerXName = System.Xml.Linq.XName.Get("EventHandler", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EventHandlerType> EventHandlerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageVariableXName = System.Xml.Linq.XName.Get("PackageVariable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PackageVariableType> PackageVariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableTypeXName = System.Xml.Linq.XName.Get("ExecutableType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ExecutableTypeFixedValue = "SSIS.Package.2";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExecutableTypePackage", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExecutableTypePackage(XElement xe) { return XTypedServices.ToXTypedElement<ExecutableTypePackage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExecutableTypePackage() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ConnectionManagerXName), new NamedContentModelEntity(ConfigurationXName), new NamedContentModelEntity(LogProviderXName), new NamedContentModelEntity(VariableXName), new NamedContentModelEntity(LoggingOptionsXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ExecutableXName), new NamedContentModelEntity(PrecedenceConstraintXName), new NamedContentModelEntity(EventHandlerXName), new NamedContentModelEntity(PackageVariableXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public ExecutableTypePackage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ExecutableTypePackage.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<ConnectionManagerType> ConnectionManager {
            get {
                if ((this.ConnectionManagerField == null)) {
                    this.ConnectionManagerField = new XTypedList<ConnectionManagerType>(this, LinqToXsdTypeManager.Instance, ConnectionManagerXName);
                }
                return this.ConnectionManagerField;
            }
            set {
                if ((value == null)) {
                    this.ConnectionManagerField = null;
                }
                else {
                    if ((this.ConnectionManagerField == null)) {
                        this.ConnectionManagerField = XTypedList<ConnectionManagerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConnectionManagerXName);
                    }
                    else {
                        XTypedServices.SetList<ConnectionManagerType>(this.ConnectionManagerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<ConfigurationType> Configuration {
            get {
                if ((this.ConfigurationField == null)) {
                    this.ConfigurationField = new XTypedList<ConfigurationType>(this, LinqToXsdTypeManager.Instance, ConfigurationXName);
                }
                return this.ConfigurationField;
            }
            set {
                if ((value == null)) {
                    this.ConfigurationField = null;
                }
                else {
                    if ((this.ConfigurationField == null)) {
                        this.ConfigurationField = XTypedList<ConfigurationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConfigurationXName);
                    }
                    else {
                        XTypedServices.SetList<ConfigurationType>(this.ConfigurationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<LogProviderType> LogProvider {
            get {
                if ((this.LogProviderField == null)) {
                    this.LogProviderField = new XTypedList<LogProviderType>(this, LinqToXsdTypeManager.Instance, LogProviderXName);
                }
                return this.LogProviderField;
            }
            set {
                if ((value == null)) {
                    this.LogProviderField = null;
                }
                else {
                    if ((this.LogProviderField == null)) {
                        this.LogProviderField = XTypedList<LogProviderType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LogProviderXName);
                    }
                    else {
                        XTypedServices.SetList<LogProviderType>(this.LogProviderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<VariableType> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<VariableType>(this, LinqToXsdTypeManager.Instance, VariableXName);
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<VariableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableXName);
                    }
                    else {
                        XTypedServices.SetList<VariableType>(this.VariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual LoggingOptionsType LoggingOptions {
            get {
                XElement x = this.GetElement(LoggingOptionsXName);
                return ((LoggingOptionsType)(x));
            }
            set {
                this.SetElement(LoggingOptionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<AnyNonPackageExecutableType> Executable {
            get {
                if ((this.ExecutableField == null)) {
                    this.ExecutableField = new XTypedList<AnyNonPackageExecutableType>(this, LinqToXsdTypeManager.Instance, ExecutableXName);
                }
                return this.ExecutableField;
            }
            set {
                if ((value == null)) {
                    this.ExecutableField = null;
                }
                else {
                    if ((this.ExecutableField == null)) {
                        this.ExecutableField = XTypedList<AnyNonPackageExecutableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExecutableXName);
                    }
                    else {
                        XTypedServices.SetList<AnyNonPackageExecutableType>(this.ExecutableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PrecedenceConstraintType> PrecedenceConstraint {
            get {
                if ((this.PrecedenceConstraintField == null)) {
                    this.PrecedenceConstraintField = new XTypedList<PrecedenceConstraintType>(this, LinqToXsdTypeManager.Instance, PrecedenceConstraintXName);
                }
                return this.PrecedenceConstraintField;
            }
            set {
                if ((value == null)) {
                    this.PrecedenceConstraintField = null;
                }
                else {
                    if ((this.PrecedenceConstraintField == null)) {
                        this.PrecedenceConstraintField = XTypedList<PrecedenceConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PrecedenceConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<PrecedenceConstraintType>(this.PrecedenceConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<EventHandlerType> EventHandler {
            get {
                if ((this.EventHandlerField == null)) {
                    this.EventHandlerField = new XTypedList<EventHandlerType>(this, LinqToXsdTypeManager.Instance, EventHandlerXName);
                }
                return this.EventHandlerField;
            }
            set {
                if ((value == null)) {
                    this.EventHandlerField = null;
                }
                else {
                    if ((this.EventHandlerField == null)) {
                        this.EventHandlerField = XTypedList<EventHandlerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EventHandlerXName);
                    }
                    else {
                        XTypedServices.SetList<EventHandlerType>(this.EventHandlerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PackageVariableType> PackageVariable {
            get {
                if ((this.PackageVariableField == null)) {
                    this.PackageVariableField = new XTypedList<PackageVariableType>(this, LinqToXsdTypeManager.Instance, PackageVariableXName);
                }
                return this.PackageVariableField;
            }
            set {
                if ((value == null)) {
                    this.PackageVariableField = null;
                }
                else {
                    if ((this.PackageVariableField == null)) {
                        this.PackageVariableField = XTypedList<PackageVariableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PackageVariableXName);
                    }
                    else {
                        XTypedServices.SetList<PackageVariableType>(this.PackageVariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ExecutableType {
            get {
                return ExecutableTypeFixedValue;
            }
            set {
                if (value.Equals(ExecutableTypeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, ExecutableTypeFixedValue);
                }
                this.SetAttribute(ExecutableTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecutableTypePackage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(ConnectionManagerXName, typeof(ConnectionManagerType));
            localElementDictionary.Add(ConfigurationXName, typeof(ConfigurationType));
            localElementDictionary.Add(LogProviderXName, typeof(LogProviderType));
            localElementDictionary.Add(VariableXName, typeof(VariableType));
            localElementDictionary.Add(LoggingOptionsXName, typeof(LoggingOptionsType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ExecutableXName, typeof(AnyNonPackageExecutableType));
            localElementDictionary.Add(PrecedenceConstraintXName, typeof(PrecedenceConstraintType));
            localElementDictionary.Add(EventHandlerXName, typeof(EventHandlerType));
            localElementDictionary.Add(PackageVariableXName, typeof(PackageVariableType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.ExecutableTypePackagePropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.ExecutableTypePackagePropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
    /// </para>
    /// </summary>
    public partial class AnyNonPackageExecutableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForEachEnumeratorXName = System.Xml.Linq.XName.Get("ForEachEnumerator", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableXName = System.Xml.Linq.XName.Get("Variable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableType> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoggingOptionsXName = System.Xml.Linq.XName.Get("LoggingOptions", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableXName = System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnyNonPackageExecutableType> ExecutableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrecedenceConstraintXName = System.Xml.Linq.XName.Get("PrecedenceConstraint", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PrecedenceConstraintType> PrecedenceConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForEachVariableMappingXName = System.Xml.Linq.XName.Get("ForEachVariableMapping", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ForEachVariableMappingType> ForEachVariableMappingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventHandlerXName = System.Xml.Linq.XName.Get("EventHandler", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EventHandlerType> EventHandlerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjectDataXName = System.Xml.Linq.XName.Get("ObjectData", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableTypeXName = System.Xml.Linq.XName.Get("ExecutableType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThreadHintXName = System.Xml.Linq.XName.Get("ThreadHint", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnyNonPackageExecutableType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnyNonPackageExecutableType(XElement xe) { return XTypedServices.ToXTypedElement<AnyNonPackageExecutableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnyNonPackageExecutableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ForEachEnumeratorXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(VariableXName), new NamedContentModelEntity(LoggingOptionsXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ExecutableXName), new NamedContentModelEntity(PrecedenceConstraintXName), new NamedContentModelEntity(ForEachVariableMappingXName), new NamedContentModelEntity(EventHandlerXName), new NamedContentModelEntity(ObjectDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public AnyNonPackageExecutableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual ForEachEnumeratorType ForEachEnumerator {
            get {
                XElement x = this.GetElement(ForEachEnumeratorXName);
                return ((ForEachEnumeratorType)(x));
            }
            set {
                this.SetElement(ForEachEnumeratorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.AnyNonPackageExecutableType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<VariableType> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<VariableType>(this, LinqToXsdTypeManager.Instance, VariableXName);
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<VariableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableXName);
                    }
                    else {
                        XTypedServices.SetList<VariableType>(this.VariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual LoggingOptionsType LoggingOptions {
            get {
                XElement x = this.GetElement(LoggingOptionsXName);
                return ((LoggingOptionsType)(x));
            }
            set {
                this.SetElement(LoggingOptionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<AnyNonPackageExecutableType> Executable {
            get {
                if ((this.ExecutableField == null)) {
                    this.ExecutableField = new XTypedList<AnyNonPackageExecutableType>(this, LinqToXsdTypeManager.Instance, ExecutableXName);
                }
                return this.ExecutableField;
            }
            set {
                if ((value == null)) {
                    this.ExecutableField = null;
                }
                else {
                    if ((this.ExecutableField == null)) {
                        this.ExecutableField = XTypedList<AnyNonPackageExecutableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExecutableXName);
                    }
                    else {
                        XTypedServices.SetList<AnyNonPackageExecutableType>(this.ExecutableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<PrecedenceConstraintType> PrecedenceConstraint {
            get {
                if ((this.PrecedenceConstraintField == null)) {
                    this.PrecedenceConstraintField = new XTypedList<PrecedenceConstraintType>(this, LinqToXsdTypeManager.Instance, PrecedenceConstraintXName);
                }
                return this.PrecedenceConstraintField;
            }
            set {
                if ((value == null)) {
                    this.PrecedenceConstraintField = null;
                }
                else {
                    if ((this.PrecedenceConstraintField == null)) {
                        this.PrecedenceConstraintField = XTypedList<PrecedenceConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PrecedenceConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<PrecedenceConstraintType>(this.PrecedenceConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<ForEachVariableMappingType> ForEachVariableMapping {
            get {
                if ((this.ForEachVariableMappingField == null)) {
                    this.ForEachVariableMappingField = new XTypedList<ForEachVariableMappingType>(this, LinqToXsdTypeManager.Instance, ForEachVariableMappingXName);
                }
                return this.ForEachVariableMappingField;
            }
            set {
                if ((value == null)) {
                    this.ForEachVariableMappingField = null;
                }
                else {
                    if ((this.ForEachVariableMappingField == null)) {
                        this.ForEachVariableMappingField = XTypedList<ForEachVariableMappingType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ForEachVariableMappingXName);
                    }
                    else {
                        XTypedServices.SetList<ForEachVariableMappingType>(this.ForEachVariableMappingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual IList<EventHandlerType> EventHandler {
            get {
                if ((this.EventHandlerField == null)) {
                    this.EventHandlerField = new XTypedList<EventHandlerType>(this, LinqToXsdTypeManager.Instance, EventHandlerXName);
                }
                return this.EventHandlerField;
            }
            set {
                if ((value == null)) {
                    this.EventHandlerField = null;
                }
                else {
                    if ((this.EventHandlerField == null)) {
                        this.EventHandlerField = XTypedList<EventHandlerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EventHandlerXName);
                    }
                    else {
                        XTypedServices.SetList<EventHandlerType>(this.EventHandlerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ForEachEnumerator?, Property+, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, ForEachVariableMapping*, EventHandler*, ObjectData?)
        /// </para>
        /// </summary>
        public virtual ExecutableObjectDataType ObjectData {
            get {
                XElement x = this.GetElement(ObjectDataXName);
                return ((ExecutableObjectDataType)(x));
            }
            set {
                this.SetElement(ObjectDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ExecutableType {
            get {
                XAttribute x = this.Attribute(ExecutableTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExecutableTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ThreadHint {
            get {
                XAttribute x = this.Attribute(ThreadHintXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ThreadHintXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnyNonPackageExecutableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ForEachEnumeratorXName, typeof(ForEachEnumeratorType));
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(VariableXName, typeof(VariableType));
            localElementDictionary.Add(LoggingOptionsXName, typeof(LoggingOptionsType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ExecutableXName, typeof(AnyNonPackageExecutableType));
            localElementDictionary.Add(PrecedenceConstraintXName, typeof(PrecedenceConstraintType));
            localElementDictionary.Add(ForEachVariableMappingXName, typeof(ForEachVariableMappingType));
            localElementDictionary.Add(EventHandlerXName, typeof(EventHandlerType));
            localElementDictionary.Add(ObjectDataXName, typeof(ExecutableObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.AnyNonPackageExecutablePropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.AnyNonPackageExecutablePropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*)
    /// </para>
    /// </summary>
    public partial class PackageVariableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PackageVariableType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PackageVariableType(XElement xe) { return XTypedServices.ToXTypedElement<PackageVariableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PackageVariableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public PackageVariableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.PackageVariableType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PackageVariableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.PackageVariablePropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.PackageVariablePropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*)
    /// </para>
    /// </summary>
    public partial class ConfigurationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConfigurationType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConfigurationType(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public ConfigurationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ConfigurationType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.ConfigurationPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.ConfigurationPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, ObjectData)
    /// </para>
    /// </summary>
    public partial class LogProviderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjectDataXName = System.Xml.Linq.XName.Get("ObjectData", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogProviderType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogProviderType(XElement xe) { return XTypedServices.ToXTypedElement<LogProviderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogProviderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ObjectDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public LogProviderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.LogProviderType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual LogProviderObjectDataType ObjectData {
            get {
                XElement x = this.GetElement(ObjectDataXName);
                return ((LogProviderObjectDataType)(x));
            }
            set {
                this.SetElement(ObjectDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogProviderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ObjectDataXName, typeof(LogProviderObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.LogProviderPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.LogProviderPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, ObjectData)
    /// </para>
    /// </summary>
    public partial class ConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjectDataXName = System.Xml.Linq.XName.Get("ObjectData", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnectionManagerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ObjectDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public ConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ConnectionManagerType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataType ObjectData {
            get {
                XElement x = this.GetElement(ObjectDataXName);
                return ((ConnectionManagerObjectDataType)(x));
            }
            set {
                this.SetElement(ObjectDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ObjectDataXName, typeof(ConnectionManagerObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.ConnectionManagerPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.ConnectionManagerPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, Executable+)
    /// </para>
    /// </summary>
    public partial class PrecedenceConstraintType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableXName = System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PrecedenceConstraintExecutableReferenceType> ExecutableField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrecedenceConstraintType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PrecedenceConstraintType(XElement xe) { return XTypedServices.ToXTypedElement<PrecedenceConstraintType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PrecedenceConstraintType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ExecutableXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Executable+)
        /// </para>
        /// </summary>
        public PrecedenceConstraintType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Executable+)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.PrecedenceConstraintType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Executable+)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Executable+)
        /// </para>
        /// </summary>
        public virtual IList<PrecedenceConstraintExecutableReferenceType> Executable {
            get {
                if ((this.ExecutableField == null)) {
                    this.ExecutableField = new XTypedList<PrecedenceConstraintExecutableReferenceType>(this, LinqToXsdTypeManager.Instance, ExecutableXName);
                }
                return this.ExecutableField;
            }
            set {
                if ((value == null)) {
                    this.ExecutableField = null;
                }
                else {
                    if ((this.ExecutableField == null)) {
                        this.ExecutableField = XTypedList<PrecedenceConstraintExecutableReferenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExecutableXName);
                    }
                    else {
                        XTypedServices.SetList<PrecedenceConstraintExecutableReferenceType>(this.ExecutableField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrecedenceConstraintType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ExecutableXName, typeof(PrecedenceConstraintExecutableReferenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.PrecedenceConstraintPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.PrecedenceConstraintPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    public partial class PrecedenceConstraintExecutableReferenceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDREFXName = System.Xml.Linq.XName.Get("IDREF", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsFromXName = System.Xml.Linq.XName.Get("IsFrom", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrecedenceConstraintExecutableReferenceType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PrecedenceConstraintExecutableReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<PrecedenceConstraintExecutableReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PrecedenceConstraintExecutableReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IDREF {
            get {
                XAttribute x = this.Attribute(IDREFXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDREFXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? IsFrom {
            get {
                XAttribute x = this.Attribute(IsFromXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IsFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrecedenceConstraintExecutableReferenceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, SelectedLogProvider*)
    /// </para>
    /// </summary>
    public partial class LoggingOptionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LoggingOptionsPropertyElementType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedLogProviderXName = System.Xml.Linq.XName.Get("SelectedLogProvider", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedLogProviderType> SelectedLogProviderField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LoggingOptionsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LoggingOptionsType(XElement xe) { return XTypedServices.ToXTypedElement<LoggingOptionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LoggingOptionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(SelectedLogProviderXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, SelectedLogProvider*)
        /// </para>
        /// </summary>
        public LoggingOptionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, SelectedLogProvider*)
        /// </para>
        /// </summary>
        public virtual IList<LoggingOptionsPropertyElementType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<LoggingOptionsPropertyElementType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<LoggingOptionsPropertyElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<LoggingOptionsPropertyElementType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, SelectedLogProvider*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, SelectedLogProvider*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedLogProviderType> SelectedLogProvider {
            get {
                if ((this.SelectedLogProviderField == null)) {
                    this.SelectedLogProviderField = new XTypedList<SelectedLogProviderType>(this, LinqToXsdTypeManager.Instance, SelectedLogProviderXName);
                }
                return this.SelectedLogProviderField;
            }
            set {
                if ((value == null)) {
                    this.SelectedLogProviderField = null;
                }
                else {
                    if ((this.SelectedLogProviderField == null)) {
                        this.SelectedLogProviderField = XTypedList<SelectedLogProviderType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedLogProviderXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedLogProviderType>(this.SelectedLogProviderField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LoggingOptionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(LoggingOptionsPropertyElementType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(SelectedLogProviderXName, typeof(SelectedLogProviderType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class LoggingOptionsPropertyElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventNameXName = System.Xml.Linq.XName.Get("EventName", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LoggingOptionsPropertyElementType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LoggingOptionsPropertyElementType(XElement xe) { return XTypedServices.ToXTypedElement<LoggingOptionsPropertyElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LoggingOptionsPropertyElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public LoggingOptionsPropertyElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.LoggingOptionsPropertyElementType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.LoggingOptionsPropertyNameEnum Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return ((Microsoft.SqlServer.Dts.LoggingOptionsPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.LoggingOptionsPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DataType {
            get {
                XAttribute x = this.Attribute(DataTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventName {
            get {
                XAttribute x = this.Attribute(EventNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LoggingOptionsPropertyElementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.ColumnEventFilterPropertyNameEnum Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return ((Microsoft.SqlServer.Dts.ColumnEventFilterPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ColumnEventFilterPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? DataType {
                get {
                    XAttribute x = this.Attribute(DataTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(DataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    public partial class SelectedLogProviderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstanceIDXName = System.Xml.Linq.XName.Get("InstanceID", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SelectedLogProviderType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator SelectedLogProviderType(XElement xe) { return XTypedServices.ToXTypedElement<SelectedLogProviderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SelectedLogProviderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InstanceID {
            get {
                XAttribute x = this.Attribute(InstanceIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InstanceIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SelectedLogProviderType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, VariableValue)
    /// </para>
    /// </summary>
    public partial class VariableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableValueXName = System.Xml.Linq.XName.Get("VariableValue", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VariableType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VariableType(XElement xe) { return XTypedServices.ToXTypedElement<VariableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VariableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(VariableValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, VariableValue)
        /// </para>
        /// </summary>
        public VariableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, VariableValue)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.VariableType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, VariableValue)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, VariableValue)
        /// </para>
        /// </summary>
        public virtual VariableValueLocalType VariableValue {
            get {
                XElement x = this.GetElement(VariableValueXName);
                return ((VariableValueLocalType)(x));
            }
            set {
                this.SetElement(VariableValueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VariableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(VariableValueXName, typeof(VariableValueLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.VariablePropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.VariablePropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class VariableValueLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataSubTypeXName = System.Xml.Linq.XName.Get("DataSubType", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VariableValue", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator VariableValueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VariableValueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VariableValueLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public VariableValueLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? DataType {
                get {
                    XAttribute x = this.Attribute(DataTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(DataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.VariableType.VariableValueLocalType.DataSubTypeEnum? DataSubType {
                get {
                    XAttribute x = this.Attribute(DataSubTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((Microsoft.SqlServer.Dts.VariableType.VariableValueLocalType.DataSubTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.VariableType.VariableValueLocalType.DataSubTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(DataSubTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VariableValueLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "www.microsoft.com/SqlServer/Dts"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
            
            public enum DataSubTypeEnum {
                
                ManagedSerializable,
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
    /// </para>
    /// </summary>
    public partial class EventHandlerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableXName = System.Xml.Linq.XName.Get("Variable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VariableType> VariableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoggingOptionsXName = System.Xml.Linq.XName.Get("LoggingOptions", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableXName = System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnyNonPackageExecutableType> ExecutableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrecedenceConstraintXName = System.Xml.Linq.XName.Get("PrecedenceConstraint", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PrecedenceConstraintType> PrecedenceConstraintField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EventHandlerType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EventHandlerType(XElement xe) { return XTypedServices.ToXTypedElement<EventHandlerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EventHandlerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(VariableXName), new NamedContentModelEntity(LoggingOptionsXName), new NamedContentModelEntity(ExecutableXName), new NamedContentModelEntity(PrecedenceConstraintXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public EventHandlerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.EventHandlerType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual IList<VariableType> Variable {
            get {
                if ((this.VariableField == null)) {
                    this.VariableField = new XTypedList<VariableType>(this, LinqToXsdTypeManager.Instance, VariableXName);
                }
                return this.VariableField;
            }
            set {
                if ((value == null)) {
                    this.VariableField = null;
                }
                else {
                    if ((this.VariableField == null)) {
                        this.VariableField = XTypedList<VariableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VariableXName);
                    }
                    else {
                        XTypedServices.SetList<VariableType>(this.VariableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual LoggingOptionsType LoggingOptions {
            get {
                XElement x = this.GetElement(LoggingOptionsXName);
                return ((LoggingOptionsType)(x));
            }
            set {
                this.SetElement(LoggingOptionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual IList<AnyNonPackageExecutableType> Executable {
            get {
                if ((this.ExecutableField == null)) {
                    this.ExecutableField = new XTypedList<AnyNonPackageExecutableType>(this, LinqToXsdTypeManager.Instance, ExecutableXName);
                }
                return this.ExecutableField;
            }
            set {
                if ((value == null)) {
                    this.ExecutableField = null;
                }
                else {
                    if ((this.ExecutableField == null)) {
                        this.ExecutableField = XTypedList<AnyNonPackageExecutableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExecutableXName);
                    }
                    else {
                        XTypedServices.SetList<AnyNonPackageExecutableType>(this.ExecutableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, Variable*, LoggingOptions, Executable*, PrecedenceConstraint*)
        /// </para>
        /// </summary>
        public virtual IList<PrecedenceConstraintType> PrecedenceConstraint {
            get {
                if ((this.PrecedenceConstraintField == null)) {
                    this.PrecedenceConstraintField = new XTypedList<PrecedenceConstraintType>(this, LinqToXsdTypeManager.Instance, PrecedenceConstraintXName);
                }
                return this.PrecedenceConstraintField;
            }
            set {
                if ((value == null)) {
                    this.PrecedenceConstraintField = null;
                }
                else {
                    if ((this.PrecedenceConstraintField == null)) {
                        this.PrecedenceConstraintField = XTypedList<PrecedenceConstraintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PrecedenceConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<PrecedenceConstraintType>(this.PrecedenceConstraintField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventHandlerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(VariableXName, typeof(VariableType));
            localElementDictionary.Add(LoggingOptionsXName, typeof(LoggingOptionsType));
            localElementDictionary.Add(ExecutableXName, typeof(AnyNonPackageExecutableType));
            localElementDictionary.Add(PrecedenceConstraintXName, typeof(PrecedenceConstraintType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.EventHandlerPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.EventHandlerPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*, ObjectData)
    /// </para>
    /// </summary>
    public partial class ForEachEnumeratorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjectDataXName = System.Xml.Linq.XName.Get("ObjectData", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ForEachEnumeratorType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ForEachEnumeratorType(XElement xe) { return XTypedServices.ToXTypedElement<ForEachEnumeratorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachEnumeratorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName), new NamedContentModelEntity(ObjectDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public ForEachEnumeratorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ForEachEnumeratorType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*, ObjectData)
        /// </para>
        /// </summary>
        public virtual ForEachEnumeratorObjectDataType ObjectData {
            get {
                XElement x = this.GetElement(ObjectDataXName);
                return ((ForEachEnumeratorObjectDataType)(x));
            }
            set {
                this.SetElement(ObjectDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachEnumeratorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
            localElementDictionary.Add(ObjectDataXName, typeof(ForEachEnumeratorObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.BasePropertyNameEnum Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return ((Microsoft.SqlServer.Dts.BasePropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.BasePropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+, PropertyExpression*)
    /// </para>
    /// </summary>
    public partial class ForEachVariableMappingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyExpressionXName = System.Xml.Linq.XName.Get("PropertyExpression", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyExpressionElementType> PropertyExpressionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ForEachVariableMappingType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ForEachVariableMappingType(XElement xe) { return XTypedServices.ToXTypedElement<ForEachVariableMappingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachVariableMappingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(PropertyExpressionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public ForEachVariableMappingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ForEachVariableMappingType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, PropertyExpression*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                if ((this.PropertyExpressionField == null)) {
                    this.PropertyExpressionField = new XTypedList<PropertyExpressionElementType>(this, LinqToXsdTypeManager.Instance, PropertyExpressionXName);
                }
                return this.PropertyExpressionField;
            }
            set {
                if ((value == null)) {
                    this.PropertyExpressionField = null;
                }
                else {
                    if ((this.PropertyExpressionField == null)) {
                        this.PropertyExpressionField = XTypedList<PropertyExpressionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyExpressionXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyExpressionElementType>(this.PropertyExpressionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachVariableMappingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(PropertyExpressionXName, typeof(PropertyExpressionElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.ForEachVariableMappingPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.ForEachVariableMappingPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
    /// </para>
    /// </summary>
    public partial class ExecutableObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pipelineXName = System.Xml.Linq.XName.Get("pipeline", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActiveXScriptTaskDataXName = System.Xml.Linq.XName.Get("ActiveXScriptTaskData", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ASDdlDataXName = System.Xml.Linq.XName.Get("ASDdlData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ASProcessingDataXName = System.Xml.Linq.XName.Get("ASProcessingData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BulkInsertTaskDataXName = System.Xml.Linq.XName.Get("BulkInsertTaskData", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DMQueryTaskDataXName = System.Xml.Linq.XName.Get("DMQueryTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataProfilingTaskDataXName = System.Xml.Linq.XName.Get("DataProfilingTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Exec80PackageTaskDataXName = System.Xml.Linq.XName.Get("Exec80PackageTaskData", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutePackageTaskXName = System.Xml.Linq.XName.Get("ExecutePackageTask", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecuteProcessDataXName = System.Xml.Linq.XName.Get("ExecuteProcessData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlTaskDataXName = System.Xml.Linq.XName.Get("SqlTaskData", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileSystemDataXName = System.Xml.Linq.XName.Get("FileSystemData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtpDataXName = System.Xml.Linq.XName.Get("FtpData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageQueueTaskDataXName = System.Xml.Linq.XName.Get("MessageQueueTaskData", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptProjectXName = System.Xml.Linq.XName.Get("ScriptProject", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SendMailTaskDataXName = System.Xml.Linq.XName.Get("SendMailTaskData", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferDatabasesTaskDataXName = System.Xml.Linq.XName.Get("TransferDatabasesTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferErrorMessagesTaskDataXName = System.Xml.Linq.XName.Get("TransferErrorMessagesTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferJobsTaskDataXName = System.Xml.Linq.XName.Get("TransferJobsTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferLoginsTaskDataXName = System.Xml.Linq.XName.Get("TransferLoginsTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferStoredProceduresTaskDataXName = System.Xml.Linq.XName.Get("TransferStoredProceduresTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferSqlServerObjectsTaskDataXName = System.Xml.Linq.XName.Get("TransferSqlServerObjectsTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebServiceTaskDataXName = System.Xml.Linq.XName.Get("WebServiceTaskData", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WMIDRTaskDataXName = System.Xml.Linq.XName.Get("WMIDRTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WMIEWTaskDataXName = System.Xml.Linq.XName.Get("WMIEWTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XMLTaskDataXName = System.Xml.Linq.XName.Get("XMLTaskData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerObjectXName = System.Xml.Linq.XName.Get("InnerObject", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExecutableObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExecutableObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ExecutableObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExecutableObjectDataType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(pipelineXName), new NamedContentModelEntity(ActiveXScriptTaskDataXName), new NamedContentModelEntity(ASDdlDataXName), new NamedContentModelEntity(ASProcessingDataXName), new NamedContentModelEntity(BulkInsertTaskDataXName), new NamedContentModelEntity(DMQueryTaskDataXName), new NamedContentModelEntity(DataProfilingTaskDataXName), new NamedContentModelEntity(Exec80PackageTaskDataXName), new NamedContentModelEntity(ExecutePackageTaskXName), new NamedContentModelEntity(ExecuteProcessDataXName), new NamedContentModelEntity(SqlTaskDataXName), new NamedContentModelEntity(FileSystemDataXName), new NamedContentModelEntity(FtpDataXName), new NamedContentModelEntity(MessageQueueTaskDataXName), new NamedContentModelEntity(ScriptProjectXName), new NamedContentModelEntity(SendMailTaskDataXName), new NamedContentModelEntity(TransferDatabasesTaskDataXName), new NamedContentModelEntity(TransferErrorMessagesTaskDataXName), new NamedContentModelEntity(TransferJobsTaskDataXName), new NamedContentModelEntity(TransferLoginsTaskDataXName), new NamedContentModelEntity(TransferStoredProceduresTaskDataXName), new NamedContentModelEntity(TransferSqlServerObjectsTaskDataXName), new NamedContentModelEntity(WebServiceTaskDataXName), new NamedContentModelEntity(WMIDRTaskDataXName), new NamedContentModelEntity(WMIEWTaskDataXName), new NamedContentModelEntity(XMLTaskDataXName), new NamedContentModelEntity(InnerObjectXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public ExecutableObjectDataType() {
        }
        
        public ExecutableObjectDataType(pipelineObjectDataType pipeline) {
            this.pipeline = pipeline;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData ActiveXScriptTaskData) {
            this.ActiveXScriptTaskData = ActiveXScriptTaskData;
        }
        
        public ExecutableObjectDataType(ASDdlDataObjectDataType ASDdlData) {
            this.ASDdlData = ASDdlData;
        }
        
        public ExecutableObjectDataType(ASProcessingDataObjectDataType ASProcessingData) {
            this.ASProcessingData = ASProcessingData;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData BulkInsertTaskData) {
            this.BulkInsertTaskData = BulkInsertTaskData;
        }
        
        public ExecutableObjectDataType(DMQueryTaskDataObjectDataType DMQueryTaskData) {
            this.DMQueryTaskData = DMQueryTaskData;
        }
        
        public ExecutableObjectDataType(DataProfilingTaskDataObjectDataType DataProfilingTaskData) {
            this.DataProfilingTaskData = DataProfilingTaskData;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData Exec80PackageTaskData) {
            this.Exec80PackageTaskData = Exec80PackageTaskData;
        }
        
        public ExecutableObjectDataType(ExecutePackageTaskObjectDataType ExecutePackageTask) {
            this.ExecutePackageTask = ExecutePackageTask;
        }
        
        public ExecutableObjectDataType(ExecuteProcessDataObjectDataType ExecuteProcessData) {
            this.ExecuteProcessData = ExecuteProcessData;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData SqlTaskData) {
            this.SqlTaskData = SqlTaskData;
        }
        
        public ExecutableObjectDataType(FileSystemDataObjectDataType FileSystemData) {
            this.FileSystemData = FileSystemData;
        }
        
        public ExecutableObjectDataType(FtpDataObjectDataType FtpData) {
            this.FtpData = FtpData;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData MessageQueueTaskData) {
            this.MessageQueueTaskData = MessageQueueTaskData;
        }
        
        public ExecutableObjectDataType(ScriptProjectObjectDataType ScriptProject) {
            this.ScriptProject = ScriptProject;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData SendMailTaskData) {
            this.SendMailTaskData = SendMailTaskData;
        }
        
        public ExecutableObjectDataType(TransferDatabasesTaskDataObjectDataType TransferDatabasesTaskData) {
            this.TransferDatabasesTaskData = TransferDatabasesTaskData;
        }
        
        public ExecutableObjectDataType(TransferErrorMessagesTaskDataObjectDataType TransferErrorMessagesTaskData) {
            this.TransferErrorMessagesTaskData = TransferErrorMessagesTaskData;
        }
        
        public ExecutableObjectDataType(TransferJobsTaskDataObjectDataType TransferJobsTaskData) {
            this.TransferJobsTaskData = TransferJobsTaskData;
        }
        
        public ExecutableObjectDataType(TransferLoginsTaskDataObjectDataType TransferLoginsTaskData) {
            this.TransferLoginsTaskData = TransferLoginsTaskData;
        }
        
        public ExecutableObjectDataType(TransferStoredProceduresTaskDataObjectDataType TransferStoredProceduresTaskData) {
            this.TransferStoredProceduresTaskData = TransferStoredProceduresTaskData;
        }
        
        public ExecutableObjectDataType(TransferSqlServerObjectsTaskDataObjectDataType TransferSqlServerObjectsTaskData) {
            this.TransferSqlServerObjectsTaskData = TransferSqlServerObjectsTaskData;
        }
        
        public ExecutableObjectDataType(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData WebServiceTaskData) {
            this.WebServiceTaskData = WebServiceTaskData;
        }
        
        public ExecutableObjectDataType(WMIDRTaskDataObjectDataType WMIDRTaskData) {
            this.WMIDRTaskData = WMIDRTaskData;
        }
        
        public ExecutableObjectDataType(WMIEWTaskDataObjectDataType WMIEWTaskData) {
            this.WMIEWTaskData = WMIEWTaskData;
        }
        
        public ExecutableObjectDataType(XMLTaskDataObjectDataType XMLTaskData) {
            this.XMLTaskData = XMLTaskData;
        }
        
        public ExecutableObjectDataType(InnerObjectObjectDataType InnerObject) {
            this.InnerObject = InnerObject;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual pipelineObjectDataType pipeline {
            get {
                XElement x = this.GetElement(pipelineXName);
                return ((pipelineObjectDataType)(x));
            }
            set {
                this.SetElement(pipelineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData ActiveXScriptTaskData {
            get {
                XElement x = this.GetElement(ActiveXScriptTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData)(x));
            }
            set {
                this.SetElement(ActiveXScriptTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual ASDdlDataObjectDataType ASDdlData {
            get {
                XElement x = this.GetElement(ASDdlDataXName);
                return ((ASDdlDataObjectDataType)(x));
            }
            set {
                this.SetElement(ASDdlDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual ASProcessingDataObjectDataType ASProcessingData {
            get {
                XElement x = this.GetElement(ASProcessingDataXName);
                return ((ASProcessingDataObjectDataType)(x));
            }
            set {
                this.SetElement(ASProcessingDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData BulkInsertTaskData {
            get {
                XElement x = this.GetElement(BulkInsertTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData)(x));
            }
            set {
                this.SetElement(BulkInsertTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual DMQueryTaskDataObjectDataType DMQueryTaskData {
            get {
                XElement x = this.GetElement(DMQueryTaskDataXName);
                return ((DMQueryTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(DMQueryTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual DataProfilingTaskDataObjectDataType DataProfilingTaskData {
            get {
                XElement x = this.GetElement(DataProfilingTaskDataXName);
                return ((DataProfilingTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(DataProfilingTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData Exec80PackageTaskData {
            get {
                XElement x = this.GetElement(Exec80PackageTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData)(x));
            }
            set {
                this.SetElement(Exec80PackageTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual ExecutePackageTaskObjectDataType ExecutePackageTask {
            get {
                XElement x = this.GetElement(ExecutePackageTaskXName);
                return ((ExecutePackageTaskObjectDataType)(x));
            }
            set {
                this.SetElement(ExecutePackageTaskXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual ExecuteProcessDataObjectDataType ExecuteProcessData {
            get {
                XElement x = this.GetElement(ExecuteProcessDataXName);
                return ((ExecuteProcessDataObjectDataType)(x));
            }
            set {
                this.SetElement(ExecuteProcessDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData SqlTaskData {
            get {
                XElement x = this.GetElement(SqlTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData)(x));
            }
            set {
                this.SetElement(SqlTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual FileSystemDataObjectDataType FileSystemData {
            get {
                XElement x = this.GetElement(FileSystemDataXName);
                return ((FileSystemDataObjectDataType)(x));
            }
            set {
                this.SetElement(FileSystemDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual FtpDataObjectDataType FtpData {
            get {
                XElement x = this.GetElement(FtpDataXName);
                return ((FtpDataObjectDataType)(x));
            }
            set {
                this.SetElement(FtpDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData MessageQueueTaskData {
            get {
                XElement x = this.GetElement(MessageQueueTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData)(x));
            }
            set {
                this.SetElement(MessageQueueTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual ScriptProjectObjectDataType ScriptProject {
            get {
                XElement x = this.GetElement(ScriptProjectXName);
                return ((ScriptProjectObjectDataType)(x));
            }
            set {
                this.SetElement(ScriptProjectXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData SendMailTaskData {
            get {
                XElement x = this.GetElement(SendMailTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData)(x));
            }
            set {
                this.SetElement(SendMailTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferDatabasesTaskDataObjectDataType TransferDatabasesTaskData {
            get {
                XElement x = this.GetElement(TransferDatabasesTaskDataXName);
                return ((TransferDatabasesTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferDatabasesTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferErrorMessagesTaskDataObjectDataType TransferErrorMessagesTaskData {
            get {
                XElement x = this.GetElement(TransferErrorMessagesTaskDataXName);
                return ((TransferErrorMessagesTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferErrorMessagesTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferJobsTaskDataObjectDataType TransferJobsTaskData {
            get {
                XElement x = this.GetElement(TransferJobsTaskDataXName);
                return ((TransferJobsTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferJobsTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferLoginsTaskDataObjectDataType TransferLoginsTaskData {
            get {
                XElement x = this.GetElement(TransferLoginsTaskDataXName);
                return ((TransferLoginsTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferLoginsTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferStoredProceduresTaskDataObjectDataType TransferStoredProceduresTaskData {
            get {
                XElement x = this.GetElement(TransferStoredProceduresTaskDataXName);
                return ((TransferStoredProceduresTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferStoredProceduresTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual TransferSqlServerObjectsTaskDataObjectDataType TransferSqlServerObjectsTaskData {
            get {
                XElement x = this.GetElement(TransferSqlServerObjectsTaskDataXName);
                return ((TransferSqlServerObjectsTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(TransferSqlServerObjectsTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData WebServiceTaskData {
            get {
                XElement x = this.GetElement(WebServiceTaskDataXName);
                return ((Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData)(x));
            }
            set {
                this.SetElement(WebServiceTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual WMIDRTaskDataObjectDataType WMIDRTaskData {
            get {
                XElement x = this.GetElement(WMIDRTaskDataXName);
                return ((WMIDRTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(WMIDRTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual WMIEWTaskDataObjectDataType WMIEWTaskData {
            get {
                XElement x = this.GetElement(WMIEWTaskDataXName);
                return ((WMIEWTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(WMIEWTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual XMLTaskDataObjectDataType XMLTaskData {
            get {
                XElement x = this.GetElement(XMLTaskDataXName);
                return ((XMLTaskDataObjectDataType)(x));
            }
            set {
                this.SetElement(XMLTaskDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (pipeline | ActiveXScriptTaskData | ASDdlData | ASProcessingData | BulkInsertTaskData | DMQueryTaskData | DataProfilingTaskData | Exec80PackageTaskData | ExecutePackageTask | ExecuteProcessData | SqlTaskData | FileSystemData | FtpData | MessageQueueTaskData | ScriptProject | SendMailTaskData | TransferDatabasesTaskData | TransferErrorMessagesTaskData | TransferJobsTaskData | TransferLoginsTaskData | TransferStoredProceduresTaskData | TransferSqlServerObjectsTaskData | WebServiceTaskData | WMIDRTaskData | WMIEWTaskData | XMLTaskData | InnerObject)?
        /// </para>
        /// </summary>
        public virtual InnerObjectObjectDataType InnerObject {
            get {
                XElement x = this.GetElement(InnerObjectXName);
                return ((InnerObjectObjectDataType)(x));
            }
            set {
                this.SetElement(InnerObjectXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecutableObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pipelineXName, typeof(pipelineObjectDataType));
            localElementDictionary.Add(ActiveXScriptTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData));
            localElementDictionary.Add(ASDdlDataXName, typeof(ASDdlDataObjectDataType));
            localElementDictionary.Add(ASProcessingDataXName, typeof(ASProcessingDataObjectDataType));
            localElementDictionary.Add(BulkInsertTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData));
            localElementDictionary.Add(DMQueryTaskDataXName, typeof(DMQueryTaskDataObjectDataType));
            localElementDictionary.Add(DataProfilingTaskDataXName, typeof(DataProfilingTaskDataObjectDataType));
            localElementDictionary.Add(Exec80PackageTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData));
            localElementDictionary.Add(ExecutePackageTaskXName, typeof(ExecutePackageTaskObjectDataType));
            localElementDictionary.Add(ExecuteProcessDataXName, typeof(ExecuteProcessDataObjectDataType));
            localElementDictionary.Add(SqlTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData));
            localElementDictionary.Add(FileSystemDataXName, typeof(FileSystemDataObjectDataType));
            localElementDictionary.Add(FtpDataXName, typeof(FtpDataObjectDataType));
            localElementDictionary.Add(MessageQueueTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData));
            localElementDictionary.Add(ScriptProjectXName, typeof(ScriptProjectObjectDataType));
            localElementDictionary.Add(SendMailTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData));
            localElementDictionary.Add(TransferDatabasesTaskDataXName, typeof(TransferDatabasesTaskDataObjectDataType));
            localElementDictionary.Add(TransferErrorMessagesTaskDataXName, typeof(TransferErrorMessagesTaskDataObjectDataType));
            localElementDictionary.Add(TransferJobsTaskDataXName, typeof(TransferJobsTaskDataObjectDataType));
            localElementDictionary.Add(TransferLoginsTaskDataXName, typeof(TransferLoginsTaskDataObjectDataType));
            localElementDictionary.Add(TransferStoredProceduresTaskDataXName, typeof(TransferStoredProceduresTaskDataObjectDataType));
            localElementDictionary.Add(TransferSqlServerObjectsTaskDataXName, typeof(TransferSqlServerObjectsTaskDataObjectDataType));
            localElementDictionary.Add(WebServiceTaskDataXName, typeof(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData));
            localElementDictionary.Add(WMIDRTaskDataXName, typeof(WMIDRTaskDataObjectDataType));
            localElementDictionary.Add(WMIEWTaskDataXName, typeof(WMIEWTaskDataObjectDataType));
            localElementDictionary.Add(XMLTaskDataXName, typeof(XMLTaskDataObjectDataType));
            localElementDictionary.Add(InnerObjectXName, typeof(InnerObjectObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ASDdlDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionNameXName = System.Xml.Linq.XName.Get("ConnectionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceTypeXName = System.Xml.Linq.XName.Get("SourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceXName = System.Xml.Linq.XName.Get("Source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ASDdlDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ASDdlDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ASDdlDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ASDdlDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionName {
            get {
                XAttribute x = this.Attribute(ConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SourceType {
            get {
                XAttribute x = this.Attribute(SourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Source {
            get {
                XAttribute x = this.Attribute(SourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ASDdlDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ASProcessingDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionNameXName = System.Xml.Linq.XName.Get("ConnectionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProcessingCommandsXName = System.Xml.Linq.XName.Get("ProcessingCommands", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ASProcessingDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ASProcessingDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ASProcessingDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ASProcessingDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionName {
            get {
                XAttribute x = this.Attribute(ConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProcessingCommands {
            get {
                XAttribute x = this.Attribute(ProcessingCommandsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProcessingCommandsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ASProcessingDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (QueryString, QueryBuilderQueryString, QueryBuilderSpecification)
    /// </para>
    /// </summary>
    public partial class DMQueryTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryStringXName = System.Xml.Linq.XName.Get("QueryString", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryBuilderQueryStringXName = System.Xml.Linq.XName.Get("QueryBuilderQueryString", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryBuilderSpecificationXName = System.Xml.Linq.XName.Get("QueryBuilderSpecification", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InputConnectionXName = System.Xml.Linq.XName.Get("InputConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputConnectionXName = System.Xml.Linq.XName.Get("OutputConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModelStructureNameXName = System.Xml.Linq.XName.Get("ModelStructureName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModelNameXName = System.Xml.Linq.XName.Get("ModelName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteOutputTableXName = System.Xml.Linq.XName.Get("OverwriteOutputTable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputTableNameXName = System.Xml.Linq.XName.Get("OutputTableName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DMQueryTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DMQueryTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<DMQueryTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DMQueryTaskDataObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(QueryStringXName), new NamedContentModelEntity(QueryBuilderQueryStringXName), new NamedContentModelEntity(QueryBuilderSpecificationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (QueryString, QueryBuilderQueryString, QueryBuilderSpecification)
        /// </para>
        /// </summary>
        public DMQueryTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QueryString, QueryBuilderQueryString, QueryBuilderSpecification)
        /// </para>
        /// </summary>
        public virtual DMQueryTaskQueryStringContainerType QueryString {
            get {
                XElement x = this.GetElement(QueryStringXName);
                return ((DMQueryTaskQueryStringContainerType)(x));
            }
            set {
                this.SetElement(QueryStringXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QueryString, QueryBuilderQueryString, QueryBuilderSpecification)
        /// </para>
        /// </summary>
        public virtual DMQueryTaskQueryStringContainerType QueryBuilderQueryString {
            get {
                XElement x = this.GetElement(QueryBuilderQueryStringXName);
                return ((DMQueryTaskQueryStringContainerType)(x));
            }
            set {
                this.SetElement(QueryBuilderQueryStringXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (QueryString, QueryBuilderQueryString, QueryBuilderSpecification)
        /// </para>
        /// </summary>
        public virtual DMQueryBuilderSpecificationType QueryBuilderSpecification {
            get {
                XElement x = this.GetElement(QueryBuilderSpecificationXName);
                return ((DMQueryBuilderSpecificationType)(x));
            }
            set {
                this.SetElement(QueryBuilderSpecificationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InputConnection {
            get {
                XAttribute x = this.Attribute(InputConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InputConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OutputConnection {
            get {
                XAttribute x = this.Attribute(OutputConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OutputConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModelStructureName {
            get {
                XAttribute x = this.Attribute(ModelStructureNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModelStructureNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModelName {
            get {
                XAttribute x = this.Attribute(ModelNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModelNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DMQueryTaskDataObjectDataType.OverwriteOutputTableEnum? OverwriteOutputTable {
            get {
                XAttribute x = this.Attribute(OverwriteOutputTableXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DMQueryTaskDataObjectDataType.OverwriteOutputTableEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DMQueryTaskDataObjectDataType.OverwriteOutputTableEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OverwriteOutputTableXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OutputTableName {
            get {
                XAttribute x = this.Attribute(OutputTableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OutputTableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DMQueryTaskDataObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(QueryStringXName, typeof(DMQueryTaskQueryStringContainerType));
            localElementDictionary.Add(QueryBuilderQueryStringXName, typeof(DMQueryTaskQueryStringContainerType));
            localElementDictionary.Add(QueryBuilderSpecificationXName, typeof(DMQueryBuilderSpecificationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum OverwriteOutputTableEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class DMQueryTaskQueryStringContainerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SensitiveXName = System.Xml.Linq.XName.Get("Sensitive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EncryptedXName = System.Xml.Linq.XName.Get("Encrypted", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DMQueryTaskQueryStringContainerType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator DMQueryTaskQueryStringContainerType(XElement xe) { return XTypedServices.ToXTypedElement<DMQueryTaskQueryStringContainerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DMQueryTaskQueryStringContainerType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? Sensitive {
            get {
                XAttribute x = this.Attribute(SensitiveXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(SensitiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? Encrypted {
            get {
                XAttribute x = this.Attribute(EncryptedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(EncryptedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DMQueryTaskQueryStringContainerType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class DMQueryBuilderSpecificationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SensitiveXName = System.Xml.Linq.XName.Get("Sensitive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EncryptedXName = System.Xml.Linq.XName.Get("Encrypted", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DMQueryBuilderSpecificationType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator DMQueryBuilderSpecificationType(XElement xe) { return XTypedServices.ToXTypedElement<DMQueryBuilderSpecificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DMQueryBuilderSpecificationType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public DMQueryBuilderSpecificationType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? Sensitive {
            get {
                XAttribute x = this.Attribute(SensitiveXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(SensitiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? Encrypted {
            get {
                XAttribute x = this.Attribute(EncryptedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(EncryptedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DMQueryBuilderSpecificationType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "www.microsoft.com/SqlServer/Dts"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProfileInput)
    /// </para>
    /// </summary>
    public partial class DataProfilingTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfileInputXName = System.Xml.Linq.XName.Get("ProfileInput", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationTypeXName = System.Xml.Linq.XName.Get("DestinationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationXName = System.Xml.Linq.XName.Get("Destination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteDestinationXName = System.Xml.Linq.XName.Get("OverwriteDestination", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataProfilingTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataProfilingTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<DataProfilingTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataProfilingTaskDataObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProfileInputXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProfileInput)
        /// </para>
        /// </summary>
        public DataProfilingTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProfileInput)
        /// </para>
        /// </summary>
        public virtual string ProfileInput {
            get {
                XElement x = this.GetElement(ProfileInputXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ProfileInputXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DestinationTypeEnum? DestinationType {
            get {
                XAttribute x = this.Attribute(DestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DestinationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DestinationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DestinationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Destination {
            get {
                XAttribute x = this.Attribute(DestinationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DataProfilingTaskDataObjectDataType.OverwriteDestinationEnum? OverwriteDestination {
            get {
                XAttribute x = this.Attribute(OverwriteDestinationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DataProfilingTaskDataObjectDataType.OverwriteDestinationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DataProfilingTaskDataObjectDataType.OverwriteDestinationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OverwriteDestinationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataProfilingTaskDataObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProfileInputXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum OverwriteDestinationEnum {
            
            True,
            
            False,
        }
    }
    
    public enum DestinationTypeEnum {
        
        FileConnection,
        
        Variable,
    }
    
    public sealed class DestinationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FileConnection",
                        "Variable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DestinationTypeEnumValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
    /// </para>
    /// </summary>
    public partial class ExecutePackageTaskObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecuteOutOfProcessXName = System.Xml.Linq.XName.Get("ExecuteOutOfProcess", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageNameXName = System.Xml.Linq.XName.Get("PackageName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackagePasswordXName = System.Xml.Linq.XName.Get("PackagePassword", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageIDXName = System.Xml.Linq.XName.Get("PackageID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionIDXName = System.Xml.Linq.XName.Get("VersionID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExecutePackageTaskObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExecutePackageTaskObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ExecutePackageTaskObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExecutePackageTaskObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExecuteOutOfProcessXName), new NamedContentModelEntity(PackageNameXName), new NamedContentModelEntity(PackagePasswordXName), new NamedContentModelEntity(PackageIDXName), new NamedContentModelEntity(VersionIDXName), new NamedContentModelEntity(ConnectionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public ExecutePackageTaskObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.ExecutePackageTaskObjectDataType.ExecuteOutOfProcessEnum ExecuteOutOfProcess {
            get {
                XElement x = this.GetElement(ExecuteOutOfProcessXName);
                return ((Microsoft.SqlServer.Dts.ExecutePackageTaskObjectDataType.ExecuteOutOfProcessEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ExecutePackageTaskObjectDataType.ExecuteOutOfProcessEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetElementWithValidation(ExecuteOutOfProcessXName, value.ToString(), "ExecuteOutOfProcess", ExecuteOutOfProcessEnumValidator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual string PackageName {
            get {
                XElement x = this.GetElement(PackageNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(PackageNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual PasswordElementType PackagePassword {
            get {
                XElement x = this.GetElement(PackagePasswordXName);
                return ((PasswordElementType)(x));
            }
            set {
                this.SetElement(PackagePasswordXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual string PackageID {
            get {
                XElement x = this.GetElement(PackageIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(PackageIDXName, value, "PackageID", global::Microsoft.SqlServer.Dts.uuid.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual string VersionID {
            get {
                XElement x = this.GetElement(VersionIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(VersionIDXName, value, "VersionID", global::Microsoft.SqlServer.Dts.uuid.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteOutOfProcess, PackageName, PackagePassword, PackageID, VersionID, Connection)
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XElement x = this.GetElement(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecutePackageTaskObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExecuteOutOfProcessXName, typeof(string));
            localElementDictionary.Add(PackageNameXName, typeof(string));
            localElementDictionary.Add(PackagePasswordXName, typeof(PasswordElementType));
            localElementDictionary.Add(PackageIDXName, typeof(string));
            localElementDictionary.Add(VersionIDXName, typeof(string));
            localElementDictionary.Add(ConnectionXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ExecuteOutOfProcessEnum {
            
            True,
            
            False,
        }
        
        private class ExecuteOutOfProcessEnumValidator {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "True",
                            "False"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ExecuteOutOfProcessEnumValidator() {
            }
        }
    }
    
    public partial class ExecuteProcessDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutableXName = System.Xml.Linq.XName.Get("Executable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequireFullFileNameXName = System.Xml.Linq.XName.Get("RequireFullFileName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArgumentsXName = System.Xml.Linq.XName.Get("Arguments", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkingDirectoryXName = System.Xml.Linq.XName.Get("WorkingDirectory", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FailTaskIfReturnCodeIsNotSuccessValueXName = System.Xml.Linq.XName.Get("FailTaskIfReturnCodeIsNotSuccessValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuccessValueXName = System.Xml.Linq.XName.Get("SuccessValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TerminateAfterTimeoutXName = System.Xml.Linq.XName.Get("TerminateAfterTimeout", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandardInputVariableXName = System.Xml.Linq.XName.Get("StandardInputVariable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandardOutputVariableXName = System.Xml.Linq.XName.Get("StandardOutputVariable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandardErrorVariableXName = System.Xml.Linq.XName.Get("StandardErrorVariable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WindowStyleXName = System.Xml.Linq.XName.Get("WindowStyle", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExecuteProcessDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ExecuteProcessDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ExecuteProcessDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExecuteProcessDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Executable {
            get {
                XAttribute x = this.Attribute(ExecutableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExecutableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.RequireFullFileNameEnum? RequireFullFileName {
            get {
                XAttribute x = this.Attribute(RequireFullFileNameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.RequireFullFileNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.RequireFullFileNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RequireFullFileNameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Arguments {
            get {
                XAttribute x = this.Attribute(ArgumentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ArgumentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WorkingDirectory {
            get {
                XAttribute x = this.Attribute(WorkingDirectoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WorkingDirectoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.FailTaskIfReturnCodeIsNotSuccessValueEnum? FailTaskIfReturnCodeIsNotSuccessValue {
            get {
                XAttribute x = this.Attribute(FailTaskIfReturnCodeIsNotSuccessValueXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.FailTaskIfReturnCodeIsNotSuccessValueEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.FailTaskIfReturnCodeIsNotSuccessValueEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(FailTaskIfReturnCodeIsNotSuccessValueXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? SuccessValue {
            get {
                XAttribute x = this.Attribute(SuccessValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SuccessValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.TerminateAfterTimeoutEnum? TerminateAfterTimeout {
            get {
                XAttribute x = this.Attribute(TerminateAfterTimeoutXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.TerminateAfterTimeoutEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType.TerminateAfterTimeoutEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TerminateAfterTimeoutXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StandardInputVariable {
            get {
                XAttribute x = this.Attribute(StandardInputVariableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StandardInputVariableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StandardOutputVariable {
            get {
                XAttribute x = this.Attribute(StandardOutputVariableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StandardOutputVariableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StandardErrorVariable {
            get {
                XAttribute x = this.Attribute(StandardErrorVariableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StandardErrorVariableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WindowStyleEnum? WindowStyle {
            get {
                XAttribute x = this.Attribute(WindowStyleXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WindowStyleEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WindowStyleEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(WindowStyleXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecuteProcessDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum RequireFullFileNameEnum {
            
            True,
            
            False,
        }
        
        public enum FailTaskIfReturnCodeIsNotSuccessValueEnum {
            
            True,
            
            False,
        }
        
        public enum TerminateAfterTimeoutEnum {
            
            True,
            
            False,
        }
    }
    
    public enum WindowStyleEnum {
        
        Hidden,
        
        Maximized,
        
        Minimized,
        
        Normal,
    }
    
    public sealed class WindowStyleEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Hidden",
                        "Maximized",
                        "Minimized",
                        "Normal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WindowStyleEnumValidator() {
        }
    }
    
    public partial class FileSystemDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskOperationTypeXName = System.Xml.Linq.XName.Get("TaskOperationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperationNameXName = System.Xml.Linq.XName.Get("OperationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskOverwriteDestFileXName = System.Xml.Linq.XName.Get("TaskOverwriteDestFile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskSourcePathXName = System.Xml.Linq.XName.Get("TaskSourcePath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskIsSourceVariableXName = System.Xml.Linq.XName.Get("TaskIsSourceVariable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskDestinationPathXName = System.Xml.Linq.XName.Get("TaskDestinationPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskIsDestinationVariableXName = System.Xml.Linq.XName.Get("TaskIsDestinationVariable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskFileAttributesXName = System.Xml.Linq.XName.Get("TaskFileAttributes", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FileSystemDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FileSystemDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<FileSystemDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FileSystemDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FileSystemTaskOperationTypeEnum? TaskOperationType {
            get {
                XAttribute x = this.Attribute(TaskOperationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FileSystemTaskOperationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FileSystemTaskOperationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskOperationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OperationName {
            get {
                XAttribute x = this.Attribute(OperationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OperationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskOverwriteDestFileEnum? TaskOverwriteDestFile {
            get {
                XAttribute x = this.Attribute(TaskOverwriteDestFileXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskOverwriteDestFileEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskOverwriteDestFileEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskOverwriteDestFileXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskSourcePath {
            get {
                XAttribute x = this.Attribute(TaskSourcePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskSourcePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsSourceVariableEnum? TaskIsSourceVariable {
            get {
                XAttribute x = this.Attribute(TaskIsSourceVariableXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsSourceVariableEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsSourceVariableEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskIsSourceVariableXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskDestinationPath {
            get {
                XAttribute x = this.Attribute(TaskDestinationPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskDestinationPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsDestinationVariableEnum? TaskIsDestinationVariable {
            get {
                XAttribute x = this.Attribute(TaskIsDestinationVariableXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsDestinationVariableEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FileSystemDataObjectDataType.TaskIsDestinationVariableEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskIsDestinationVariableXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FileSystemTaskFileAttributesEnum? TaskFileAttributes {
            get {
                XAttribute x = this.Attribute(TaskFileAttributesXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FileSystemTaskFileAttributesEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FileSystemTaskFileAttributesEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskFileAttributesXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileSystemDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum TaskOverwriteDestFileEnum {
            
            False,
            
            True,
        }
        
        public enum TaskIsSourceVariableEnum {
            
            False,
            
            True,
        }
        
        public enum TaskIsDestinationVariableEnum {
            
            False,
            
            True,
        }
    }
    
    public partial class FtpDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionNameXName = System.Xml.Linq.XName.Get("ConnectionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StopOnFailureXName = System.Xml.Linq.XName.Get("StopOnFailure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskOperationTypeXName = System.Xml.Linq.XName.Get("TaskOperationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskOperationNameXName = System.Xml.Linq.XName.Get("TaskOperationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskIsLocalPathVarXName = System.Xml.Linq.XName.Get("TaskIsLocalPathVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskLocalPathXName = System.Xml.Linq.XName.Get("TaskLocalPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskIsRemotePathVarXName = System.Xml.Linq.XName.Get("TaskIsRemotePathVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskRemotePathXName = System.Xml.Linq.XName.Get("TaskRemotePath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskOverwriteDestXName = System.Xml.Linq.XName.Get("TaskOverwriteDest", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskTransferAsciiXName = System.Xml.Linq.XName.Get("TaskTransferAscii", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FtpDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FtpDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<FtpDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FtpDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionName {
            get {
                XAttribute x = this.Attribute(ConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataObjectDataType.StopOnFailureEnum? StopOnFailure {
            get {
                XAttribute x = this.Attribute(StopOnFailureXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataObjectDataType.StopOnFailureEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataObjectDataType.StopOnFailureEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(StopOnFailureXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataTaskOperationTypeEnum? TaskOperationType {
            get {
                XAttribute x = this.Attribute(TaskOperationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataTaskOperationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataTaskOperationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskOperationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskOperationName {
            get {
                XAttribute x = this.Attribute(TaskOperationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskOperationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsLocalPathVarEnum? TaskIsLocalPathVar {
            get {
                XAttribute x = this.Attribute(TaskIsLocalPathVarXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsLocalPathVarEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsLocalPathVarEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskIsLocalPathVarXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskLocalPath {
            get {
                XAttribute x = this.Attribute(TaskLocalPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskLocalPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsRemotePathVarEnum? TaskIsRemotePathVar {
            get {
                XAttribute x = this.Attribute(TaskIsRemotePathVarXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsRemotePathVarEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskIsRemotePathVarEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskIsRemotePathVarXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskRemotePath {
            get {
                XAttribute x = this.Attribute(TaskRemotePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskRemotePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskOverwriteDestEnum? TaskOverwriteDest {
            get {
                XAttribute x = this.Attribute(TaskOverwriteDestXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskOverwriteDestEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskOverwriteDestEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskOverwriteDestXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskTransferAsciiEnum? TaskTransferAscii {
            get {
                XAttribute x = this.Attribute(TaskTransferAsciiXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskTransferAsciiEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpDataObjectDataType.TaskTransferAsciiEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskTransferAsciiXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FtpDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum StopOnFailureEnum {
            
            False,
            
            True,
        }
        
        public enum TaskIsLocalPathVarEnum {
            
            False,
            
            True,
        }
        
        public enum TaskIsRemotePathVarEnum {
            
            False,
            
            True,
        }
        
        public enum TaskOverwriteDestEnum {
            
            False,
            
            True,
        }
        
        public enum TaskTransferAsciiEnum {
            
            False,
            
            True,
        }
    }
    
    public enum FtpDataTaskOperationTypeEnum {
        
        DeleteLocal,
        
        DeleteRemote,
        
        MakeDirLocal,
        
        MakeDirRemote,
        
        Receive,
        
        RemoveDirLocal,
        
        RemoveDirRemote,
        
        Send,
    }
    
    public sealed class FtpDataTaskOperationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DeleteLocal",
                        "DeleteRemote",
                        "MakeDirLocal",
                        "MakeDirRemote",
                        "Receive",
                        "RemoveDirLocal",
                        "RemoveDirRemote",
                        "Send"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FtpDataTaskOperationTypeEnumValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProjectItem*, BinaryItem?, Breakpoint*)
    /// </para>
    /// </summary>
    public partial class ScriptProjectObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProjectItemXName = System.Xml.Linq.XName.Get("ProjectItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScriptProjectProjectItemType> ProjectItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BinaryItemXName = System.Xml.Linq.XName.Get("BinaryItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreakpointXName = System.Xml.Linq.XName.Get("Breakpoint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScriptProjectBreakpointType> BreakpointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VSTAMajorVersionXName = System.Xml.Linq.XName.Get("VSTAMajorVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VSTAMinorVersionXName = System.Xml.Linq.XName.Get("VSTAMinorVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntryPointXName = System.Xml.Linq.XName.Get("EntryPoint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyVariablesXName = System.Xml.Linq.XName.Get("ReadOnlyVariables", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadWriteVariablesXName = System.Xml.Linq.XName.Get("ReadWriteVariables", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScriptProjectObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ScriptProjectObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ScriptProjectObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScriptProjectObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProjectItemXName), new NamedContentModelEntity(BinaryItemXName), new NamedContentModelEntity(BreakpointXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProjectItem*, BinaryItem?, Breakpoint*)
        /// </para>
        /// </summary>
        public ScriptProjectObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProjectItem*, BinaryItem?, Breakpoint*)
        /// </para>
        /// </summary>
        public virtual IList<ScriptProjectProjectItemType> ProjectItem {
            get {
                if ((this.ProjectItemField == null)) {
                    this.ProjectItemField = new XTypedList<ScriptProjectProjectItemType>(this, LinqToXsdTypeManager.Instance, ProjectItemXName);
                }
                return this.ProjectItemField;
            }
            set {
                if ((value == null)) {
                    this.ProjectItemField = null;
                }
                else {
                    if ((this.ProjectItemField == null)) {
                        this.ProjectItemField = XTypedList<ScriptProjectProjectItemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProjectItemXName);
                    }
                    else {
                        XTypedServices.SetList<ScriptProjectProjectItemType>(this.ProjectItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProjectItem*, BinaryItem?, Breakpoint*)
        /// </para>
        /// </summary>
        public virtual ScriptProjectBinaryItemType BinaryItem {
            get {
                XElement x = this.GetElement(BinaryItemXName);
                return ((ScriptProjectBinaryItemType)(x));
            }
            set {
                this.SetElement(BinaryItemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProjectItem*, BinaryItem?, Breakpoint*)
        /// </para>
        /// </summary>
        public virtual IList<ScriptProjectBreakpointType> Breakpoint {
            get {
                if ((this.BreakpointField == null)) {
                    this.BreakpointField = new XTypedList<ScriptProjectBreakpointType>(this, LinqToXsdTypeManager.Instance, BreakpointXName);
                }
                return this.BreakpointField;
            }
            set {
                if ((value == null)) {
                    this.BreakpointField = null;
                }
                else {
                    if ((this.BreakpointField == null)) {
                        this.BreakpointField = XTypedList<ScriptProjectBreakpointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BreakpointXName);
                    }
                    else {
                        XTypedServices.SetList<ScriptProjectBreakpointType>(this.BreakpointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? VSTAMajorVersion {
            get {
                XAttribute x = this.Attribute(VSTAMajorVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(VSTAMajorVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? VSTAMinorVersion {
            get {
                XAttribute x = this.Attribute(VSTAMinorVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(VSTAMinorVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.ScriptProjectLanguageEnum? Language {
            get {
                XAttribute x = this.Attribute(LanguageXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.ScriptProjectLanguageEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ScriptProjectLanguageEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(LanguageXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EntryPoint {
            get {
                XAttribute x = this.Attribute(EntryPointXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EntryPointXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnlyVariables {
            get {
                XAttribute x = this.Attribute(ReadOnlyVariablesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyVariablesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadWriteVariables {
            get {
                XAttribute x = this.Attribute(ReadWriteVariablesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadWriteVariablesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptProjectObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProjectItemXName, typeof(ScriptProjectProjectItemType));
            localElementDictionary.Add(BinaryItemXName, typeof(ScriptProjectBinaryItemType));
            localElementDictionary.Add(BreakpointXName, typeof(ScriptProjectBreakpointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ScriptProjectProjectItemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScriptProjectProjectItemType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ScriptProjectProjectItemType(XElement xe) { return XTypedServices.ToXTypedElement<ScriptProjectProjectItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ScriptProjectProjectItemType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptProjectProjectItemType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ScriptProjectBinaryItemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScriptProjectBinaryItemType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ScriptProjectBinaryItemType(XElement xe) { return XTypedServices.ToXTypedElement<ScriptProjectBinaryItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ScriptProjectBinaryItemType() {
        }
        
        public virtual byte[] TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptProjectBinaryItemType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ScriptProjectBreakpointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnabledXName = System.Xml.Linq.XName.Get("Enabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FunctionXName = System.Xml.Linq.XName.Get("Function", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileXName = System.Xml.Linq.XName.Get("File", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LineXName = System.Xml.Linq.XName.Get("Line", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColumnXName = System.Xml.Linq.XName.Get("Column", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConditionXName = System.Xml.Linq.XName.Get("Condition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConditionTypeXName = System.Xml.Linq.XName.Get("ConditionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HitCountXName = System.Xml.Linq.XName.Get("HitCount", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HitCountTypeXName = System.Xml.Linq.XName.Get("HitCountType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScriptProjectBreakpointType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ScriptProjectBreakpointType(XElement xe) { return XTypedServices.ToXTypedElement<ScriptProjectBreakpointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ScriptProjectBreakpointType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Enabled {
            get {
                XAttribute x = this.Attribute(EnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Function {
            get {
                XAttribute x = this.Attribute(FunctionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FunctionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string File {
            get {
                XAttribute x = this.Attribute(FileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Line {
            get {
                XAttribute x = this.Attribute(LineXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Column {
            get {
                XAttribute x = this.Attribute(ColumnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ColumnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Condition {
            get {
                XAttribute x = this.Attribute(ConditionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConditionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ConditionType {
            get {
                XAttribute x = this.Attribute(ConditionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ConditionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Language {
            get {
                XAttribute x = this.Attribute(LanguageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LanguageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? HitCount {
            get {
                XAttribute x = this.Attribute(HitCountXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(HitCountXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? HitCountType {
            get {
                XAttribute x = this.Attribute(HitCountTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(HitCountTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptProjectBreakpointType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum ScriptProjectLanguageEnum {
        
        CSharp,
        
        VisualBasic,
    }
    
    public sealed class ScriptProjectLanguageEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CSharp",
                        "VisualBasic"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ScriptProjectLanguageEnumValidator() {
        }
    }
    
    public sealed class ScriptProjectHitCountTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 4, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ScriptProjectHitCountTypeEnum() {
        }
    }
    
    public sealed class ScriptProjectConditionTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 2, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ScriptProjectConditionTypeEnum() {
        }
    }
    
    public partial class TransferDatabasesTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrcConnXName = System.Xml.Linq.XName.Get("SrcConn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestConnXName = System.Xml.Linq.XName.Get("DestConn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionXName = System.Xml.Linq.XName.Get("Action", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MethodXName = System.Xml.Linq.XName.Get("Method", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrcDBNameXName = System.Xml.Linq.XName.Get("SrcDBName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReattachSrcDBXName = System.Xml.Linq.XName.Get("ReattachSrcDB", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrcDBFilesXName = System.Xml.Linq.XName.Get("SrcDBFiles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestDBNameXName = System.Xml.Linq.XName.Get("DestDBName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestDBFilesXName = System.Xml.Linq.XName.Get("DestDBFiles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestOverwriteXName = System.Xml.Linq.XName.Get("DestOverwrite", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferDatabasesTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferDatabasesTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferDatabasesTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferDatabasesTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SrcConn {
            get {
                XAttribute x = this.Attribute(SrcConnXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SrcConnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestConn {
            get {
                XAttribute x = this.Attribute(DestConnXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestConnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Action {
            get {
                XAttribute x = this.Attribute(ActionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Method {
            get {
                XAttribute x = this.Attribute(MethodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(MethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SrcDBName {
            get {
                XAttribute x = this.Attribute(SrcDBNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SrcDBNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? ReattachSrcDB {
            get {
                XAttribute x = this.Attribute(ReattachSrcDBXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(ReattachSrcDBXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SrcDBFiles {
            get {
                XAttribute x = this.Attribute(SrcDBFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SrcDBFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestDBName {
            get {
                XAttribute x = this.Attribute(DestDBNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestDBNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestDBFiles {
            get {
                XAttribute x = this.Attribute(DestDBFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestDBFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? DestOverwrite {
            get {
                XAttribute x = this.Attribute(DestOverwriteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(DestOverwriteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferDatabasesTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class TransferDatabaseTaskActionEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TransferDatabaseTaskActionEnum() {
        }
    }
    
    public sealed class TransferDatabaseTaskMethodEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private TransferDatabaseTaskMethodEnum() {
        }
    }
    
    public partial class TransferErrorMessagesTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferAllErrorMessagesXName = System.Xml.Linq.XName.Get("TransferAllErrorMessages", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErrorMessagesListXName = System.Xml.Linq.XName.Get("ErrorMessagesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErrorMessageLanguagesListXName = System.Xml.Linq.XName.Get("ErrorMessageLanguagesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfObjectExistsXName = System.Xml.Linq.XName.Get("IfObjectExists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionXName = System.Xml.Linq.XName.Get("SourceConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationConnectionXName = System.Xml.Linq.XName.Get("DestinationConnection", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferErrorMessagesTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferErrorMessagesTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferErrorMessagesTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferErrorMessagesTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? TransferAllErrorMessages {
            get {
                XAttribute x = this.Attribute(TransferAllErrorMessagesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(TransferAllErrorMessagesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ErrorMessagesList {
            get {
                XAttribute x = this.Attribute(ErrorMessagesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ErrorMessagesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ErrorMessageLanguagesList {
            get {
                XAttribute x = this.Attribute(ErrorMessageLanguagesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ErrorMessageLanguagesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.IfObjectExistsEnum? IfObjectExists {
            get {
                XAttribute x = this.Attribute(IfObjectExistsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.IfObjectExistsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.IfObjectExistsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IfObjectExistsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnection {
            get {
                XAttribute x = this.Attribute(SourceConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnection {
            get {
                XAttribute x = this.Attribute(DestinationConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferErrorMessagesTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum IfObjectExistsEnum {
        
        FailTask,
        
        Overwrite,
        
        Skip,
    }
    
    public sealed class IfObjectExistsEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FailTask",
                        "Overwrite",
                        "Skip"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IfObjectExistsEnumValidator() {
        }
    }
    
    public partial class TransferJobsTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferAllJobsXName = System.Xml.Linq.XName.Get("TransferAllJobs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JobsListXName = System.Xml.Linq.XName.Get("JobsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfObjectExistsXName = System.Xml.Linq.XName.Get("IfObjectExists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableJobsAtDestinationXName = System.Xml.Linq.XName.Get("EnableJobsAtDestination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionXName = System.Xml.Linq.XName.Get("SourceConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationConnectionXName = System.Xml.Linq.XName.Get("DestinationConnection", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferJobsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferJobsTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferJobsTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferJobsTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? TransferAllJobs {
            get {
                XAttribute x = this.Attribute(TransferAllJobsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(TransferAllJobsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string JobsList {
            get {
                XAttribute x = this.Attribute(JobsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(JobsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.IfObjectExistsEnum? IfObjectExists {
            get {
                XAttribute x = this.Attribute(IfObjectExistsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.IfObjectExistsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.IfObjectExistsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IfObjectExistsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? EnableJobsAtDestination {
            get {
                XAttribute x = this.Attribute(EnableJobsAtDestinationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(EnableJobsAtDestinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnection {
            get {
                XAttribute x = this.Attribute(SourceConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnection {
            get {
                XAttribute x = this.Attribute(DestinationConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferJobsTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TransferLoginsTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoginsToTransferXName = System.Xml.Linq.XName.Get("LoginsToTransfer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopySidsXName = System.Xml.Linq.XName.Get("CopySids", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoginListXName = System.Xml.Linq.XName.Get("LoginList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfObjectExistsXName = System.Xml.Linq.XName.Get("IfObjectExists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionXName = System.Xml.Linq.XName.Get("SourceConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationConnectionXName = System.Xml.Linq.XName.Get("DestinationConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabasesListXName = System.Xml.Linq.XName.Get("DatabasesList", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferLoginsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferLoginsTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferLoginsTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferLoginsTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.TransferLoginsTaskLoginsToTransferEnum? LoginsToTransfer {
            get {
                XAttribute x = this.Attribute(LoginsToTransferXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.TransferLoginsTaskLoginsToTransferEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.TransferLoginsTaskLoginsToTransferEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(LoginsToTransferXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopySids {
            get {
                XAttribute x = this.Attribute(CopySidsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopySidsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LoginList {
            get {
                XAttribute x = this.Attribute(LoginListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LoginListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.IfObjectExistsEnum? IfObjectExists {
            get {
                XAttribute x = this.Attribute(IfObjectExistsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.IfObjectExistsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.IfObjectExistsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IfObjectExistsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnection {
            get {
                XAttribute x = this.Attribute(SourceConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnection {
            get {
                XAttribute x = this.Attribute(DestinationConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DatabasesList {
            get {
                XAttribute x = this.Attribute(DatabasesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DatabasesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferLoginsTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum TransferLoginsTaskLoginsToTransferEnum {
        
        SelectedLogins,
        
        AllLoginsFromSelectedDatabases,
        
        AllLogins,
    }
    
    public sealed class TransferLoginsTaskLoginsToTransferEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SelectedLogins",
                        "AllLoginsFromSelectedDatabases",
                        "AllLogins"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TransferLoginsTaskLoginsToTransferEnumValidator() {
        }
    }
    
    public partial class TransferStoredProceduresTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferAllStoredProceduresXName = System.Xml.Linq.XName.Get("TransferAllStoredProcedures", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StoredProceduresListXName = System.Xml.Linq.XName.Get("StoredProceduresList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfObjectExistsXName = System.Xml.Linq.XName.Get("IfObjectExists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionXName = System.Xml.Linq.XName.Get("SourceConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName m_DestinationConnectionIDXName = System.Xml.Linq.XName.Get("m_DestinationConnectionID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferStoredProceduresTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferStoredProceduresTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferStoredProceduresTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferStoredProceduresTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? TransferAllStoredProcedures {
            get {
                XAttribute x = this.Attribute(TransferAllStoredProceduresXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(TransferAllStoredProceduresXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StoredProceduresList {
            get {
                XAttribute x = this.Attribute(StoredProceduresListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StoredProceduresListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.IfObjectExistsEnum? IfObjectExists {
            get {
                XAttribute x = this.Attribute(IfObjectExistsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.IfObjectExistsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.IfObjectExistsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IfObjectExistsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnection {
            get {
                XAttribute x = this.Attribute(SourceConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string m_DestinationConnectionID {
            get {
                XAttribute x = this.Attribute(m_DestinationConnectionIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(m_DestinationConnectionIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferStoredProceduresTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TransferSqlServerObjectsTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionXName = System.Xml.Linq.XName.Get("SourceConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationConnectionXName = System.Xml.Linq.XName.Get("DestinationConnection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceDatabaseXName = System.Xml.Linq.XName.Get("SourceDatabase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationDatabaseXName = System.Xml.Linq.XName.Get("DestinationDatabase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllObjectsXName = System.Xml.Linq.XName.Get("CopyAllObjects", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllRulesXName = System.Xml.Linq.XName.Get("CopyAllRules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllTablesXName = System.Xml.Linq.XName.Get("CopyAllTables", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllViewsXName = System.Xml.Linq.XName.Get("CopyAllViews", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllStoredProceduresXName = System.Xml.Linq.XName.Get("CopyAllStoredProcedures", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllUserDefinedFunctionsXName = System.Xml.Linq.XName.Get("CopyAllUserDefinedFunctions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllDefaultsXName = System.Xml.Linq.XName.Get("CopyAllDefaults", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllUserDefinedDataTypesXName = System.Xml.Linq.XName.Get("CopyAllUserDefinedDataTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllPartitionFunctionsXName = System.Xml.Linq.XName.Get("CopyAllPartitionFunctions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllPartitionSchemesXName = System.Xml.Linq.XName.Get("CopyAllPartitionSchemes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllSchemasXName = System.Xml.Linq.XName.Get("CopyAllSchemas", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllSqlAssembliesXName = System.Xml.Linq.XName.Get("CopyAllSqlAssemblies", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllUserDefinedAggregatesXName = System.Xml.Linq.XName.Get("CopyAllUserDefinedAggregates", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllUserDefinedTypesXName = System.Xml.Linq.XName.Get("CopyAllUserDefinedTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllXmlSchemaCollectionsXName = System.Xml.Linq.XName.Get("CopyAllXmlSchemaCollections", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LoginsListXName = System.Xml.Linq.XName.Get("LoginsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsersListXName = System.Xml.Linq.XName.Get("UsersList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RulesListXName = System.Xml.Linq.XName.Get("RulesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TablesListXName = System.Xml.Linq.XName.Get("TablesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewsListXName = System.Xml.Linq.XName.Get("ViewsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StoredProceduresListXName = System.Xml.Linq.XName.Get("StoredProceduresList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserDefinedFunctionsListXName = System.Xml.Linq.XName.Get("UserDefinedFunctionsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultsListXName = System.Xml.Linq.XName.Get("DefaultsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserDefinedDataTypesListXName = System.Xml.Linq.XName.Get("UserDefinedDataTypesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PartitionFunctionsListXName = System.Xml.Linq.XName.Get("PartitionFunctionsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PartitionSchemesListXName = System.Xml.Linq.XName.Get("PartitionSchemesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemasListXName = System.Xml.Linq.XName.Get("SchemasList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlAssembliesListXName = System.Xml.Linq.XName.Get("SqlAssembliesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserDefinedAggregatesListXName = System.Xml.Linq.XName.Get("UserDefinedAggregatesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserDefinedTypesListXName = System.Xml.Linq.XName.Get("UserDefinedTypesList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XmlSchemaCollectionsListXName = System.Xml.Linq.XName.Get("XmlSchemaCollectionsList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DropObjectsFirstXName = System.Xml.Linq.XName.Get("DropObjectsFirst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeDependentObjectsXName = System.Xml.Linq.XName.Get("IncludeDependentObjects", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeExtendedPropertiesXName = System.Xml.Linq.XName.Get("IncludeExtendedProperties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyDataXName = System.Xml.Linq.XName.Get("CopyData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistingDataXName = System.Xml.Linq.XName.Get("ExistingData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopySchemaXName = System.Xml.Linq.XName.Get("CopySchema", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseCollationXName = System.Xml.Linq.XName.Get("UseCollation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyDatabaseUsersXName = System.Xml.Linq.XName.Get("CopyDatabaseUsers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyDatabaseRolesXName = System.Xml.Linq.XName.Get("CopyDatabaseRoles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopySqlServerLoginsXName = System.Xml.Linq.XName.Get("CopySqlServerLogins", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyObjectLevelPermissionsXName = System.Xml.Linq.XName.Get("CopyObjectLevelPermissions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyIndexesXName = System.Xml.Linq.XName.Get("CopyIndexes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyTriggersXName = System.Xml.Linq.XName.Get("CopyTriggers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyFullTextIndexesXName = System.Xml.Linq.XName.Get("CopyFullTextIndexes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyPrimaryKeysXName = System.Xml.Linq.XName.Get("CopyPrimaryKeys", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyForeignKeysXName = System.Xml.Linq.XName.Get("CopyForeignKeys", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenerateScriptsInUnicodeXName = System.Xml.Linq.XName.Get("GenerateScriptsInUnicode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceTranslateCharXName = System.Xml.Linq.XName.Get("SourceTranslateChar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationTranslateCharXName = System.Xml.Linq.XName.Get("DestinationTranslateChar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CopyAllDRIObjectsXName = System.Xml.Linq.XName.Get("CopyAllDRIObjects", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferSqlServerObjectsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator TransferSqlServerObjectsTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<TransferSqlServerObjectsTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TransferSqlServerObjectsTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnection {
            get {
                XAttribute x = this.Attribute(SourceConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnection {
            get {
                XAttribute x = this.Attribute(DestinationConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceDatabase {
            get {
                XAttribute x = this.Attribute(SourceDatabaseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceDatabaseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationDatabase {
            get {
                XAttribute x = this.Attribute(DestinationDatabaseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationDatabaseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllObjects {
            get {
                XAttribute x = this.Attribute(CopyAllObjectsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllObjectsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllRules {
            get {
                XAttribute x = this.Attribute(CopyAllRulesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllRulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllTables {
            get {
                XAttribute x = this.Attribute(CopyAllTablesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllTablesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllViews {
            get {
                XAttribute x = this.Attribute(CopyAllViewsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllViewsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllStoredProcedures {
            get {
                XAttribute x = this.Attribute(CopyAllStoredProceduresXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllStoredProceduresXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllUserDefinedFunctions {
            get {
                XAttribute x = this.Attribute(CopyAllUserDefinedFunctionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllUserDefinedFunctionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllDefaults {
            get {
                XAttribute x = this.Attribute(CopyAllDefaultsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllDefaultsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllUserDefinedDataTypes {
            get {
                XAttribute x = this.Attribute(CopyAllUserDefinedDataTypesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllUserDefinedDataTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllPartitionFunctions {
            get {
                XAttribute x = this.Attribute(CopyAllPartitionFunctionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllPartitionFunctionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllPartitionSchemes {
            get {
                XAttribute x = this.Attribute(CopyAllPartitionSchemesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllPartitionSchemesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllSchemas {
            get {
                XAttribute x = this.Attribute(CopyAllSchemasXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllSchemasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllSqlAssemblies {
            get {
                XAttribute x = this.Attribute(CopyAllSqlAssembliesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllSqlAssembliesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllUserDefinedAggregates {
            get {
                XAttribute x = this.Attribute(CopyAllUserDefinedAggregatesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllUserDefinedAggregatesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllUserDefinedTypes {
            get {
                XAttribute x = this.Attribute(CopyAllUserDefinedTypesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllUserDefinedTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllXmlSchemaCollections {
            get {
                XAttribute x = this.Attribute(CopyAllXmlSchemaCollectionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllXmlSchemaCollectionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LoginsList {
            get {
                XAttribute x = this.Attribute(LoginsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LoginsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UsersList {
            get {
                XAttribute x = this.Attribute(UsersListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UsersListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RulesList {
            get {
                XAttribute x = this.Attribute(RulesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RulesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TablesList {
            get {
                XAttribute x = this.Attribute(TablesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TablesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ViewsList {
            get {
                XAttribute x = this.Attribute(ViewsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ViewsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StoredProceduresList {
            get {
                XAttribute x = this.Attribute(StoredProceduresListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StoredProceduresListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UserDefinedFunctionsList {
            get {
                XAttribute x = this.Attribute(UserDefinedFunctionsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UserDefinedFunctionsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultsList {
            get {
                XAttribute x = this.Attribute(DefaultsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UserDefinedDataTypesList {
            get {
                XAttribute x = this.Attribute(UserDefinedDataTypesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UserDefinedDataTypesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PartitionFunctionsList {
            get {
                XAttribute x = this.Attribute(PartitionFunctionsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PartitionFunctionsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PartitionSchemesList {
            get {
                XAttribute x = this.Attribute(PartitionSchemesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PartitionSchemesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SchemasList {
            get {
                XAttribute x = this.Attribute(SchemasListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SchemasListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlAssembliesList {
            get {
                XAttribute x = this.Attribute(SqlAssembliesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlAssembliesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UserDefinedAggregatesList {
            get {
                XAttribute x = this.Attribute(UserDefinedAggregatesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UserDefinedAggregatesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UserDefinedTypesList {
            get {
                XAttribute x = this.Attribute(UserDefinedTypesListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UserDefinedTypesListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string XmlSchemaCollectionsList {
            get {
                XAttribute x = this.Attribute(XmlSchemaCollectionsListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XmlSchemaCollectionsListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? DropObjectsFirst {
            get {
                XAttribute x = this.Attribute(DropObjectsFirstXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(DropObjectsFirstXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? IncludeDependentObjects {
            get {
                XAttribute x = this.Attribute(IncludeDependentObjectsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(IncludeDependentObjectsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? IncludeExtendedProperties {
            get {
                XAttribute x = this.Attribute(IncludeExtendedPropertiesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(IncludeExtendedPropertiesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyData {
            get {
                XAttribute x = this.Attribute(CopyDataXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.TransferSqlServerObjectsTaskExistingDataEnum? ExistingData {
            get {
                XAttribute x = this.Attribute(ExistingDataXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.TransferSqlServerObjectsTaskExistingDataEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.TransferSqlServerObjectsTaskExistingDataEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExistingDataXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopySchema {
            get {
                XAttribute x = this.Attribute(CopySchemaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopySchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? UseCollation {
            get {
                XAttribute x = this.Attribute(UseCollationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(UseCollationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyDatabaseUsers {
            get {
                XAttribute x = this.Attribute(CopyDatabaseUsersXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyDatabaseUsersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyDatabaseRoles {
            get {
                XAttribute x = this.Attribute(CopyDatabaseRolesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyDatabaseRolesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopySqlServerLogins {
            get {
                XAttribute x = this.Attribute(CopySqlServerLoginsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopySqlServerLoginsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyObjectLevelPermissions {
            get {
                XAttribute x = this.Attribute(CopyObjectLevelPermissionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyObjectLevelPermissionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyIndexes {
            get {
                XAttribute x = this.Attribute(CopyIndexesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyIndexesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyTriggers {
            get {
                XAttribute x = this.Attribute(CopyTriggersXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyTriggersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyFullTextIndexes {
            get {
                XAttribute x = this.Attribute(CopyFullTextIndexesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyFullTextIndexesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyPrimaryKeys {
            get {
                XAttribute x = this.Attribute(CopyPrimaryKeysXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyPrimaryKeysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyForeignKeys {
            get {
                XAttribute x = this.Attribute(CopyForeignKeysXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyForeignKeysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? GenerateScriptsInUnicode {
            get {
                XAttribute x = this.Attribute(GenerateScriptsInUnicodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(GenerateScriptsInUnicodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? SourceTranslateChar {
            get {
                XAttribute x = this.Attribute(SourceTranslateCharXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(SourceTranslateCharXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? DestinationTranslateChar {
            get {
                XAttribute x = this.Attribute(DestinationTranslateCharXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(DestinationTranslateCharXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? CopyAllDRIObjects {
            get {
                XAttribute x = this.Attribute(CopyAllDRIObjectsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(CopyAllDRIObjectsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransferSqlServerObjectsTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum TransferSqlServerObjectsTaskExistingDataEnum {
        
        Replace,
        
        Append,
    }
    
    public sealed class TransferSqlServerObjectsTaskExistingDataEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Replace",
                        "Append"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TransferSqlServerObjectsTaskExistingDataEnumValidator() {
        }
    }
    
    public partial class WMIDRTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WQLQuerySourceTypeXName = System.Xml.Linq.XName.Get("WQLQuerySourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WQLQuerySourceXName = System.Xml.Linq.XName.Get("WQLQuerySource", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationTypeXName = System.Xml.Linq.XName.Get("DestinationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationXName = System.Xml.Linq.XName.Get("Destination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteDestinationXName = System.Xml.Linq.XName.Get("OverwriteDestination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputTypeXName = System.Xml.Linq.XName.Get("OutputType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WMIConnectionNameXName = System.Xml.Linq.XName.Get("WMIConnectionName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WMIDRTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator WMIDRTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<WMIDRTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WMIDRTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? WQLQuerySourceType {
            get {
                XAttribute x = this.Attribute(WQLQuerySourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(WQLQuerySourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WQLQuerySource {
            get {
                XAttribute x = this.Attribute(WQLQuerySourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WQLQuerySourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DestinationTypeEnum? DestinationType {
            get {
                XAttribute x = this.Attribute(DestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DestinationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DestinationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DestinationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Destination {
            get {
                XAttribute x = this.Attribute(DestinationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMITaskDataOverwriteDestinationEnum? OverwriteDestination {
            get {
                XAttribute x = this.Attribute(OverwriteDestinationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMITaskDataOverwriteDestinationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMITaskDataOverwriteDestinationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OverwriteDestinationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMITaskDataOutputTypeEnum? OutputType {
            get {
                XAttribute x = this.Attribute(OutputTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMITaskDataOutputTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMITaskDataOutputTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OutputTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WMIConnectionName {
            get {
                XAttribute x = this.Attribute(WMIConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WMIConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WMIDRTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum WMITaskDataOverwriteDestinationEnum {
        
        KeepOriginal,
        
        AppendToDestination,
        
        OverwriteDestination,
    }
    
    public sealed class WMITaskDataOverwriteDestinationEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "KeepOriginal",
                        "AppendToDestination",
                        "OverwriteDestination"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WMITaskDataOverwriteDestinationEnumValidator() {
        }
    }
    
    public enum WMITaskDataOutputTypeEnum {
        
        DataTable,
        
        PropertyNameAndValue,
        
        PropertyValue,
    }
    
    public sealed class WMITaskDataOutputTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DataTable",
                        "PropertyNameAndValue",
                        "PropertyValue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WMITaskDataOutputTypeEnumValidator() {
        }
    }
    
    public partial class WMIEWTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WMIConnectionNameXName = System.Xml.Linq.XName.Get("WMIConnectionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WQLQuerySourceTypeXName = System.Xml.Linq.XName.Get("WQLQuerySourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WQLQuerySourceXName = System.Xml.Linq.XName.Get("WQLQuerySource", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionAtEventXName = System.Xml.Linq.XName.Get("ActionAtEvent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AfterEventXName = System.Xml.Linq.XName.Get("AfterEvent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionAtTimeoutXName = System.Xml.Linq.XName.Get("ActionAtTimeout", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AfterTimeoutXName = System.Xml.Linq.XName.Get("AfterTimeout", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumberOfEventsXName = System.Xml.Linq.XName.Get("NumberOfEvents", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeoutXName = System.Xml.Linq.XName.Get("Timeout", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WMIEWTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator WMIEWTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<WMIEWTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WMIEWTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WMIConnectionName {
            get {
                XAttribute x = this.Attribute(WMIConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WMIConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? WQLQuerySourceType {
            get {
                XAttribute x = this.Attribute(WQLQuerySourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(WQLQuerySourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WQLQuerySource {
            get {
                XAttribute x = this.Attribute(WQLQuerySourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WQLQuerySourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtEventEnum? ActionAtEvent {
            get {
                XAttribute x = this.Attribute(ActionAtEventXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtEventEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtEventEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ActionAtEventXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum? AfterEvent {
            get {
                XAttribute x = this.Attribute(AfterEventXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AfterEventXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtTimeoutEnum? ActionAtTimeout {
            get {
                XAttribute x = this.Attribute(ActionAtTimeoutXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtTimeoutEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMIEWTaskDataActionAtTimeoutEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ActionAtTimeoutXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum? AfterTimeout {
            get {
                XAttribute x = this.Attribute(AfterTimeoutXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.WMIEWTaskDataAfterEventEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AfterTimeoutXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? NumberOfEvents {
            get {
                XAttribute x = this.Attribute(NumberOfEventsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(NumberOfEventsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Timeout {
            get {
                XAttribute x = this.Attribute(TimeoutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeoutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WMIEWTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum WMIEWTaskDataActionAtEventEnum {
        
        LogTheEventAndFireDTSEvent,
        
        LogTheEvent,
    }
    
    public sealed class WMIEWTaskDataActionAtEventEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LogTheEventAndFireDTSEvent",
                        "LogTheEvent"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WMIEWTaskDataActionAtEventEnumValidator() {
        }
    }
    
    public enum WMIEWTaskDataAfterEventEnum {
        
        WatchfortheEventAgain,
        
        ReturnWithSuccess,
        
        ReturnWithFailure,
    }
    
    public sealed class WMIEWTaskDataAfterEventEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "WatchfortheEventAgain",
                        "ReturnWithSuccess",
                        "ReturnWithFailure"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WMIEWTaskDataAfterEventEnumValidator() {
        }
    }
    
    public enum WMIEWTaskDataActionAtTimeoutEnum {
        
        LogTimeoutAndFireDTSEvent,
        
        LogTimeout,
    }
    
    public sealed class WMIEWTaskDataActionAtTimeoutEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LogTimeoutAndFireDTSEvent",
                        "LogTimeout"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WMIEWTaskDataActionAtTimeoutEnumValidator() {
        }
    }
    
    public partial class XMLTaskDataObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperationTypeXName = System.Xml.Linq.XName.Get("OperationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceTypeXName = System.Xml.Linq.XName.Get("SourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceXName = System.Xml.Linq.XName.Get("Source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondOperandTypeXName = System.Xml.Linq.XName.Get("SecondOperandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondOperandXName = System.Xml.Linq.XName.Get("SecondOperand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaveOperationResultXName = System.Xml.Linq.XName.Get("SaveOperationResult", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationTypeXName = System.Xml.Linq.XName.Get("DestinationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationXName = System.Xml.Linq.XName.Get("Destination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteDestinationXName = System.Xml.Linq.XName.Get("OverwriteDestination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FailOpOnValidationFailXName = System.Xml.Linq.XName.Get("FailOpOnValidationFail", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FailOpOnDifferenceXName = System.Xml.Linq.XName.Get("FailOpOnDifference", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaveDiffGramXName = System.Xml.Linq.XName.Get("SaveDiffGram", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiffGramDestinationTypeXName = System.Xml.Linq.XName.Get("DiffGramDestinationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiffGramDestinationXName = System.Xml.Linq.XName.Get("DiffGramDestination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiffOptionsXName = System.Xml.Linq.XName.Get("DiffOptions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiffAlgorithmXName = System.Xml.Linq.XName.Get("DiffAlgorithm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XPathStringSourceTypeXName = System.Xml.Linq.XName.Get("XPathStringSourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XPathStringSourceXName = System.Xml.Linq.XName.Get("XPathStringSource", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XPathOperationXName = System.Xml.Linq.XName.Get("XPathOperation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PutResultInOneNodeXName = System.Xml.Linq.XName.Get("PutResultInOneNode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValidationTypeXName = System.Xml.Linq.XName.Get("ValidationType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("XMLTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator XMLTaskDataObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<XMLTaskDataObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public XMLTaskDataObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskOperationTypeEnum? OperationType {
            get {
                XAttribute x = this.Attribute(OperationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskOperationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskOperationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OperationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SourceType {
            get {
                XAttribute x = this.Attribute(SourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Source {
            get {
                XAttribute x = this.Attribute(SourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SecondOperandType {
            get {
                XAttribute x = this.Attribute(SecondOperandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SecondOperandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SecondOperand {
            get {
                XAttribute x = this.Attribute(SecondOperandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SecondOperandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveOperationResultEnum? SaveOperationResult {
            get {
                XAttribute x = this.Attribute(SaveOperationResultXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveOperationResultEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveOperationResultEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SaveOperationResultXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DestinationTypeEnum? DestinationType {
            get {
                XAttribute x = this.Attribute(DestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DestinationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DestinationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DestinationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Destination {
            get {
                XAttribute x = this.Attribute(DestinationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.OverwriteDestinationEnum? OverwriteDestination {
            get {
                XAttribute x = this.Attribute(OverwriteDestinationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.OverwriteDestinationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.OverwriteDestinationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OverwriteDestinationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnValidationFailEnum? FailOpOnValidationFail {
            get {
                XAttribute x = this.Attribute(FailOpOnValidationFailXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnValidationFailEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnValidationFailEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(FailOpOnValidationFailXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnDifferenceEnum? FailOpOnDifference {
            get {
                XAttribute x = this.Attribute(FailOpOnDifferenceXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnDifferenceEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.FailOpOnDifferenceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(FailOpOnDifferenceXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveDiffGramEnum? SaveDiffGram {
            get {
                XAttribute x = this.Attribute(SaveDiffGramXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveDiffGramEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.SaveDiffGramEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SaveDiffGramXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.DestinationTypeEnum? DiffGramDestinationType {
            get {
                XAttribute x = this.Attribute(DiffGramDestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.DestinationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.DestinationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DiffGramDestinationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DiffGramDestination {
            get {
                XAttribute x = this.Attribute(DiffGramDestinationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DiffGramDestinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DiffOptions {
            get {
                XAttribute x = this.Attribute(DiffOptionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DiffOptionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDiffAlgorithmEnum? DiffAlgorithm {
            get {
                XAttribute x = this.Attribute(DiffAlgorithmXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDiffAlgorithmEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDiffAlgorithmEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DiffAlgorithmXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? XPathStringSourceType {
            get {
                XAttribute x = this.Attribute(XPathStringSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(XPathStringSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string XPathStringSource {
            get {
                XAttribute x = this.Attribute(XPathStringSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XPathStringSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskXPathOperationEnum? XPathOperation {
            get {
                XAttribute x = this.Attribute(XPathOperationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskXPathOperationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskXPathOperationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(XPathOperationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.PutResultInOneNodeEnum? PutResultInOneNode {
            get {
                XAttribute x = this.Attribute(PutResultInOneNodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.PutResultInOneNodeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType.PutResultInOneNodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(PutResultInOneNodeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.XMLTaskValidationTypeEnum? ValidationType {
            get {
                XAttribute x = this.Attribute(ValidationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.XMLTaskValidationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.XMLTaskValidationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ValidationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<XMLTaskDataObjectDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum SaveOperationResultEnum {
            
            True,
            
            False,
        }
        
        public enum OverwriteDestinationEnum {
            
            True,
            
            False,
        }
        
        public enum FailOpOnValidationFailEnum {
            
            True,
            
            False,
        }
        
        public enum FailOpOnDifferenceEnum {
            
            True,
            
            False,
        }
        
        public enum SaveDiffGramEnum {
            
            True,
            
            False,
        }
        
        public enum PutResultInOneNodeEnum {
            
            True,
            
            False,
        }
    }
    
    public enum XMLTaskOperationTypeEnum {
        
        Diff,
        
        Validate,
        
        Merge,
        
        XSLT,
        
        XPATH,
        
        Patch,
    }
    
    public sealed class XMLTaskOperationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Diff",
                        "Validate",
                        "Merge",
                        "XSLT",
                        "XPATH",
                        "Patch"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private XMLTaskOperationTypeEnumValidator() {
        }
    }
    
    public sealed class XMLTaskDiffOptionsType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 255, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private XMLTaskDiffOptionsType() {
        }
    }
    
    public enum XMLTaskDiffAlgorithmEnum {
        
        Auto,
        
        Fast,
        
        Precise,
    }
    
    public sealed class XMLTaskDiffAlgorithmEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Auto",
                        "Fast",
                        "Precise"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private XMLTaskDiffAlgorithmEnumValidator() {
        }
    }
    
    public enum XMLTaskXPathOperationEnum {
        
        Evaluation,
        
        NodeList,
        
        Values,
    }
    
    public sealed class XMLTaskXPathOperationEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Evaluation",
                        "NodeList",
                        "Values"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private XMLTaskXPathOperationEnumValidator() {
        }
    }
    
    public enum XMLTaskValidationTypeEnum {
        
        DTD,
        
        XSD,
    }
    
    public sealed class XMLTaskValidationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DTD",
                        "XSD"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private XMLTaskValidationTypeEnumValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class InnerObjectObjectDataType : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InnerObjectObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator InnerObjectObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<InnerObjectObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InnerObjectObjectDataType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public InnerObjectObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InnerObjectObjectDataType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "www.microsoft.com/SqlServer/Dts"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (components, paths?)
    /// </para>
    /// </summary>
    public partial class pipelineObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentsXName = System.Xml.Linq.XName.Get("components", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pathsXName = System.Xml.Linq.XName.Get("paths", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defaultBufferMaxRowsXName = System.Xml.Linq.XName.Get("defaultBufferMaxRows", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName engineThreadsXName = System.Xml.Linq.XName.Get("engineThreads", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defaultBufferSizeXName = System.Xml.Linq.XName.Get("defaultBufferSize", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BLOBTempStoragePathXName = System.Xml.Linq.XName.Get("BLOBTempStoragePath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bufferTempStoragePathXName = System.Xml.Linq.XName.Get("bufferTempStoragePath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName runInOptimizedModeXName = System.Xml.Linq.XName.Get("runInOptimizedMode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pipelineObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pipelineObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<pipelineObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pipelineObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(componentsXName), new NamedContentModelEntity(pathsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (components, paths?)
        /// </para>
        /// </summary>
        public pipelineObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (components, paths?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentsType components {
            get {
                XElement x = this.GetElement(componentsXName);
                return ((PipelineComponentsType)(x));
            }
            set {
                this.SetElement(componentsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (components, paths?)
        /// </para>
        /// </summary>
        public virtual PipelinePathsType paths {
            get {
                XElement x = this.GetElement(pathsXName);
                return ((PipelinePathsType)(x));
            }
            set {
                this.SetElement(pathsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? defaultBufferMaxRows {
            get {
                XAttribute x = this.Attribute(defaultBufferMaxRowsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(defaultBufferMaxRowsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? engineThreads {
            get {
                XAttribute x = this.Attribute(engineThreadsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(engineThreadsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? defaultBufferSize {
            get {
                XAttribute x = this.Attribute(defaultBufferSizeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(defaultBufferSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BLOBTempStoragePath {
            get {
                XAttribute x = this.Attribute(BLOBTempStoragePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BLOBTempStoragePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string bufferTempStoragePath {
            get {
                XAttribute x = this.Attribute(bufferTempStoragePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(bufferTempStoragePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? runInOptimizedMode {
            get {
                XAttribute x = this.Attribute(runInOptimizedModeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(runInOptimizedModeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pipelineObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(componentsXName, typeof(PipelineComponentsType));
            localElementDictionary.Add(pathsXName, typeof(PipelinePathsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (component+)
    /// </para>
    /// </summary>
    public partial class PipelineComponentsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentXName = System.Xml.Linq.XName.Get("component", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentType> componentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(componentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (component+)
        /// </para>
        /// </summary>
        public PipelineComponentsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (component+)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentType> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<PipelineComponentType>(this, LinqToXsdTypeManager.Instance, componentXName);
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<PipelineComponentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, componentXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentType>(this.componentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(componentXName, typeof(PipelineComponentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (path*)
    /// </para>
    /// </summary>
    public partial class PipelinePathsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pathXName = System.Xml.Linq.XName.Get("path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelinePathType> pathField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelinePathsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelinePathsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelinePathsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelinePathsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(pathXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (path*)
        /// </para>
        /// </summary>
        public PipelinePathsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (path*)
        /// </para>
        /// </summary>
        public virtual IList<PipelinePathType> path {
            get {
                if ((this.pathField == null)) {
                    this.pathField = new XTypedList<PipelinePathType>(this, LinqToXsdTypeManager.Instance, pathXName);
                }
                return this.pathField;
            }
            set {
                if ((value == null)) {
                    this.pathField = null;
                }
                else {
                    if ((this.pathField == null)) {
                        this.pathField = XTypedList<PipelinePathType>.Initialize(this, LinqToXsdTypeManager.Instance, value, pathXName);
                    }
                    else {
                        XTypedServices.SetList<PipelinePathType>(this.pathField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelinePathsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pathXName, typeof(PipelinePathType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties?, connections?, inputs?, outputs?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName connectionsXName = System.Xml.Linq.XName.Get("connections", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputsXName = System.Xml.Linq.XName.Get("inputs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputsXName = System.Xml.Linq.XName.Get("outputs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentClassIDXName = System.Xml.Linq.XName.Get("componentClassID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localeIdXName = System.Xml.Linq.XName.Get("localeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName usesDispositionsXName = System.Xml.Linq.XName.Get("usesDispositions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName validateExternalMetadataXName = System.Xml.Linq.XName.Get("validateExternalMetadata", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pipelineVersionXName = System.Xml.Linq.XName.Get("pipelineVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contactInfoXName = System.Xml.Linq.XName.Get("contactInfo", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName), new NamedContentModelEntity(connectionsXName), new NamedContentModelEntity(inputsXName), new NamedContentModelEntity(outputsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties?, connections?, inputs?, outputs?)
        /// </para>
        /// </summary>
        public PipelineComponentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, connections?, inputs?, outputs?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentPropertiesType properties {
            get {
                XElement x = this.GetElement(propertiesXName);
                return ((PipelineComponentPropertiesType)(x));
            }
            set {
                this.SetElement(propertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, connections?, inputs?, outputs?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentConnectionsType connections {
            get {
                XElement x = this.GetElement(connectionsXName);
                return ((PipelineComponentConnectionsType)(x));
            }
            set {
                this.SetElement(connectionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, connections?, inputs?, outputs?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentInputsType inputs {
            get {
                XElement x = this.GetElement(inputsXName);
                return ((PipelineComponentInputsType)(x));
            }
            set {
                this.SetElement(inputsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, connections?, inputs?, outputs?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentOutputsType outputs {
            get {
                XElement x = this.GetElement(outputsXName);
                return ((PipelineComponentOutputsType)(x));
            }
            set {
                this.SetElement(outputsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string componentClassID {
            get {
                XAttribute x = this.Attribute(componentClassIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(componentClassIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? localeId {
            get {
                XAttribute x = this.Attribute(localeIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(localeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? usesDispositions {
            get {
                XAttribute x = this.Attribute(usesDispositionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(usesDispositionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentType.ValidateExternalMetadataEnum? validateExternalMetadata {
            get {
                XAttribute x = this.Attribute(validateExternalMetadataXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentType.ValidateExternalMetadataEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentType.ValidateExternalMetadataEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(validateExternalMetadataXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? version {
            get {
                XAttribute x = this.Attribute(versionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? pipelineVersion {
            get {
                XAttribute x = this.Attribute(pipelineVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(pipelineVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string contactInfo {
            get {
                XAttribute x = this.Attribute(contactInfoXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(contactInfoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentPropertiesType));
            localElementDictionary.Add(connectionsXName, typeof(PipelineComponentConnectionsType));
            localElementDictionary.Add(inputsXName, typeof(PipelineComponentInputsType));
            localElementDictionary.Add(outputsXName, typeof(PipelineComponentOutputsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValidateExternalMetadataEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentOutputPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentOutputPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentOutputPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentOutputPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentOutputPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentOutputPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentOutputPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentInputPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentInputPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentInputPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentInputPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentInputPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentInputPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentInputPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (connection*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentConnectionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName connectionXName = System.Xml.Linq.XName.Get("connection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentConnectionType> connectionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentConnectionsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentConnectionsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentConnectionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentConnectionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(connectionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (connection*)
        /// </para>
        /// </summary>
        public PipelineComponentConnectionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (connection*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentConnectionType> connection {
            get {
                if ((this.connectionField == null)) {
                    this.connectionField = new XTypedList<PipelineComponentConnectionType>(this, LinqToXsdTypeManager.Instance, connectionXName);
                }
                return this.connectionField;
            }
            set {
                if ((value == null)) {
                    this.connectionField = null;
                }
                else {
                    if ((this.connectionField == null)) {
                        this.connectionField = XTypedList<PipelineComponentConnectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, connectionXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentConnectionType>(this.connectionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentConnectionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(connectionXName, typeof(PipelineComponentConnectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (input*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputXName = System.Xml.Linq.XName.Get("input", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentInputType> inputField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (input*)
        /// </para>
        /// </summary>
        public PipelineComponentInputsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (input*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentInputType> input {
            get {
                if ((this.inputField == null)) {
                    this.inputField = new XTypedList<PipelineComponentInputType>(this, LinqToXsdTypeManager.Instance, inputXName);
                }
                return this.inputField;
            }
            set {
                if ((value == null)) {
                    this.inputField = null;
                }
                else {
                    if ((this.inputField == null)) {
                        this.inputField = XTypedList<PipelineComponentInputType>.Initialize(this, LinqToXsdTypeManager.Instance, value, inputXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentInputType>(this.inputField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputXName, typeof(PipelineComponentInputType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (output*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputXName = System.Xml.Linq.XName.Get("output", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentOutputType> outputField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(outputXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (output*)
        /// </para>
        /// </summary>
        public PipelineComponentOutputsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (output*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentOutputType> output {
            get {
                if ((this.outputField == null)) {
                    this.outputField = new XTypedList<PipelineComponentOutputType>(this, LinqToXsdTypeManager.Instance, outputXName);
                }
                return this.outputField;
            }
            set {
                if ((value == null)) {
                    this.outputField = null;
                }
                else {
                    if ((this.outputField == null)) {
                        this.outputField = XTypedList<PipelineComponentOutputType>.Initialize(this, LinqToXsdTypeManager.Instance, value, outputXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentOutputType>(this.outputField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(outputXName, typeof(PipelineComponentOutputType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElements?)
    /// </para>
    /// </summary>
    public partial class Test : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementsXName = System.Xml.Linq.XName.Get("arrayElements", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Test", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Test(XElement xe) { return XTypedServices.ToXTypedElement<Test>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Test() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElementsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public Test() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public virtual arrayElementsLocalType arrayElements {
            get {
                XElement x = this.GetElement(arrayElementsXName);
                return ((arrayElementsLocalType)(x));
            }
            set {
                this.SetElement(arrayElementsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Test>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElementsXName, typeof(arrayElementsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class arrayElementsLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrayElements", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator arrayElementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<arrayElementsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static arrayElementsLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public arrayElementsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<arrayElementsLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "www.microsoft.com/SqlServer/Dts"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElements?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementsXName = System.Xml.Linq.XName.Get("arrayElements", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentPropertyType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentPropertyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElementsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public PipelineComponentPropertyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentArrayElementsType arrayElements {
            get {
                XElement x = this.GetElement(arrayElementsXName);
                return ((PipelineComponentArrayElementsType)(x));
            }
            set {
                this.SetElement(arrayElementsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentPropertyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElementsXName, typeof(PipelineComponentArrayElementsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElements?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementsXName = System.Xml.Linq.XName.Get("arrayElements", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputPropertyType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputPropertyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElementsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public PipelineComponentOutputPropertyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentArrayElementsType arrayElements {
            get {
                XElement x = this.GetElement(arrayElementsXName);
                return ((PipelineComponentArrayElementsType)(x));
            }
            set {
                this.SetElement(arrayElementsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentOutputPropertyNameEnum? name {
            get {
                XAttribute x = this.Attribute(nameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentOutputPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentOutputPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(nameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputPropertyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElementsXName, typeof(PipelineComponentArrayElementsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElements?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementsXName = System.Xml.Linq.XName.Get("arrayElements", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputPropertyType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputPropertyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElementsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public PipelineComponentInputPropertyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (arrayElements?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentArrayElementsType arrayElements {
            get {
                XElement x = this.GetElement(arrayElementsXName);
                return ((PipelineComponentArrayElementsType)(x));
            }
            set {
                this.SetElement(arrayElementsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputPropertyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElementsXName, typeof(PipelineComponentArrayElementsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElement*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentArrayElementsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementXName = System.Xml.Linq.XName.Get("arrayElement", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentArrayElementType> arrayElementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElementCountXName = System.Xml.Linq.XName.Get("arrayElementCount", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentArrayElementsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentArrayElementsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentArrayElementsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentArrayElementsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElementXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElement*)
        /// </para>
        /// </summary>
        public PipelineComponentArrayElementsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (arrayElement*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentArrayElementType> arrayElement {
            get {
                if ((this.arrayElementField == null)) {
                    this.arrayElementField = new XTypedList<PipelineComponentArrayElementType>(this, LinqToXsdTypeManager.Instance, arrayElementXName);
                }
                return this.arrayElementField;
            }
            set {
                if ((value == null)) {
                    this.arrayElementField = null;
                }
                else {
                    if ((this.arrayElementField == null)) {
                        this.arrayElementField = XTypedList<PipelineComponentArrayElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrayElementXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentArrayElementType>(this.arrayElementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? arrayElementCount {
            get {
                XAttribute x = this.Attribute(arrayElementCountXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(arrayElementCountXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentArrayElementsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElementXName, typeof(PipelineComponentArrayElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PipelineComponentArrayElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentArrayElementType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelineComponentArrayElementType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentArrayElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelineComponentArrayElementType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentArrayElementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class PipelineComponentComponentClassIDEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "{9ABE8DF3-0052-42DB-8B18-2089E1D1D1B7}",
                        "{32711D35-7D9D-44E5-B57E-A17D33D5C38C}",
                        "{A236DD44-4409-433E-A1CE-283DA18F4E0F}",
                        "{DEC33219-BA68-4FEB-AC98-9C1B1E577A8D}",
                        "{3AE878C6-0D6C-4F48-8128-40E00E9C1B7D}",
                        "{98F16A65-E02F-4B0F-87D4-C217EA074619}",
                        "{BD06A22E-BC69-4AF7-A69B-C44C2EF684BB}",
                        "{9C58B013-AF30-455F-B809-50F425AFBCAC}",
                        "{2932025B-AB99-40F6-B5B8-783A73F80E24}",
                        "{86151302-DCDB-49FB-92FE-772EC02712B6}",
                        "{0A1BDBA0-9C6E-4AD7-97B1-E0E79E462629}",
                        "{5056651F-F227-4978-94DF-53CDF9E8CCB6}",
                        "{C8AEEE54-67A0-41A8-821D-D1C8BED62C68}",
                        "{27648839-180F-45E6-838D-AFF53DF682D2}",
                        "{D3FC84FA-748F-40B4-A967-F1574F917BE5}",
                        "{A18A4D58-7C7A-4448-8B98-AE2CEFE81B4C}",
                        "{1ACA4459-ACE0-496F-814A-8611F9C27E23}",
                        "{8E61C8F6-C91D-43B6-97EB-3423C06571CC}",
                        "{CEFEB125-5BB5-4F91-A349-94B8961C641B}",
                        "{DD5A6456-8430-422B-9F50-7EF5A1B63CA8}",
                        "{150E6007-7C6A-4CC3-8FF3-FC73783A972E}",
                        "{A44C46A3-0A3F-454B-B3BD-0BC23D4BCE94}",
                        "{2E42D45B-F83C-400F-8D77-61DDE6A7DF29}",
                        "{70909A92-ECE9-486D-B17E-30EDE908849E}",
                        "{07127A7C-164B-422A-AD1F-24BE39B4DB38}",
                        "{119D450D-E2A3-4DB0-A7BC-ACDE2536673E}",
                        "{4CC3A325-9885-48B4-B451-147C2D523646}",
                        "{4D9F9B7C-84D9-4335-ADB0-2542A7E35422}",
                        "{8F25687E-2ACA-4EF3-88A3-53099FDAAF43}",
                        "{C9269E28-EBDE-4DED-91EB-0BF42842F9F4}",
                        "{D658C424-8CF0-441C-B3C4-955E183B7FBA}",
                        "{5A0B62E8-D91D-49F5-94A5-7BE58DE508F0}",
                        "{0183D6BA-8792-4602-A6AB-6DF19E7F9979}",
                        "{7D1B6DD6-C1A9-416E-9E7F-31400E3F7249}",
                        "{DCDA2491-C4A4-4C84-9253-119AEF1A4CD7}",
                        "{485E7329-8754-42B4-AA5B-29C5DA09CAD5}",
                        "{167AF7E9-BA81-425F-B73D-E30C2DCC0F09}",
                        "{E4B61516-847B-4BDF-9CC6-1968A2D43E73}",
                        "{A4B1E1C8-17F3-46C8-AAD0-34F0C6FE42DE}",
                        "{5ACD952A-F16A-41D8-A681-713640837664}",
                        "{BCEFE59B-6819-47F7-A125-63753B33ABB7}",
                        "{51DC0B24-7421-45C3-B4AB-9481A683D91D}"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\{[0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}\\}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentComponentClassIDEnum() {
        }
    }
    
    public sealed class PipelineComponentPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "KeyScale",
                        "Keys",
                        "CountDistinctScale",
                        "CountDistinctKeys",
                        "AutoExtendFactor",
                        "ObjectRef",
                        "QueryText",
                        "CatalogName",
                        "MinSimilarity",
                        "Delimiters",
                        "MaxMemoryUsage",
                        "Exhaustive",
                        "MatchIndexOptions",
                        "MaxMemoryUsage",
                        "MatchIndexName",
                        "ReferenceTableName",
                        "DropExistingMatchIndex",
                        "CopyReferenceTable",
                        "MaxOutputMatchesPerInput",
                        "MinSimilarity",
                        "Delimiters",
                        "ReferenceMetadataXml",
                        "Exhaustive",
                        "WarmCaches",
                        "SqlCommand",
                        "SqlCommandParam",
                        "ConnectionType",
                        "CacheType",
                        "NoMatchBehavior",
                        "NoMatchCachePercentage",
                        "MaxMemoryUsage",
                        "MaxMemoryUsage64",
                        "ReferenceMetadataXml",
                        "ParameterMap",
                        "DefaultCodePage",
                        "JoinType",
                        "NumKeyColumns",
                        "TreatNullsAsEqual",
                        "MaxBuffersPerInput",
                        "CommandTimeout",
                        "SqlCommand",
                        "DefaultCodePage",
                        "SamplingValue",
                        "SamplingSeed",
                        "VariableName",
                        "SamplingValue",
                        "SamplingSeed",
                        "SourceCode",
                        "BinaryCode",
                        "VSTAProjectName",
                        "ScriptLanguage",
                        "ReadOnlyVariables",
                        "ReadWriteVariables",
                        "BreakpointCollection",
                        "UserComponentTypeName",
                        "SqlCommand",
                        "CurrentRowWhere",
                        "UpdateChangingAttributeHistory",
                        "FailOnFixedAttributeChange",
                        "InferredMemberIndicator",
                        "EnableInferredMember",
                        "FailOnLookupFailure",
                        "IncomingRowChangeType",
                        "DefaultCodePage",
                        "EliminateDuplicates",
                        "MaximumThreads",
                        "NeedReferenceData",
                        "OutTermTable",
                        "OutTermColumn",
                        "WordOrPhrase",
                        "ScoreType",
                        "FrequencyThreshold",
                        "MaxLengthOfTerm",
                        "IsCaseSensitive",
                        "RefTermTable",
                        "RefTermColumn",
                        "IsCaseSensitive",
                        "TableOrViewName",
                        "BatchSize",
                        "CommandTimeout",
                        "UserComponentTypeName",
                        "CommandTimeout",
                        "OpenRowset",
                        "OpenRowsetVariable",
                        "SqlCommand",
                        "AccessMode",
                        "FastLoadKeepIdentity",
                        "FastLoadKeepNulls",
                        "FastLoadOptions",
                        "FastLoadMaxInsertCommitSize",
                        "Overwrite",
                        "Header",
                        "CommandTimeout",
                        "OpenRowset",
                        "OpenRowsetVariable",
                        "SqlCommand",
                        "DefaultCodePage",
                        "AlwaysUseDefaultCodePage",
                        "AccessMode",
                        "FastLoadKeepIdentity",
                        "FastLoadKeepNulls",
                        "FastLoadOptions",
                        "FastLoadMaxInsertCommitSize",
                        "AccessMode",
                        "FileName",
                        "FileNameVariable",
                        "WriteOption",
                        "ReadTimeout",
                        "DataReader",
                        "FailOnTimeout",
                        "UserComponentTypeName",
                        "ObjectRef",
                        "ObjectRef",
                        "UseDefaultConfiguration",
                        "KeyErrorLimit",
                        "KeyErrorLogFile",
                        "KeyErrorAction",
                        "KeyErrorLimitAction",
                        "KeyNotFound",
                        "KeyDuplicate",
                        "NullKeyConvertedToUnknown",
                        "NullKeyNotAllowed",
                        "ProcessType",
                        "ObjectRef",
                        "UseDefaultConfiguration",
                        "KeyErrorLimit",
                        "KeyErrorLogFile",
                        "KeyErrorAction",
                        "KeyErrorLimitAction",
                        "KeyNotFound",
                        "KeyDuplicate",
                        "NullKeyConvertedToUnknown",
                        "NullKeyNotAllowed",
                        "ProcessType",
                        "VariableName",
                        "Table Name",
                        "UserComponentTypeName",
                        "DefaultCodePage",
                        "AlwaysUseDefaultCodePage",
                        "BulkInsertTableName",
                        "BulkInsertCheckConstraints",
                        "BulkInsertFirstRow",
                        "BulkInsertFireTriggers",
                        "BulkInsertKeepIdentity",
                        "BulkInsertKeepNulls",
                        "BulkInsertLastRow",
                        "BulkInsertMaxErrors",
                        "BulkInsertOrder",
                        "BulkInsertTablock",
                        "Timeout",
                        "MaxInsertCommitSize",
                        "SqlCommand",
                        "CommandTimeout",
                        "AllowImplicitStringConversion",
                        "TableOrViewName",
                        "AccessMode",
                        "UserComponentTypeName",
                        "CommandTimeout",
                        "OpenRowset",
                        "OpenRowsetVariable",
                        "SqlCommand",
                        "SqlCommandVariable",
                        "AccessMode",
                        "ParameterMapping",
                        "RetainNulls",
                        "FileNameColumnName",
                        "CommandTimeout",
                        "OpenRowset",
                        "OpenRowsetVariable",
                        "SqlCommand",
                        "SqlCommandVariable",
                        "DefaultCodePage",
                        "AlwaysUseDefaultCodePage",
                        "AccessMode",
                        "ParameterMapping",
                        "AccessMode",
                        "FileName",
                        "FileNameVariable",
                        "UserComponentTypeName",
                        "XMLData",
                        "XMLDataVariable",
                        "AccessMode",
                        "XMLSchemaDefinition",
                        "UseInlineSchema"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentPropertyNameEnum() {
        }
    }
    
    public enum PipelineComponentOutputPropertyNameEnum {
        
        KeyScale,
        
        Keys,
        
        Expression,
        
        FriendlyExpression,
        
        EvaluationOrder,
        
        IsDefaultOut,
        
        Selected,
        
        Selected,
        
        RowsetID,
    }
    
    public sealed class PipelineComponentOutputPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "KeyScale",
                        "Keys",
                        "Expression",
                        "FriendlyExpression",
                        "EvaluationOrder",
                        "IsDefaultOut",
                        "Selected",
                        "Selected",
                        "RowsetID"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentOutputPropertyNameEnumValidator() {
        }
    }
    
    public sealed class PipelineComponentInputPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private PipelineComponentInputPropertyNameEnum() {
        }
    }
    
    public enum PipelineComponentOutputColumnPropertyNameEnum {
        
        AggregationColumnId,
        
        AggregationType,
        
        IsBig,
        
        AggregationComparisonFlags,
        
        CountDistinctKey,
        
        CountDistinctScale,
        
        LineageItemSelected,
        
        copyColumnId,
        
        SourceInputColumnLineageID,
        
        FastParse,
        
        Expression,
        
        FriendlyExpression,
        
        ColumnType,
        
        InputId,
        
        CopyFromReferenceColumn,
        
        SourceInputColumnLineageID,
        
        ColumnType,
        
        CopyFromReferenceColumn,
        
        InputColumnID,
        
        SourceColumn,
        
        PivotKeyValue,
        
        InputColumnLineageID,
        
        SortColumnId,
        
        CustomLineageID,
        
        PivotKey,
        
        FastParse,
        
        UseBinaryFormat,
    }
    
    public sealed class PipelineComponentOutputColumnPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AggregationColumnId",
                        "AggregationType",
                        "IsBig",
                        "AggregationComparisonFlags",
                        "CountDistinctKey",
                        "CountDistinctScale",
                        "LineageItemSelected",
                        "copyColumnId",
                        "SourceInputColumnLineageID",
                        "FastParse",
                        "Expression",
                        "FriendlyExpression",
                        "ColumnType",
                        "InputId",
                        "CopyFromReferenceColumn",
                        "SourceInputColumnLineageID",
                        "ColumnType",
                        "CopyFromReferenceColumn",
                        "InputColumnID",
                        "SourceColumn",
                        "PivotKeyValue",
                        "InputColumnLineageID",
                        "SortColumnId",
                        "CustomLineageID",
                        "PivotKey",
                        "FastParse",
                        "UseBinaryFormat"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentOutputColumnPropertyNameEnumValidator() {
        }
    }
    
    public enum PipelineComponentInputColumnPropertyNameEnum {
        
        CacheColumnName,
        
        MapFlags,
        
        Expression,
        
        FriendlyExpression,
        
        FileDataColumnID,
        
        WriteBOM,
        
        ForceTruncate,
        
        AllowAppend,
        
        ToBeCleaned,
        
        ExactFuzzy,
        
        LeadingTrailingNumeralsSignificant,
        
        MinSimilarity,
        
        FuzzyComparisonFlags,
        
        FileDataColumnID,
        
        ExpectBOM,
        
        JoinToReferenceColumn,
        
        CopyFromReferenceColumn,
        
        OutputColumnLineageID,
        
        PivotUsage,
        
        ColumnType,
        
        NewComparisonFlags,
        
        NewSortKeyPosition,
        
        InputColumnType,
        
        OutputColumnLineageID,
        
        DestinationColumn,
        
        PivotKeyValue,
    }
    
    public sealed class PipelineComponentInputColumnPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CacheColumnName",
                        "MapFlags",
                        "Expression",
                        "FriendlyExpression",
                        "FileDataColumnID",
                        "WriteBOM",
                        "ForceTruncate",
                        "AllowAppend",
                        "ToBeCleaned",
                        "ExactFuzzy",
                        "LeadingTrailingNumeralsSignificant",
                        "MinSimilarity",
                        "FuzzyComparisonFlags",
                        "FileDataColumnID",
                        "ExpectBOM",
                        "JoinToReferenceColumn",
                        "CopyFromReferenceColumn",
                        "OutputColumnLineageID",
                        "PivotUsage",
                        "ColumnType",
                        "NewComparisonFlags",
                        "NewSortKeyPosition",
                        "InputColumnType",
                        "OutputColumnLineageID",
                        "DestinationColumn",
                        "PivotKeyValue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentInputColumnPropertyNameEnumValidator() {
        }
    }
    
    public sealed class PipelineComponentDataTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "System.Boolean",
                        "System.Byte",
                        "System.SByte",
                        "System.Decimal",
                        "System.Double",
                        "System.Single",
                        "System.Int32",
                        "System.UInt32",
                        "System.Int64",
                        "System.UInt64",
                        "System.Int16",
                        "System.UInt16",
                        "System.String",
                        "System.Null",
                        "System.DateTime",
                        "System.Object"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentDataTypeEnum() {
        }
    }
    
    public sealed class PipelineComponentStateEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cdata",
                        "escaped",
                        "default"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentStateEnum() {
        }
    }
    
    public enum PipelineComponentExpressionTypeEnum {
        
        None,
        
        Notify,
    }
    
    public sealed class PipelineComponentExpressionTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "Notify"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentExpressionTypeEnumValidator() {
        }
    }
    
    public partial class PipelineComponentConnectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName connectionManagerIDXName = System.Xml.Linq.XName.Get("connectionManagerID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentConnectionType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelineComponentConnectionType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentConnectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelineComponentConnectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string connectionManagerID {
            get {
                XAttribute x = this.Attribute(connectionManagerIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(connectionManagerIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentConnectionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties?, inputColumns?, externalMetadataColumns?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputColumnsXName = System.Xml.Linq.XName.Get("inputColumns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalMetadataColumnsXName = System.Xml.Linq.XName.Get("externalMetadataColumns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hasSideEffectsXName = System.Xml.Linq.XName.Get("hasSideEffects", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName danglingXName = System.Xml.Linq.XName.Get("dangling", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorOrTruncationOperationXName = System.Xml.Linq.XName.Get("errorOrTruncationOperation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorRowDispositionXName = System.Xml.Linq.XName.Get("errorRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName truncationRowDispositionXName = System.Xml.Linq.XName.Get("truncationRowDisposition", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName), new NamedContentModelEntity(inputColumnsXName), new NamedContentModelEntity(externalMetadataColumnsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties?, inputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public PipelineComponentInputType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, inputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentInputPropertiesType properties {
            get {
                XElement x = this.GetElement(propertiesXName);
                return ((PipelineComponentInputPropertiesType)(x));
            }
            set {
                this.SetElement(propertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, inputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentInputColumnsType inputColumns {
            get {
                XElement x = this.GetElement(inputColumnsXName);
                return ((PipelineComponentInputColumnsType)(x));
            }
            set {
                this.SetElement(inputColumnsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, inputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentMetadataColumnsType externalMetadataColumns {
            get {
                XElement x = this.GetElement(externalMetadataColumnsXName);
                return ((PipelineComponentMetadataColumnsType)(x));
            }
            set {
                this.SetElement(externalMetadataColumnsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? hasSideEffects {
            get {
                XAttribute x = this.Attribute(hasSideEffectsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(hasSideEffectsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? dangling {
            get {
                XAttribute x = this.Attribute(danglingXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(danglingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string errorOrTruncationOperation {
            get {
                XAttribute x = this.Attribute(errorOrTruncationOperationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(errorOrTruncationOperationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? errorRowDisposition {
            get {
                XAttribute x = this.Attribute(errorRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(errorRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? truncationRowDisposition {
            get {
                XAttribute x = this.Attribute(truncationRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(truncationRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentInputPropertiesType));
            localElementDictionary.Add(inputColumnsXName, typeof(PipelineComponentInputColumnsType));
            localElementDictionary.Add(externalMetadataColumnsXName, typeof(PipelineComponentMetadataColumnsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (inputColumn*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputColumnsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputColumnXName = System.Xml.Linq.XName.Get("inputColumn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentInputColumnType> inputColumnField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputColumnsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputColumnsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputColumnsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputColumnsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputColumnXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (inputColumn*)
        /// </para>
        /// </summary>
        public PipelineComponentInputColumnsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (inputColumn*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentInputColumnType> inputColumn {
            get {
                if ((this.inputColumnField == null)) {
                    this.inputColumnField = new XTypedList<PipelineComponentInputColumnType>(this, LinqToXsdTypeManager.Instance, inputColumnXName);
                }
                return this.inputColumnField;
            }
            set {
                if ((value == null)) {
                    this.inputColumnField = null;
                }
                else {
                    if ((this.inputColumnField == null)) {
                        this.inputColumnField = XTypedList<PipelineComponentInputColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, inputColumnXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentInputColumnType>(this.inputColumnField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputColumnsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputColumnXName, typeof(PipelineComponentInputColumnType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentInputColumnPropertiesType> propertiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mappedColumnIdXName = System.Xml.Linq.XName.Get("mappedColumnId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorOrTruncationOperationXName = System.Xml.Linq.XName.Get("errorOrTruncationOperation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorRowDispositionXName = System.Xml.Linq.XName.Get("errorRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName truncationRowDispositionXName = System.Xml.Linq.XName.Get("truncationRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalMetadataColumnIdXName = System.Xml.Linq.XName.Get("externalMetadataColumnId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lineageIdXName = System.Xml.Linq.XName.Get("lineageId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName usageTypeXName = System.Xml.Linq.XName.Get("usageType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputColumnType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputColumnType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties*)
        /// </para>
        /// </summary>
        public PipelineComponentInputColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (properties*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentInputColumnPropertiesType> properties {
            get {
                if ((this.propertiesField == null)) {
                    this.propertiesField = new XTypedList<PipelineComponentInputColumnPropertiesType>(this, LinqToXsdTypeManager.Instance, propertiesXName);
                }
                return this.propertiesField;
            }
            set {
                if ((value == null)) {
                    this.propertiesField = null;
                }
                else {
                    if ((this.propertiesField == null)) {
                        this.propertiesField = XTypedList<PipelineComponentInputColumnPropertiesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertiesXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentInputColumnPropertiesType>(this.propertiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? mappedColumnId {
            get {
                XAttribute x = this.Attribute(mappedColumnIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(mappedColumnIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string errorOrTruncationOperation {
            get {
                XAttribute x = this.Attribute(errorOrTruncationOperationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(errorOrTruncationOperationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? errorRowDisposition {
            get {
                XAttribute x = this.Attribute(errorRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(errorRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? truncationRowDisposition {
            get {
                XAttribute x = this.Attribute(truncationRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(truncationRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? externalMetadataColumnId {
            get {
                XAttribute x = this.Attribute(externalMetadataColumnIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(externalMetadataColumnIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? lineageId {
            get {
                XAttribute x = this.Attribute(lineageIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(lineageIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentUsageTypeEnum? usageType {
            get {
                XAttribute x = this.Attribute(usageTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentUsageTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentUsageTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(usageTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentInputColumnPropertiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentInputColumnPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentInputColumnPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputColumnPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentInputColumnPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputColumnPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentInputColumnPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentInputColumnPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentInputColumnPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentInputColumnPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentInputColumnPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentInputColumnPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputColumnPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentInputColumnPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PipelineComponentInputColumnPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentInputColumnPropertyType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelineComponentInputColumnPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentInputColumnPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelineComponentInputColumnPropertyType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentInputColumnPropertyNameEnum? name {
            get {
                XAttribute x = this.Attribute(nameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentInputColumnPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentInputColumnPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(nameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentInputColumnPropertyType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputColumnPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentOutputColumnPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputColumnPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputColumnPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputColumnPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputColumnPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentOutputColumnPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentOutputColumnPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentOutputColumnPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentOutputColumnPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentOutputColumnPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputColumnPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentOutputColumnPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PipelineComponentOutputColumnPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputColumnPropertyType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelineComponentOutputColumnPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputColumnPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelineComponentOutputColumnPropertyType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentOutputColumnPropertyNameEnum? name {
            get {
                XAttribute x = this.Attribute(nameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentOutputColumnPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentOutputColumnPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(nameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputColumnPropertyType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum PipelineComponentUsageTypeEnum {
        
        readOnly,
        
        readWrite,
        
        Ignored,
    }
    
    public sealed class PipelineComponentUsageTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "readOnly",
                        "readWrite",
                        "Ignored"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentUsageTypeEnumValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties?, outputColumns?, externalMetadataColumns?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputColumnsXName = System.Xml.Linq.XName.Get("outputColumns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalMetadataColumnsXName = System.Xml.Linq.XName.Get("externalMetadataColumns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hasSideEffectsXName = System.Xml.Linq.XName.Get("hasSideEffects", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName danglingXName = System.Xml.Linq.XName.Get("dangling", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorOrTruncationOperationXName = System.Xml.Linq.XName.Get("errorOrTruncationOperation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorRowDispositionXName = System.Xml.Linq.XName.Get("errorRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName truncationRowDispositionXName = System.Xml.Linq.XName.Get("truncationRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exclusionGroupXName = System.Xml.Linq.XName.Get("exclusionGroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName synchronousInputIdXName = System.Xml.Linq.XName.Get("synchronousInputId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName deleteOutputOnPathDetachedXName = System.Xml.Linq.XName.Get("deleteOutputOnPathDetached", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isErrorOutXName = System.Xml.Linq.XName.Get("isErrorOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isSortedXName = System.Xml.Linq.XName.Get("isSorted", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName), new NamedContentModelEntity(outputColumnsXName), new NamedContentModelEntity(externalMetadataColumnsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties?, outputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public PipelineComponentOutputType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, outputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentOutputPropertiesType properties {
            get {
                XElement x = this.GetElement(propertiesXName);
                return ((PipelineComponentOutputPropertiesType)(x));
            }
            set {
                this.SetElement(propertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, outputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentOutputColumnsType outputColumns {
            get {
                XElement x = this.GetElement(outputColumnsXName);
                return ((PipelineComponentOutputColumnsType)(x));
            }
            set {
                this.SetElement(outputColumnsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?, outputColumns?, externalMetadataColumns?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentMetadataColumnsType externalMetadataColumns {
            get {
                XElement x = this.GetElement(externalMetadataColumnsXName);
                return ((PipelineComponentMetadataColumnsType)(x));
            }
            set {
                this.SetElement(externalMetadataColumnsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? hasSideEffects {
            get {
                XAttribute x = this.Attribute(hasSideEffectsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(hasSideEffectsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? dangling {
            get {
                XAttribute x = this.Attribute(danglingXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(danglingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string errorOrTruncationOperation {
            get {
                XAttribute x = this.Attribute(errorOrTruncationOperationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(errorOrTruncationOperationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? errorRowDisposition {
            get {
                XAttribute x = this.Attribute(errorRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(errorRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? truncationRowDisposition {
            get {
                XAttribute x = this.Attribute(truncationRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(truncationRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? exclusionGroup {
            get {
                XAttribute x = this.Attribute(exclusionGroupXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(exclusionGroupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string synchronousInputId {
            get {
                XAttribute x = this.Attribute(synchronousInputIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(synchronousInputIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? deleteOutputOnPathDetached {
            get {
                XAttribute x = this.Attribute(deleteOutputOnPathDetachedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(deleteOutputOnPathDetachedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isErrorOut {
            get {
                XAttribute x = this.Attribute(isErrorOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isErrorOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isSorted {
            get {
                XAttribute x = this.Attribute(isSortedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isSortedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentOutputPropertiesType));
            localElementDictionary.Add(outputColumnsXName, typeof(PipelineComponentOutputColumnsType));
            localElementDictionary.Add(externalMetadataColumnsXName, typeof(PipelineComponentMetadataColumnsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (externalMetadataColumn*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentMetadataColumnsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalMetadataColumnXName = System.Xml.Linq.XName.Get("externalMetadataColumn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentMetadataColumnType> externalMetadataColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isUsedXName = System.Xml.Linq.XName.Get("isUsed", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentMetadataColumnsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentMetadataColumnsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentMetadataColumnsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(externalMetadataColumnXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (externalMetadataColumn*)
        /// </para>
        /// </summary>
        public PipelineComponentMetadataColumnsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (externalMetadataColumn*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentMetadataColumnType> externalMetadataColumn {
            get {
                if ((this.externalMetadataColumnField == null)) {
                    this.externalMetadataColumnField = new XTypedList<PipelineComponentMetadataColumnType>(this, LinqToXsdTypeManager.Instance, externalMetadataColumnXName);
                }
                return this.externalMetadataColumnField;
            }
            set {
                if ((value == null)) {
                    this.externalMetadataColumnField = null;
                }
                else {
                    if ((this.externalMetadataColumnField == null)) {
                        this.externalMetadataColumnField = XTypedList<PipelineComponentMetadataColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, externalMetadataColumnXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentMetadataColumnType>(this.externalMetadataColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnsType.IsUsedEnum? isUsed {
            get {
                XAttribute x = this.Attribute(isUsedXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnsType.IsUsedEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnsType.IsUsedEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(isUsedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentMetadataColumnsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(externalMetadataColumnXName, typeof(PipelineComponentMetadataColumnType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsUsedEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties?)
    /// </para>
    /// </summary>
    public partial class PipelineComponentMetadataColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mappedColumnIdXName = System.Xml.Linq.XName.Get("mappedColumnId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName precisionXName = System.Xml.Linq.XName.Get("precision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scaleXName = System.Xml.Linq.XName.Get("scale", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePageXName = System.Xml.Linq.XName.Get("codePage", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentMetadataColumnType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentMetadataColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentMetadataColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties?)
        /// </para>
        /// </summary>
        public PipelineComponentMetadataColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (properties?)
        /// </para>
        /// </summary>
        public virtual PipelineComponentMetadataColumnPropertiesType properties {
            get {
                XElement x = this.GetElement(propertiesXName);
                return ((PipelineComponentMetadataColumnPropertiesType)(x));
            }
            set {
                this.SetElement(propertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? mappedColumnId {
            get {
                XAttribute x = this.Attribute(mappedColumnIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(mappedColumnIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? precision {
            get {
                XAttribute x = this.Attribute(precisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(precisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? scale {
            get {
                XAttribute x = this.Attribute(scaleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(scaleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? codePage {
            get {
                XAttribute x = this.Attribute(codePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(codePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentMetadataColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentMetadataColumnPropertiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentMetadataColumnPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertyXName = System.Xml.Linq.XName.Get("property", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentMetadataColumnPropertyType> propertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentMetadataColumnPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentMetadataColumnPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentMetadataColumnPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public PipelineComponentMetadataColumnPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentMetadataColumnPropertyType> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<PipelineComponentMetadataColumnPropertyType>(this, LinqToXsdTypeManager.Instance, propertyXName);
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<PipelineComponentMetadataColumnPropertyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertyXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentMetadataColumnPropertyType>(this.propertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentMetadataColumnPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertyXName, typeof(PipelineComponentMetadataColumnPropertyType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PipelineComponentMetadataColumnPropertyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isArrayXName = System.Xml.Linq.XName.Get("isArray", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeConverterXName = System.Xml.Linq.XName.Get("typeConverter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UITypeEditorXName = System.Xml.Linq.XName.Get("UITypeEditor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containsIDXName = System.Xml.Linq.XName.Get("containsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expressionTypeXName = System.Xml.Linq.XName.Get("expressionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnPropertyType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelineComponentMetadataColumnPropertyType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentMetadataColumnPropertyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelineComponentMetadataColumnPropertyType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? isArray {
            get {
                XAttribute x = this.Attribute(isArrayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(isArrayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string typeConverter {
            get {
                XAttribute x = this.Attribute(typeConverterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeConverterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UITypeEditor {
            get {
                XAttribute x = this.Attribute(UITypeEditorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UITypeEditorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? containsID {
            get {
                XAttribute x = this.Attribute(containsIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(containsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum? expressionType {
            get {
                XAttribute x = this.Attribute(expressionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentExpressionTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(expressionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnPropertyNameEnum? name {
            get {
                XAttribute x = this.Attribute(nameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(nameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentMetadataColumnPropertyType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum PipelineComponentMetadataColumnPropertyNameEnum {
        
        DBParamInfoFlags,
        
        CLRType,
    }
    
    public sealed class PipelineComponentMetadataColumnPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DBParamInfoFlags",
                        "CLRType"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentMetadataColumnPropertyNameEnumValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (outputColumn*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputColumnsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputColumnXName = System.Xml.Linq.XName.Get("outputColumn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentOutputColumnType> outputColumnField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputColumnsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputColumnsType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputColumnsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputColumnsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(outputColumnXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (outputColumn*)
        /// </para>
        /// </summary>
        public PipelineComponentOutputColumnsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (outputColumn*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentOutputColumnType> outputColumn {
            get {
                if ((this.outputColumnField == null)) {
                    this.outputColumnField = new XTypedList<PipelineComponentOutputColumnType>(this, LinqToXsdTypeManager.Instance, outputColumnXName);
                }
                return this.outputColumnField;
            }
            set {
                if ((value == null)) {
                    this.outputColumnField = null;
                }
                else {
                    if ((this.outputColumnField == null)) {
                        this.outputColumnField = XTypedList<PipelineComponentOutputColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, outputColumnXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentOutputColumnType>(this.outputColumnField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputColumnsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(outputColumnXName, typeof(PipelineComponentOutputColumnType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (properties*)
    /// </para>
    /// </summary>
    public partial class PipelineComponentOutputColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName propertiesXName = System.Xml.Linq.XName.Get("properties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipelineComponentOutputColumnPropertiesType> propertiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mappedColumnIdXName = System.Xml.Linq.XName.Get("mappedColumnId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorOrTruncationOperationXName = System.Xml.Linq.XName.Get("errorOrTruncationOperation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName errorRowDispositionXName = System.Xml.Linq.XName.Get("errorRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName truncationRowDispositionXName = System.Xml.Linq.XName.Get("truncationRowDisposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalMetadataColumnIdXName = System.Xml.Linq.XName.Get("externalMetadataColumnId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lineageIdXName = System.Xml.Linq.XName.Get("lineageId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName precisionXName = System.Xml.Linq.XName.Get("precision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scaleXName = System.Xml.Linq.XName.Get("scale", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePageXName = System.Xml.Linq.XName.Get("codePage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sortKeyPositionXName = System.Xml.Linq.XName.Get("sortKeyPosition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName comparisonFlagsXName = System.Xml.Linq.XName.Get("comparisonFlags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName specialFlagsXName = System.Xml.Linq.XName.Get("specialFlags", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelineComponentOutputColumnType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipelineComponentOutputColumnType(XElement xe) { return XTypedServices.ToXTypedElement<PipelineComponentOutputColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipelineComponentOutputColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(propertiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (properties*)
        /// </para>
        /// </summary>
        public PipelineComponentOutputColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (properties*)
        /// </para>
        /// </summary>
        public virtual IList<PipelineComponentOutputColumnPropertiesType> properties {
            get {
                if ((this.propertiesField == null)) {
                    this.propertiesField = new XTypedList<PipelineComponentOutputColumnPropertiesType>(this, LinqToXsdTypeManager.Instance, propertiesXName);
                }
                return this.propertiesField;
            }
            set {
                if ((value == null)) {
                    this.propertiesField = null;
                }
                else {
                    if ((this.propertiesField == null)) {
                        this.propertiesField = XTypedList<PipelineComponentOutputColumnPropertiesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, propertiesXName);
                    }
                    else {
                        XTypedServices.SetList<PipelineComponentOutputColumnPropertiesType>(this.propertiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? mappedColumnId {
            get {
                XAttribute x = this.Attribute(mappedColumnIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(mappedColumnIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string errorOrTruncationOperation {
            get {
                XAttribute x = this.Attribute(errorOrTruncationOperationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(errorOrTruncationOperationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? errorRowDisposition {
            get {
                XAttribute x = this.Attribute(errorRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(errorRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum? truncationRowDisposition {
            get {
                XAttribute x = this.Attribute(truncationRowDispositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.PipelineComponentRowDispositionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(truncationRowDispositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? externalMetadataColumnId {
            get {
                XAttribute x = this.Attribute(externalMetadataColumnIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(externalMetadataColumnIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? lineageId {
            get {
                XAttribute x = this.Attribute(lineageIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(lineageIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? precision {
            get {
                XAttribute x = this.Attribute(precisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(precisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? scale {
            get {
                XAttribute x = this.Attribute(scaleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(scaleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataType {
            get {
                XAttribute x = this.Attribute(dataTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? codePage {
            get {
                XAttribute x = this.Attribute(codePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(codePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? sortKeyPosition {
            get {
                XAttribute x = this.Attribute(sortKeyPositionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(sortKeyPositionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? comparisonFlags {
            get {
                XAttribute x = this.Attribute(comparisonFlagsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(comparisonFlagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? specialFlags {
            get {
                XAttribute x = this.Attribute(specialFlagsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(specialFlagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelineComponentOutputColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(propertiesXName, typeof(PipelineComponentOutputColumnPropertiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class PipelineComponentColumnDataTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "i1",
                        "ui1",
                        "i2",
                        "i4",
                        "r4",
                        "r8",
                        "cy",
                        "date",
                        "bool",
                        "variant",
                        "decimal",
                        "ui2",
                        "ui4",
                        "i8",
                        "ui8",
                        "guid",
                        "bytes",
                        "str",
                        "wstr",
                        "numeric",
                        "dbDate",
                        "dateTime",
                        "dbTime",
                        "dbTimeStamp",
                        "image",
                        "text",
                        "nText",
                        "dbTime2",
                        "dbTimeStamp2",
                        "dbTimeStampOffset"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentColumnDataTypeEnum() {
        }
    }
    
    public enum PipelineComponentRowDispositionEnum {
        
        NotUsed,
        
        IgnoreFailure,
        
        FailComponent,
        
        RedirectRow,
    }
    
    public sealed class PipelineComponentRowDispositionEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NotUsed",
                        "IgnoreFailure",
                        "FailComponent",
                        "RedirectRow"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PipelineComponentRowDispositionEnumValidator() {
        }
    }
    
    public partial class PipelinePathType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descriptionXName = System.Xml.Linq.XName.Get("description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startIdXName = System.Xml.Linq.XName.Get("startId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endIdXName = System.Xml.Linq.XName.Get("endId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipelinePathType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PipelinePathType(XElement xe) { return XTypedServices.ToXTypedElement<PipelinePathType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PipelinePathType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(descriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? startId {
            get {
                XAttribute x = this.Attribute(startIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(startIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? endId {
            get {
                XAttribute x = this.Attribute(endIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(endIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipelinePathType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (InnerObject)
    /// </para>
    /// </summary>
    public partial class LogProviderObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerObjectXName = System.Xml.Linq.XName.Get("InnerObject", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogProviderObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogProviderObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<LogProviderObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogProviderObjectDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InnerObjectXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InnerObject)
        /// </para>
        /// </summary>
        public LogProviderObjectDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InnerObject)
        /// </para>
        /// </summary>
        public virtual InnerObjectObjectDataType InnerObject {
            get {
                XElement x = this.GetElement(InnerObjectXName);
                return ((InnerObjectObjectDataType)(x));
            }
            set {
                this.SetElement(InnerObjectXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogProviderObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InnerObjectXName, typeof(InnerObjectObjectDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
    /// </para>
    /// </summary>
    public partial class ForEachEnumeratorObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEIEItemsXName = System.Xml.Linq.XName.Get("FEIEItems", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForEachFileEnumeratorPropertiesXName = System.Xml.Linq.XName.Get("ForEachFileEnumeratorProperties", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEEADOXName = System.Xml.Linq.XName.Get("FEEADO", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEESchemaRowsetXName = System.Xml.Linq.XName.Get("FEESchemaRowset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEEFVEXName = System.Xml.Linq.XName.Get("FEEFVE", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEENODELISTXName = System.Xml.Linq.XName.Get("FEENODELIST", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEESMOXName = System.Xml.Linq.XName.Get("FEESMO", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ForEachEnumeratorObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ForEachEnumeratorObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ForEachEnumeratorObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachEnumeratorObjectDataType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FEIEItemsXName), new NamedContentModelEntity(ForEachFileEnumeratorPropertiesXName), new NamedContentModelEntity(FEEADOXName), new NamedContentModelEntity(FEESchemaRowsetXName), new NamedContentModelEntity(FEEFVEXName), new NamedContentModelEntity(FEENODELISTXName), new NamedContentModelEntity(FEESMOXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public ForEachEnumeratorObjectDataType() {
        }
        
        public ForEachEnumeratorObjectDataType(FEIEItemsType FEIEItems) {
            this.FEIEItems = FEIEItems;
        }
        
        public ForEachEnumeratorObjectDataType(ForEachFileEnumeratorPropertiesType ForEachFileEnumeratorProperties) {
            this.ForEachFileEnumeratorProperties = ForEachFileEnumeratorProperties;
        }
        
        public ForEachEnumeratorObjectDataType(FEEADOType FEEADO) {
            this.FEEADO = FEEADO;
        }
        
        public ForEachEnumeratorObjectDataType(FEESchemaRowsetType FEESchemaRowset) {
            this.FEESchemaRowset = FEESchemaRowset;
        }
        
        public ForEachEnumeratorObjectDataType(FEEFVEType FEEFVE) {
            this.FEEFVE = FEEFVE;
        }
        
        public ForEachEnumeratorObjectDataType(FEENODELISTType FEENODELIST) {
            this.FEENODELIST = FEENODELIST;
        }
        
        public ForEachEnumeratorObjectDataType(FEESMOType FEESMO) {
            this.FEESMO = FEESMO;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEIEItemsType FEIEItems {
            get {
                XElement x = this.GetElement(FEIEItemsXName);
                return ((FEIEItemsType)(x));
            }
            set {
                this.SetElement(FEIEItemsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual ForEachFileEnumeratorPropertiesType ForEachFileEnumeratorProperties {
            get {
                XElement x = this.GetElement(ForEachFileEnumeratorPropertiesXName);
                return ((ForEachFileEnumeratorPropertiesType)(x));
            }
            set {
                this.SetElement(ForEachFileEnumeratorPropertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEEADOType FEEADO {
            get {
                XElement x = this.GetElement(FEEADOXName);
                return ((FEEADOType)(x));
            }
            set {
                this.SetElement(FEEADOXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEESchemaRowsetType FEESchemaRowset {
            get {
                XElement x = this.GetElement(FEESchemaRowsetXName);
                return ((FEESchemaRowsetType)(x));
            }
            set {
                this.SetElement(FEESchemaRowsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEEFVEType FEEFVE {
            get {
                XElement x = this.GetElement(FEEFVEXName);
                return ((FEEFVEType)(x));
            }
            set {
                this.SetElement(FEEFVEXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEENODELISTType FEENODELIST {
            get {
                XElement x = this.GetElement(FEENODELISTXName);
                return ((FEENODELISTType)(x));
            }
            set {
                this.SetElement(FEENODELISTXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItems | ForEachFileEnumeratorProperties | FEEADO | FEESchemaRowset | FEEFVE | FEENODELIST | FEESMO)
        /// </para>
        /// </summary>
        public virtual FEESMOType FEESMO {
            get {
                XElement x = this.GetElement(FEESMOXName);
                return ((FEESMOType)(x));
            }
            set {
                this.SetElement(FEESMOXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachEnumeratorObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FEIEItemsXName, typeof(FEIEItemsType));
            localElementDictionary.Add(ForEachFileEnumeratorPropertiesXName, typeof(ForEachFileEnumeratorPropertiesType));
            localElementDictionary.Add(FEEADOXName, typeof(FEEADOType));
            localElementDictionary.Add(FEESchemaRowsetXName, typeof(FEESchemaRowsetType));
            localElementDictionary.Add(FEEFVEXName, typeof(FEEFVEType));
            localElementDictionary.Add(FEENODELISTXName, typeof(FEENODELISTType));
            localElementDictionary.Add(FEESMOXName, typeof(FEESMOType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FEIEItem+)
    /// </para>
    /// </summary>
    public partial class FEIEItemsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEIEItemXName = System.Xml.Linq.XName.Get("FEIEItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FEIEItemType> FEIEItemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEIEItemsType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FEIEItemsType(XElement xe) { return XTypedServices.ToXTypedElement<FEIEItemsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FEIEItemsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FEIEItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FEIEItem+)
        /// </para>
        /// </summary>
        public FEIEItemsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItem+)
        /// </para>
        /// </summary>
        public virtual IList<FEIEItemType> FEIEItem {
            get {
                if ((this.FEIEItemField == null)) {
                    this.FEIEItemField = new XTypedList<FEIEItemType>(this, LinqToXsdTypeManager.Instance, FEIEItemXName);
                }
                return this.FEIEItemField;
            }
            set {
                if ((value == null)) {
                    this.FEIEItemField = null;
                }
                else {
                    if ((this.FEIEItemField == null)) {
                        this.FEIEItemField = XTypedList<FEIEItemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FEIEItemXName);
                    }
                    else {
                        XTypedServices.SetList<FEIEItemType>(this.FEIEItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEIEItemsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FEIEItemXName, typeof(FEIEItemType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FEIEItemValue+)
    /// </para>
    /// </summary>
    public partial class FEIEItemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEIEItemValueXName = System.Xml.Linq.XName.Get("FEIEItemValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FEIEItemValueType> FEIEItemValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEIEItemType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FEIEItemType(XElement xe) { return XTypedServices.ToXTypedElement<FEIEItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FEIEItemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FEIEItemValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FEIEItemValue+)
        /// </para>
        /// </summary>
        public FEIEItemType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FEIEItemValue+)
        /// </para>
        /// </summary>
        public virtual IList<FEIEItemValueType> FEIEItemValue {
            get {
                if ((this.FEIEItemValueField == null)) {
                    this.FEIEItemValueField = new XTypedList<FEIEItemValueType>(this, LinqToXsdTypeManager.Instance, FEIEItemValueXName);
                }
                return this.FEIEItemValueField;
            }
            set {
                if ((value == null)) {
                    this.FEIEItemValueField = null;
                }
                else {
                    if ((this.FEIEItemValueField == null)) {
                        this.FEIEItemValueField = XTypedList<FEIEItemValueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FEIEItemValueXName);
                    }
                    else {
                        XTypedServices.SetList<FEIEItemValueType>(this.FEIEItemValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEIEItemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FEIEItemValueXName, typeof(FEIEItemValueType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FEIEItemValueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEIEItemValueType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FEIEItemValueType(XElement xe) { return XTypedServices.ToXTypedElement<FEIEItemValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FEIEItemValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEIEItemValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FEFEProperty+)
    /// </para>
    /// </summary>
    public partial class ForEachFileEnumeratorPropertiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FEFEPropertyXName = System.Xml.Linq.XName.Get("FEFEProperty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FEFEPropertyLocalType> FEFEPropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ForEachFileEnumeratorPropertiesType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ForEachFileEnumeratorPropertiesType(XElement xe) { return XTypedServices.ToXTypedElement<ForEachFileEnumeratorPropertiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachFileEnumeratorPropertiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FEFEPropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FEFEProperty+)
        /// </para>
        /// </summary>
        public ForEachFileEnumeratorPropertiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FEFEProperty+)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ForEachFileEnumeratorPropertiesType.FEFEPropertyLocalType> FEFEProperty {
            get {
                if ((this.FEFEPropertyField == null)) {
                    this.FEFEPropertyField = new XTypedList<FEFEPropertyLocalType>(this, LinqToXsdTypeManager.Instance, FEFEPropertyXName);
                }
                return this.FEFEPropertyField;
            }
            set {
                if ((value == null)) {
                    this.FEFEPropertyField = null;
                }
                else {
                    if ((this.FEFEPropertyField == null)) {
                        this.FEFEPropertyField = XTypedList<FEFEPropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FEFEPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<FEFEPropertyLocalType>(this.FEFEPropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachFileEnumeratorPropertiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FEFEPropertyXName, typeof(FEFEPropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class FEFEPropertyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FolderXName = System.Xml.Linq.XName.Get("Folder", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FileSpecXName = System.Xml.Linq.XName.Get("FileSpec", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FileNameRetrievalTypeXName = System.Xml.Linq.XName.Get("FileNameRetrievalType", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RecurseXName = System.Xml.Linq.XName.Get("Recurse", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEFEProperty", "");
            
		public static explicit operator FEFEPropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FEFEPropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public FEFEPropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Folder {
                get {
                    XAttribute x = this.Attribute(FolderXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetAttribute(FolderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string FileSpec {
                get {
                    XAttribute x = this.Attribute(FileSpecXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetAttribute(FileSpecXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? FileNameRetrievalType {
                get {
                    XAttribute x = this.Attribute(FileNameRetrievalTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(FileNameRetrievalTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? Recurse {
                get {
                    XAttribute x = this.Attribute(RecurseXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(RecurseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FEFEPropertyLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    public partial class FEEADOType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnumTypeXName = System.Xml.Linq.XName.Get("EnumType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VarNameXName = System.Xml.Linq.XName.Get("VarName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEEADOType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FEEADOType(XElement xe) { return XTypedServices.ToXTypedElement<FEEADOType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FEEADOType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.FEEADOEnumType EnumType {
            get {
                XAttribute x = this.Attribute(EnumTypeXName);
                return ((Microsoft.SqlServer.Dts.FEEADOEnumType)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FEEADOEnumType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(EnumTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string VarName {
            get {
                XAttribute x = this.Attribute(VarNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VarNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEEADOType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum FEEADOEnumType {
        
        EnumerateRowsInFirstTable,
        
        EnumerateAllRows,
        
        EnumerateTables,
    }
    
    public sealed class FEEADOEnumTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "EnumerateRowsInFirstTable",
                        "EnumerateAllRows",
                        "EnumerateTables"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FEEADOEnumTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Restriction+)
    /// </para>
    /// </summary>
    public partial class FEESchemaRowsetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RestrictionXName = System.Xml.Linq.XName.Get("Restriction", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RestrictionElementType> RestrictionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemaXName = System.Xml.Linq.XName.Get("Schema", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEESchemaRowsetType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FEESchemaRowsetType(XElement xe) { return XTypedServices.ToXTypedElement<FEESchemaRowsetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FEESchemaRowsetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RestrictionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Restriction+)
        /// </para>
        /// </summary>
        public FEESchemaRowsetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Restriction+)
        /// </para>
        /// </summary>
        public virtual IList<RestrictionElementType> Restriction {
            get {
                if ((this.RestrictionField == null)) {
                    this.RestrictionField = new XTypedList<RestrictionElementType>(this, LinqToXsdTypeManager.Instance, RestrictionXName);
                }
                return this.RestrictionField;
            }
            set {
                if ((value == null)) {
                    this.RestrictionField = null;
                }
                else {
                    if ((this.RestrictionField == null)) {
                        this.RestrictionField = XTypedList<RestrictionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RestrictionXName);
                    }
                    else {
                        XTypedServices.SetList<RestrictionElementType>(this.RestrictionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Schema {
            get {
                XAttribute x = this.Attribute(SchemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEESchemaRowsetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RestrictionXName, typeof(RestrictionElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RestrictionElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RestrictionElementType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator RestrictionElementType(XElement xe) { return XTypedServices.ToXTypedElement<RestrictionElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RestrictionElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int Index {
            get {
                XAttribute x = this.Attribute(IndexXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IndexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RestrictionElementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FEEFVEType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableNameXName = System.Xml.Linq.XName.Get("VariableName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEEFVEType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FEEFVEType(XElement xe) { return XTypedServices.ToXTypedElement<FEEFVEType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FEEFVEType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string VariableName {
            get {
                XAttribute x = this.Attribute(VariableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VariableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEEFVEType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FEENODELISTType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnumerationTypeXName = System.Xml.Linq.XName.Get("EnumerationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OuterXPathSourceTypeXName = System.Xml.Linq.XName.Get("OuterXPathSourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OuterXPathStringXName = System.Xml.Linq.XName.Get("OuterXPathString", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerElementTypeXName = System.Xml.Linq.XName.Get("InnerElementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerXPathSourceTypeXName = System.Xml.Linq.XName.Get("InnerXPathSourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerXPathStringXName = System.Xml.Linq.XName.Get("InnerXPathString", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceTypeXName = System.Xml.Linq.XName.Get("SourceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceDocumentXName = System.Xml.Linq.XName.Get("SourceDocument", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEENODELISTType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FEENODELISTType(XElement xe) { return XTypedServices.ToXTypedElement<FEENODELISTType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FEENODELISTType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.NodelistEnumerationTypeEnum EnumerationType {
            get {
                XAttribute x = this.Attribute(EnumerationTypeXName);
                return ((Microsoft.SqlServer.Dts.NodelistEnumerationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.NodelistEnumerationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(EnumerationTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum OuterXPathSourceType {
            get {
                XAttribute x = this.Attribute(OuterXPathSourceTypeXName);
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OuterXPathSourceTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string OuterXPathString {
            get {
                XAttribute x = this.Attribute(OuterXPathStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OuterXPathStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.NodelistInnerElementEnumerationTypeEnum InnerElementType {
            get {
                XAttribute x = this.Attribute(InnerElementTypeXName);
                return ((Microsoft.SqlServer.Dts.NodelistInnerElementEnumerationTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.NodelistInnerElementEnumerationTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(InnerElementTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum InnerXPathSourceType {
            get {
                XAttribute x = this.Attribute(InnerXPathSourceTypeXName);
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(InnerXPathSourceTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string InnerXPathString {
            get {
                XAttribute x = this.Attribute(InnerXPathStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InnerXPathStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum SourceType {
            get {
                XAttribute x = this.Attribute(SourceTypeXName);
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SourceTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SourceDocument {
            get {
                XAttribute x = this.Attribute(SourceDocumentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceDocumentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEENODELISTType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum NodelistInnerElementEnumerationTypeEnum {
        
        Navigator,
        
        Node,
        
        NodeText,
    }
    
    public sealed class NodelistInnerElementEnumerationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Navigator",
                        "Node",
                        "NodeText"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NodelistInnerElementEnumerationTypeEnumValidator() {
        }
    }
    
    public enum NodelistEnumerationTypeEnum {
        
        Navigator,
        
        Node,
        
        NodeText,
        
        ElementCollection,
    }
    
    public sealed class NodelistEnumerationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Navigator",
                        "Node",
                        "NodeText",
                        "ElementCollection"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NodelistEnumerationTypeEnumValidator() {
        }
    }
    
    public partial class FEESMOType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnumURNXName = System.Xml.Linq.XName.Get("EnumURN", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FEESMOType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator FEESMOType(XElement xe) { return XTypedServices.ToXTypedElement<FEESMOType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FEESMOType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string EnumURN {
            get {
                XAttribute x = this.Attribute(EnumURNXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnumURNXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FEESMOType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
    /// </para>
    /// </summary>
    public partial class ConnectionManagerObjectDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionManagerXName = System.Xml.Linq.XName.Get("ConnectionManager", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MsmqConnectionManagerXName = System.Xml.Linq.XName.Get("MsmqConnectionManager", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SMOServerConnectionManagerXName = System.Xml.Linq.XName.Get("SMOServerConnectionManager", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SmtpConnectionManagerXName = System.Xml.Linq.XName.Get("SmtpConnectionManager", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WmiConnectionManagerXName = System.Xml.Linq.XName.Get("WmiConnectionManager", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConnectionManagerObjectDataType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnectionManagerObjectDataType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ConnectionManagerXName), new NamedContentModelEntity(MsmqConnectionManagerXName), new NamedContentModelEntity(SMOServerConnectionManagerXName), new NamedContentModelEntity(SmtpConnectionManagerXName), new NamedContentModelEntity(WmiConnectionManagerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public ConnectionManagerObjectDataType() {
        }
        
        public ConnectionManagerObjectDataType(ConnectionManagerObjectDataConnectionManagerType ConnectionManager) {
            this.ConnectionManager = ConnectionManager;
        }
        
        public ConnectionManagerObjectDataType(ConnectionManagerObjectDataMsmqConnectionManagerType MsmqConnectionManager) {
            this.MsmqConnectionManager = MsmqConnectionManager;
        }
        
        public ConnectionManagerObjectDataType(ConnectionManagerObjectDataSMOServerConnectionManagerType SMOServerConnectionManager) {
            this.SMOServerConnectionManager = SMOServerConnectionManager;
        }
        
        public ConnectionManagerObjectDataType(ConnectionManagerObjectDataSmtpConnectionManagerType SmtpConnectionManager) {
            this.SmtpConnectionManager = SmtpConnectionManager;
        }
        
        public ConnectionManagerObjectDataType(ConnectionManagerObjectDataWmiConnectionManagerType WmiConnectionManager) {
            this.WmiConnectionManager = WmiConnectionManager;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataConnectionManagerType ConnectionManager {
            get {
                XElement x = this.GetElement(ConnectionManagerXName);
                return ((ConnectionManagerObjectDataConnectionManagerType)(x));
            }
            set {
                this.SetElement(ConnectionManagerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataMsmqConnectionManagerType MsmqConnectionManager {
            get {
                XElement x = this.GetElement(MsmqConnectionManagerXName);
                return ((ConnectionManagerObjectDataMsmqConnectionManagerType)(x));
            }
            set {
                this.SetElement(MsmqConnectionManagerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataSMOServerConnectionManagerType SMOServerConnectionManager {
            get {
                XElement x = this.GetElement(SMOServerConnectionManagerXName);
                return ((ConnectionManagerObjectDataSMOServerConnectionManagerType)(x));
            }
            set {
                this.SetElement(SMOServerConnectionManagerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataSmtpConnectionManagerType SmtpConnectionManager {
            get {
                XElement x = this.GetElement(SmtpConnectionManagerXName);
                return ((ConnectionManagerObjectDataSmtpConnectionManagerType)(x));
            }
            set {
                this.SetElement(SmtpConnectionManagerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ConnectionManager | MsmqConnectionManager | SMOServerConnectionManager | SmtpConnectionManager | WmiConnectionManager)
        /// </para>
        /// </summary>
        public virtual ConnectionManagerObjectDataWmiConnectionManagerType WmiConnectionManager {
            get {
                XElement x = this.GetElement(WmiConnectionManagerXName);
                return ((ConnectionManagerObjectDataWmiConnectionManagerType)(x));
            }
            set {
                this.SetElement(WmiConnectionManagerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConnectionManagerXName, typeof(ConnectionManagerObjectDataConnectionManagerType));
            localElementDictionary.Add(MsmqConnectionManagerXName, typeof(ConnectionManagerObjectDataMsmqConnectionManagerType));
            localElementDictionary.Add(SMOServerConnectionManagerXName, typeof(ConnectionManagerObjectDataSMOServerConnectionManagerType));
            localElementDictionary.Add(SmtpConnectionManagerXName, typeof(ConnectionManagerObjectDataSmtpConnectionManagerType));
            localElementDictionary.Add(WmiConnectionManagerXName, typeof(ConnectionManagerObjectDataWmiConnectionManagerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
    /// </para>
    /// </summary>
    public partial class ConnectionManagerObjectDataConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlatFileColumnXName = System.Xml.Linq.XName.Get("FlatFileColumn", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlatFileColumnType> FlatFileColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheColumnXName = System.Xml.Linq.XName.Get("CacheColumn", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CacheColumnType> CacheColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtpConnectionXName = System.Xml.Linq.XName.Get("FtpConnection", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HttpConnectionXName = System.Xml.Linq.XName.Get("HttpConnection", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConnectionManagerObjectDataConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnectionManagerObjectDataConnectionManagerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FlatFileColumnXName), new NamedContentModelEntity(CacheColumnXName), new NamedContentModelEntity(FtpConnectionXName), new NamedContentModelEntity(HttpConnectionXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public ConnectionManagerObjectDataConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ConnectionManagerObjectDataConnectionManagerType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public virtual IList<FlatFileColumnType> FlatFileColumn {
            get {
                if ((this.FlatFileColumnField == null)) {
                    this.FlatFileColumnField = new XTypedList<FlatFileColumnType>(this, LinqToXsdTypeManager.Instance, FlatFileColumnXName);
                }
                return this.FlatFileColumnField;
            }
            set {
                if ((value == null)) {
                    this.FlatFileColumnField = null;
                }
                else {
                    if ((this.FlatFileColumnField == null)) {
                        this.FlatFileColumnField = XTypedList<FlatFileColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlatFileColumnXName);
                    }
                    else {
                        XTypedServices.SetList<FlatFileColumnType>(this.FlatFileColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public virtual IList<CacheColumnType> CacheColumn {
            get {
                if ((this.CacheColumnField == null)) {
                    this.CacheColumnField = new XTypedList<CacheColumnType>(this, LinqToXsdTypeManager.Instance, CacheColumnXName);
                }
                return this.CacheColumnField;
            }
            set {
                if ((value == null)) {
                    this.CacheColumnField = null;
                }
                else {
                    if ((this.CacheColumnField == null)) {
                        this.CacheColumnField = XTypedList<CacheColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CacheColumnXName);
                    }
                    else {
                        XTypedServices.SetList<CacheColumnType>(this.CacheColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public virtual FtpConnectionType FtpConnection {
            get {
                XElement x = this.GetElement(FtpConnectionXName);
                return ((FtpConnectionType)(x));
            }
            set {
                this.SetElement(FtpConnectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Property*, (FlatFileColumn+ | CacheColumn+ | FtpConnection | HttpConnection)?)
        /// </para>
        /// </summary>
        public virtual HttpConnectionType HttpConnection {
            get {
                XElement x = this.GetElement(HttpConnectionXName);
                return ((HttpConnectionType)(x));
            }
            set {
                this.SetElement(HttpConnectionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataConnectionManagerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
            localElementDictionary.Add(FlatFileColumnXName, typeof(FlatFileColumnType));
            localElementDictionary.Add(CacheColumnXName, typeof(CacheColumnType));
            localElementDictionary.Add(FtpConnectionXName, typeof(FtpConnectionType));
            localElementDictionary.Add(HttpConnectionXName, typeof(HttpConnectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.ConnectionManagerObjectDataPropertyNameEnum Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return ((Microsoft.SqlServer.Dts.ConnectionManagerObjectDataPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.ConnectionManagerObjectDataPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FlatFileColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlatFileColumnType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlatFileColumnType(XElement xe) { return XTypedServices.ToXTypedElement<FlatFileColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlatFileColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FlatFileColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.FlatFileColumnType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlatFileColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.FlatFileColumnPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.FlatFileColumnPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class CacheColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CacheColumnType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CacheColumnType(XElement xe) { return XTypedServices.ToXTypedElement<CacheColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CacheColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public CacheColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.CacheColumnType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CacheColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.CacheColumnPropertyNameEnum.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "Name", this, NameXName, global::Microsoft.SqlServer.Dts.CacheColumnPropertyNameEnum.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FtpConnectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FtpConnectionType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FtpConnectionType(XElement xe) { return XTypedServices.ToXTypedElement<FtpConnectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FtpConnectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FtpConnectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.FtpConnectionType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FtpConnectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SensitiveXName = System.Xml.Linq.XName.Get("Sensitive", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EncryptedXName = System.Xml.Linq.XName.Get("Encrypted", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.FtpConnectionPropertyNameEnum Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return ((Microsoft.SqlServer.Dts.FtpConnectionPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.FtpConnectionPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? Sensitive {
                get {
                    XAttribute x = this.Attribute(SensitiveXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(SensitiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? Encrypted {
                get {
                    XAttribute x = this.Attribute(EncryptedXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(EncryptedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class HttpConnectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyLocalType> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HttpConnectionType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HttpConnectionType(XElement xe) { return XTypedServices.ToXTypedElement<HttpConnectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HttpConnectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public HttpConnectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.HttpConnectionType.PropertyLocalType> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyLocalType>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyLocalType>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpConnectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class PropertyLocalType : global::Microsoft.SqlServer.Dts.PropertyElementBaseType, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SensitiveXName = System.Xml.Linq.XName.Get("Sensitive", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EncryptedXName = System.Xml.Linq.XName.Get("Encrypted", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "www.microsoft.com/SqlServer/Dts");
            
		public static explicit operator PropertyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public PropertyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.SqlServer.Dts.HttpConnectionPropertyNameEnum Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return ((Microsoft.SqlServer.Dts.HttpConnectionPropertyNameEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.HttpConnectionPropertyNameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(NameXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? Sensitive {
                get {
                    XAttribute x = this.Attribute(SensitiveXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(SensitiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Int32? Encrypted {
                get {
                    XAttribute x = this.Attribute(EncryptedXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(EncryptedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyLocalType>(this);
            }
        }
    }
    
    public partial class ConnectionManagerObjectDataMsmqConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionStringXName = System.Xml.Linq.XName.Get("ConnectionString", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataMsmqConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ConnectionManagerObjectDataMsmqConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataMsmqConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ConnectionManagerObjectDataMsmqConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionString {
            get {
                XAttribute x = this.Attribute(ConnectionStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataMsmqConnectionManagerType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PassWord)
    /// </para>
    /// </summary>
    public partial class ConnectionManagerObjectDataSMOServerConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PassWordXName = System.Xml.Linq.XName.Get("PassWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionStringXName = System.Xml.Linq.XName.Get("ConnectionString", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataSMOServerConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConnectionManagerObjectDataSMOServerConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataSMOServerConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnectionManagerObjectDataSMOServerConnectionManagerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PassWordXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PassWord)
        /// </para>
        /// </summary>
        public ConnectionManagerObjectDataSMOServerConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PassWord)
        /// </para>
        /// </summary>
        public virtual PasswordElementType PassWord {
            get {
                XElement x = this.GetElement(PassWordXName);
                return ((PasswordElementType)(x));
            }
            set {
                this.SetElement(PassWordXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ConnectionString {
            get {
                XAttribute x = this.Attribute(ConnectionStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataSMOServerConnectionManagerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PassWordXName, typeof(PasswordElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PasswordElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SensitiveXName = System.Xml.Linq.XName.Get("Sensitive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EncryptedXName = System.Xml.Linq.XName.Get("Encrypted", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PasswordElementType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PasswordElementType(XElement xe) { return XTypedServices.ToXTypedElement<PasswordElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PasswordElementType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Sensitive {
            get {
                XAttribute x = this.Attribute(SensitiveXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SensitiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Encrypted {
            get {
                XAttribute x = this.Attribute(EncryptedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(EncryptedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PasswordElementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ConnectionManagerObjectDataSmtpConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionStringXName = System.Xml.Linq.XName.Get("ConnectionString", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataSmtpConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator ConnectionManagerObjectDataSmtpConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataSmtpConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ConnectionManagerObjectDataSmtpConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionString {
            get {
                XAttribute x = this.Attribute(ConnectionStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataSmtpConnectionManagerType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PassWord)
    /// </para>
    /// </summary>
    public partial class ConnectionManagerObjectDataWmiConnectionManagerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PassWordXName = System.Xml.Linq.XName.Get("PassWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionStringXName = System.Xml.Linq.XName.Get("ConnectionString", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnectionManagerObjectDataWmiConnectionManagerType", "www.microsoft.com/SqlServer/Dts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConnectionManagerObjectDataWmiConnectionManagerType(XElement xe) { return XTypedServices.ToXTypedElement<ConnectionManagerObjectDataWmiConnectionManagerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnectionManagerObjectDataWmiConnectionManagerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PassWordXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PassWord)
        /// </para>
        /// </summary>
        public ConnectionManagerObjectDataWmiConnectionManagerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PassWord)
        /// </para>
        /// </summary>
        public virtual PasswordElementType PassWord {
            get {
                XElement x = this.GetElement(PassWordXName);
                return ((PasswordElementType)(x));
            }
            set {
                this.SetElement(PassWordXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionString {
            get {
                XAttribute x = this.Attribute(ConnectionStringXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionStringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnectionManagerObjectDataWmiConnectionManagerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PassWordXName, typeof(PasswordElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PropertyElementBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyElementBaseType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PropertyElementBaseType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyElementBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PropertyElementBaseType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DataType {
            get {
                XAttribute x = this.Attribute(DataTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyElementBaseType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PropertyExpressionElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/SqlServer/Dts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyExpressionElementType", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator PropertyExpressionElementType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyExpressionElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PropertyExpressionElementType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyExpressionElementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum BasePropertyNameEnum {
        
        Description,
        
        DTSID,
        
        CreationName,
        
        ObjectName,
    }
    
    public sealed class BasePropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Description",
                        "DTSID",
                        "CreationName",
                        "ObjectName"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BasePropertyNameEnumValidator() {
        }
    }
    
    public sealed class DtsDataTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        11,
                        13,
                        14,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        64,
                        72,
                        129,
                        130,
                        131,
                        133,
                        134,
                        135,
                        139,
                        145,
                        146}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DtsDataTypeEnum() {
        }
    }
    
    public sealed class AllExecutablePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ForceExecValue",
                                    "ExecValue",
                                    "ForceExecutionResult",
                                    "Disabled",
                                    "FailPackageOnFailure",
                                    "FailParentOnFailure",
                                    "MaxErrorCount",
                                    "ISOLevel",
                                    "LocaleID",
                                    "TransactionOption",
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DisableEventHandlers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private AllExecutablePropertyNameEnum() {
        }
    }
    
    public sealed class BaseExecutablePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ForceExecValue",
                                    "ExecValue",
                                    "ForceExecutionResult",
                                    "Disabled",
                                    "FailPackageOnFailure",
                                    "FailParentOnFailure",
                                    "MaxErrorCount",
                                    "ISOLevel",
                                    "LocaleID",
                                    "TransactionOption",
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private BaseExecutablePropertyNameEnum() {
        }
    }
    
    public sealed class ExecutableTypePackagePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ForceExecValue",
                                    "ExecValue",
                                    "ForceExecutionResult",
                                    "Disabled",
                                    "FailPackageOnFailure",
                                    "FailParentOnFailure",
                                    "MaxErrorCount",
                                    "ISOLevel",
                                    "LocaleID",
                                    "TransactionOption",
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DisableEventHandlers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "PackageFormatVersion",
                                    "VersionComments",
                                    "CreatorName",
                                    "CreatorComputerName",
                                    "CreationDate",
                                    "PackageType",
                                    "ProtectionLevel",
                                    "MaxConcurrentExecutables",
                                    "PackagePriorityClass",
                                    "VersionMajor",
                                    "VersionMinor",
                                    "VersionBuild",
                                    "VersionGUID",
                                    "EnableConfig",
                                    "CheckpointFileName",
                                    "SaveCheckpoints",
                                    "CheckpointUsage",
                                    "SuppressConfigurationWarnings",
                                    "LastModifiedProductVersion"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private ExecutableTypePackagePropertyNameEnum() {
        }
    }
    
    public sealed class AnyNonPackageExecutablePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ForceExecValue",
                                    "ExecValue",
                                    "ForceExecutionResult",
                                    "Disabled",
                                    "FailPackageOnFailure",
                                    "FailParentOnFailure",
                                    "MaxErrorCount",
                                    "ISOLevel",
                                    "LocaleID",
                                    "TransactionOption",
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DisableEventHandlers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ExecutionLocation",
                                    "ExecutionAddress",
                                    "TaskContact",
                                    "SqlStatementSource",
                                    "InitExpression",
                                    "EvalExpression",
                                    "AssignExpression",
                                    "MaxConcurrent",
                                    "LockName",
                                    "WsdlFile"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private AnyNonPackageExecutablePropertyNameEnum() {
        }
    }
    
    public sealed class LogProviderPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DelayValidation",
                                    "ConfigString"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private LogProviderPropertyNameEnum() {
        }
    }
    
    public sealed class PackageVariablePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "PackageVariableValue",
                                    "PackageVariable",
                                    "Namespace"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private PackageVariablePropertyNameEnum() {
        }
    }
    
    public sealed class ConfigurationPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ConfigurationType",
                                    "ConfigurationString",
                                    "ConfigurationVariable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private ConfigurationPropertyNameEnum() {
        }
    }
    
    public sealed class PrecedenceConstraintPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "Value",
                                    "EvalOp",
                                    "LogicalAnd",
                                    "Expression"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private PrecedenceConstraintPropertyNameEnum() {
        }
    }
    
    public enum LoggingOptionsPropertyNameEnum {
        
        LoggingMode,
        
        FilterKind,
        
        EventFilter,
        
        ColumnFilter,
    }
    
    public sealed class LoggingOptionsPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LoggingMode",
                        "FilterKind",
                        "EventFilter",
                        "ColumnFilter"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LoggingOptionsPropertyNameEnumValidator() {
        }
    }
    
    public enum ColumnEventFilterPropertyNameEnum {
        
        Computer,
        
        Operator,
        
        SourceName,
        
        SourceID,
        
        ExecutionID,
        
        MessageText,
        
        DataBytes,
    }
    
    public sealed class ColumnEventFilterPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Computer",
                        "Operator",
                        "SourceName",
                        "SourceID",
                        "ExecutionID",
                        "MessageText",
                        "DataBytes"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ColumnEventFilterPropertyNameEnumValidator() {
        }
    }
    
    public sealed class ForEachVariableMappingPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "VariableName",
                                    "ValueIndex"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private ForEachVariableMappingPropertyNameEnum() {
        }
    }
    
    public sealed class VariablePropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "Namespace",
                                    "Expression",
                                    "EvaluateAsExpression",
                                    "ReadOnly",
                                    "RaiseChangedEvent",
                                    "IncludeInDebugDump"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private VariablePropertyNameEnum() {
        }
    }
    
    public sealed class ConnectionManagerPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private ConnectionManagerPropertyNameEnum() {
        }
    }
    
    public enum ConnectionManagerObjectDataPropertyNameEnum {
        
        Retain,
        
        ConnectionString,
        
        FileUsageType,
        
        Format,
        
        LocaleID,
        
        Unicode,
        
        HeaderRowsToSkip,
        
        HeaderRowDelimiter,
        
        ColumnNamesInFirstDataRow,
        
        RowDelimiter,
        
        DataRowsToSkip,
        
        TextQualifier,
        
        CodePage,
        
        ServerName,
        
        UseFile,
        
        UseEncryption,
        
        RetainData,
    }
    
    public sealed class ConnectionManagerObjectDataPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Retain",
                        "ConnectionString",
                        "FileUsageType",
                        "Format",
                        "LocaleID",
                        "Unicode",
                        "HeaderRowsToSkip",
                        "HeaderRowDelimiter",
                        "ColumnNamesInFirstDataRow",
                        "RowDelimiter",
                        "DataRowsToSkip",
                        "TextQualifier",
                        "CodePage",
                        "ServerName",
                        "UseFile",
                        "UseEncryption",
                        "RetainData"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ConnectionManagerObjectDataPropertyNameEnumValidator() {
        }
    }
    
    public sealed class FlatFileColumnPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ColumnType",
                                    "ColumnDelimiter",
                                    "ColumnWidth",
                                    "MaximumWidth",
                                    "DataType",
                                    "DataPrecision",
                                    "DataScale",
                                    "TextQualified"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private FlatFileColumnPropertyNameEnum() {
        }
    }
    
    public sealed class CacheColumnPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "DataType",
                                    "Length",
                                    "Precision",
                                    "Scale",
                                    "CodePage",
                                    "IndexPosition"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private CacheColumnPropertyNameEnum() {
        }
    }
    
    public enum FtpConnectionPropertyNameEnum {
        
        ServerName,
        
        ServerPort,
        
        ServerUserName,
        
        ServerPassword,
        
        ChunkSize,
        
        TimeOut,
        
        Retries,
        
        UsePassiveMode,
    }
    
    public sealed class FtpConnectionPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ServerName",
                        "ServerPort",
                        "ServerUserName",
                        "ServerPassword",
                        "ChunkSize",
                        "TimeOut",
                        "Retries",
                        "UsePassiveMode"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FtpConnectionPropertyNameEnumValidator() {
        }
    }
    
    public enum HttpConnectionPropertyNameEnum {
        
        ServerURL,
        
        UseServerCredentials,
        
        ServerUserName,
        
        ServerPassword,
        
        ServerDomain,
        
        UseSecureConnection,
        
        CertificateIdentifier,
        
        Certificate,
        
        TimeOut,
        
        ChunkSize,
        
        UseProxy,
        
        ProxyURL,
        
        BypassProxyOnLocal,
        
        UseProxyCredentials,
        
        ProxyUserName,
        
        ProxyPassword,
        
        ProxyDomain,
        
        BypassList,
    }
    
    public sealed class HttpConnectionPropertyNameEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ServerURL",
                        "UseServerCredentials",
                        "ServerUserName",
                        "ServerPassword",
                        "ServerDomain",
                        "UseSecureConnection",
                        "CertificateIdentifier",
                        "Certificate",
                        "TimeOut",
                        "ChunkSize",
                        "UseProxy",
                        "ProxyURL",
                        "BypassProxyOnLocal",
                        "UseProxyCredentials",
                        "ProxyUserName",
                        "ProxyPassword",
                        "ProxyDomain",
                        "BypassList"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private HttpConnectionPropertyNameEnumValidator() {
        }
    }
    
    public sealed class EventHandlerPropertyNameEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    Microsoft.SqlServer.Dts.BasePropertyNameEnumValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ForceExecValue",
                                    "ExecValue",
                                    "ForceExecutionResult",
                                    "Disabled",
                                    "FailPackageOnFailure",
                                    "FailParentOnFailure",
                                    "MaxErrorCount",
                                    "ISOLevel",
                                    "LocaleID",
                                    "TransactionOption",
                                    "DelayValidation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "EventID",
                                    "EventName"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private EventHandlerPropertyNameEnum() {
        }
    }
    
    public enum FileSystemTaskOperationTypeEnum {
        
        CopyFile,
        
        CreateDirectory,
        
        DeleteDirectory,
        
        DeleteFile,
        
        MoveDirectory,
        
        MoveFile,
        
        RenameFile,
        
        SetAttributes,
        
        DeleteDirectoryContent,
        
        CopyDirectory,
    }
    
    public sealed class FileSystemTaskOperationTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CopyFile",
                        "CreateDirectory",
                        "DeleteDirectory",
                        "DeleteFile",
                        "MoveDirectory",
                        "MoveFile",
                        "RenameFile",
                        "SetAttributes",
                        "DeleteDirectoryContent",
                        "CopyDirectory"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileSystemTaskOperationTypeEnumValidator() {
        }
    }
    
    public enum FileSystemTaskFileAttributesEnum {
        
        Archive,
        
        Hidden,
        
        Normal,
        
        ReadOnly,
        
        System,
    }
    
    public sealed class FileSystemTaskFileAttributesEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Archive",
                        "Hidden",
                        "Normal",
                        "ReadOnly",
                        "System"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileSystemTaskFileAttributesEnumValidator() {
        }
    }
    
    public enum SourceTypeEnum {
        
        DirectInput,
        
        FileConnection,
        
        Variable,
    }
    
    public sealed class SourceTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DirectInput",
                        "FileConnection",
                        "Variable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SourceTypeEnumValidator() {
        }
    }
    
    public sealed class uuid {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\{[0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}\\}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uuid() {
        }
    }
    
    public partial class Executable : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExecutableTypePackage ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts");
        
		public static explicit operator Executable(XElement xe) { return XTypedServices.ToXTypedElement<Executable, ExecutableTypePackage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Executable() {
            SetInnerType(new ExecutableTypePackage());
        }
        
        public Executable(ExecutableTypePackage content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ExecutableTypePackage Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.SqlServer.Dts.ExecutableTypePackage.PropertyLocalType> Property {
            get {
                return this.ContentField.Property;
            }
            set {
                this.ContentField.Property = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<ConnectionManagerType> ConnectionManager {
            get {
                return this.ContentField.ConnectionManager;
            }
            set {
                this.ContentField.ConnectionManager = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<ConfigurationType> Configuration {
            get {
                return this.ContentField.Configuration;
            }
            set {
                this.ContentField.Configuration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<LogProviderType> LogProvider {
            get {
                return this.ContentField.LogProvider;
            }
            set {
                this.ContentField.LogProvider = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<VariableType> Variable {
            get {
                return this.ContentField.Variable;
            }
            set {
                this.ContentField.Variable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual LoggingOptionsType LoggingOptions {
            get {
                return this.ContentField.LoggingOptions;
            }
            set {
                this.ContentField.LoggingOptions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyExpressionElementType> PropertyExpression {
            get {
                return this.ContentField.PropertyExpression;
            }
            set {
                this.ContentField.PropertyExpression = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<AnyNonPackageExecutableType> Executable1 {
            get {
                return this.ContentField.Executable;
            }
            set {
                this.ContentField.Executable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PrecedenceConstraintType> PrecedenceConstraint {
            get {
                return this.ContentField.PrecedenceConstraint;
            }
            set {
                this.ContentField.PrecedenceConstraint = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<EventHandlerType> EventHandler {
            get {
                return this.ContentField.EventHandler;
            }
            set {
                this.ContentField.EventHandler = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+, ConnectionManager*, Configuration*, LogProvider*, Variable*, LoggingOptions, PropertyExpression*, Executable*, PrecedenceConstraint*, EventHandler*, PackageVariable*)
        /// </para>
        /// </summary>
        public virtual IList<PackageVariableType> PackageVariable {
            get {
                return this.ContentField.PackageVariable;
            }
            set {
                this.ContentField.PackageVariable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ExecutableType {
            get {
                return this.ContentField.ExecutableType;
            }
            set {
                this.ContentField.ExecutableType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Executable Load(string xmlFile) {
            return XTypedServices.Load<Executable, ExecutableTypePackage>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Executable Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Executable, ExecutableTypePackage>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Executable Parse(string xml) {
            return XTypedServices.Parse<Executable, ExecutableTypePackage>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Executable(((ExecutableTypePackage)(this.Content.Clone())));
        }
        
        private void SetInnerType(ExecutableTypePackage ContentField) {
            this.ContentField = ((ExecutableTypePackage)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExecutableTypePackage", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ExecutableTypePackage));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnyNonPackageExecutableType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.AnyNonPackageExecutableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PackageVariableType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PackageVariableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConfigurationType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConfigurationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogProviderType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.LogProviderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PrecedenceConstraintType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PrecedenceConstraintType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PrecedenceConstraintExecutableReferenceType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PrecedenceConstraintExecutableReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LoggingOptionsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.LoggingOptionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LoggingOptionsPropertyElementType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.LoggingOptionsPropertyElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SelectedLogProviderType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.SelectedLogProviderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VariableType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.VariableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EventHandlerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.EventHandlerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ForEachEnumeratorType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ForEachEnumeratorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ForEachVariableMappingType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ForEachVariableMappingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExecutableObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ExecutableObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ASDdlDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ASDdlDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ASProcessingDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ASProcessingDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DMQueryTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.DMQueryTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DMQueryTaskQueryStringContainerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.DMQueryTaskQueryStringContainerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DMQueryBuilderSpecificationType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.DMQueryBuilderSpecificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataProfilingTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.DataProfilingTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExecutePackageTaskObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ExecutePackageTaskObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExecuteProcessDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ExecuteProcessDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FileSystemDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FileSystemDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FtpDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FtpDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScriptProjectObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ScriptProjectObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScriptProjectProjectItemType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ScriptProjectProjectItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScriptProjectBinaryItemType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ScriptProjectBinaryItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScriptProjectBreakpointType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ScriptProjectBreakpointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferDatabasesTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferDatabasesTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferErrorMessagesTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferErrorMessagesTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferJobsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferJobsTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferLoginsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferLoginsTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferStoredProceduresTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferStoredProceduresTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransferSqlServerObjectsTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.TransferSqlServerObjectsTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WMIDRTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.WMIDRTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WMIEWTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.WMIEWTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("XMLTaskDataObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.XMLTaskDataObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InnerObjectObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.InnerObjectObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("pipelineObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.pipelineObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelinePathsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelinePathsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentConnectionsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentConnectionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Test", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.Test));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentArrayElementsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentArrayElementsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentArrayElementType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentArrayElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentConnectionType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentConnectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputColumnsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputColumnsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputColumnType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputColumnPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputColumnPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentInputColumnPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentInputColumnPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputColumnPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputColumnPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputColumnPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputColumnPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentMetadataColumnPropertyType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentMetadataColumnPropertyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputColumnsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputColumnsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelineComponentOutputColumnType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelineComponentOutputColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PipelinePathType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PipelinePathType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogProviderObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.LogProviderObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ForEachEnumeratorObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ForEachEnumeratorObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEIEItemsType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEIEItemsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEIEItemType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEIEItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEIEItemValueType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEIEItemValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ForEachFileEnumeratorPropertiesType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ForEachFileEnumeratorPropertiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEEADOType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEEADOType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEESchemaRowsetType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEESchemaRowsetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RestrictionElementType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.RestrictionElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEEFVEType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEEFVEType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEENODELISTType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEENODELISTType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FEESMOType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FEESMOType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlatFileColumnType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FlatFileColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CacheColumnType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.CacheColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FtpConnectionType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.FtpConnectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HttpConnectionType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.HttpConnectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataMsmqConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataMsmqConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataSMOServerConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataSMOServerConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PasswordElementType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PasswordElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataSmtpConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataSmtpConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConnectionManagerObjectDataWmiConnectionManagerType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.ConnectionManagerObjectDataWmiConnectionManagerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropertyElementBaseType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PropertyElementBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropertyExpressionElementType", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.PropertyExpressionElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WSTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebServiceTaskDataMethodInfoType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataMethodInfoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebServiceTaskDataParamInfoType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataParamInfoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MessageQueueTaskType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SendMailTaskType", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AttachmentsElementType", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.AttachmentsElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ActiveXScriptTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Exec80PackageTaskType", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BulkInsertTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SelectedDatabasesType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SelectedDatabasesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OperatorNotifyListType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.OperatorNotifyListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskParameterBindingType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskParameterBindingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskResultBindingType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskResultBindingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BackupDestinationListType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.BackupDestinationListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementSqlTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementBackupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementCheckIntegrityTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementAgentJobTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementHistoryCleanupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementMaintenanceFileCleanupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementNotifyOperatorTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementRebuildIndexTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementReorganizeIndexTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementShrinkDatabaseTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementUpdateStatisticsTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskDataElementTSQLExecuteTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts"), typeof(global::Microsoft.SqlServer.Dts.Executable));
            elementDictionary.Add(System.Xml.Linq.XName.Get("WebServiceTaskData", "www.microsoft.com/sqlserver/dts/tasks/webservicetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MessageQueueTaskData", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SendMailTaskData", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ActiveXScriptTaskData", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Exec80PackageTaskData", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BulkInsertTaskData", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SqlTaskData", "www.microsoft.com/sqlserver/dts/tasks/sqltask"), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Executable), typeof(global::Microsoft.SqlServer.Dts.ExecutableTypePackage));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskDataType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType));
            wrapperDictionary.Add(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData), typeof(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Executable", "www.microsoft.com/SqlServer/Dts")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Executable Executable {  get {return rootObject as Executable; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Executable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Microsoft.SqlServer.Dts.Executable Executable {  get {return rootObject as global::Microsoft.SqlServer.Dts.Executable; } }

		public global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData WebServiceTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData MessageQueueTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData SendMailTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData ActiveXScriptTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData Exec80PackageTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData BulkInsertTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData; } }

		public global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData SqlTaskData {  get {return rootObject as global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Executable root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask.ActiveXScriptTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.WebServiceTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (MethodInfo)
    /// </para>
    /// </summary>
    public partial class WSTaskDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MethodInfoXName = System.Xml.Linq.XName.Get("MethodInfo", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionNameXName = System.Xml.Linq.XName.Get("ConnectionName", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceXName = System.Xml.Linq.XName.Get("Service", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WSDLFileXName = System.Xml.Linq.XName.Get("WSDLFile", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteWSDLFileXName = System.Xml.Linq.XName.Get("OverwriteWSDLFile", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputTypeXName = System.Xml.Linq.XName.Get("OutputType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputLocationXName = System.Xml.Linq.XName.Get("OutputLocation", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WSTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WSTaskDataType(XElement xe) { return XTypedServices.ToXTypedElement<WSTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WSTaskDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MethodInfoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MethodInfo)
        /// </para>
        /// </summary>
        public WSTaskDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MethodInfo)
        /// </para>
        /// </summary>
        public virtual WebServiceTaskDataMethodInfoType MethodInfo {
            get {
                XElement x = this.GetElement(MethodInfoXName);
                return ((WebServiceTaskDataMethodInfoType)(x));
            }
            set {
                this.SetElement(MethodInfoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionName {
            get {
                XAttribute x = this.Attribute(ConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Service {
            get {
                XAttribute x = this.Attribute(ServiceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ServiceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WSDLFile {
            get {
                XAttribute x = this.Attribute(WSDLFileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WSDLFileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType.OverwriteWSDLFileEnum? OverwriteWSDLFile {
            get {
                XAttribute x = this.Attribute(OverwriteWSDLFileXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType.OverwriteWSDLFileEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType.OverwriteWSDLFileEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OverwriteWSDLFileXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataOutputTypeEnum? OutputType {
            get {
                XAttribute x = this.Attribute(OutputTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataOutputTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataOutputTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OutputTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OutputLocation {
            get {
                XAttribute x = this.Attribute(OutputLocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OutputLocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WSTaskDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MethodInfoXName, typeof(WebServiceTaskDataMethodInfoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum OverwriteWSDLFileEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Documentation?, ParamInfo+)
    /// </para>
    /// </summary>
    public partial class WebServiceTaskDataMethodInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentationXName = System.Xml.Linq.XName.Get("Documentation", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParamInfoXName = System.Xml.Linq.XName.Get("ParamInfo", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebServiceTaskDataParamInfoType> ParamInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MethodNameXName = System.Xml.Linq.XName.Get("MethodName", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageNameXName = System.Xml.Linq.XName.Get("MessageName", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebServiceTaskDataMethodInfoType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WebServiceTaskDataMethodInfoType(XElement xe) { return XTypedServices.ToXTypedElement<WebServiceTaskDataMethodInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebServiceTaskDataMethodInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocumentationXName), new NamedContentModelEntity(ParamInfoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Documentation?, ParamInfo+)
        /// </para>
        /// </summary>
        public WebServiceTaskDataMethodInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Documentation?, ParamInfo+)
        /// </para>
        /// </summary>
        public virtual string Documentation {
            get {
                XElement x = this.GetElement(DocumentationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DocumentationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Documentation?, ParamInfo+)
        /// </para>
        /// </summary>
        public virtual IList<WebServiceTaskDataParamInfoType> ParamInfo {
            get {
                if ((this.ParamInfoField == null)) {
                    this.ParamInfoField = new XTypedList<WebServiceTaskDataParamInfoType>(this, LinqToXsdTypeManager.Instance, ParamInfoXName);
                }
                return this.ParamInfoField;
            }
            set {
                if ((value == null)) {
                    this.ParamInfoField = null;
                }
                else {
                    if ((this.ParamInfoField == null)) {
                        this.ParamInfoField = XTypedList<WebServiceTaskDataParamInfoType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParamInfoXName);
                    }
                    else {
                        XTypedServices.SetList<WebServiceTaskDataParamInfoType>(this.ParamInfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MethodName {
            get {
                XAttribute x = this.Attribute(MethodNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MethodNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MessageName {
            get {
                XAttribute x = this.Attribute(MessageNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebServiceTaskDataMethodInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocumentationXName, typeof(string));
            localElementDictionary.Add(ParamInfoXName, typeof(WebServiceTaskDataParamInfoType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VariableValue?, PrimitiveValue?)
    /// </para>
    /// </summary>
    public partial class WebServiceTaskDataParamInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableValueXName = System.Xml.Linq.XName.Get("VariableValue", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimitiveValueXName = System.Xml.Linq.XName.Get("PrimitiveValue", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatatypeXName = System.Xml.Linq.XName.Get("Datatype", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParamTypeXName = System.Xml.Linq.XName.Get("ParamType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeqNumberXName = System.Xml.Linq.XName.Get("SeqNumber", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebServiceTaskDataParamInfoType", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WebServiceTaskDataParamInfoType(XElement xe) { return XTypedServices.ToXTypedElement<WebServiceTaskDataParamInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebServiceTaskDataParamInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VariableValueXName), new NamedContentModelEntity(PrimitiveValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VariableValue?, PrimitiveValue?)
        /// </para>
        /// </summary>
        public WebServiceTaskDataParamInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VariableValue?, PrimitiveValue?)
        /// </para>
        /// </summary>
        public virtual string VariableValue {
            get {
                XElement x = this.GetElement(VariableValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(VariableValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VariableValue?, PrimitiveValue?)
        /// </para>
        /// </summary>
        public virtual string PrimitiveValue {
            get {
                XElement x = this.GetElement(PrimitiveValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetElement(PrimitiveValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Datatype {
            get {
                XAttribute x = this.Attribute(DatatypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DatatypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.ParamTypeEnum? ParamType {
            get {
                XAttribute x = this.Attribute(ParamTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.WebServiceTask.ParamTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.WebServiceTask.ParamTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ParamTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? SeqNumber {
            get {
                XAttribute x = this.Attribute(SeqNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SeqNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebServiceTaskDataParamInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VariableValueXName, typeof(string));
            localElementDictionary.Add(PrimitiveValueXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum WebServiceTaskDataOutputTypeEnum {
        
        File,
        
        Variable,
    }
    
    public sealed class WebServiceTaskDataOutputTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "File",
                        "Variable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WebServiceTaskDataOutputTypeEnumValidator() {
        }
    }
    
    public enum ParamTypeEnum {
        
        Variable,
        
        Primitive,
    }
    
    public sealed class ParamTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Variable",
                        "Primitive"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ParamTypeEnumValidator() {
        }
    }
    
    public partial class WebServiceTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WSTaskDataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebServiceTaskData", "www.microsoft.com/sqlserver/dts/tasks/webservicetask");
        
		public static explicit operator WebServiceTaskData(XElement xe) { return XTypedServices.ToXTypedElement<WebServiceTaskData, WSTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebServiceTaskData() {
            SetInnerType(new WSTaskDataType());
        }
        
        public WebServiceTaskData(WSTaskDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual WSTaskDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MethodInfo)
        /// </para>
        /// </summary>
        public virtual WebServiceTaskDataMethodInfoType MethodInfo {
            get {
                return this.ContentField.MethodInfo;
            }
            set {
                this.ContentField.MethodInfo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConnectionName {
            get {
                return this.ContentField.ConnectionName;
            }
            set {
                this.ContentField.ConnectionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Service {
            get {
                return this.ContentField.Service;
            }
            set {
                this.ContentField.Service = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WSDLFile {
            get {
                return this.ContentField.WSDLFile;
            }
            set {
                this.ContentField.WSDLFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WSTaskDataType.OverwriteWSDLFileEnum? OverwriteWSDLFile {
            get {
                return this.ContentField.OverwriteWSDLFile;
            }
            set {
                this.ContentField.OverwriteWSDLFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.WebServiceTask.WebServiceTaskDataOutputTypeEnum? OutputType {
            get {
                return this.ContentField.OutputType;
            }
            set {
                this.ContentField.OutputType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OutputLocation {
            get {
                return this.ContentField.OutputLocation;
            }
            set {
                this.ContentField.OutputLocation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static WebServiceTaskData Load(string xmlFile) {
            return XTypedServices.Load<WebServiceTaskData, WSTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static WebServiceTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<WebServiceTaskData, WSTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static WebServiceTaskData Parse(string xml) {
            return XTypedServices.Parse<WebServiceTaskData, WSTaskDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new WebServiceTaskData(((WSTaskDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(WSTaskDataType ContentField) {
            this.ContentField = ((WSTaskDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public WebServiceTaskData WebServiceTaskData {  get {return rootObject as WebServiceTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(WebServiceTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.MessageQueueTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    public partial class MessageQueueTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrentPackageIDXName = System.Xml.Linq.XName.Get("CurrentPackageID", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskDescriptionXName = System.Xml.Linq.XName.Get("TaskDescription", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataFileOverWritableXName = System.Xml.Linq.XName.Get("DataFileOverWritable", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTSMessageLineageIDXName = System.Xml.Linq.XName.Get("DTSMessageLineageID", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTSMessagePackageIDXName = System.Xml.Linq.XName.Get("DTSMessagePackageID", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTSMessageVersionIDXName = System.Xml.Linq.XName.Get("DTSMessageVersionID", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErrorIfMessageTimeOutXName = System.Xml.Linq.XName.Get("ErrorIfMessageTimeOut", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueuePathXName = System.Xml.Linq.XName.Get("QueuePath", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiveMessageTimeOutXName = System.Xml.Linq.XName.Get("ReceiveMessageTimeOut", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiveMessageTypeXName = System.Xml.Linq.XName.Get("ReceiveMessageType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveFromQueueXName = System.Xml.Linq.XName.Get("RemoveFromQueue", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaveDataFileNameXName = System.Xml.Linq.XName.Get("SaveDataFileName", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StringCompareTypeXName = System.Xml.Linq.XName.Get("StringCompareType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StringCompareValueXName = System.Xml.Linq.XName.Get("StringCompareValue", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StringMessageToVariableNameXName = System.Xml.Linq.XName.Get("StringMessageToVariableName", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiveVariableMessageXName = System.Xml.Linq.XName.Get("ReceiveVariableMessage", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskTypeXName = System.Xml.Linq.XName.Get("TaskType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseEncryptionXName = System.Xml.Linq.XName.Get("UseEncryption", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EncryptionAlgorithmXName = System.Xml.Linq.XName.Get("EncryptionAlgorithm", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Use2000FormatXName = System.Xml.Linq.XName.Get("Use2000Format", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataFileNameXName = System.Xml.Linq.XName.Get("DataFileName", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StringMessageXName = System.Xml.Linq.XName.Get("StringMessage", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VariableMessageXName = System.Xml.Linq.XName.Get("VariableMessage", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageTypeXName = System.Xml.Linq.XName.Get("MessageType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MessageQueueTaskType", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
		public static explicit operator MessageQueueTaskType(XElement xe) { return XTypedServices.ToXTypedElement<MessageQueueTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MessageQueueTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CurrentPackageID {
            get {
                XAttribute x = this.Attribute(CurrentPackageIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CurrentPackageIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskDescription {
            get {
                XAttribute x = this.Attribute(TaskDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.DataFileOverWritableEnum? DataFileOverWritable {
            get {
                XAttribute x = this.Attribute(DataFileOverWritableXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.DataFileOverWritableEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.DataFileOverWritableEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DataFileOverWritableXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessageLineageID {
            get {
                XAttribute x = this.Attribute(DTSMessageLineageIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTSMessageLineageIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessagePackageID {
            get {
                XAttribute x = this.Attribute(DTSMessagePackageIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTSMessagePackageIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessageVersionID {
            get {
                XAttribute x = this.Attribute(DTSMessageVersionIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTSMessageVersionIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.ErrorIfMessageTimeOutEnum? ErrorIfMessageTimeOut {
            get {
                XAttribute x = this.Attribute(ErrorIfMessageTimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.ErrorIfMessageTimeOutEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.ErrorIfMessageTimeOutEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ErrorIfMessageTimeOutXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueuePath {
            get {
                XAttribute x = this.Attribute(QueuePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueuePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ReceiveMessageTimeOut {
            get {
                XAttribute x = this.Attribute(ReceiveMessageTimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ReceiveMessageTimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum? ReceiveMessageType {
            get {
                XAttribute x = this.Attribute(ReceiveMessageTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ReceiveMessageTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.RemoveFromQueueEnum? RemoveFromQueue {
            get {
                XAttribute x = this.Attribute(RemoveFromQueueXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.RemoveFromQueueEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.RemoveFromQueueEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveFromQueueXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SaveDataFileName {
            get {
                XAttribute x = this.Attribute(SaveDataFileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SaveDataFileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQStringCompareTypeEnum? StringCompareType {
            get {
                XAttribute x = this.Attribute(StringCompareTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQStringCompareTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQStringCompareTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(StringCompareTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringCompareValue {
            get {
                XAttribute x = this.Attribute(StringCompareValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StringCompareValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringMessageToVariableName {
            get {
                XAttribute x = this.Attribute(StringMessageToVariableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StringMessageToVariableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiveVariableMessage {
            get {
                XAttribute x = this.Attribute(ReceiveVariableMessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiveVariableMessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQTaskTypeEnum? TaskType {
            get {
                XAttribute x = this.Attribute(TaskTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQTaskTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQTaskTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TaskTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.UseEncryptionEnum? UseEncryption {
            get {
                XAttribute x = this.Attribute(UseEncryptionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.UseEncryptionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.UseEncryptionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseEncryptionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQEncryptionAlgorithmEnum? EncryptionAlgorithm {
            get {
                XAttribute x = this.Attribute(EncryptionAlgorithmXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQEncryptionAlgorithmEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQEncryptionAlgorithmEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(EncryptionAlgorithmXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.Use2000FormatEnum? Use2000Format {
            get {
                XAttribute x = this.Attribute(Use2000FormatXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.Use2000FormatEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.Use2000FormatEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(Use2000FormatXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DataFileName {
            get {
                XAttribute x = this.Attribute(DataFileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DataFileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringMessage {
            get {
                XAttribute x = this.Attribute(StringMessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StringMessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VariableMessage {
            get {
                XAttribute x = this.Attribute(VariableMessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VariableMessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum? MessageType {
            get {
                XAttribute x = this.Attribute(MessageTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(MessageTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessageQueueTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum DataFileOverWritableEnum {
            
            False,
            
            True,
        }
        
        public enum ErrorIfMessageTimeOutEnum {
            
            False,
            
            True,
        }
        
        public enum RemoveFromQueueEnum {
            
            False,
            
            True,
        }
        
        public enum UseEncryptionEnum {
            
            False,
            
            True,
        }
        
        public enum Use2000FormatEnum {
            
            False,
            
            True,
        }
    }
    
    public enum MSMQStringCompareTypeEnum {
        
        DTSMQStringMessageCompare_Contains,
        
        DTSMQStringMessageCompare_Exact,
        
        DTSMQStringMessageCompare_IgnoreCase,
        
        DTSMQStringMessageCompare_None,
    }
    
    public sealed class MSMQStringCompareTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DTSMQStringMessageCompare_Contains",
                        "DTSMQStringMessageCompare_Exact",
                        "DTSMQStringMessageCompare_IgnoreCase",
                        "DTSMQStringMessageCompare_None"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MSMQStringCompareTypeEnumValidator() {
        }
    }
    
    public enum MSMQTaskTypeEnum {
        
        DTSMQType_Receiver,
        
        DTSMQType_Sender,
    }
    
    public sealed class MSMQTaskTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DTSMQType_Receiver",
                        "DTSMQType_Sender"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MSMQTaskTypeEnumValidator() {
        }
    }
    
    public enum MSMQMessageTypeEnum {
        
        DTSMQMessagType_StringMessageToVariable,
        
        DTSMQMessageType_DataFile,
        
        DTSMQMessageType_String,
        
        DTSMQMessageType_Variables,
    }
    
    public sealed class MSMQMessageTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DTSMQMessagType_StringMessageToVariable",
                        "DTSMQMessageType_DataFile",
                        "DTSMQMessageType_String",
                        "DTSMQMessageType_Variables"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MSMQMessageTypeEnumValidator() {
        }
    }
    
    public enum MSMQEncryptionAlgorithmEnum {
        
        Rc2,
        
        Rc4,
    }
    
    public sealed class MSMQEncryptionAlgorithmEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Rc2",
                        "Rc4"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MSMQEncryptionAlgorithmEnumValidator() {
        }
    }
    
    public partial class MessageQueueTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MessageQueueTaskType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MessageQueueTaskData", "www.microsoft.com/sqlserver/dts/tasks/messagequeuetask");
        
		public static explicit operator MessageQueueTaskData(XElement xe) { return XTypedServices.ToXTypedElement<MessageQueueTaskData, MessageQueueTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MessageQueueTaskData() {
            SetInnerType(new MessageQueueTaskType());
        }
        
        public MessageQueueTaskData(MessageQueueTaskType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual MessageQueueTaskType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CurrentPackageID {
            get {
                return this.ContentField.CurrentPackageID;
            }
            set {
                this.ContentField.CurrentPackageID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskDescription {
            get {
                return this.ContentField.TaskDescription;
            }
            set {
                this.ContentField.TaskDescription = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.DataFileOverWritableEnum? DataFileOverWritable {
            get {
                return this.ContentField.DataFileOverWritable;
            }
            set {
                this.ContentField.DataFileOverWritable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessageLineageID {
            get {
                return this.ContentField.DTSMessageLineageID;
            }
            set {
                this.ContentField.DTSMessageLineageID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessagePackageID {
            get {
                return this.ContentField.DTSMessagePackageID;
            }
            set {
                this.ContentField.DTSMessagePackageID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTSMessageVersionID {
            get {
                return this.ContentField.DTSMessageVersionID;
            }
            set {
                this.ContentField.DTSMessageVersionID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.ErrorIfMessageTimeOutEnum? ErrorIfMessageTimeOut {
            get {
                return this.ContentField.ErrorIfMessageTimeOut;
            }
            set {
                this.ContentField.ErrorIfMessageTimeOut = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueuePath {
            get {
                return this.ContentField.QueuePath;
            }
            set {
                this.ContentField.QueuePath = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ReceiveMessageTimeOut {
            get {
                return this.ContentField.ReceiveMessageTimeOut;
            }
            set {
                this.ContentField.ReceiveMessageTimeOut = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum? ReceiveMessageType {
            get {
                return this.ContentField.ReceiveMessageType;
            }
            set {
                this.ContentField.ReceiveMessageType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.RemoveFromQueueEnum? RemoveFromQueue {
            get {
                return this.ContentField.RemoveFromQueue;
            }
            set {
                this.ContentField.RemoveFromQueue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SaveDataFileName {
            get {
                return this.ContentField.SaveDataFileName;
            }
            set {
                this.ContentField.SaveDataFileName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQStringCompareTypeEnum? StringCompareType {
            get {
                return this.ContentField.StringCompareType;
            }
            set {
                this.ContentField.StringCompareType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringCompareValue {
            get {
                return this.ContentField.StringCompareValue;
            }
            set {
                this.ContentField.StringCompareValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringMessageToVariableName {
            get {
                return this.ContentField.StringMessageToVariableName;
            }
            set {
                this.ContentField.StringMessageToVariableName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiveVariableMessage {
            get {
                return this.ContentField.ReceiveVariableMessage;
            }
            set {
                this.ContentField.ReceiveVariableMessage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQTaskTypeEnum? TaskType {
            get {
                return this.ContentField.TaskType;
            }
            set {
                this.ContentField.TaskType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.UseEncryptionEnum? UseEncryption {
            get {
                return this.ContentField.UseEncryption;
            }
            set {
                this.ContentField.UseEncryption = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQEncryptionAlgorithmEnum? EncryptionAlgorithm {
            get {
                return this.ContentField.EncryptionAlgorithm;
            }
            set {
                this.ContentField.EncryptionAlgorithm = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MessageQueueTaskType.Use2000FormatEnum? Use2000Format {
            get {
                return this.ContentField.Use2000Format;
            }
            set {
                this.ContentField.Use2000Format = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DataFileName {
            get {
                return this.ContentField.DataFileName;
            }
            set {
                this.ContentField.DataFileName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StringMessage {
            get {
                return this.ContentField.StringMessage;
            }
            set {
                this.ContentField.StringMessage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VariableMessage {
            get {
                return this.ContentField.VariableMessage;
            }
            set {
                this.ContentField.VariableMessage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.MessageQueueTask.MSMQMessageTypeEnum? MessageType {
            get {
                return this.ContentField.MessageType;
            }
            set {
                this.ContentField.MessageType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MessageQueueTaskData Load(string xmlFile) {
            return XTypedServices.Load<MessageQueueTaskData, MessageQueueTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageQueueTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MessageQueueTaskData, MessageQueueTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MessageQueueTaskData Parse(string xml) {
            return XTypedServices.Parse<MessageQueueTaskData, MessageQueueTaskType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MessageQueueTaskData(((MessageQueueTaskType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MessageQueueTaskType ContentField) {
            this.ContentField = ((MessageQueueTaskType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public MessageQueueTaskData MessageQueueTaskData {  get {return rootObject as MessageQueueTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(MessageQueueTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.SendMailTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Attachments?)
    /// </para>
    /// </summary>
    public partial class SendMailTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AttachmentsXName = System.Xml.Linq.XName.Get("Attachments", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SMTPServerXName = System.Xml.Linq.XName.Get("SMTPServer", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromXName = System.Xml.Linq.XName.Get("From", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToXName = System.Xml.Linq.XName.Get("To", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CCXName = System.Xml.Linq.XName.Get("CC", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BCCXName = System.Xml.Linq.XName.Get("BCC", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubjectXName = System.Xml.Linq.XName.Get("Subject", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PriorityXName = System.Xml.Linq.XName.Get("Priority", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageSourceTypeXName = System.Xml.Linq.XName.Get("MessageSourceType", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageSourceXName = System.Xml.Linq.XName.Get("MessageSource", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SendMailTaskType", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SendMailTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SendMailTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SendMailTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AttachmentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Attachments?)
        /// </para>
        /// </summary>
        public SendMailTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Attachments?)
        /// </para>
        /// </summary>
        public virtual AttachmentsElementType Attachments {
            get {
                XElement x = this.GetElement(AttachmentsXName);
                return ((AttachmentsElementType)(x));
            }
            set {
                this.SetElement(AttachmentsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SMTPServer {
            get {
                XAttribute x = this.Attribute(SMTPServerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SMTPServerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string From {
            get {
                XAttribute x = this.Attribute(FromXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string To {
            get {
                XAttribute x = this.Attribute(ToXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CC {
            get {
                XAttribute x = this.Attribute(CCXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CCXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BCC {
            get {
                XAttribute x = this.Attribute(BCCXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BCCXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                XAttribute x = this.Attribute(SubjectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SubjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailPriorityEnum? Priority {
            get {
                XAttribute x = this.Attribute(PriorityXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailPriorityEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailPriorityEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(PriorityXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? MessageSourceType {
            get {
                XAttribute x = this.Attribute(MessageSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(MessageSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MessageSource {
            get {
                XAttribute x = this.Attribute(MessageSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SendMailTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AttachmentsXName, typeof(AttachmentsElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum SendMailPriorityEnum {
        
        High,
        
        Low,
        
        Normal,
    }
    
    public sealed class SendMailPriorityEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "High",
                        "Low",
                        "Normal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SendMailPriorityEnumValidator() {
        }
    }
    
    public partial class AttachmentsElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileNameXName = System.Xml.Linq.XName.Get("FileName", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AttachmentsElementType", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
		public static explicit operator AttachmentsElementType(XElement xe) { return XTypedServices.ToXTypedElement<AttachmentsElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AttachmentsElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileName {
            get {
                XAttribute x = this.Attribute(FileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttachmentsElementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SendMailTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SendMailTaskType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SendMailTaskData", "www.microsoft.com/sqlserver/dts/tasks/sendmailtask");
        
		public static explicit operator SendMailTaskData(XElement xe) { return XTypedServices.ToXTypedElement<SendMailTaskData, SendMailTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SendMailTaskData() {
            SetInnerType(new SendMailTaskType());
        }
        
        public SendMailTaskData(SendMailTaskType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual SendMailTaskType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Attachments?)
        /// </para>
        /// </summary>
        public virtual AttachmentsElementType Attachments {
            get {
                return this.ContentField.Attachments;
            }
            set {
                this.ContentField.Attachments = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SMTPServer {
            get {
                return this.ContentField.SMTPServer;
            }
            set {
                this.ContentField.SMTPServer = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string From {
            get {
                return this.ContentField.From;
            }
            set {
                this.ContentField.From = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string To {
            get {
                return this.ContentField.To;
            }
            set {
                this.ContentField.To = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CC {
            get {
                return this.ContentField.CC;
            }
            set {
                this.ContentField.CC = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BCC {
            get {
                return this.ContentField.BCC;
            }
            set {
                this.ContentField.BCC = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                return this.ContentField.Subject;
            }
            set {
                this.ContentField.Subject = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailPriorityEnum? Priority {
            get {
                return this.ContentField.Priority;
            }
            set {
                this.ContentField.Priority = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? MessageSourceType {
            get {
                return this.ContentField.MessageSourceType;
            }
            set {
                this.ContentField.MessageSourceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MessageSource {
            get {
                return this.ContentField.MessageSource;
            }
            set {
                this.ContentField.MessageSource = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SendMailTaskData Load(string xmlFile) {
            return XTypedServices.Load<SendMailTaskData, SendMailTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SendMailTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SendMailTaskData, SendMailTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SendMailTaskData Parse(string xml) {
            return XTypedServices.Parse<SendMailTaskData, SendMailTaskType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SendMailTaskData(((SendMailTaskType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SendMailTaskType ContentField) {
            this.ContentField = ((SendMailTaskType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public SendMailTaskData SendMailTaskData {  get {return rootObject as SendMailTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(SendMailTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.ActiveXScriptTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    public partial class ActiveXScriptTaskDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptingLanguageXName = System.Xml.Linq.XName.Get("ScriptingLanguage", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptTextXName = System.Xml.Linq.XName.Get("ScriptText", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntryMethodXName = System.Xml.Linq.XName.Get("EntryMethod", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActiveXScriptTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
		public static explicit operator ActiveXScriptTaskDataType(XElement xe) { return XTypedServices.ToXTypedElement<ActiveXScriptTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ActiveXScriptTaskDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptingLanguage {
            get {
                XAttribute x = this.Attribute(ScriptingLanguageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScriptingLanguageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptText {
            get {
                XAttribute x = this.Attribute(ScriptTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScriptTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EntryMethod {
            get {
                XAttribute x = this.Attribute(EntryMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EntryMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ActiveXScriptTaskDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ScriptingLanguageEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "VBScript",
                        "JScript.Compact",
                        "JScript"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ScriptingLanguageEnum() {
        }
    }
    
    public partial class ActiveXScriptTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActiveXScriptTaskDataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActiveXScriptTaskData", "www.microsoft.com/sqlserver/dts/tasks/activexscripttask");
        
		public static explicit operator ActiveXScriptTaskData(XElement xe) { return XTypedServices.ToXTypedElement<ActiveXScriptTaskData, ActiveXScriptTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ActiveXScriptTaskData() {
            SetInnerType(new ActiveXScriptTaskDataType());
        }
        
        public ActiveXScriptTaskData(ActiveXScriptTaskDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ActiveXScriptTaskDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptingLanguage {
            get {
                return this.ContentField.ScriptingLanguage;
            }
            set {
                this.ContentField.ScriptingLanguage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptText {
            get {
                return this.ContentField.ScriptText;
            }
            set {
                this.ContentField.ScriptText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EntryMethod {
            get {
                return this.ContentField.EntryMethod;
            }
            set {
                this.ContentField.EntryMethod = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ActiveXScriptTaskData Load(string xmlFile) {
            return XTypedServices.Load<ActiveXScriptTaskData, ActiveXScriptTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ActiveXScriptTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ActiveXScriptTaskData, ActiveXScriptTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ActiveXScriptTaskData Parse(string xml) {
            return XTypedServices.Parse<ActiveXScriptTaskData, ActiveXScriptTaskDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ActiveXScriptTaskData(((ActiveXScriptTaskDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ActiveXScriptTaskDataType ContentField) {
            this.ContentField = ((ActiveXScriptTaskDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public ActiveXScriptTaskData ActiveXScriptTaskData {  get {return rootObject as ActiveXScriptTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(ActiveXScriptTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (DTS2000Package?)
    /// </para>
    /// </summary>
    public partial class Exec80PackageTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTS2000PackageXName = System.Xml.Linq.XName.Get("DTS2000Package", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageNameXName = System.Xml.Linq.XName.Get("PackageName", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageIDXName = System.Xml.Linq.XName.Get("PackageID", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PackageVersionGUIDXName = System.Xml.Linq.XName.Get("PackageVersionGUID", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SQLServerXName = System.Xml.Linq.XName.Get("SQLServer", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SQLUsernameXName = System.Xml.Linq.XName.Get("SQLUsername", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WindowsAuthenticationXName = System.Xml.Linq.XName.Get("WindowsAuthentication", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilenameXName = System.Xml.Linq.XName.Get("Filename", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerGlobalVariablesXName = System.Xml.Linq.XName.Get("InnerGlobalVariables", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OuterGlobalVariablesXName = System.Xml.Linq.XName.Get("OuterGlobalVariables", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exec80PackageTaskType", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Exec80PackageTaskType(XElement xe) { return XTypedServices.ToXTypedElement<Exec80PackageTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Exec80PackageTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DTS2000PackageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DTS2000Package?)
        /// </para>
        /// </summary>
        public Exec80PackageTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DTS2000Package?)
        /// </para>
        /// </summary>
        public virtual byte[] DTS2000Package {
            get {
                XElement x = this.GetElement(DTS2000PackageXName);
                return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
            set {
                this.SetElement(DTS2000PackageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskLocationEnum? Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskLocationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskLocationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(LocationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageName {
            get {
                XAttribute x = this.Attribute(PackageNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PackageNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageID {
            get {
                XAttribute x = this.Attribute(PackageIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PackageIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageVersionGUID {
            get {
                XAttribute x = this.Attribute(PackageVersionGUIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PackageVersionGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SQLServer {
            get {
                XAttribute x = this.Attribute(SQLServerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SQLServerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SQLUsername {
            get {
                XAttribute x = this.Attribute(SQLUsernameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SQLUsernameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType.WindowsAuthenticationEnum? WindowsAuthentication {
            get {
                XAttribute x = this.Attribute(WindowsAuthenticationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType.WindowsAuthenticationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType.WindowsAuthenticationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(WindowsAuthenticationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Filename {
            get {
                XAttribute x = this.Attribute(FilenameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilenameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InnerGlobalVariables {
            get {
                XAttribute x = this.Attribute(InnerGlobalVariablesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InnerGlobalVariablesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OuterGlobalVariables {
            get {
                XAttribute x = this.Attribute(OuterGlobalVariablesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OuterGlobalVariablesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Exec80PackageTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DTS2000PackageXName, typeof(byte[]));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum WindowsAuthenticationEnum {
            
            True,
            
            False,
        }
    }
    
    public enum Exec80PackageTaskLocationEnum {
        
        SqlServer,
        
        EmbeddedInTask,
        
        StorageFile,
    }
    
    public sealed class Exec80PackageTaskLocationEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SqlServer",
                        "EmbeddedInTask",
                        "StorageFile"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Exec80PackageTaskLocationEnumValidator() {
        }
    }
    
    public partial class Exec80PackageTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Exec80PackageTaskType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exec80PackageTaskData", "www.microsoft.com/sqlserver/dts/tasks/exec80packagetask");
        
		public static explicit operator Exec80PackageTaskData(XElement xe) { return XTypedServices.ToXTypedElement<Exec80PackageTaskData, Exec80PackageTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Exec80PackageTaskData() {
            SetInnerType(new Exec80PackageTaskType());
        }
        
        public Exec80PackageTaskData(Exec80PackageTaskType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual Exec80PackageTaskType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DTS2000Package?)
        /// </para>
        /// </summary>
        public virtual byte[] DTS2000Package {
            get {
                return this.ContentField.DTS2000Package;
            }
            set {
                this.ContentField.DTS2000Package = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskLocationEnum? Location {
            get {
                return this.ContentField.Location;
            }
            set {
                this.ContentField.Location = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageName {
            get {
                return this.ContentField.PackageName;
            }
            set {
                this.ContentField.PackageName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageID {
            get {
                return this.ContentField.PackageID;
            }
            set {
                this.ContentField.PackageID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PackageVersionGUID {
            get {
                return this.ContentField.PackageVersionGUID;
            }
            set {
                this.ContentField.PackageVersionGUID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SQLServer {
            get {
                return this.ContentField.SQLServer;
            }
            set {
                this.ContentField.SQLServer = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SQLUsername {
            get {
                return this.ContentField.SQLUsername;
            }
            set {
                this.ContentField.SQLUsername = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Exec80PackageTask.Exec80PackageTaskType.WindowsAuthenticationEnum? WindowsAuthentication {
            get {
                return this.ContentField.WindowsAuthentication;
            }
            set {
                this.ContentField.WindowsAuthentication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Filename {
            get {
                return this.ContentField.Filename;
            }
            set {
                this.ContentField.Filename = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InnerGlobalVariables {
            get {
                return this.ContentField.InnerGlobalVariables;
            }
            set {
                this.ContentField.InnerGlobalVariables = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OuterGlobalVariables {
            get {
                return this.ContentField.OuterGlobalVariables;
            }
            set {
                this.ContentField.OuterGlobalVariables = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Exec80PackageTaskData Load(string xmlFile) {
            return XTypedServices.Load<Exec80PackageTaskData, Exec80PackageTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Exec80PackageTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Exec80PackageTaskData, Exec80PackageTaskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Exec80PackageTaskData Parse(string xml) {
            return XTypedServices.Parse<Exec80PackageTaskData, Exec80PackageTaskType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Exec80PackageTaskData(((Exec80PackageTaskType)(this.Content.Clone())));
        }
        
        private void SetInnerType(Exec80PackageTaskType ContentField) {
            this.ContentField = ((Exec80PackageTaskType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Exec80PackageTaskData Exec80PackageTaskData {  get {return rootObject as Exec80PackageTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Exec80PackageTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.BulkInsertTask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    public partial class BulkInsertTaskDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BatchSizeXName = System.Xml.Linq.XName.Get("BatchSize", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CheckConstraintsXName = System.Xml.Linq.XName.Get("CheckConstraints", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceConnectionNameXName = System.Xml.Linq.XName.Get("SourceConnectionName", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationConnectionNameXName = System.Xml.Linq.XName.Get("DestinationConnectionName", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataFileTypeXName = System.Xml.Linq.XName.Get("DataFileType", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DestinationTableNameXName = System.Xml.Linq.XName.Get("DestinationTableName", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FirstRowXName = System.Xml.Linq.XName.Get("FirstRow", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LastRowXName = System.Xml.Linq.XName.Get("LastRow", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseFormatFileXName = System.Xml.Linq.XName.Get("UseFormatFile", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatFileXName = System.Xml.Linq.XName.Get("FormatFile", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortedDataXName = System.Xml.Linq.XName.Get("SortedData", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TableLockXName = System.Xml.Linq.XName.Get("TableLock", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeepIdentityXName = System.Xml.Linq.XName.Get("KeepIdentity", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeepNullsXName = System.Xml.Linq.XName.Get("KeepNulls", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldTerminatorXName = System.Xml.Linq.XName.Get("FieldTerminator", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowTerminatorXName = System.Xml.Linq.XName.Get("RowTerminator", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FireTriggersXName = System.Xml.Linq.XName.Get("FireTriggers", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaximumErrorsXName = System.Xml.Linq.XName.Get("MaximumErrors", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BulkInsertTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
		public static explicit operator BulkInsertTaskDataType(XElement xe) { return XTypedServices.ToXTypedElement<BulkInsertTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BulkInsertTaskDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object BatchSize {
            get {
                XAttribute x = this.Attribute(BatchSizeXName);
                return XTypedServices.ParseUnionValue(x, global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.CodePageType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "BatchSize", this, BatchSizeXName, global::Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.CodePageType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.CheckConstraintsEnum? CheckConstraints {
            get {
                XAttribute x = this.Attribute(CheckConstraintsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.CheckConstraintsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.CheckConstraintsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CheckConstraintsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnectionName {
            get {
                XAttribute x = this.Attribute(SourceConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnectionName {
            get {
                XAttribute x = this.Attribute(DestinationConnectionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationConnectionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.DataFileTypeEnum? DataFileType {
            get {
                XAttribute x = this.Attribute(DataFileTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.DataFileTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.DataFileTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DataFileTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationTableName {
            get {
                XAttribute x = this.Attribute(DestinationTableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DestinationTableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? FirstRow {
            get {
                XAttribute x = this.Attribute(FirstRowXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(FirstRowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? LastRow {
            get {
                XAttribute x = this.Attribute(LastRowXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LastRowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.UseFormatFileEnum? UseFormatFile {
            get {
                XAttribute x = this.Attribute(UseFormatFileXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.UseFormatFileEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.UseFormatFileEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseFormatFileXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FormatFile {
            get {
                XAttribute x = this.Attribute(FormatFileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FormatFileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SortedData {
            get {
                XAttribute x = this.Attribute(SortedDataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SortedDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.TableLockEnum? TableLock {
            get {
                XAttribute x = this.Attribute(TableLockXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.TableLockEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.TableLockEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TableLockXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepIdentityEnum? KeepIdentity {
            get {
                XAttribute x = this.Attribute(KeepIdentityXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepIdentityEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepIdentityEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(KeepIdentityXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepNullsEnum? KeepNulls {
            get {
                XAttribute x = this.Attribute(KeepNullsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepNullsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepNullsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(KeepNullsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldTerminator {
            get {
                XAttribute x = this.Attribute(FieldTerminatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldTerminatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RowTerminator {
            get {
                XAttribute x = this.Attribute(RowTerminatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RowTerminatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.FireTriggersEnum? FireTriggers {
            get {
                XAttribute x = this.Attribute(FireTriggersXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.FireTriggersEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.FireTriggersEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(FireTriggersXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? MaximumErrors {
            get {
                XAttribute x = this.Attribute(MaximumErrorsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(MaximumErrorsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BulkInsertTaskDataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum CheckConstraintsEnum {
            
            True,
            
            False,
        }
        
        public enum UseFormatFileEnum {
            
            True,
            
            False,
        }
        
        public enum TableLockEnum {
            
            True,
            
            False,
        }
        
        public enum KeepIdentityEnum {
            
            True,
            
            False,
        }
        
        public enum KeepNullsEnum {
            
            True,
            
            False,
        }
        
        public enum FireTriggersEnum {
            
            True,
            
            False,
        }
    }
    
    public enum DataFileTypeEnum {
        
        DTSBulkInsert_DataFileType_Char,
        
        DTSBulkInsert_DataFileType_Native,
        
        DTSBulkInsert_DataFileType_WideChar,
        
        DTSBulkInsert_DataFileType_WideNative,
    }
    
    public sealed class DataFileTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DTSBulkInsert_DataFileType_Char",
                        "DTSBulkInsert_DataFileType_Native",
                        "DTSBulkInsert_DataFileType_WideChar",
                        "DTSBulkInsert_DataFileType_WideNative"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DataFileTypeEnumValidator() {
        }
    }
    
    public sealed class CodePageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "ACP",
                                    "OEM",
                                    "RAW"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private CodePageType() {
        }
    }
    
    public sealed class BulkInsertTaskTerminatorEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "{CR}{LF}",
                        "{CR}",
                        "{LF}",
                        "Semicolon {;}",
                        "Comma {,}",
                        "Tab",
                        "Vertical Bar {|}"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BulkInsertTaskTerminatorEnum() {
        }
    }
    
    public partial class BulkInsertTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BulkInsertTaskDataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BulkInsertTaskData", "www.microsoft.com/sqlserver/dts/tasks/bulkinserttask");
        
		public static explicit operator BulkInsertTaskData(XElement xe) { return XTypedServices.ToXTypedElement<BulkInsertTaskData, BulkInsertTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BulkInsertTaskData() {
            SetInnerType(new BulkInsertTaskDataType());
        }
        
        public BulkInsertTaskData(BulkInsertTaskDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual BulkInsertTaskDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object BatchSize {
            get {
                return this.ContentField.BatchSize;
            }
            set {
                this.ContentField.BatchSize = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.CheckConstraintsEnum? CheckConstraints {
            get {
                return this.ContentField.CheckConstraints;
            }
            set {
                this.ContentField.CheckConstraints = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CodePage {
            get {
                return this.ContentField.CodePage;
            }
            set {
                this.ContentField.CodePage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceConnectionName {
            get {
                return this.ContentField.SourceConnectionName;
            }
            set {
                this.ContentField.SourceConnectionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationConnectionName {
            get {
                return this.ContentField.DestinationConnectionName;
            }
            set {
                this.ContentField.DestinationConnectionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.DataFileTypeEnum? DataFileType {
            get {
                return this.ContentField.DataFileType;
            }
            set {
                this.ContentField.DataFileType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DestinationTableName {
            get {
                return this.ContentField.DestinationTableName;
            }
            set {
                this.ContentField.DestinationTableName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? FirstRow {
            get {
                return this.ContentField.FirstRow;
            }
            set {
                this.ContentField.FirstRow = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? LastRow {
            get {
                return this.ContentField.LastRow;
            }
            set {
                this.ContentField.LastRow = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.UseFormatFileEnum? UseFormatFile {
            get {
                return this.ContentField.UseFormatFile;
            }
            set {
                this.ContentField.UseFormatFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FormatFile {
            get {
                return this.ContentField.FormatFile;
            }
            set {
                this.ContentField.FormatFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SortedData {
            get {
                return this.ContentField.SortedData;
            }
            set {
                this.ContentField.SortedData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.TableLockEnum? TableLock {
            get {
                return this.ContentField.TableLock;
            }
            set {
                this.ContentField.TableLock = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepIdentityEnum? KeepIdentity {
            get {
                return this.ContentField.KeepIdentity;
            }
            set {
                this.ContentField.KeepIdentity = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.KeepNullsEnum? KeepNulls {
            get {
                return this.ContentField.KeepNulls;
            }
            set {
                this.ContentField.KeepNulls = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldTerminator {
            get {
                return this.ContentField.FieldTerminator;
            }
            set {
                this.ContentField.FieldTerminator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RowTerminator {
            get {
                return this.ContentField.RowTerminator;
            }
            set {
                this.ContentField.RowTerminator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.BulkInsertTask.BulkInsertTaskDataType.FireTriggersEnum? FireTriggers {
            get {
                return this.ContentField.FireTriggers;
            }
            set {
                this.ContentField.FireTriggers = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? MaximumErrors {
            get {
                return this.ContentField.MaximumErrors;
            }
            set {
                this.ContentField.MaximumErrors = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BulkInsertTaskData Load(string xmlFile) {
            return XTypedServices.Load<BulkInsertTaskData, BulkInsertTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BulkInsertTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BulkInsertTaskData, BulkInsertTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BulkInsertTaskData Parse(string xml) {
            return XTypedServices.Parse<BulkInsertTaskData, BulkInsertTaskDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new BulkInsertTaskData(((BulkInsertTaskDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(BulkInsertTaskDataType ContentField) {
            this.ContentField = ((BulkInsertTaskDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public BulkInsertTaskData BulkInsertTaskData {  get {return rootObject as BulkInsertTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(BulkInsertTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace Microsoft.SqlServer.Dts.Tasks.Sqltask {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Microsoft.SqlServer.Dts;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperatorNotifyListXName = System.Xml.Linq.XName.Get("OperatorNotifyList", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OperatorNotifyListType> OperatorNotifyListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterBindingXName = System.Xml.Linq.XName.Get("ParameterBinding", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SqlTaskParameterBindingType> ParameterBindingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultBindingXName = System.Xml.Linq.XName.Get("ResultBinding", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationListXName = System.Xml.Linq.XName.Get("BackupDestinationList", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BackupDestinationListType> BackupDestinationListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupActionXName = System.Xml.Linq.XName.Get("BackupAction", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupIsIncrementalXName = System.Xml.Linq.XName.Get("BackupIsIncremental", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupFileGroupsFilesXName = System.Xml.Linq.XName.Get("BackupFileGroupsFiles", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDeviceTypeXName = System.Xml.Linq.XName.Get("BackupDeviceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupPhisycalDestinationTypeXName = System.Xml.Linq.XName.Get("BackupPhisycalDestinationType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationTypeXName = System.Xml.Linq.XName.Get("BackupDestinationType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationAutoFolderPathXName = System.Xml.Linq.XName.Get("BackupDestinationAutoFolderPath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupActionForExistingBackupsXName = System.Xml.Linq.XName.Get("BackupActionForExistingBackups", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupCreateSubFolderXName = System.Xml.Linq.XName.Get("BackupCreateSubFolder", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupFileExtensionXName = System.Xml.Linq.XName.Get("BackupFileExtension", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupVerifyIntegrityXName = System.Xml.Linq.XName.Get("BackupVerifyIntegrity", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExpireDateXName = System.Xml.Linq.XName.Get("ExpireDate", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetainDaysXName = System.Xml.Linq.XName.Get("RetainDays", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InDaysXName = System.Xml.Linq.XName.Get("InDays", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseExpirationXName = System.Xml.Linq.XName.Get("UseExpiration", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupCompressionActionXName = System.Xml.Linq.XName.Get("BackupCompressionAction", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupTailLogXName = System.Xml.Linq.XName.Get("BackupTailLog", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeIndexesXName = System.Xml.Linq.XName.Get("IncludeIndexes", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgentJobIDXName = System.Xml.Linq.XName.Get("AgentJobID", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveBackupRestoreHistoryXName = System.Xml.Linq.XName.Get("RemoveBackupRestoreHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveAgentHistoryXName = System.Xml.Linq.XName.Get("RemoveAgentHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveDbMaintHistoryXName = System.Xml.Linq.XName.Get("RemoveDbMaintHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileTypeSelectedXName = System.Xml.Linq.XName.Get("FileTypeSelected", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilePathXName = System.Xml.Linq.XName.Get("FilePath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderPathXName = System.Xml.Linq.XName.Get("FolderPath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CleanSubFoldersXName = System.Xml.Linq.XName.Get("CleanSubFolders", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileExtensionXName = System.Xml.Linq.XName.Get("FileExtension", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgeBasedXName = System.Xml.Linq.XName.Get("AgeBased", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeleteSpecificFileXName = System.Xml.Linq.XName.Get("DeleteSpecificFile", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageXName = System.Xml.Linq.XName.Get("Message", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfileXName = System.Xml.Linq.XName.Get("Profile", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubjectXName = System.Xml.Linq.XName.Get("Subject", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseOriginalAmountXName = System.Xml.Linq.XName.Get("UseOriginalAmount", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PercentageXName = System.Xml.Linq.XName.Get("Percentage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortXName = System.Xml.Linq.XName.Get("Sort", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeepOnlineXName = System.Xml.Linq.XName.Get("KeepOnline", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompactLargeObjectsXName = System.Xml.Linq.XName.Get("CompactLargeObjects", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSizeLimitXName = System.Xml.Linq.XName.Get("DatabaseSizeLimit", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabasePercentLimitXName = System.Xml.Linq.XName.Get("DatabasePercentLimit", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseReturnFreeSpaceXName = System.Xml.Linq.XName.Get("DatabaseReturnFreeSpace", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateStatisticsTypeXName = System.Xml.Linq.XName.Get("UpdateStatisticsType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateScanTypeXName = System.Xml.Linq.XName.Get("UpdateScanType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateSampleValueXName = System.Xml.Linq.XName.Get("UpdateSampleValue", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveOlderThanXName = System.Xml.Linq.XName.Get("RemoveOlderThan", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeUnitsTypeXName = System.Xml.Linq.XName.Get("TimeUnitsType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName), new NamedContentModelEntity(OperatorNotifyListXName), new NamedContentModelEntity(ParameterBindingXName), new NamedContentModelEntity(ResultBindingXName), new NamedContentModelEntity(BackupDestinationListXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public SqlTaskDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<OperatorNotifyListType> OperatorNotifyList {
            get {
                if ((this.OperatorNotifyListField == null)) {
                    this.OperatorNotifyListField = new XTypedList<OperatorNotifyListType>(this, LinqToXsdTypeManager.Instance, OperatorNotifyListXName);
                }
                return this.OperatorNotifyListField;
            }
            set {
                if ((value == null)) {
                    this.OperatorNotifyListField = null;
                }
                else {
                    if ((this.OperatorNotifyListField == null)) {
                        this.OperatorNotifyListField = XTypedList<OperatorNotifyListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OperatorNotifyListXName);
                    }
                    else {
                        XTypedServices.SetList<OperatorNotifyListType>(this.OperatorNotifyListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<SqlTaskParameterBindingType> ParameterBinding {
            get {
                if ((this.ParameterBindingField == null)) {
                    this.ParameterBindingField = new XTypedList<SqlTaskParameterBindingType>(this, LinqToXsdTypeManager.Instance, ParameterBindingXName);
                }
                return this.ParameterBindingField;
            }
            set {
                if ((value == null)) {
                    this.ParameterBindingField = null;
                }
                else {
                    if ((this.ParameterBindingField == null)) {
                        this.ParameterBindingField = XTypedList<SqlTaskParameterBindingType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterBindingXName);
                    }
                    else {
                        XTypedServices.SetList<SqlTaskParameterBindingType>(this.ParameterBindingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual SqlTaskResultBindingType ResultBinding {
            get {
                XElement x = this.GetElement(ResultBindingXName);
                return ((SqlTaskResultBindingType)(x));
            }
            set {
                this.SetElement(ResultBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<BackupDestinationListType> BackupDestinationList {
            get {
                if ((this.BackupDestinationListField == null)) {
                    this.BackupDestinationListField = new XTypedList<BackupDestinationListType>(this, LinqToXsdTypeManager.Instance, BackupDestinationListXName);
                }
                return this.BackupDestinationListField;
            }
            set {
                if ((value == null)) {
                    this.BackupDestinationListField = null;
                }
                else {
                    if ((this.BackupDestinationListField == null)) {
                        this.BackupDestinationListField = XTypedList<BackupDestinationListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BackupDestinationListXName);
                    }
                    else {
                        XTypedServices.SetList<BackupDestinationListType>(this.BackupDestinationListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupAction {
            get {
                XAttribute x = this.Attribute(BackupActionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupIsIncrementalEnum? BackupIsIncremental {
            get {
                XAttribute x = this.Attribute(BackupIsIncrementalXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupIsIncrementalEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupIsIncrementalEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupIsIncrementalXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileGroupsFiles {
            get {
                XAttribute x = this.Attribute(BackupFileGroupsFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupFileGroupsFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDeviceType {
            get {
                XAttribute x = this.Attribute(BackupDeviceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupDeviceTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupPhisycalDestinationType {
            get {
                XAttribute x = this.Attribute(BackupPhisycalDestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupPhisycalDestinationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDestinationType {
            get {
                XAttribute x = this.Attribute(BackupDestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupDestinationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupDestinationAutoFolderPath {
            get {
                XAttribute x = this.Attribute(BackupDestinationAutoFolderPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupDestinationAutoFolderPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupActionForExistingBackups {
            get {
                XAttribute x = this.Attribute(BackupActionForExistingBackupsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupActionForExistingBackupsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupCreateSubFolderEnum? BackupCreateSubFolder {
            get {
                XAttribute x = this.Attribute(BackupCreateSubFolderXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupCreateSubFolderEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupCreateSubFolderEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupCreateSubFolderXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileExtension {
            get {
                XAttribute x = this.Attribute(BackupFileExtensionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupFileExtensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupVerifyIntegrityEnum? BackupVerifyIntegrity {
            get {
                XAttribute x = this.Attribute(BackupVerifyIntegrityXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupVerifyIntegrityEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupVerifyIntegrityEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupVerifyIntegrityXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? ExpireDate {
            get {
                XAttribute x = this.Attribute(ExpireDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(ExpireDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RetainDays {
            get {
                XAttribute x = this.Attribute(RetainDaysXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RetainDaysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.InDaysEnum? InDays {
            get {
                XAttribute x = this.Attribute(InDaysXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.InDaysEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.InDaysEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(InDaysXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseExpirationEnum? UseExpiration {
            get {
                XAttribute x = this.Attribute(UseExpirationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseExpirationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseExpirationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseExpirationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupCompressionAction {
            get {
                XAttribute x = this.Attribute(BackupCompressionActionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupCompressionActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupTailLogEnum? BackupTailLog {
            get {
                XAttribute x = this.Attribute(BackupTailLogXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupTailLogEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupTailLogEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupTailLogXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IncludeIndexesEnum? IncludeIndexes {
            get {
                XAttribute x = this.Attribute(IncludeIndexesXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IncludeIndexesEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IncludeIndexesEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IncludeIndexesXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AgentJobID {
            get {
                XAttribute x = this.Attribute(AgentJobIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AgentJobIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveBackupRestoreHistoryEnum? RemoveBackupRestoreHistory {
            get {
                XAttribute x = this.Attribute(RemoveBackupRestoreHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveBackupRestoreHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveBackupRestoreHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveBackupRestoreHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveAgentHistoryEnum? RemoveAgentHistory {
            get {
                XAttribute x = this.Attribute(RemoveAgentHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveAgentHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveAgentHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveAgentHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveDbMaintHistoryEnum? RemoveDbMaintHistory {
            get {
                XAttribute x = this.Attribute(RemoveDbMaintHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveDbMaintHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveDbMaintHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveDbMaintHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileTypeSelected {
            get {
                XAttribute x = this.Attribute(FileTypeSelectedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileTypeSelectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FilePath {
            get {
                XAttribute x = this.Attribute(FilePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderPath {
            get {
                XAttribute x = this.Attribute(FolderPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FolderPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CleanSubFoldersEnum? CleanSubFolders {
            get {
                XAttribute x = this.Attribute(CleanSubFoldersXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CleanSubFoldersEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CleanSubFoldersEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CleanSubFoldersXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileExtension {
            get {
                XAttribute x = this.Attribute(FileExtensionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileExtensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.AgeBasedEnum? AgeBased {
            get {
                XAttribute x = this.Attribute(AgeBasedXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.AgeBasedEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.AgeBasedEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AgeBasedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DeleteSpecificFileEnum? DeleteSpecificFile {
            get {
                XAttribute x = this.Attribute(DeleteSpecificFileXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DeleteSpecificFileEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DeleteSpecificFileEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DeleteSpecificFileXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Message {
            get {
                XAttribute x = this.Attribute(MessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Profile {
            get {
                XAttribute x = this.Attribute(ProfileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProfileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                XAttribute x = this.Attribute(SubjectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SubjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseOriginalAmountEnum? UseOriginalAmount {
            get {
                XAttribute x = this.Attribute(UseOriginalAmountXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseOriginalAmountEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseOriginalAmountEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseOriginalAmountXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Percentage {
            get {
                XAttribute x = this.Attribute(PercentageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(PercentageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.SortEnum? Sort {
            get {
                XAttribute x = this.Attribute(SortXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.SortEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.SortEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SortXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.KeepOnlineEnum? KeepOnline {
            get {
                XAttribute x = this.Attribute(KeepOnlineXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.KeepOnlineEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.KeepOnlineEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(KeepOnlineXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CompactLargeObjectsEnum? CompactLargeObjects {
            get {
                XAttribute x = this.Attribute(CompactLargeObjectsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CompactLargeObjectsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CompactLargeObjectsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CompactLargeObjectsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSizeLimit {
            get {
                XAttribute x = this.Attribute(DatabaseSizeLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSizeLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabasePercentLimit {
            get {
                XAttribute x = this.Attribute(DatabasePercentLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabasePercentLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DatabaseReturnFreeSpaceEnum? DatabaseReturnFreeSpace {
            get {
                XAttribute x = this.Attribute(DatabaseReturnFreeSpaceXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DatabaseReturnFreeSpaceEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DatabaseReturnFreeSpaceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DatabaseReturnFreeSpaceXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateStatisticsType {
            get {
                XAttribute x = this.Attribute(UpdateStatisticsTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateStatisticsTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateScanType {
            get {
                XAttribute x = this.Attribute(UpdateScanTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateScanTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateSampleValue {
            get {
                XAttribute x = this.Attribute(UpdateSampleValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateSampleValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RemoveOlderThan {
            get {
                XAttribute x = this.Attribute(RemoveOlderThanXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RemoveOlderThanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeUnitsType {
            get {
                XAttribute x = this.Attribute(TimeUnitsTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeUnitsTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
            localElementDictionary.Add(OperatorNotifyListXName, typeof(OperatorNotifyListType));
            localElementDictionary.Add(ParameterBindingXName, typeof(SqlTaskParameterBindingType));
            localElementDictionary.Add(ResultBindingXName, typeof(SqlTaskResultBindingType));
            localElementDictionary.Add(BackupDestinationListXName, typeof(BackupDestinationListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum BackupIsIncrementalEnum {
            
            True,
            
            False,
        }
        
        public enum BackupCreateSubFolderEnum {
            
            True,
            
            False,
        }
        
        public enum BackupVerifyIntegrityEnum {
            
            True,
            
            False,
        }
        
        public enum InDaysEnum {
            
            True,
            
            False,
        }
        
        public enum UseExpirationEnum {
            
            True,
            
            False,
        }
        
        public enum BackupTailLogEnum {
            
            True,
            
            False,
        }
        
        public enum IncludeIndexesEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveBackupRestoreHistoryEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveAgentHistoryEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveDbMaintHistoryEnum {
            
            True,
            
            False,
        }
        
        public enum CleanSubFoldersEnum {
            
            True,
            
            False,
        }
        
        public enum AgeBasedEnum {
            
            True,
            
            False,
        }
        
        public enum DeleteSpecificFileEnum {
            
            True,
            
            False,
        }
        
        public enum UseOriginalAmountEnum {
            
            True,
            
            False,
        }
        
        public enum SortEnum {
            
            True,
            
            False,
        }
        
        public enum KeepOnlineEnum {
            
            True,
            
            False,
        }
        
        public enum CompactLargeObjectsEnum {
            
            True,
            
            False,
        }
        
        public enum DatabaseReturnFreeSpaceEnum {
            
            True,
            
            False,
        }
    }
    
    public enum SqlResultTypeEnum {
        
        ResultSetType_None,
        
        ResultSetType_Rowset,
        
        ResultSetType_SingleRow,
        
        ResultSetType_XML,
    }
    
    public sealed class SqlResultTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ResultSetType_None",
                        "ResultSetType_Rowset",
                        "ResultSetType_SingleRow",
                        "ResultSetType_XML"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SqlResultTypeEnumValidator() {
        }
    }
    
    public partial class SelectedDatabasesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseNameXName = System.Xml.Linq.XName.Get("DatabaseName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SelectedDatabasesType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SelectedDatabasesType(XElement xe) { return XTypedServices.ToXTypedElement<SelectedDatabasesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SelectedDatabasesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DatabaseName {
            get {
                XAttribute x = this.Attribute(DatabaseNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DatabaseNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SelectedDatabasesType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OperatorNotifyListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperatorNotifyXName = System.Xml.Linq.XName.Get("OperatorNotify", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OperatorNotifyListType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator OperatorNotifyListType(XElement xe) { return XTypedServices.ToXTypedElement<OperatorNotifyListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OperatorNotifyListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OperatorNotify {
            get {
                XAttribute x = this.Attribute(OperatorNotifyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OperatorNotifyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OperatorNotifyListType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SqlTaskParameterBindingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterNameXName = System.Xml.Linq.XName.Get("ParameterName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DtsVariableNameXName = System.Xml.Linq.XName.Get("DtsVariableName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterDirectionXName = System.Xml.Linq.XName.Get("ParameterDirection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterSizeXName = System.Xml.Linq.XName.Get("ParameterSize", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskParameterBindingType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskParameterBindingType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskParameterBindingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskParameterBindingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ParameterName {
            get {
                XAttribute x = this.Attribute(ParameterNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ParameterNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DtsVariableName {
            get {
                XAttribute x = this.Attribute(DtsVariableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DtsVariableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.ParameterDirectionEnum? ParameterDirection {
            get {
                XAttribute x = this.Attribute(ParameterDirectionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.ParameterDirectionEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.ParameterDirectionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ParameterDirectionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DataType {
            get {
                XAttribute x = this.Attribute(DataTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DataTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ParameterSize {
            get {
                XAttribute x = this.Attribute(ParameterSizeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ParameterSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskParameterBindingType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum ParameterDirectionEnum {
        
        Input,
        
        Output,
        
        ReturnValue,
    }
    
    public sealed class ParameterDirectionEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Input",
                        "Output",
                        "ReturnValue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ParameterDirectionEnumValidator() {
        }
    }
    
    public partial class SqlTaskResultBindingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultNameXName = System.Xml.Linq.XName.Get("ResultName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DtsVariableNameXName = System.Xml.Linq.XName.Get("DtsVariableName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskResultBindingType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskResultBindingType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskResultBindingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskResultBindingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ResultName {
            get {
                XAttribute x = this.Attribute(ResultNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ResultNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DtsVariableName {
            get {
                XAttribute x = this.Attribute(DtsVariableNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DtsVariableNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskResultBindingType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class BackupDestinationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationLocationXName = System.Xml.Linq.XName.Get("BackupDestinationLocation", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BackupDestinationListType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator BackupDestinationListType(XElement xe) { return XTypedServices.ToXTypedElement<BackupDestinationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BackupDestinationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupDestinationLocation {
            get {
                XAttribute x = this.Attribute(BackupDestinationLocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupDestinationLocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BackupDestinationListType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class BackupActionEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 2, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private BackupActionEnum() {
        }
    }
    
    public sealed class BackupDeviceTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 4, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private BackupDeviceTypeEnum() {
        }
    }
    
    public sealed class BackupPhisycalDestinationTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null);
        
        private BackupPhisycalDestinationTypeEnum() {
        }
    }
    
    public sealed class DestinationTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DestinationTypeEnum() {
        }
    }
    
    public sealed class BackupActionForExistingBackupsEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private BackupActionForExistingBackupsEnum() {
        }
    }
    
    public sealed class BackupCompressionActionEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 2, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private BackupCompressionActionEnum() {
        }
    }
    
    public sealed class SqlTaskDatabaseSelectionTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 4, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SqlTaskDatabaseSelectionTypeEnum() {
        }
    }
    
    public sealed class SqlTaskTimeUnitsTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        0,
                        1,
                        2,
                        3,
                        5}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SqlTaskTimeUnitsTypeEnum() {
        }
    }
    
    public sealed class SqlTaskFileTypeSelectedEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SqlTaskFileTypeSelectedEnum() {
        }
    }
    
    public sealed class SqlTaskUpdateStatisticsTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 2, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SqlTaskUpdateStatisticsTypeEnum() {
        }
    }
    
    public sealed class SqlTaskUpdateScanTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 3, 0, null, 2, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SqlTaskUpdateScanTypeEnum() {
        }
    }
    
    public partial class SqlTaskDataElementSqlTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementSqlTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskDataElementSqlTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementSqlTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskDataElementSqlTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementSqlTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementSqlTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementBackupTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupActionXName = System.Xml.Linq.XName.Get("BackupAction", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupIsIncrementalXName = System.Xml.Linq.XName.Get("BackupIsIncremental", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupFileGroupsFilesXName = System.Xml.Linq.XName.Get("BackupFileGroupsFiles", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDeviceTypeXName = System.Xml.Linq.XName.Get("BackupDeviceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupPhisycalDestinationTypeXName = System.Xml.Linq.XName.Get("BackupPhisycalDestinationType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationTypeXName = System.Xml.Linq.XName.Get("BackupDestinationType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationAutoFolderPathXName = System.Xml.Linq.XName.Get("BackupDestinationAutoFolderPath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupActionForExistingBackupsXName = System.Xml.Linq.XName.Get("BackupActionForExistingBackups", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupCreateSubFolderXName = System.Xml.Linq.XName.Get("BackupCreateSubFolder", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupFileExtensionXName = System.Xml.Linq.XName.Get("BackupFileExtension", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupVerifyIntegrityXName = System.Xml.Linq.XName.Get("BackupVerifyIntegrity", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExpireDateXName = System.Xml.Linq.XName.Get("ExpireDate", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetainDaysXName = System.Xml.Linq.XName.Get("RetainDays", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InDaysXName = System.Xml.Linq.XName.Get("InDays", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseExpirationXName = System.Xml.Linq.XName.Get("UseExpiration", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupCompressionActionXName = System.Xml.Linq.XName.Get("BackupCompressionAction", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupTailLogXName = System.Xml.Linq.XName.Get("BackupTailLog", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementBackupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementBackupTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementBackupTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementBackupTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementBackupTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupAction {
            get {
                XAttribute x = this.Attribute(BackupActionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupIsIncrementalEnum? BackupIsIncremental {
            get {
                XAttribute x = this.Attribute(BackupIsIncrementalXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupIsIncrementalEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupIsIncrementalEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupIsIncrementalXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileGroupsFiles {
            get {
                XAttribute x = this.Attribute(BackupFileGroupsFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupFileGroupsFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDeviceType {
            get {
                XAttribute x = this.Attribute(BackupDeviceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupDeviceTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupPhisycalDestinationType {
            get {
                XAttribute x = this.Attribute(BackupPhisycalDestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupPhisycalDestinationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDestinationType {
            get {
                XAttribute x = this.Attribute(BackupDestinationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupDestinationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupDestinationAutoFolderPath {
            get {
                XAttribute x = this.Attribute(BackupDestinationAutoFolderPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupDestinationAutoFolderPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupActionForExistingBackups {
            get {
                XAttribute x = this.Attribute(BackupActionForExistingBackupsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupActionForExistingBackupsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupCreateSubFolderEnum? BackupCreateSubFolder {
            get {
                XAttribute x = this.Attribute(BackupCreateSubFolderXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupCreateSubFolderEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupCreateSubFolderEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupCreateSubFolderXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileExtension {
            get {
                XAttribute x = this.Attribute(BackupFileExtensionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BackupFileExtensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupVerifyIntegrityEnum? BackupVerifyIntegrity {
            get {
                XAttribute x = this.Attribute(BackupVerifyIntegrityXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupVerifyIntegrityEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupVerifyIntegrityEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupVerifyIntegrityXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? ExpireDate {
            get {
                XAttribute x = this.Attribute(ExpireDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(ExpireDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RetainDays {
            get {
                XAttribute x = this.Attribute(RetainDaysXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RetainDaysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.InDaysEnum? InDays {
            get {
                XAttribute x = this.Attribute(InDaysXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.InDaysEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.InDaysEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(InDaysXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.UseExpirationEnum? UseExpiration {
            get {
                XAttribute x = this.Attribute(UseExpirationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.UseExpirationEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.UseExpirationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseExpirationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupCompressionAction {
            get {
                XAttribute x = this.Attribute(BackupCompressionActionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BackupCompressionActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupTailLogEnum? BackupTailLog {
            get {
                XAttribute x = this.Attribute(BackupTailLogXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupTailLogEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementBackupTaskType.BackupTailLogEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BackupTailLogXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementBackupTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum BackupIsIncrementalEnum {
            
            True,
            
            False,
        }
        
        public enum BackupCreateSubFolderEnum {
            
            True,
            
            False,
        }
        
        public enum BackupVerifyIntegrityEnum {
            
            True,
            
            False,
        }
        
        public enum InDaysEnum {
            
            True,
            
            False,
        }
        
        public enum UseExpirationEnum {
            
            True,
            
            False,
        }
        
        public enum BackupTailLogEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*, BackupDestinationList*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementCheckIntegrityTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackupDestinationListXName = System.Xml.Linq.XName.Get("BackupDestinationList", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BackupDestinationListType> BackupDestinationListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeIndexesXName = System.Xml.Linq.XName.Get("IncludeIndexes", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementCheckIntegrityTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementCheckIntegrityTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementCheckIntegrityTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementCheckIntegrityTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName), new NamedContentModelEntity(BackupDestinationListXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*, BackupDestinationList*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementCheckIntegrityTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<BackupDestinationListType> BackupDestinationList {
            get {
                if ((this.BackupDestinationListField == null)) {
                    this.BackupDestinationListField = new XTypedList<BackupDestinationListType>(this, LinqToXsdTypeManager.Instance, BackupDestinationListXName);
                }
                return this.BackupDestinationListField;
            }
            set {
                if ((value == null)) {
                    this.BackupDestinationListField = null;
                }
                else {
                    if ((this.BackupDestinationListField == null)) {
                        this.BackupDestinationListField = XTypedList<BackupDestinationListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BackupDestinationListXName);
                    }
                    else {
                        XTypedServices.SetList<BackupDestinationListType>(this.BackupDestinationListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IncludeIndexesEnum? IncludeIndexes {
            get {
                XAttribute x = this.Attribute(IncludeIndexesXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IncludeIndexesEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementCheckIntegrityTaskType.IncludeIndexesEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IncludeIndexesXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementCheckIntegrityTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
            localElementDictionary.Add(BackupDestinationListXName, typeof(BackupDestinationListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum IncludeIndexesEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class SqlTaskDataElementAgentJobTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgentJobIDXName = System.Xml.Linq.XName.Get("AgentJobID", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementAgentJobTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskDataElementAgentJobTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementAgentJobTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskDataElementAgentJobTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementAgentJobTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AgentJobID {
            get {
                XAttribute x = this.Attribute(AgentJobIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AgentJobIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementAgentJobTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class SqlTaskDataElementHistoryCleanupTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveBackupRestoreHistoryXName = System.Xml.Linq.XName.Get("RemoveBackupRestoreHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveAgentHistoryXName = System.Xml.Linq.XName.Get("RemoveAgentHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveDbMaintHistoryXName = System.Xml.Linq.XName.Get("RemoveDbMaintHistory", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveOlderThanXName = System.Xml.Linq.XName.Get("RemoveOlderThan", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeUnitsTypeXName = System.Xml.Linq.XName.Get("TimeUnitsType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementHistoryCleanupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskDataElementHistoryCleanupTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementHistoryCleanupTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskDataElementHistoryCleanupTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveBackupRestoreHistoryEnum? RemoveBackupRestoreHistory {
            get {
                XAttribute x = this.Attribute(RemoveBackupRestoreHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveBackupRestoreHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveBackupRestoreHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveBackupRestoreHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveAgentHistoryEnum? RemoveAgentHistory {
            get {
                XAttribute x = this.Attribute(RemoveAgentHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveAgentHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveAgentHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveAgentHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveDbMaintHistoryEnum? RemoveDbMaintHistory {
            get {
                XAttribute x = this.Attribute(RemoveDbMaintHistoryXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveDbMaintHistoryEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementHistoryCleanupTaskType.RemoveDbMaintHistoryEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RemoveDbMaintHistoryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RemoveOlderThan {
            get {
                XAttribute x = this.Attribute(RemoveOlderThanXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RemoveOlderThanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeUnitsType {
            get {
                XAttribute x = this.Attribute(TimeUnitsTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeUnitsTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementHistoryCleanupTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveBackupRestoreHistoryEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveAgentHistoryEnum {
            
            True,
            
            False,
        }
        
        public enum RemoveDbMaintHistoryEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class SqlTaskDataElementMaintenanceFileCleanupTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileTypeSelectedXName = System.Xml.Linq.XName.Get("FileTypeSelected", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilePathXName = System.Xml.Linq.XName.Get("FilePath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderPathXName = System.Xml.Linq.XName.Get("FolderPath", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CleanSubFoldersXName = System.Xml.Linq.XName.Get("CleanSubFolders", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileExtensionXName = System.Xml.Linq.XName.Get("FileExtension", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgeBasedXName = System.Xml.Linq.XName.Get("AgeBased", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeleteSpecificFileXName = System.Xml.Linq.XName.Get("DeleteSpecificFile", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveOlderThanXName = System.Xml.Linq.XName.Get("RemoveOlderThan", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeUnitsTypeXName = System.Xml.Linq.XName.Get("TimeUnitsType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementMaintenanceFileCleanupTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskDataElementMaintenanceFileCleanupTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementMaintenanceFileCleanupTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskDataElementMaintenanceFileCleanupTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileTypeSelected {
            get {
                XAttribute x = this.Attribute(FileTypeSelectedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileTypeSelectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FilePath {
            get {
                XAttribute x = this.Attribute(FilePathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilePathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderPath {
            get {
                XAttribute x = this.Attribute(FolderPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FolderPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.CleanSubFoldersEnum? CleanSubFolders {
            get {
                XAttribute x = this.Attribute(CleanSubFoldersXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.CleanSubFoldersEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.CleanSubFoldersEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CleanSubFoldersXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileExtension {
            get {
                XAttribute x = this.Attribute(FileExtensionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileExtensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.AgeBasedEnum? AgeBased {
            get {
                XAttribute x = this.Attribute(AgeBasedXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.AgeBasedEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.AgeBasedEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AgeBasedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.DeleteSpecificFileEnum? DeleteSpecificFile {
            get {
                XAttribute x = this.Attribute(DeleteSpecificFileXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.DeleteSpecificFileEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementMaintenanceFileCleanupTaskType.DeleteSpecificFileEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DeleteSpecificFileXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RemoveOlderThan {
            get {
                XAttribute x = this.Attribute(RemoveOlderThanXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RemoveOlderThanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeUnitsType {
            get {
                XAttribute x = this.Attribute(TimeUnitsTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeUnitsTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementMaintenanceFileCleanupTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum CleanSubFoldersEnum {
            
            True,
            
            False,
        }
        
        public enum AgeBasedEnum {
            
            True,
            
            False,
        }
        
        public enum DeleteSpecificFileEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OperatorNotifyList*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementNotifyOperatorTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperatorNotifyListXName = System.Xml.Linq.XName.Get("OperatorNotifyList", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OperatorNotifyListType> OperatorNotifyListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageXName = System.Xml.Linq.XName.Get("Message", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfileXName = System.Xml.Linq.XName.Get("Profile", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubjectXName = System.Xml.Linq.XName.Get("Subject", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementNotifyOperatorTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementNotifyOperatorTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementNotifyOperatorTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementNotifyOperatorTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OperatorNotifyListXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OperatorNotifyList*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementNotifyOperatorTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OperatorNotifyList*)
        /// </para>
        /// </summary>
        public virtual IList<OperatorNotifyListType> OperatorNotifyList {
            get {
                if ((this.OperatorNotifyListField == null)) {
                    this.OperatorNotifyListField = new XTypedList<OperatorNotifyListType>(this, LinqToXsdTypeManager.Instance, OperatorNotifyListXName);
                }
                return this.OperatorNotifyListField;
            }
            set {
                if ((value == null)) {
                    this.OperatorNotifyListField = null;
                }
                else {
                    if ((this.OperatorNotifyListField == null)) {
                        this.OperatorNotifyListField = XTypedList<OperatorNotifyListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OperatorNotifyListXName);
                    }
                    else {
                        XTypedServices.SetList<OperatorNotifyListType>(this.OperatorNotifyListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementNotifyOperatorTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Message {
            get {
                XAttribute x = this.Attribute(MessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Profile {
            get {
                XAttribute x = this.Attribute(ProfileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProfileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                XAttribute x = this.Attribute(SubjectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SubjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementNotifyOperatorTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OperatorNotifyListXName, typeof(OperatorNotifyListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementRebuildIndexTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseOriginalAmountXName = System.Xml.Linq.XName.Get("UseOriginalAmount", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PercentageXName = System.Xml.Linq.XName.Get("Percentage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortXName = System.Xml.Linq.XName.Get("Sort", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeepOnlineXName = System.Xml.Linq.XName.Get("KeepOnline", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementRebuildIndexTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementRebuildIndexTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementRebuildIndexTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementRebuildIndexTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementRebuildIndexTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.UseOriginalAmountEnum? UseOriginalAmount {
            get {
                XAttribute x = this.Attribute(UseOriginalAmountXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.UseOriginalAmountEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.UseOriginalAmountEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(UseOriginalAmountXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Percentage {
            get {
                XAttribute x = this.Attribute(PercentageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(PercentageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.SortEnum? Sort {
            get {
                XAttribute x = this.Attribute(SortXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.SortEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.SortEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SortXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.KeepOnlineEnum? KeepOnline {
            get {
                XAttribute x = this.Attribute(KeepOnlineXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.KeepOnlineEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementRebuildIndexTaskType.KeepOnlineEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(KeepOnlineXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementRebuildIndexTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum UseOriginalAmountEnum {
            
            True,
            
            False,
        }
        
        public enum SortEnum {
            
            True,
            
            False,
        }
        
        public enum KeepOnlineEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementReorganizeIndexTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompactLargeObjectsXName = System.Xml.Linq.XName.Get("CompactLargeObjects", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementReorganizeIndexTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementReorganizeIndexTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementReorganizeIndexTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementReorganizeIndexTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementReorganizeIndexTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.CompactLargeObjectsEnum? CompactLargeObjects {
            get {
                XAttribute x = this.Attribute(CompactLargeObjectsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.CompactLargeObjectsEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementReorganizeIndexTaskType.CompactLargeObjectsEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CompactLargeObjectsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementReorganizeIndexTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum CompactLargeObjectsEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementShrinkDatabaseTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSizeLimitXName = System.Xml.Linq.XName.Get("DatabaseSizeLimit", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabasePercentLimitXName = System.Xml.Linq.XName.Get("DatabasePercentLimit", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseReturnFreeSpaceXName = System.Xml.Linq.XName.Get("DatabaseReturnFreeSpace", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementShrinkDatabaseTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementShrinkDatabaseTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementShrinkDatabaseTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementShrinkDatabaseTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementShrinkDatabaseTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSizeLimit {
            get {
                XAttribute x = this.Attribute(DatabaseSizeLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSizeLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabasePercentLimit {
            get {
                XAttribute x = this.Attribute(DatabasePercentLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabasePercentLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.DatabaseReturnFreeSpaceEnum? DatabaseReturnFreeSpace {
            get {
                XAttribute x = this.Attribute(DatabaseReturnFreeSpaceXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.DatabaseReturnFreeSpaceEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementShrinkDatabaseTaskType.DatabaseReturnFreeSpaceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DatabaseReturnFreeSpaceXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementShrinkDatabaseTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
        
        public enum DatabaseReturnFreeSpaceEnum {
            
            True,
            
            False,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SelectedDatabases*)
    /// </para>
    /// </summary>
    public partial class SqlTaskDataElementUpdateStatisticsTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedDatabasesXName = System.Xml.Linq.XName.Get("SelectedDatabases", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectedDatabasesType> SelectedDatabasesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateStatisticsTypeXName = System.Xml.Linq.XName.Get("UpdateStatisticsType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateScanTypeXName = System.Xml.Linq.XName.Get("UpdateScanType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpdateSampleValueXName = System.Xml.Linq.XName.Get("UpdateSampleValue", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseSelectionTypeXName = System.Xml.Linq.XName.Get("DatabaseSelectionType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementUpdateStatisticsTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SqlTaskDataElementUpdateStatisticsTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementUpdateStatisticsTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SqlTaskDataElementUpdateStatisticsTaskType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SelectedDatabasesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public SqlTaskDataElementUpdateStatisticsTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                if ((this.SelectedDatabasesField == null)) {
                    this.SelectedDatabasesField = new XTypedList<SelectedDatabasesType>(this, LinqToXsdTypeManager.Instance, SelectedDatabasesXName);
                }
                return this.SelectedDatabasesField;
            }
            set {
                if ((value == null)) {
                    this.SelectedDatabasesField = null;
                }
                else {
                    if ((this.SelectedDatabasesField == null)) {
                        this.SelectedDatabasesField = XTypedList<SelectedDatabasesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectedDatabasesXName);
                    }
                    else {
                        XTypedServices.SetList<SelectedDatabasesType>(this.SelectedDatabasesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementUpdateStatisticsTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateStatisticsType {
            get {
                XAttribute x = this.Attribute(UpdateStatisticsTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateStatisticsTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateScanType {
            get {
                XAttribute x = this.Attribute(UpdateScanTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateScanTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateSampleValue {
            get {
                XAttribute x = this.Attribute(UpdateSampleValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UpdateSampleValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                XAttribute x = this.Attribute(DatabaseSelectionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DatabaseSelectionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementUpdateStatisticsTaskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SelectedDatabasesXName, typeof(SelectedDatabasesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class SqlTaskDataElementTSQLExecuteTaskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeOutXName = System.Xml.Linq.XName.Get("TimeOut", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsStoredProcXName = System.Xml.Linq.XName.Get("IsStoredProc", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassPrepareXName = System.Xml.Linq.XName.Get("BypassPrepare", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStmtSourceTypeXName = System.Xml.Linq.XName.Get("SqlStmtSourceType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlStatementSourceXName = System.Xml.Linq.XName.Get("SqlStatementSource", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodePageXName = System.Xml.Linq.XName.Get("CodePage", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerVersionXName = System.Xml.Linq.XName.Get("ServerVersion", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedLoggingXName = System.Xml.Linq.XName.Get("ExtendedLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalConnectionForLoggingXName = System.Xml.Linq.XName.Get("LocalConnectionForLogging", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskNameXName = System.Xml.Linq.XName.Get("TaskName", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreDatabasesInNotOnlineStateXName = System.Xml.Linq.XName.Get("IgnoreDatabasesInNotOnlineState", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskDataElementTSQLExecuteTaskType", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskDataElementTSQLExecuteTaskType(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskDataElementTSQLExecuteTaskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskDataElementTSQLExecuteTaskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                XAttribute x = this.Attribute(ConnectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConnectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                XAttribute x = this.Attribute(TimeOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IsStoredProcEnum? IsStoredProc {
            get {
                XAttribute x = this.Attribute(IsStoredProcXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IsStoredProcEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IsStoredProcEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IsStoredProcXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.BypassPrepareEnum? BypassPrepare {
            get {
                XAttribute x = this.Attribute(BypassPrepareXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.BypassPrepareEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.BypassPrepareEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(BypassPrepareXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                XAttribute x = this.Attribute(SqlStmtSourceTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.SourceTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.SourceTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SqlStmtSourceTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                XAttribute x = this.Attribute(SqlStatementSourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlStatementSourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                XAttribute x = this.Attribute(CodePageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CodePageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResultTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                XAttribute x = this.Attribute(ServerVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ServerVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                XAttribute x = this.Attribute(ExtendedLoggingXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.ExtendedLoggingEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.ExtendedLoggingEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ExtendedLoggingXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                XAttribute x = this.Attribute(LocalConnectionForLoggingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocalConnectionForLoggingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                XAttribute x = this.Attribute(TaskNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                XAttribute x = this.Attribute(IgnoreDatabasesInNotOnlineStateXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IgnoreDatabasesInNotOnlineStateEnum)(Enum.Parse(typeof(Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataElementTSQLExecuteTaskType.IgnoreDatabasesInNotOnlineStateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IgnoreDatabasesInNotOnlineStateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SqlTaskDataElementTSQLExecuteTaskType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IsStoredProcEnum {
            
            True,
            
            False,
        }
        
        public enum BypassPrepareEnum {
            
            True,
            
            False,
        }
        
        public enum ExtendedLoggingEnum {
            
            True,
            
            False,
        }
        
        public enum IgnoreDatabasesInNotOnlineStateEnum {
            
            True,
            
            False,
        }
    }
    
    public partial class SqlTaskData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SqlTaskDataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SqlTaskData", "www.microsoft.com/sqlserver/dts/tasks/sqltask");
        
		public static explicit operator SqlTaskData(XElement xe) { return XTypedServices.ToXTypedElement<SqlTaskData, SqlTaskDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SqlTaskData() {
            SetInnerType(new SqlTaskDataType());
        }
        
        public SqlTaskData(SqlTaskDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual SqlTaskDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<SelectedDatabasesType> SelectedDatabases {
            get {
                return this.ContentField.SelectedDatabases;
            }
            set {
                this.ContentField.SelectedDatabases = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<OperatorNotifyListType> OperatorNotifyList {
            get {
                return this.ContentField.OperatorNotifyList;
            }
            set {
                this.ContentField.OperatorNotifyList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<SqlTaskParameterBindingType> ParameterBinding {
            get {
                return this.ContentField.ParameterBinding;
            }
            set {
                this.ContentField.ParameterBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual SqlTaskResultBindingType ResultBinding {
            get {
                return this.ContentField.ResultBinding;
            }
            set {
                this.ContentField.ResultBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SelectedDatabases*, OperatorNotifyList*, ParameterBinding*, ResultBinding?, BackupDestinationList*)
        /// </para>
        /// </summary>
        public virtual IList<BackupDestinationListType> BackupDestinationList {
            get {
                return this.ContentField.BackupDestinationList;
            }
            set {
                this.ContentField.BackupDestinationList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Connection {
            get {
                return this.ContentField.Connection;
            }
            set {
                this.ContentField.Connection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeOut {
            get {
                return this.ContentField.TimeOut;
            }
            set {
                this.ContentField.TimeOut = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IsStoredProcEnum? IsStoredProc {
            get {
                return this.ContentField.IsStoredProc;
            }
            set {
                this.ContentField.IsStoredProc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BypassPrepareEnum? BypassPrepare {
            get {
                return this.ContentField.BypassPrepare;
            }
            set {
                this.ContentField.BypassPrepare = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.SourceTypeEnum? SqlStmtSourceType {
            get {
                return this.ContentField.SqlStmtSourceType;
            }
            set {
                this.ContentField.SqlStmtSourceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlStatementSource {
            get {
                return this.ContentField.SqlStatementSource;
            }
            set {
                this.ContentField.SqlStatementSource = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CodePage {
            get {
                return this.ContentField.CodePage;
            }
            set {
                this.ContentField.CodePage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlResultTypeEnum? ResultType {
            get {
                return this.ContentField.ResultType;
            }
            set {
                this.ContentField.ResultType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ServerVersion {
            get {
                return this.ContentField.ServerVersion;
            }
            set {
                this.ContentField.ServerVersion = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.ExtendedLoggingEnum? ExtendedLogging {
            get {
                return this.ContentField.ExtendedLogging;
            }
            set {
                this.ContentField.ExtendedLogging = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LocalConnectionForLogging {
            get {
                return this.ContentField.LocalConnectionForLogging;
            }
            set {
                this.ContentField.LocalConnectionForLogging = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskName {
            get {
                return this.ContentField.TaskName;
            }
            set {
                this.ContentField.TaskName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IgnoreDatabasesInNotOnlineStateEnum? IgnoreDatabasesInNotOnlineState {
            get {
                return this.ContentField.IgnoreDatabasesInNotOnlineState;
            }
            set {
                this.ContentField.IgnoreDatabasesInNotOnlineState = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupAction {
            get {
                return this.ContentField.BackupAction;
            }
            set {
                this.ContentField.BackupAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupIsIncrementalEnum? BackupIsIncremental {
            get {
                return this.ContentField.BackupIsIncremental;
            }
            set {
                this.ContentField.BackupIsIncremental = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileGroupsFiles {
            get {
                return this.ContentField.BackupFileGroupsFiles;
            }
            set {
                this.ContentField.BackupFileGroupsFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDeviceType {
            get {
                return this.ContentField.BackupDeviceType;
            }
            set {
                this.ContentField.BackupDeviceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupPhisycalDestinationType {
            get {
                return this.ContentField.BackupPhisycalDestinationType;
            }
            set {
                this.ContentField.BackupPhisycalDestinationType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupDestinationType {
            get {
                return this.ContentField.BackupDestinationType;
            }
            set {
                this.ContentField.BackupDestinationType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupDestinationAutoFolderPath {
            get {
                return this.ContentField.BackupDestinationAutoFolderPath;
            }
            set {
                this.ContentField.BackupDestinationAutoFolderPath = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupActionForExistingBackups {
            get {
                return this.ContentField.BackupActionForExistingBackups;
            }
            set {
                this.ContentField.BackupActionForExistingBackups = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupCreateSubFolderEnum? BackupCreateSubFolder {
            get {
                return this.ContentField.BackupCreateSubFolder;
            }
            set {
                this.ContentField.BackupCreateSubFolder = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BackupFileExtension {
            get {
                return this.ContentField.BackupFileExtension;
            }
            set {
                this.ContentField.BackupFileExtension = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupVerifyIntegrityEnum? BackupVerifyIntegrity {
            get {
                return this.ContentField.BackupVerifyIntegrity;
            }
            set {
                this.ContentField.BackupVerifyIntegrity = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? ExpireDate {
            get {
                return this.ContentField.ExpireDate;
            }
            set {
                this.ContentField.ExpireDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RetainDays {
            get {
                return this.ContentField.RetainDays;
            }
            set {
                this.ContentField.RetainDays = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.InDaysEnum? InDays {
            get {
                return this.ContentField.InDays;
            }
            set {
                this.ContentField.InDays = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseExpirationEnum? UseExpiration {
            get {
                return this.ContentField.UseExpiration;
            }
            set {
                this.ContentField.UseExpiration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BackupCompressionAction {
            get {
                return this.ContentField.BackupCompressionAction;
            }
            set {
                this.ContentField.BackupCompressionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.BackupTailLogEnum? BackupTailLog {
            get {
                return this.ContentField.BackupTailLog;
            }
            set {
                this.ContentField.BackupTailLog = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.IncludeIndexesEnum? IncludeIndexes {
            get {
                return this.ContentField.IncludeIndexes;
            }
            set {
                this.ContentField.IncludeIndexes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AgentJobID {
            get {
                return this.ContentField.AgentJobID;
            }
            set {
                this.ContentField.AgentJobID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveBackupRestoreHistoryEnum? RemoveBackupRestoreHistory {
            get {
                return this.ContentField.RemoveBackupRestoreHistory;
            }
            set {
                this.ContentField.RemoveBackupRestoreHistory = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveAgentHistoryEnum? RemoveAgentHistory {
            get {
                return this.ContentField.RemoveAgentHistory;
            }
            set {
                this.ContentField.RemoveAgentHistory = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.RemoveDbMaintHistoryEnum? RemoveDbMaintHistory {
            get {
                return this.ContentField.RemoveDbMaintHistory;
            }
            set {
                this.ContentField.RemoveDbMaintHistory = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileTypeSelected {
            get {
                return this.ContentField.FileTypeSelected;
            }
            set {
                this.ContentField.FileTypeSelected = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FilePath {
            get {
                return this.ContentField.FilePath;
            }
            set {
                this.ContentField.FilePath = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderPath {
            get {
                return this.ContentField.FolderPath;
            }
            set {
                this.ContentField.FolderPath = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CleanSubFoldersEnum? CleanSubFolders {
            get {
                return this.ContentField.CleanSubFolders;
            }
            set {
                this.ContentField.CleanSubFolders = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileExtension {
            get {
                return this.ContentField.FileExtension;
            }
            set {
                this.ContentField.FileExtension = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.AgeBasedEnum? AgeBased {
            get {
                return this.ContentField.AgeBased;
            }
            set {
                this.ContentField.AgeBased = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DeleteSpecificFileEnum? DeleteSpecificFile {
            get {
                return this.ContentField.DeleteSpecificFile;
            }
            set {
                this.ContentField.DeleteSpecificFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Message {
            get {
                return this.ContentField.Message;
            }
            set {
                this.ContentField.Message = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Profile {
            get {
                return this.ContentField.Profile;
            }
            set {
                this.ContentField.Profile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                return this.ContentField.Subject;
            }
            set {
                this.ContentField.Subject = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.UseOriginalAmountEnum? UseOriginalAmount {
            get {
                return this.ContentField.UseOriginalAmount;
            }
            set {
                this.ContentField.UseOriginalAmount = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Percentage {
            get {
                return this.ContentField.Percentage;
            }
            set {
                this.ContentField.Percentage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.SortEnum? Sort {
            get {
                return this.ContentField.Sort;
            }
            set {
                this.ContentField.Sort = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.KeepOnlineEnum? KeepOnline {
            get {
                return this.ContentField.KeepOnline;
            }
            set {
                this.ContentField.KeepOnline = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.CompactLargeObjectsEnum? CompactLargeObjects {
            get {
                return this.ContentField.CompactLargeObjects;
            }
            set {
                this.ContentField.CompactLargeObjects = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSizeLimit {
            get {
                return this.ContentField.DatabaseSizeLimit;
            }
            set {
                this.ContentField.DatabaseSizeLimit = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabasePercentLimit {
            get {
                return this.ContentField.DatabasePercentLimit;
            }
            set {
                this.ContentField.DatabasePercentLimit = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.SqlServer.Dts.Tasks.Sqltask.SqlTaskDataType.DatabaseReturnFreeSpaceEnum? DatabaseReturnFreeSpace {
            get {
                return this.ContentField.DatabaseReturnFreeSpace;
            }
            set {
                this.ContentField.DatabaseReturnFreeSpace = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateStatisticsType {
            get {
                return this.ContentField.UpdateStatisticsType;
            }
            set {
                this.ContentField.UpdateStatisticsType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateScanType {
            get {
                return this.ContentField.UpdateScanType;
            }
            set {
                this.ContentField.UpdateScanType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UpdateSampleValue {
            get {
                return this.ContentField.UpdateSampleValue;
            }
            set {
                this.ContentField.UpdateSampleValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RemoveOlderThan {
            get {
                return this.ContentField.RemoveOlderThan;
            }
            set {
                this.ContentField.RemoveOlderThan = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeUnitsType {
            get {
                return this.ContentField.TimeUnitsType;
            }
            set {
                this.ContentField.TimeUnitsType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DatabaseSelectionType {
            get {
                return this.ContentField.DatabaseSelectionType;
            }
            set {
                this.ContentField.DatabaseSelectionType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SqlTaskData Load(string xmlFile) {
            return XTypedServices.Load<SqlTaskData, SqlTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SqlTaskData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SqlTaskData, SqlTaskDataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SqlTaskData Parse(string xml) {
            return XTypedServices.Parse<SqlTaskData, SqlTaskDataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SqlTaskData(((SqlTaskDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SqlTaskDataType ContentField) {
            this.ContentField = ((SqlTaskDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public SqlTaskData SqlTaskData {  get {return rootObject as SqlTaskData; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(SqlTaskData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
