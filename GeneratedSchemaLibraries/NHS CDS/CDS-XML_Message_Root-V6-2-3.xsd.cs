//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
    /// </para>
    /// </summary>
    public partial class CDSXMLInterchange : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeHeaderXName = System.Xml.Linq.XName.Get("CDSInterchangeHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSNetChangeAllMessageTypesXName = System.Xml.Linq.XName.Get("CDSNetChange-All-MessageTypes", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CDSNetChangeAllMessageTypesLocalType> CDSNetChangeAllMessageTypesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSBulkGroup160MessageXName = System.Xml.Linq.XName.Get("CDSBulkGroup-160-Message", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CDSBulkGroup160MessageLocalType> CDSBulkGroup160MessageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeTrailerXName = System.Xml.Linq.XName.Get("CDSInterchangeTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemaVersionXName = System.Xml.Linq.XName.Get("SchemaVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string SchemaVersionFixedValue = "6-2-3";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemaDateXName = System.Xml.Linq.XName.Get("SchemaDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static System.DateTime SchemaDateFixedValue = System.Xml.XmlConvert.ToDateTime("2012-05-11");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDS-XMLInterchange", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSXMLInterchange(XElement xe) { return XTypedServices.ToXTypedElement<CDSXMLInterchange>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSXMLInterchange() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSInterchangeHeaderXName), new ChoiceContentModelEntity(new NamedContentModelEntity(CDSNetChangeAllMessageTypesXName), new NamedContentModelEntity(CDSBulkGroup160MessageXName)), new NamedContentModelEntity(CDSInterchangeTrailerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public CDSXMLInterchange() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual CDSInterchangeHeader_Structure CDSInterchangeHeader {
            get {
                XElement x = this.GetElement(CDSInterchangeHeaderXName);
                return ((CDSInterchangeHeader_Structure)(x));
            }
            set {
                this.SetElement(CDSInterchangeHeaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ALL CDS Types Any combination or sequenced
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange.CDSNetChangeAllMessageTypesLocalType> CDSNetChangeAllMessageTypes {
            get {
                if ((this.CDSNetChangeAllMessageTypesField == null)) {
                    this.CDSNetChangeAllMessageTypesField = new XTypedList<CDSNetChangeAllMessageTypesLocalType>(this, LinqToXsdTypeManager.Instance, CDSNetChangeAllMessageTypesXName);
                }
                return this.CDSNetChangeAllMessageTypesField;
            }
            set {
                if ((value == null)) {
                    this.CDSNetChangeAllMessageTypesField = null;
                }
                else {
                    if ((this.CDSNetChangeAllMessageTypesField == null)) {
                        this.CDSNetChangeAllMessageTypesField = XTypedList<CDSNetChangeAllMessageTypesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CDSNetChangeAllMessageTypesXName);
                    }
                    else {
                        XTypedServices.SetList<CDSNetChangeAllMessageTypesLocalType>(this.CDSNetChangeAllMessageTypesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Emergency  Care  - CDS Type 011  Added in V6-2-1 Feb 2017
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange.CDSBulkGroup160MessageLocalType> CDSBulkGroup160Message {
            get {
                if ((this.CDSBulkGroup160MessageField == null)) {
                    this.CDSBulkGroup160MessageField = new XTypedList<CDSBulkGroup160MessageLocalType>(this, LinqToXsdTypeManager.Instance, CDSBulkGroup160MessageXName);
                }
                return this.CDSBulkGroup160MessageField;
            }
            set {
                if ((value == null)) {
                    this.CDSBulkGroup160MessageField = null;
                }
                else {
                    if ((this.CDSBulkGroup160MessageField == null)) {
                        this.CDSBulkGroup160MessageField = XTypedList<CDSBulkGroup160MessageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CDSBulkGroup160MessageXName);
                    }
                    else {
                        XTypedServices.SetList<CDSBulkGroup160MessageLocalType>(this.CDSBulkGroup160MessageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual CDSInterchangeTrailer_Structure CDSInterchangeTrailer {
            get {
                XElement x = this.GetElement(CDSInterchangeTrailerXName);
                return ((CDSInterchangeTrailer_Structure)(x));
            }
            set {
                this.SetElement(CDSInterchangeTrailerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Enforce Version Number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SchemaVersion {
            get {
                return SchemaVersionFixedValue;
            }
            set {
                if (value.Equals(SchemaVersionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, SchemaVersionFixedValue);
                }
                this.SetAttribute(SchemaVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Enforce Schema Date
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime SchemaDate {
            get {
                return SchemaDateFixedValue;
            }
            set {
                if (value.Equals(SchemaDateFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, SchemaDateFixedValue);
                }
                this.SetAttribute(SchemaDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CDSXMLInterchange Load(string xmlFile) {
            return XTypedServices.Load<CDSXMLInterchange>(xmlFile);
        }
        
        public static CDSXMLInterchange Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CDSXMLInterchange>(xmlFile);
        }
        
        public static CDSXMLInterchange Parse(string xml) {
            return XTypedServices.Parse<CDSXMLInterchange>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSXMLInterchange>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSInterchangeHeaderXName, typeof(CDSInterchangeHeader_Structure));
            localElementDictionary.Add(CDSNetChangeAllMessageTypesXName, typeof(CDSNetChangeAllMessageTypesLocalType));
            localElementDictionary.Add(CDSBulkGroup160MessageXName, typeof(CDSBulkGroup160MessageLocalType));
            localElementDictionary.Add(CDSInterchangeTrailerXName, typeof(CDSInterchangeTrailer_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
        /// </para>
        /// </summary>
        public partial class CDSNetChangeAllMessageTypesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageHeaderXName = System.Xml.Linq.XName.Get("CDSMessageHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTransactionHeader_NetChangeXName = System.Xml.Linq.XName.Get("CDSTransactionHeader_NetChange", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareXName = System.Xml.Linq.XName.Get("EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeleteTransactionXName = System.Xml.Linq.XName.Get("DeleteTransaction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageTrailerXName = System.Xml.Linq.XName.Get("CDSMessageTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSProtocolIdentifierCodeFixedValue = "010";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSNetChange-All-MessageTypes", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CDSNetChangeAllMessageTypesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDSNetChangeAllMessageTypesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CDSNetChangeAllMessageTypesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageHeaderXName), new NamedContentModelEntity(CDSTransactionHeader_NetChangeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(EmergencyCareXName), new NamedContentModelEntity(DeleteTransactionXName)), new NamedContentModelEntity(CDSMessageTrailerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public CDSNetChangeAllMessageTypesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageHeader_Structure CDSMessageHeader {
                get {
                    XElement x = this.GetElement(CDSMessageHeaderXName);
                    return ((CDSMessageHeader_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageHeaderXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSTransactionHeader_NetChange_Structure CDSTransactionHeader_NetChange {
                get {
                    XElement x = this.GetElement(CDSTransactionHeader_NetChangeXName);
                    return ((CDSTransactionHeader_NetChange_Structure)(x));
                }
                set {
                    this.SetElement(CDSTransactionHeader_NetChangeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS TYPE 011
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual EmergencyCare_Stucture EmergencyCare {
                get {
                    XElement x = this.GetElement(EmergencyCareXName);
                    return ((EmergencyCare_Stucture)(x));
                }
                set {
                    this.SetElement(EmergencyCareXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual DeleteTransactionLocalType DeleteTransaction {
                get {
                    XElement x = this.GetElement(DeleteTransactionXName);
                    return ((DeleteTransactionLocalType)(x));
                }
                set {
                    this.SetElement(DeleteTransactionXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageTrailer_Structure CDSMessageTrailer {
                get {
                    XElement x = this.GetElement(CDSMessageTrailerXName);
                    return ((CDSMessageTrailer_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageTrailerXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Enforce CDS Protocols 010 = NET
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSProtocolIdentifierCode {
                get {
                    return CDSProtocolIdentifierCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSProtocolIdentifierCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSProtocolIdentifierCodeFixedValue);
                    }
                    this.SetAttribute(CDSProtocolIdentifierCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// All valid CDS Types
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSTypeCode {
                get {
                    XAttribute x = this.Attribute(CDSTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(CDSTypeCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CDSNetChangeAllMessageTypesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CDSMessageHeaderXName, typeof(CDSMessageHeader_Structure));
                localElementDictionary.Add(CDSTransactionHeader_NetChangeXName, typeof(CDSTransactionHeader_NetChange_Structure));
                localElementDictionary.Add(EmergencyCareXName, typeof(EmergencyCare_Stucture));
                localElementDictionary.Add(DeleteTransactionXName, typeof(DeleteTransactionLocalType));
                localElementDictionary.Add(CDSMessageTrailerXName, typeof(CDSMessageTrailer_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class DeleteTransactionLocalType : XTypedElement, IXMetaData {
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeleteTransaction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
		public static explicit operator DeleteTransactionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DeleteTransactionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DeleteTransactionLocalType() {
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DeleteTransactionLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
        /// </para>
        /// </summary>
        public partial class CDSBulkGroup160MessageLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageHeaderXName = System.Xml.Linq.XName.Get("CDSMessageHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTransactionHeader_BulkUpdateXName = System.Xml.Linq.XName.Get("CDSTransactionHeader_BulkUpdate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareXName = System.Xml.Linq.XName.Get("EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageTrailerXName = System.Xml.Linq.XName.Get("CDSMessageTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSProtocolIdentifierCodeFixedValue = "020";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSBulkReplacementGroupCodeXName = System.Xml.Linq.XName.Get("CDSBulkReplacementGroupCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSBulkReplacementGroupCodeFixedValue = "160";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSBulkGroup-160-Message", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CDSBulkGroup160MessageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDSBulkGroup160MessageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CDSBulkGroup160MessageLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageHeaderXName), new NamedContentModelEntity(CDSTransactionHeader_BulkUpdateXName), new NamedContentModelEntity(EmergencyCareXName), new NamedContentModelEntity(CDSMessageTrailerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public CDSBulkGroup160MessageLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageHeader_Structure CDSMessageHeader {
                get {
                    XElement x = this.GetElement(CDSMessageHeaderXName);
                    return ((CDSMessageHeader_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageHeaderXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSTransactionHeader_BulkUpdate_Structure CDSTransactionHeader_BulkUpdate {
                get {
                    XElement x = this.GetElement(CDSTransactionHeader_BulkUpdateXName);
                    return ((CDSTransactionHeader_BulkUpdate_Structure)(x));
                }
                set {
                    this.SetElement(CDSTransactionHeader_BulkUpdateXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS TYPE 011
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual EmergencyCare_Stucture EmergencyCare {
                get {
                    XElement x = this.GetElement(EmergencyCareXName);
                    return ((EmergencyCare_Stucture)(x));
                }
                set {
                    this.SetElement(EmergencyCareXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageTrailer_Structure CDSMessageTrailer {
                get {
                    XElement x = this.GetElement(CDSMessageTrailerXName);
                    return ((CDSMessageTrailer_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageTrailerXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSProtocolIdentifierCode {
                get {
                    return CDSProtocolIdentifierCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSProtocolIdentifierCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSProtocolIdentifierCodeFixedValue);
                    }
                    this.SetAttribute(CDSProtocolIdentifierCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSBulkReplacementGroupCode {
                get {
                    return CDSBulkReplacementGroupCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSBulkReplacementGroupCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSBulkReplacementGroupCodeFixedValue);
                    }
                    this.SetAttribute(CDSBulkReplacementGroupCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS Type 011 only
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSTypeCode {
                get {
                    XAttribute x = this.Attribute(CDSTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(CDSTypeCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CDSBulkGroup160MessageLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CDSMessageHeaderXName, typeof(CDSMessageHeader_Structure));
                localElementDictionary.Add(CDSTransactionHeader_BulkUpdateXName, typeof(CDSTransactionHeader_BulkUpdate_Structure));
                localElementDictionary.Add(EmergencyCareXName, typeof(EmergencyCare_Stucture));
                localElementDictionary.Add(CDSMessageTrailerXName, typeof(CDSMessageTrailer_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public sealed class AlphaNumeric_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AlphaNumeric_Type() {
        }
    }
    
    public sealed class Date_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Date_Type() {
        }
    }
    
    public sealed class DateOfBirth_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(592954560000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DateOfBirth_Type() {
        }
    }
    
    public sealed class Time_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Time_Type() {
        }
    }
    
    public sealed class DateTimeStamp {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null);
        
        private DateTimeStamp() {
        }
    }
    
    public sealed class Integer_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null);
        
        private Integer_Type() {
        }
    }
    
    public sealed class PositiveInteger_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), null);
        
        private PositiveInteger_Type() {
        }
    }
    
    public sealed class Number9NonNegative_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private Number9NonNegative_Type() {
        }
    }
    
    public sealed class Number9Positive_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private Number9Positive_Type() {
        }
    }
    
    public sealed class Number99NonNegative_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private Number99NonNegative_Type() {
        }
    }
    
    public sealed class Number99Positive_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private Number99Positive_Type() {
        }
    }
    
    public sealed class Number999NonNegative_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private Number999NonNegative_Type() {
        }
    }
    
    public sealed class Number999Positive_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private Number999Positive_Type() {
        }
    }
    
    public sealed class Number9999NonNegative_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private Number9999NonNegative_Type() {
        }
    }
    
    public sealed class Number9999Positive_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private Number9999Positive_Type() {
        }
    }
    
    public sealed class Number99999NonNegative_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
        
        private Number99999NonNegative_Type() {
        }
    }
    
    public sealed class Number99999Positive_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
        
        private Number99999Positive_Type() {
        }
    }
    
    public sealed class Number999p999_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3080)), null, 3, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}\\.\\d{3}"}, 7, XmlSchemaWhiteSpace.Collapse));
        
        private Number999p999_Type() {
        }
    }
    
    public sealed class ICD_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 4, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ICD_Type() {
        }
    }
    
    public sealed class ConsultantCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 8, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ConsultantCode_Type() {
        }
    }
    
    public sealed class GMP_Code_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 8, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GMP_Code_Type() {
        }
    }
    
    public sealed class OPCS_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OPCS_Type() {
        }
    }
    
    public sealed class PCT_Code_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PCT_Code_Type() {
        }
    }
    
    public sealed class OrgCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrgCode_Type() {
        }
    }
    
    public sealed class PersonName_StructuredWord_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 35, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonName_StructuredWord_Type() {
        }
    }
    
    public sealed class PersonName_UnstructuredText_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 70, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonName_UnstructuredText_Type() {
        }
    }
    
    public sealed class PracticeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PracticeCode_Type() {
        }
    }
    
    public sealed class READ_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private READ_Type() {
        }
    }
    
    public sealed class ReferrerCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 8, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferrerCode_Type() {
        }
    }
    
    public sealed class ReferringOrganisationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferringOrganisationCode_Type() {
        }
    }
    
    public sealed class StructuredAddress_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 35, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private StructuredAddress_Type() {
        }
    }
    
    public sealed class UnstructuredAddress_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 175, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnstructuredAddress_Type() {
        }
    }
    
    public sealed class VGPFreeText_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 70, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VGPFreeText_Type() {
        }
    }
    
    public sealed class VGPIdentityNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 35, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VGPIdentityNumber_Type() {
        }
    }
    
    public sealed class VGPPartyIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 35, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VGPPartyIdentifier_Type() {
        }
    }
    
    public sealed class VGPSequenceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VGPSequenceNumber_Type() {
        }
    }
    
    public sealed class CDSTypesFinished_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "120",
                        "130",
                        "140"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSTypesFinished_Type() {
        }
    }
    
    public sealed class CDSTypesUnFinished_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "180",
                        "190",
                        "200"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSTypesUnFinished_Type() {
        }
    }
    
    public sealed class CDSTypesEALEDP100110_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "100",
                        "110"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSTypesEALEDP100110_Type() {
        }
    }
    
    public sealed class CDSTypesEALEOP040050_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "040",
                        "050"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSTypesEALEOP040050_Type() {
        }
    }
    
    public sealed class CriticalCareUnitFunction_Adult_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12",
                        "90",
                        "91"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareUnitFunction_Adult_Type() {
        }
    }
    
    public sealed class CriticalCareUnitFunction_Neonatal_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "13",
                        "14",
                        "15"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareUnitFunction_Neonatal_Type() {
        }
    }
    
    public sealed class CriticalCareUnitFunction_Paediatric_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "04",
                        "16",
                        "17",
                        "18",
                        "19",
                        "92"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareUnitFunction_Paediatric_Type() {
        }
    }
    
    public sealed class NHSNumberStatusIndicatorCode_Withheld_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NHSNumberStatusIndicatorCode_Withheld_Type() {
        }
    }
    
    public sealed class NHSNumberStatusIndicatorCode_Verified_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NHSNumberStatusIndicatorCode_Verified_Type() {
        }
    }
    
    public sealed class NHSNumberStatusIndicatorCode_Unverified_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NHSNumberStatusIndicatorCode_Unverified_Type() {
        }
    }
    
    public sealed class AAndEArrivalModeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEArrivalModeCode_Type() {
        }
    }
    
    public sealed class AAndEAttendanceCategoryCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEAttendanceCategoryCode_Type() {
        }
    }
    
    public sealed class AAndEAttendanceConclusionTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEAttendanceConclusionTime_Type() {
        }
    }
    
    public sealed class AAndEAttendanceDisposalCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEAttendanceDisposalCode_Type() {
        }
    }
    
    public sealed class AAndEAttendanceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEAttendanceNumber_Type() {
        }
    }
    
    public sealed class AAndEDepartmentType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEDepartmentType_Type() {
        }
    }
    
    public sealed class AAndEDepartureTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEDepartureTime_Type() {
        }
    }
    
    public sealed class AAndEDiagnosis_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEDiagnosis_Type() {
        }
    }
    
    public sealed class AAndEIncidentLocationType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "10",
                        "40",
                        "50",
                        "60",
                        "91"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEIncidentLocationType_Type() {
        }
    }
    
    public sealed class AAndEInitialAssessmentTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEInitialAssessmentTime_Type() {
        }
    }
    
    public sealed class AAndEInvestigation_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEInvestigation_Type() {
        }
    }
    
    public sealed class AAndEPatientGroup_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "10",
                        "20",
                        "30",
                        "40",
                        "50",
                        "60",
                        "70",
                        "80"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEPatientGroup_Type() {
        }
    }
    
    public sealed class AAndEStaffMemberCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndEStaffMemberCode_Type() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V5-0:  (December 2005) Was numeric 4 digits 0000 - 2359  now uses XML standard hh:mm:ss format  (.sss is optional)
    /// </para>
    /// </summary>
    public sealed class AAndETimeSeenForTreatment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndETimeSeenForTreatment_Type() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V6:0  Length = min 2, max 6
    /// </para>
    /// </summary>
    public sealed class AAndETreatment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AAndETreatment_Type() {
        }
    }
    
    public sealed class ActivityDate_CriticalCare_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ActivityDate_CriticalCare_Type() {
        }
    }
    
    public sealed class AdministrativeCategoryCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AdministrativeCategoryCode_Type() {
        }
    }
    
    public sealed class AdministrativeCategoryCode_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AdministrativeCategoryCode_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class AdmissionMethodCode_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "2A",
                        "2B",
                        "2C",
                        "2D",
                        "11",
                        "12",
                        "13",
                        "21",
                        "22",
                        "23",
                        "24",
                        "25",
                        "28",
                        "31",
                        "32",
                        "81",
                        "82",
                        "83",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AdmissionMethodCode_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class AdmissionOfferOutcomeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AdmissionOfferOutcomeCode_Type() {
        }
    }
    
    public sealed class AdvancedCardiovascularSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private AdvancedCardiovascularSupportDays_Type() {
        }
    }
    
    public sealed class AdvancedRespiratorySupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private AdvancedRespiratorySupportDays_Type() {
        }
    }
    
    public sealed class AgeAtCDSActivityDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private AgeAtCDSActivityDate_Type() {
        }
    }
    
    public sealed class AgeAtCensus_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private AgeAtCensus_Type() {
        }
    }
    
    public sealed class AgeOnAdmission_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private AgeOnAdmission_Type() {
        }
    }
    
    public sealed class IntendedAgeGroup_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IntendedAgeGroup_Type() {
        }
    }
    
    public sealed class AnaestheticGivenDuringLabourOrDeliveryCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AnaestheticGivenDuringLabourOrDeliveryCode_Type() {
        }
    }
    
    public sealed class AnaestheticGivenPostLabourOrDeliveryCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AnaestheticGivenPostLabourOrDeliveryCode_Type() {
        }
    }
    
    public sealed class AppointmentDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AppointmentDate_Type() {
        }
    }
    
    public sealed class ArrivalDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ArrivalDate_Type() {
        }
    }
    
    public sealed class ArrivalTimeAtAAndE_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ArrivalTimeAtAAndE_Type() {
        }
    }
    
    public sealed class AttendanceIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AttendanceIdentifier_Type() {
        }
    }
    
    public sealed class AttendedOrDidNotAttendCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AttendedOrDidNotAttendCode_Type() {
        }
    }
    
    public sealed class BasicCardiovascularSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private BasicCardiovascularSupportDays_Type() {
        }
    }
    
    public sealed class BasicRespiratorySupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private BasicRespiratorySupportDays_Type() {
        }
    }
    
    public sealed class BirthOrder_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BirthOrder_Type() {
        }
    }
    
    public sealed class BirthWeight_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private BirthWeight_Type() {
        }
    }
    
    public sealed class CarerSupportIndicator_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CarerSupportIndicator_Type() {
        }
    }
    
    public sealed class CDSActivityDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSActivityDate_Type() {
        }
    }
    
    public sealed class CDSApplicableDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSApplicableDate_Type() {
        }
    }
    
    public sealed class CDSApplicableTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSApplicableTime_Type() {
        }
    }
    
    public sealed class CDSBulkReplacementGroupCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "160"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSBulkReplacementGroupCode_Type() {
        }
    }
    
    public sealed class CDSExtractDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSExtractDate_Type() {
        }
    }
    
    public sealed class CDSExtractTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSExtractTime_Type() {
        }
    }
    
    public sealed class CDSInterchangeApplicationReference_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 14, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSInterchangeApplicationReference_Type() {
        }
    }
    
    public sealed class CDSInterchangeControlCount_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 99999999999999m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSInterchangeControlCount_Type() {
        }
    }
    
    public sealed class CDSInterchangeControlReference_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 14, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSInterchangeControlReference_Type() {
        }
    }
    
    public sealed class CDSInterchangeDateOfPreparation_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSInterchangeDateOfPreparation_Type() {
        }
    }
    
    public sealed class CDSInterchangeReceiverIdentity_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 15, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSInterchangeReceiverIdentity_Type() {
        }
    }
    
    public sealed class CDSInterchangeSenderIdentity_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 15, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSInterchangeSenderIdentity_Type() {
        }
    }
    
    public sealed class CDSInterchangeTestIndicator_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSInterchangeTestIndicator_Type() {
        }
    }
    
    public sealed class CDSInterchangeTimeOfPreparation_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSInterchangeTimeOfPreparation_Type() {
        }
    }
    
    public sealed class CDSMessageRecordIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 35, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSMessageRecordIdentifier_Type() {
        }
    }
    
    public sealed class CDSMessageReferenceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 99999999999999m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSMessageReferenceNumber_Type() {
        }
    }
    
    public sealed class CDSMessageType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "NHSCDS"}, 0, 0, null, null, 6, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSMessageType_Type() {
        }
    }
    
    public sealed class CDSMessageVersionNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "CDS062"}, 0, 0, null, null, 8, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSMessageVersionNumber_Type() {
        }
    }
    
    public sealed class CDSOrganisationIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSOrganisationIdentifier_Type() {
        }
    }
    
    public sealed class CDSSender_Identifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSSender_Identifier_Type() {
        }
    }
    
    public sealed class CDSRecipient_Identifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSRecipient_Identifier_Type() {
        }
    }
    
    public sealed class CDSProtocolIdentifierCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "010",
                        "020"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSProtocolIdentifierCode_Type() {
        }
    }
    
    public sealed class CDSReportPeriodEndDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSReportPeriodEndDate_Type() {
        }
    }
    
    public sealed class CDSReportPeriodStartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CDSReportPeriodStartDate_Type() {
        }
    }
    
    public sealed class CDSTypeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "011"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSTypeCode_Type() {
        }
    }
    
    public sealed class CDSUniqueIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 35, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSUniqueIdentifier_Type() {
        }
    }
    
    public sealed class CDSUpdateType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "1",
                        "9"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CDSUpdateType_Type() {
        }
    }
    
    public sealed class CommissionerReferenceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 17, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CommissionerReferenceNumber_Type() {
        }
    }
    
    public sealed class CommissioningSerialNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CommissioningSerialNumber_Type() {
        }
    }
    
    public sealed class CountOfDaysSuspended_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private CountOfDaysSuspended_Type() {
        }
    }
    
    public sealed class CriticalCareActivityCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "21",
                        "22",
                        "23",
                        "24",
                        "25",
                        "26",
                        "27",
                        "28",
                        "29",
                        "50",
                        "51",
                        "52",
                        "53",
                        "55",
                        "56",
                        "57",
                        "58",
                        "59",
                        "60",
                        "61",
                        "62",
                        "63",
                        "64",
                        "65",
                        "66",
                        "67",
                        "68",
                        "69",
                        "70",
                        "71",
                        "72",
                        "73",
                        "74",
                        "99"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareActivityCode_Type() {
        }
    }
    
    public sealed class CriticalCareAdmissionSource_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareAdmissionSource_Type() {
        }
    }
    
    public sealed class CriticalCareAdmissionType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareAdmissionType_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareDischargeDate_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeDestination_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareDischargeDestination_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeLocation_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareDischargeLocation_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeReadyDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareDischargeReadyDate_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeReadyTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareDischargeReadyTime_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeStatus_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareDischargeStatus_Type() {
        }
    }
    
    public sealed class CriticalCareDischargeTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareDischargeTime_Type() {
        }
    }
    
    public sealed class CriticalCareLevel2Days_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareLevel2Days_Type() {
        }
    }
    
    public sealed class CriticalCareLevel3Days_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareLevel3Days_Type() {
        }
    }
    
    public sealed class CriticalCareLocalIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 8, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareLocalIdentifier_Type() {
        }
    }
    
    public sealed class CriticalCareSourceLocation_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareSourceLocation_Type() {
        }
    }
    
    public sealed class CriticalCareStartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareStartDate_Type() {
        }
    }
    
    public sealed class CriticalCareStartTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private CriticalCareStartTime_Type() {
        }
    }
    
    public sealed class CriticalCareUnitBedConfiguration_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "02",
                        "03",
                        "05",
                        "90"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CriticalCareUnitBedConfiguration_Type() {
        }
    }
    
    public sealed class DateDetentionCommenced_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DateDetentionCommenced_Type() {
        }
    }
    
    public sealed class DecidedToAdmitDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DecidedToAdmitDate_Type() {
        }
    }
    
    public sealed class DeliveryDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DeliveryDate_Type() {
        }
    }
    
    public sealed class DeliveryMethodCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryMethodCode_Type() {
        }
    }
    
    public sealed class DeliveryPlaceChangeReasonCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryPlaceChangeReasonCode_Type() {
        }
    }
    
    public sealed class DeliveryPlaceTypeCode_Actual_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryPlaceTypeCode_Actual_Type() {
        }
    }
    
    public sealed class DeliveryPlaceTypeCode_Intended_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeliveryPlaceTypeCode_Intended_Type() {
        }
    }
    
    public sealed class DermatologicalSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private DermatologicalSupportDays_Type() {
        }
    }
    
    public sealed class DetainedAndOrLongTermPsychiatricCensusDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DetainedAndOrLongTermPsychiatricCensusDate_Type() {
        }
    }
    
    public sealed class DiagnosisSchemeInUse_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "04",
                        "05"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DiagnosisSchemeInUse_Type() {
        }
    }
    
    public sealed class DischargeDate_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DischargeDate_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class DischargeDestinationCode_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "19",
                        "29",
                        "30",
                        "37",
                        "38",
                        "48",
                        "49",
                        "50",
                        "51",
                        "52",
                        "53",
                        "54",
                        "65",
                        "66",
                        "79",
                        "84",
                        "85",
                        "87",
                        "88",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DischargeDestinationCode_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class DischargeMethodCode_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DischargeMethodCode_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class DischargeReadyDate_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DischargeReadyDate_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class DurationOfCareToPsychiatricCensusDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
        
        private DurationOfCareToPsychiatricCensusDate_Type() {
        }
    }
    
    public sealed class DurationOfDetention_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
        
        private DurationOfDetention_Type() {
        }
    }
    
    public sealed class DurationOfElectiveWait_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private DurationOfElectiveWait_Type() {
        }
    }
    
    public sealed class EarliestReasonableOfferDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EarliestReasonableOfferDate_Type() {
        }
    }
    
    public sealed class ElectiveAdmissionListEntryNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElectiveAdmissionListEntryNumber_Type() {
        }
    }
    
    public sealed class ElectiveAdmissionListRemovalDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ElectiveAdmissionListRemovalDate_Type() {
        }
    }
    
    public sealed class ElectiveAdmissionListRemovalReasonCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElectiveAdmissionListRemovalReasonCode_Type() {
        }
    }
    
    public sealed class ElectiveAdmissionListStatus_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "99"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElectiveAdmissionListStatus_Type() {
        }
    }
    
    public sealed class ElectiveAdmissionTypeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "11",
                        "12",
                        "13"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElectiveAdmissionTypeCode_Type() {
        }
    }
    
    public sealed class EndDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EndDate_Type() {
        }
    }
    
    public sealed class EndDate_Episode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EndDate_Episode_Type() {
        }
    }
    
    public sealed class EpisodeNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private EpisodeNumber_Type() {
        }
    }
    
    public sealed class EthnicCategory_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 2, null, null, 0, new string[] {
                        "99",
                        "[ABCDEFGHJKLMNPRSZ]",
                        "[ABCDEFGHJKLMNPRSZ]."}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EthnicCategory_Type() {
        }
    }
    
    public sealed class EthnicCategory2021_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EthnicCategory2021_Type() {
        }
    }
    
    public sealed class FirstAntenatalAssessmentDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private FirstAntenatalAssessmentDate_Type() {
        }
    }
    
    public sealed class FirstAttendanceCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FirstAttendanceCode_Type() {
        }
    }
    
    public sealed class FirstRegularDayOrNightAdmissionCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FirstRegularDayOrNightAdmissionCode_Type() {
        }
    }
    
    public sealed class GeneralMedicalPractitioner_AntenatalCare_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 8, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GeneralMedicalPractitioner_AntenatalCare_Type() {
        }
    }
    
    public sealed class GeneralMedicalPractitioner_Specified_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 8, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GeneralMedicalPractitioner_Specified_Type() {
        }
    }
    
    public sealed class GeneralPractice_PatientRegistration_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GeneralPractice_PatientRegistration_Type() {
        }
    }
    
    public sealed class GeneralMedicalPractitionerPractice_AntenatalCare_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GeneralMedicalPractitionerPractice_AntenatalCare_Type() {
        }
    }
    
    public sealed class GastroIntestinalSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private GastroIntestinalSupportDays_Type() {
        }
    }
    
    public sealed class GestationLength_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        10m,
                        11m,
                        12m,
                        13m,
                        14m,
                        15m,
                        16m,
                        17m,
                        18m,
                        19m,
                        20m,
                        21m,
                        22m,
                        23m,
                        24m,
                        25m,
                        26m,
                        27m,
                        28m,
                        29m,
                        30m,
                        31m,
                        32m,
                        33m,
                        34m,
                        35m,
                        36m,
                        37m,
                        38m,
                        39m,
                        40m,
                        41m,
                        42m,
                        43m,
                        44m,
                        45m,
                        46m,
                        47m,
                        48m,
                        49m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private GestationLength_Type() {
        }
    }
    
    public sealed class GestationLengthLabourOnset_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        10m,
                        11m,
                        12m,
                        13m,
                        14m,
                        15m,
                        16m,
                        17m,
                        18m,
                        19m,
                        20m,
                        21m,
                        22m,
                        23m,
                        24m,
                        25m,
                        26m,
                        27m,
                        28m,
                        29m,
                        30m,
                        31m,
                        32m,
                        33m,
                        34m,
                        35m,
                        36m,
                        37m,
                        38m,
                        39m,
                        40m,
                        41m,
                        42m,
                        43m,
                        44m,
                        45m,
                        46m,
                        47m,
                        48m,
                        49m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private GestationLengthLabourOnset_Type() {
        }
    }
    
    public sealed class GestationLengthAssessment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        10m,
                        11m,
                        12m,
                        13m,
                        14m,
                        15m,
                        16m,
                        17m,
                        18m,
                        19m,
                        20m,
                        21m,
                        22m,
                        23m,
                        24m,
                        25m,
                        26m,
                        27m,
                        28m,
                        29m,
                        30m,
                        31m,
                        32m,
                        33m,
                        34m,
                        35m,
                        36m,
                        37m,
                        38m,
                        39m,
                        40m,
                        41m,
                        42m,
                        43m,
                        44m,
                        45m,
                        46m,
                        47m,
                        48m,
                        49m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private GestationLengthAssessment_Type() {
        }
    }
    
    public sealed class GuaranteedAdmissionDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private GuaranteedAdmissionDate_Type() {
        }
    }
    
    public sealed class HighCostDrugs_OPCS_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private HighCostDrugs_OPCS_Type() {
        }
    }
    
    public sealed class HospitalProviderSpellNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private HospitalProviderSpellNumber_Type() {
        }
    }
    
    public sealed class IntendedClinicalCareIntensityCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "11",
                        "12",
                        "13",
                        "21",
                        "22",
                        "31",
                        "32",
                        "33",
                        "41",
                        "42",
                        "43",
                        "51",
                        "52",
                        "53",
                        "61",
                        "62",
                        "63",
                        "71",
                        "72",
                        "81"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IntendedClinicalCareIntensityCode_Type() {
        }
    }
    
    public sealed class IntendedManagementCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IntendedManagementCode_Type() {
        }
    }
    
    public sealed class IntendedProcedureStatusCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IntendedProcedureStatusCode_Type() {
        }
    }
    
    public sealed class IntendedSiteCode_OfTreatment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IntendedSiteCode_OfTreatment_Type() {
        }
    }
    
    public sealed class InvestigationSchemeInUse_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private InvestigationSchemeInUse_Type() {
        }
    }
    
    public sealed class LabourOrDeliveryOnsetMethodCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LabourOrDeliveryOnsetMethodCode_Type() {
        }
    }
    
    public sealed class LastDNAOrPatientCancelledDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LastDNAOrPatientCancelledDate_Type() {
        }
    }
    
    public sealed class LastEpisodeInSpellIndicatorCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LastEpisodeInSpellIndicatorCode_Type() {
        }
    }
    
    public sealed class LegalStatusClassificationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        12m,
                        13m,
                        14m,
                        15m,
                        16m,
                        17m,
                        18m,
                        19m,
                        20m,
                        31m,
                        32m,
                        33m,
                        34m,
                        35m,
                        36m,
                        98m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private LegalStatusClassificationCode_Type() {
        }
    }
    
    public sealed class MentalHealthActLegalStatusClassificationCode_AtCensusDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20",
                        "31",
                        "32",
                        "34",
                        "35",
                        "36",
                        "37",
                        "38",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MentalHealthActLegalStatusClassificationCode_AtCensusDate_Type() {
        }
    }
    
    public sealed class MentalHealthActLegalStatusClassificationCode_OnAdmission_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20",
                        "31",
                        "32",
                        "34",
                        "35",
                        "36",
                        "37",
                        "38",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MentalHealthActLegalStatusClassificationCode_OnAdmission_Type() {
        }
    }
    
    public sealed class MentalHealthActLegalStatusClassificationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20",
                        "31",
                        "32",
                        "34",
                        "35",
                        "36",
                        "37",
                        "38",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MentalHealthActLegalStatusClassificationCode_Type() {
        }
    }
    
    public sealed class LiveOrStillBirthCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LiveOrStillBirthCode_Type() {
        }
    }
    
    public sealed class LiverSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private LiverSupportDays_Type() {
        }
    }
    
    public sealed class LocalPatientIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LocalPatientIdentifier_Type() {
        }
    }
    
    public sealed class LocationClass_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LocationClass_Type() {
        }
    }
    
    public sealed class ActivityLocationType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A01",
                        "A02",
                        "A03",
                        "A04",
                        "B01",
                        "B02",
                        "C01",
                        "C02",
                        "C03",
                        "D01",
                        "D02",
                        "D03",
                        "E01",
                        "E02",
                        "E03",
                        "E04",
                        "E99",
                        "F01",
                        "G01",
                        "G02",
                        "G03",
                        "H01",
                        "J01",
                        "K01",
                        "K02",
                        "L01",
                        "L02",
                        "L03",
                        "L04",
                        "L05",
                        "L06",
                        "L99",
                        "M01",
                        "M02",
                        "M03",
                        "M04",
                        "M05",
                        "N01",
                        "N02",
                        "N03",
                        "N04",
                        "N05",
                        "X01"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ActivityLocationType_Type() {
        }
    }
    
    public sealed class CareProfessionalMainSpecialtyCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "100",
                        "101",
                        "110",
                        "120",
                        "130",
                        "140",
                        "141",
                        "142",
                        "143",
                        "145",
                        "146",
                        "147",
                        "148",
                        "149",
                        "150",
                        "160",
                        "170",
                        "171",
                        "180",
                        "190",
                        "192",
                        "300",
                        "301",
                        "302",
                        "303",
                        "304",
                        "305",
                        "310",
                        "311",
                        "312",
                        "313",
                        "314",
                        "315",
                        "320",
                        "321",
                        "330",
                        "340",
                        "350",
                        "352",
                        "360",
                        "361",
                        "370",
                        "371",
                        "400",
                        "401",
                        "410",
                        "420",
                        "421",
                        "430",
                        "450",
                        "460",
                        "501",
                        "502",
                        "560",
                        "600",
                        "601",
                        "700",
                        "710",
                        "711",
                        "712",
                        "713",
                        "715",
                        "800",
                        "810",
                        "820",
                        "821",
                        "822",
                        "823",
                        "824",
                        "830",
                        "831",
                        "900",
                        "901",
                        "902",
                        "903",
                        "904",
                        "950",
                        "960",
                        "199",
                        "499",
                        "325",
                        "326",
                        "451",
                        "504",
                        "833",
                        "834"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CareProfessionalMainSpecialtyCode_Type() {
        }
    }
    
    public sealed class MedicalStaffTypeSeeingPatient_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "03",
                        "04",
                        "08",
                        "09"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MedicalStaffTypeSeeingPatient_Type() {
        }
    }
    
    public sealed class MentalHealthAct2007_MentalCategory_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "B",
                        "5",
                        "8",
                        "9"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MentalHealthAct2007_MentalCategory_Type() {
        }
    }
    
    public sealed class NeonatalLevelOfCareCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3",
                        "8",
                        "9"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NeonatalLevelOfCareCode_Type() {
        }
    }
    
    public sealed class NeurologicalSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private NeurologicalSupportDays_Type() {
        }
    }
    
    public sealed class NHSNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[0-9]{10}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NHSNumber_Type() {
        }
    }
    
    public sealed class NHSServiceAgreementChangeDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private NHSServiceAgreementChangeDate_Type() {
        }
    }
    
    public sealed class NHSServiceAgreementLineNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NHSServiceAgreementLineNumber_Type() {
        }
    }
    
    public sealed class NumberOfBabiesIndicationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NumberOfBabiesIndicationCode_Type() {
        }
    }
    
    public sealed class OfferedForAdmissionDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private OfferedForAdmissionDate_Type() {
        }
    }
    
    public sealed class OperationStatusCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OperationStatusCode_Type() {
        }
    }
    
    public sealed class OrganisationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrganisationCode_Type() {
        }
    }
    
    public sealed class OrganisationSiteCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrganisationSiteCode_Type() {
        }
    }
    
    public sealed class OrganisationCode_PatientPathwayIdentifierIssuer_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrganisationCode_PatientPathwayIdentifierIssuer_Type() {
        }
    }
    
    public sealed class OrganSupportMaximum_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "00",
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrganSupportMaximum_Type() {
        }
    }
    
    public sealed class OriginalDecidedToAdmitDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private OriginalDecidedToAdmitDate_Type() {
        }
    }
    
    public sealed class OutcomeOfAttendanceCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OutcomeOfAttendanceCode_Type() {
        }
    }
    
    public sealed class PatientClassificationCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "8"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PatientClassificationCode_Type() {
        }
    }
    
    public sealed class PatientPathwayIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 20, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PatientPathwayIdentifier_Type() {
        }
    }
    
    public sealed class PersonBirthDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(592954560000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private PersonBirthDate_Type() {
        }
    }
    
    public sealed class PersonBirthDate_Baby_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(592954560000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private PersonBirthDate_Baby_Type() {
        }
    }
    
    public sealed class PersonGenderCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonGenderCode_Type() {
        }
    }
    
    public sealed class PersonGenderCodeCurrent_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonGenderCodeCurrent_Type() {
        }
    }
    
    public sealed class PersonGenderCodeCurrent_Baby_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonGenderCodeCurrent_Baby_Type() {
        }
    }
    
    public sealed class PersonMaritalStatus_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "8",
                        "9",
                        "D",
                        "M",
                        "N",
                        "P",
                        "S",
                        "W"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonMaritalStatus_Type() {
        }
    }
    
    public sealed class PersonWeight_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3080)), null, 3, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3}\\.\\d{3}"}, 7, XmlSchemaWhiteSpace.Collapse));
        
        private PersonWeight_Type() {
        }
    }
    
    public sealed class PostcodeOfUsualAddress_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 8, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PostcodeOfUsualAddress_Type() {
        }
    }
    
    public sealed class PregnancyTotalPreviousPregnancies_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "00",
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "09",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "18",
                        "19",
                        "20",
                        "21",
                        "22",
                        "23",
                        "24",
                        "25",
                        "26",
                        "27",
                        "28",
                        "29",
                        "99"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PregnancyTotalPreviousPregnancies_Type() {
        }
    }
    
    public sealed class PrimaryDiagnosis_ICD_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 4, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PrimaryDiagnosis_ICD_Type() {
        }
    }
    
    public sealed class PrimaryDiagnosis_READ_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PrimaryDiagnosis_READ_Type() {
        }
    }
    
    public sealed class PrimaryProcedure_OPCS_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PrimaryProcedure_OPCS_Type() {
        }
    }
    
    public sealed class PrimaryProcedure_READ_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PrimaryProcedure_READ_Type() {
        }
    }
    
    public sealed class PriorityTypeCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PriorityTypeCode_Type() {
        }
    }
    
    public sealed class ProcedureDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ProcedureDate_Type() {
        }
    }
    
    public sealed class ProcedureSchemeInUse_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProcedureSchemeInUse_Type() {
        }
    }
    
    public sealed class Procedure_OPCS_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Procedure_OPCS_Type() {
        }
    }
    
    public sealed class Procedure_READ_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Procedure_READ_Type() {
        }
    }
    
    public sealed class ProviderReferenceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 17, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProviderReferenceNumber_Type() {
        }
    }
    
    public sealed class PsychiatricPatientStatusCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PsychiatricPatientStatusCode_Type() {
        }
    }
    
    public sealed class ReferralRequestReceivedDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ReferralRequestReceivedDate_Type() {
        }
    }
    
    public sealed class ReferralToTreatmentPeriod_EndDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ReferralToTreatmentPeriod_EndDate_Type() {
        }
    }
    
    public sealed class ReferralToTreatmentPeriod_StartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ReferralToTreatmentPeriod_StartDate_Type() {
        }
    }
    
    public sealed class ReferralToTreatmentPeriod_Status_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "10",
                        "11",
                        "12",
                        "20",
                        "21",
                        "30",
                        "31",
                        "32",
                        "33",
                        "34",
                        "35",
                        "36",
                        "90",
                        "91",
                        "92",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferralToTreatmentPeriod_Status_Type() {
        }
    }
    
    public sealed class RenalSupportDays_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private RenalSupportDays_Type() {
        }
    }
    
    public sealed class ResuscitationMethodCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResuscitationMethodCode_Type() {
        }
    }
    
    public sealed class SecondaryDiagnosis_ICD_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 6, null, null, 4, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SecondaryDiagnosis_ICD_Type() {
        }
    }
    
    public sealed class SecondaryDiagnosis_READ_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SecondaryDiagnosis_READ_Type() {
        }
    }
    
    public sealed class ServiceTypeRequestedCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ServiceTypeRequestedCode_Type() {
        }
    }
    
    public sealed class SexOfPatientsCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SexOfPatientsCode_Type() {
        }
    }
    
    public sealed class SiteCodeOfTreatment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SiteCodeOfTreatment_Type() {
        }
    }
    
    public sealed class SourceOfAdmissionCode_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "19",
                        "29",
                        "39",
                        "49",
                        "51",
                        "52",
                        "53",
                        "54",
                        "65",
                        "66",
                        "79",
                        "85",
                        "87",
                        "88",
                        "98",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SourceOfAdmissionCode_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class SourceOfReferralForAAndE_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "00",
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "08",
                        "92",
                        "93"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SourceOfReferralForAAndE_Type() {
        }
    }
    
    public sealed class SourceOfReferralForOut_Patients_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05",
                        "06",
                        "07",
                        "10",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16",
                        "17",
                        "92",
                        "93",
                        "97"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SourceOfReferralForOut_Patients_Type() {
        }
    }
    
    public sealed class StartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartDate_Type() {
        }
    }
    
    public sealed class StartDate_Episode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartDate_Episode_Type() {
        }
    }
    
    public sealed class StartDate_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartDate_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class StatusOfPatientIncludedInThePsychiatricCensusCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private StatusOfPatientIncludedInThePsychiatricCensusCode_Type() {
        }
    }
    
    public sealed class StatusOfPersonConductingDeliveryCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private StatusOfPersonConductingDeliveryCode_Type() {
        }
    }
    
    public sealed class SuspensionStartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SuspensionStartDate_Type() {
        }
    }
    
    public sealed class SuspensionEndDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SuspensionEndDate_Type() {
        }
    }
    
    public sealed class ActivityTreatmentFunctionCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "100",
                        "101",
                        "102",
                        "103",
                        "104",
                        "105",
                        "106",
                        "107",
                        "108",
                        "110",
                        "120",
                        "130",
                        "140",
                        "141",
                        "142",
                        "143",
                        "144",
                        "150",
                        "160",
                        "161",
                        "170",
                        "171",
                        "172",
                        "173",
                        "174",
                        "180",
                        "190",
                        "191",
                        "192",
                        "199",
                        "211",
                        "212",
                        "213",
                        "214",
                        "215",
                        "216",
                        "217",
                        "218",
                        "219",
                        "220",
                        "221",
                        "222",
                        "223",
                        "241",
                        "242",
                        "251",
                        "252",
                        "253",
                        "254",
                        "255",
                        "256",
                        "257",
                        "258",
                        "259",
                        "260",
                        "261",
                        "262",
                        "263",
                        "264",
                        "280",
                        "290",
                        "291",
                        "300",
                        "301",
                        "302",
                        "303",
                        "304",
                        "305",
                        "306",
                        "307",
                        "308",
                        "309",
                        "310",
                        "311",
                        "313",
                        "314",
                        "315",
                        "316",
                        "317",
                        "318",
                        "319",
                        "320",
                        "321",
                        "322",
                        "323",
                        "324",
                        "325",
                        "327",
                        "328",
                        "329",
                        "330",
                        "331",
                        "340",
                        "341",
                        "342",
                        "343",
                        "344",
                        "345",
                        "346",
                        "350",
                        "352",
                        "360",
                        "361",
                        "370",
                        "371",
                        "400",
                        "401",
                        "410",
                        "420",
                        "421",
                        "422",
                        "424",
                        "430",
                        "450",
                        "460",
                        "499",
                        "501",
                        "502",
                        "503",
                        "560",
                        "650",
                        "651",
                        "652",
                        "653",
                        "654",
                        "655",
                        "656",
                        "657",
                        "658",
                        "659",
                        "660",
                        "661",
                        "662",
                        "663",
                        "700",
                        "710",
                        "711",
                        "712",
                        "713",
                        "715",
                        "720",
                        "721",
                        "722",
                        "723",
                        "724",
                        "725",
                        "726",
                        "727",
                        "800",
                        "811",
                        "812",
                        "822",
                        "834",
                        "840",
                        "920"}, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ActivityTreatmentFunctionCode_Type() {
        }
    }
    
    public sealed class UBRN_Converted_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[0-9]{12}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UBRN_Converted_Type() {
        }
    }
    
    public sealed class WaitingListEntryLastReviewedDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private WaitingListEntryLastReviewedDate_Type() {
        }
    }
    
    public sealed class WardDayPeriodAvailabilityCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WardDayPeriodAvailabilityCode_Type() {
        }
    }
    
    public sealed class WardNightPeriodAvailabilityCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WardNightPeriodAvailabilityCode_Type() {
        }
    }
    
    public sealed class LengthOfStayAdjustment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 999m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LengthOfStayAdjustment_Type() {
        }
    }
    
    public sealed class LengthOfStayAdjustmentReason_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 999m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private LengthOfStayAdjustmentReason_Type() {
        }
    }
    
    public sealed class ConsultationMediumUsed_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ConsultationMediumUsed_Type() {
        }
    }
    
    public sealed class WardSecurityLevel_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WardSecurityLevel_Type() {
        }
    }
    
    public sealed class WaitingTimeMeasurementType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "09"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WaitingTimeMeasurementType_Type() {
        }
    }
    
    public sealed class ClinicCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ClinicCode_Type() {
        }
    }
    
    public sealed class StartTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartTime_Type() {
        }
    }
    
    public sealed class EndTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EndTime_Type() {
        }
    }
    
    public sealed class WardCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WardCode_Type() {
        }
    }
    
    public sealed class StartTime_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartTime_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class DischargeTime_HospitalProviderSpell_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private DischargeTime_HospitalProviderSpell_Type() {
        }
    }
    
    public sealed class AAndEInitialAssessmentDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEInitialAssessmentDate_Type() {
        }
    }
    
    public sealed class AAndEDateSeenForTreatment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEDateSeenForTreatment_Type() {
        }
    }
    
    public sealed class AAndEAttendanceConclusionDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEAttendanceConclusionDate_Type() {
        }
    }
    
    public sealed class AAndEDepartureDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AAndEDepartureDate_Type() {
        }
    }
    
    public sealed class WithheldIdentityReason_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "97",
                        "99"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private WithheldIdentityReason_Type() {
        }
    }
    
    public sealed class AppointmentTime_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private AppointmentTime_Type() {
        }
    }
    
    public sealed class StartTime_Episode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private StartTime_Episode_Type() {
        }
    }
    
    public sealed class EndTime_Episode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EndTime_Episode_Type() {
        }
    }
    
    public sealed class MultiProfOrDiscIndCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MultiProfOrDiscIndCode_Type() {
        }
    }
    
    public sealed class DirectAccessReferralIndicator_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "Y",
                        "N",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DirectAccessReferralIndicator_Type() {
        }
    }
    
    public sealed class PresentOnAdmissionIndicator_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "Y",
                        "N",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PresentOnAdmissionIndicator_Type() {
        }
    }
    
    public sealed class DischargedToHospitalAtHomeServiceIndicator_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "Y",
                        "N",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DischargedToHospitalAtHomeServiceIndicator_Type() {
        }
    }
    
    public sealed class AmbulanceIncidentNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 20, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AmbulanceIncidentNumber_Type() {
        }
    }
    
    public sealed class OrganisationCodeConveyingAmbulanceTrust_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrganisationCodeConveyingAmbulanceTrust_Type() {
        }
    }
    
    public sealed class ExpectedDurationOfAppointment_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 999m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ExpectedDurationOfAppointment_Type() {
        }
    }
    
    public sealed class EarliestClinicallyAppropriateDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private EarliestClinicallyAppropriateDate_Type() {
        }
    }
    
    public sealed class OverseasVisitorStatusClassificationAtCDSActivityDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "8",
                        "9",
                        "P"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OverseasVisitorStatusClassificationAtCDSActivityDate_Type() {
        }
    }
    
    public sealed class OverseasVisitorClassification_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "8",
                        "9",
                        "P"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OverseasVisitorClassification_Type() {
        }
    }
    
    public sealed class OverseasVisitorStatusStartDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private OverseasVisitorStatusStartDate_Type() {
        }
    }
    
    public sealed class OverseasVisitorStatusEndDate_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.DateTime(946391904000000000), 0, null, new System.DateTime(599266080000000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private OverseasVisitorStatusEndDate_Type() {
        }
    }
    
    public sealed class sequenceNumber_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(576)), null, 0, 0, null, 999m, 0, 1m, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private sequenceNumber_Type() {
        }
    }
    
    public sealed class ProfessionalRegistrationIssuerCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "02",
                        "03",
                        "08",
                        "09"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProfessionalRegistrationIssuerCode_Type() {
        }
    }
    
    public sealed class ProfessionalRegistrationEntryIdentifier_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProfessionalRegistrationEntryIdentifier_Type() {
        }
    }
    
    public sealed class LocalSubSpecialtyCode_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 8, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LocalSubSpecialtyCode_Type() {
        }
    }
    
    public sealed class RehabilitationAssessmentTeamType_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "8",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RehabilitationAssessmentTeamType_Type() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UnstructuredAddress | StructuredAddress+)
    /// </para>
    /// </summary>
    public partial class Address_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnstructuredAddressXName = System.Xml.Linq.XName.Get("UnstructuredAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StructuredAddressXName = System.Xml.Linq.XName.Get("StructuredAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> StructuredAddressField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Address_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Address_Structure(XElement xe) { return XTypedServices.ToXTypedElement<Address_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Address_Structure() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(UnstructuredAddressXName), new NamedContentModelEntity(StructuredAddressXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UnstructuredAddress | StructuredAddress+)
        /// </para>
        /// </summary>
        public Address_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (UnstructuredAddress | StructuredAddress+)
        /// </para>
        /// </summary>
        public virtual string UnstructuredAddress {
            get {
                XElement x = this.GetElement(UnstructuredAddressXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UnstructuredAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UnstructuredAddressXName, value, "UnstructuredAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UnstructuredAddress_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (UnstructuredAddress | StructuredAddress+)
        /// </para>
        /// </summary>
        public virtual IList<string> StructuredAddress {
            get {
                if ((this.StructuredAddressField == null)) {
                    this.StructuredAddressField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, StructuredAddressXName);
                }
                return this.StructuredAddressField;
            }
            set {
                if ((value == null)) {
                    this.StructuredAddressField = null;
                }
                else {
                    if ((this.StructuredAddressField == null)) {
                        this.StructuredAddressField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, StructuredAddressXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.StructuredAddressField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Address_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnstructuredAddressXName, typeof(string));
            localElementDictionary.Add(StructuredAddressXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?, ClinicalTreatmentGroupAandE?)
    /// </para>
    /// </summary>
    public partial class ClinicalActivity_AE_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalActivityGroupOPCSXName = System.Xml.Linq.XName.Get("ClinicalActivityGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalActivityGroupREADXName = System.Xml.Linq.XName.Get("ClinicalActivityGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentGroupAandEXName = System.Xml.Linq.XName.Get("ClinicalTreatmentGroupAandE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalActivity_AE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalActivity_AE_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalActivity_AE_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalActivity_AE_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalActivityGroupOPCSXName), new NamedContentModelEntity(ClinicalActivityGroupREADXName), new NamedContentModelEntity(ClinicalTreatmentGroupAandEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?, ClinicalTreatmentGroupAandE?)
        /// </para>
        /// </summary>
        public ClinicalActivity_AE_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?, ClinicalTreatmentGroupAandE?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivityGroupOPCS_Type ClinicalActivityGroupOPCS {
            get {
                XElement x = this.GetElement(ClinicalActivityGroupOPCSXName);
                return ((ClinicalActivityGroupOPCS_Type)(x));
            }
            set {
                this.SetElement(ClinicalActivityGroupOPCSXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?, ClinicalTreatmentGroupAandE?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivityGroupREAD_Type ClinicalActivityGroupREAD {
            get {
                XElement x = this.GetElement(ClinicalActivityGroupREADXName);
                return ((ClinicalActivityGroupREAD_Type)(x));
            }
            set {
                this.SetElement(ClinicalActivityGroupREADXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?, ClinicalTreatmentGroupAandE?)
        /// </para>
        /// </summary>
        public virtual ClinicalTreatmentGroupAAndE_Type ClinicalTreatmentGroupAandE {
            get {
                XElement x = this.GetElement(ClinicalTreatmentGroupAandEXName);
                return ((ClinicalTreatmentGroupAAndE_Type)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentGroupAandEXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalActivity_AE_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClinicalActivityGroupOPCSXName, typeof(ClinicalActivityGroupOPCS_Type));
            localElementDictionary.Add(ClinicalActivityGroupREADXName, typeof(ClinicalActivityGroupREAD_Type));
            localElementDictionary.Add(ClinicalTreatmentGroupAandEXName, typeof(ClinicalTreatmentGroupAAndE_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?)
    /// </para>
    /// </summary>
    public partial class ClinicalActivity_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalActivityGroupOPCSXName = System.Xml.Linq.XName.Get("ClinicalActivityGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalActivityGroupREADXName = System.Xml.Linq.XName.Get("ClinicalActivityGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalActivity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalActivity_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalActivity_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalActivity_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalActivityGroupOPCSXName), new NamedContentModelEntity(ClinicalActivityGroupREADXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?)
        /// </para>
        /// </summary>
        public ClinicalActivity_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivityGroupOPCS_Type ClinicalActivityGroupOPCS {
            get {
                XElement x = this.GetElement(ClinicalActivityGroupOPCSXName);
                return ((ClinicalActivityGroupOPCS_Type)(x));
            }
            set {
                this.SetElement(ClinicalActivityGroupOPCSXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalActivityGroupOPCS?, ClinicalActivityGroupREAD?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivityGroupREAD_Type ClinicalActivityGroupREAD {
            get {
                XElement x = this.GetElement(ClinicalActivityGroupREADXName);
                return ((ClinicalActivityGroupREAD_Type)(x));
            }
            set {
                this.SetElement(ClinicalActivityGroupREADXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalActivity_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClinicalActivityGroupOPCSXName, typeof(ClinicalActivityGroupOPCS_Type));
            localElementDictionary.Add(ClinicalActivityGroupREADXName, typeof(ClinicalActivityGroupREAD_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupOPCS, SecondaryProcedureGroupOPCS*)
    /// </para>
    /// </summary>
    public partial class ClinicalActivityGroupOPCS_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProcedureSchemeInUseXName = System.Xml.Linq.XName.Get("ProcedureSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryProcedureGroupOPCSXName = System.Xml.Linq.XName.Get("PrimaryProcedureGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryProcedureGroupOPCSXName = System.Xml.Linq.XName.Get("SecondaryProcedureGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryProcedureGroupOPCSLocalType> SecondaryProcedureGroupOPCSField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalActivityGroupOPCS_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalActivityGroupOPCS_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalActivityGroupOPCS_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalActivityGroupOPCS_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProcedureSchemeInUseXName), new NamedContentModelEntity(PrimaryProcedureGroupOPCSXName), new NamedContentModelEntity(SecondaryProcedureGroupOPCSXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupOPCS, SecondaryProcedureGroupOPCS*)
        /// </para>
        /// </summary>
        public ClinicalActivityGroupOPCS_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupOPCS, SecondaryProcedureGroupOPCS*)
        /// </para>
        /// </summary>
        public virtual string ProcedureSchemeInUse {
            get {
                XElement x = this.GetElement(ProcedureSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ProcedureSchemeInUseXName, value, "ProcedureSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupOPCS, SecondaryProcedureGroupOPCS*)
        /// </para>
        /// </summary>
        public virtual PrimaryProcedureGroupOPCSLocalType PrimaryProcedureGroupOPCS {
            get {
                XElement x = this.GetElement(PrimaryProcedureGroupOPCSXName);
                return ((PrimaryProcedureGroupOPCSLocalType)(x));
            }
            set {
                this.SetElement(PrimaryProcedureGroupOPCSXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupOPCS, SecondaryProcedureGroupOPCS*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivityGroupOPCS_Type.SecondaryProcedureGroupOPCSLocalType> SecondaryProcedureGroupOPCS {
            get {
                if ((this.SecondaryProcedureGroupOPCSField == null)) {
                    this.SecondaryProcedureGroupOPCSField = new XTypedList<SecondaryProcedureGroupOPCSLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryProcedureGroupOPCSXName);
                }
                return this.SecondaryProcedureGroupOPCSField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryProcedureGroupOPCSField = null;
                }
                else {
                    if ((this.SecondaryProcedureGroupOPCSField == null)) {
                        this.SecondaryProcedureGroupOPCSField = XTypedList<SecondaryProcedureGroupOPCSLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryProcedureGroupOPCSXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryProcedureGroupOPCSLocalType>(this.SecondaryProcedureGroupOPCSField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalActivityGroupOPCS_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProcedureSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryProcedureGroupOPCSXName, typeof(PrimaryProcedureGroupOPCSLocalType));
            localElementDictionary.Add(SecondaryProcedureGroupOPCSXName, typeof(SecondaryProcedureGroupOPCSLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
        /// </para>
        /// </summary>
        public partial class PrimaryProcedureGroupOPCSLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryProcedure_OPCSXName = System.Xml.Linq.XName.Get("PrimaryProcedure_OPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MainOperatingHCPXName = System.Xml.Linq.XName.Get("MainOperatingHCP", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ResponsibleAnaesthetistXName = System.Xml.Linq.XName.Get("ResponsibleAnaesthetist", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryProcedureGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryProcedureGroupOPCSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryProcedureGroupOPCSLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryProcedureGroupOPCSLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryProcedure_OPCSXName), new NamedContentModelEntity(ProcedureDateXName), new NamedContentModelEntity(MainOperatingHCPXName), new NamedContentModelEntity(ResponsibleAnaesthetistXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public PrimaryProcedureGroupOPCSLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual string PrimaryProcedure_OPCS {
                get {
                    XElement x = this.GetElement(PrimaryProcedure_OPCSXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryProcedure_OPCSXName, value, "PrimaryProcedure_OPCS", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryProcedure_OPCS_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual ProfessionalsInvolved_Structure MainOperatingHCP {
                get {
                    XElement x = this.GetElement(MainOperatingHCPXName);
                    return ((ProfessionalsInvolved_Structure)(x));
                }
                set {
                    this.SetElement(MainOperatingHCPXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual ProfessionalsInvolved_Structure ResponsibleAnaesthetist {
                get {
                    XElement x = this.GetElement(ResponsibleAnaesthetistXName);
                    return ((ProfessionalsInvolved_Structure)(x));
                }
                set {
                    this.SetElement(ResponsibleAnaesthetistXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryProcedureGroupOPCSLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryProcedure_OPCSXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
                localElementDictionary.Add(MainOperatingHCPXName, typeof(ProfessionalsInvolved_Structure));
                localElementDictionary.Add(ResponsibleAnaesthetistXName, typeof(ProfessionalsInvolved_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
        /// </para>
        /// </summary>
        public partial class SecondaryProcedureGroupOPCSLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryProcedure_OPCSXName = System.Xml.Linq.XName.Get("SecondaryProcedure_OPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MainOperatingHCPXName = System.Xml.Linq.XName.Get("MainOperatingHCP", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ResponsibleAnaesthetistXName = System.Xml.Linq.XName.Get("ResponsibleAnaesthetist", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryProcedureGroupOPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryProcedureGroupOPCSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryProcedureGroupOPCSLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryProcedureGroupOPCSLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryProcedure_OPCSXName), new NamedContentModelEntity(ProcedureDateXName), new NamedContentModelEntity(MainOperatingHCPXName), new NamedContentModelEntity(ResponsibleAnaesthetistXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public SecondaryProcedureGroupOPCSLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual string SecondaryProcedure_OPCS {
                get {
                    XElement x = this.GetElement(SecondaryProcedure_OPCSXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryProcedure_OPCSXName, value, "SecondaryProcedure_OPCS", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Procedure_OPCS_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual ProfessionalsInvolved_Structure MainOperatingHCP {
                get {
                    XElement x = this.GetElement(MainOperatingHCPXName);
                    return ((ProfessionalsInvolved_Structure)(x));
                }
                set {
                    this.SetElement(MainOperatingHCPXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_OPCS, ProcedureDate?, MainOperatingHCP?, ResponsibleAnaesthetist?)
            /// </para>
            /// </summary>
            public virtual ProfessionalsInvolved_Structure ResponsibleAnaesthetist {
                get {
                    XElement x = this.GetElement(ResponsibleAnaesthetistXName);
                    return ((ProfessionalsInvolved_Structure)(x));
                }
                set {
                    this.SetElement(ResponsibleAnaesthetistXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryProcedureGroupOPCSLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryProcedure_OPCSXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
                localElementDictionary.Add(MainOperatingHCPXName, typeof(ProfessionalsInvolved_Structure));
                localElementDictionary.Add(ResponsibleAnaesthetistXName, typeof(ProfessionalsInvolved_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupREAD, SecondaryProcedureGroupREAD*)
    /// </para>
    /// </summary>
    public partial class ClinicalActivityGroupREAD_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProcedureSchemeInUseXName = System.Xml.Linq.XName.Get("ProcedureSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryProcedureGroupREADXName = System.Xml.Linq.XName.Get("PrimaryProcedureGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryProcedureGroupREADXName = System.Xml.Linq.XName.Get("SecondaryProcedureGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryProcedureGroupREADLocalType> SecondaryProcedureGroupREADField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalActivityGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalActivityGroupREAD_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalActivityGroupREAD_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalActivityGroupREAD_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProcedureSchemeInUseXName), new NamedContentModelEntity(PrimaryProcedureGroupREADXName), new NamedContentModelEntity(SecondaryProcedureGroupREADXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupREAD, SecondaryProcedureGroupREAD*)
        /// </para>
        /// </summary>
        public ClinicalActivityGroupREAD_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupREAD, SecondaryProcedureGroupREAD*)
        /// </para>
        /// </summary>
        public virtual string ProcedureSchemeInUse {
            get {
                XElement x = this.GetElement(ProcedureSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ProcedureSchemeInUseXName, value, "ProcedureSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupREAD, SecondaryProcedureGroupREAD*)
        /// </para>
        /// </summary>
        public virtual PrimaryProcedureGroupREADLocalType PrimaryProcedureGroupREAD {
            get {
                XElement x = this.GetElement(PrimaryProcedureGroupREADXName);
                return ((PrimaryProcedureGroupREADLocalType)(x));
            }
            set {
                this.SetElement(PrimaryProcedureGroupREADXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryProcedureGroupREAD, SecondaryProcedureGroupREAD*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivityGroupREAD_Type.SecondaryProcedureGroupREADLocalType> SecondaryProcedureGroupREAD {
            get {
                if ((this.SecondaryProcedureGroupREADField == null)) {
                    this.SecondaryProcedureGroupREADField = new XTypedList<SecondaryProcedureGroupREADLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryProcedureGroupREADXName);
                }
                return this.SecondaryProcedureGroupREADField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryProcedureGroupREADField = null;
                }
                else {
                    if ((this.SecondaryProcedureGroupREADField == null)) {
                        this.SecondaryProcedureGroupREADField = XTypedList<SecondaryProcedureGroupREADLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryProcedureGroupREADXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryProcedureGroupREADLocalType>(this.SecondaryProcedureGroupREADField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalActivityGroupREAD_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProcedureSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryProcedureGroupREADXName, typeof(PrimaryProcedureGroupREADLocalType));
            localElementDictionary.Add(SecondaryProcedureGroupREADXName, typeof(SecondaryProcedureGroupREADLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryProcedure_READ, ProcedureDate?)
        /// </para>
        /// </summary>
        public partial class PrimaryProcedureGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryProcedure_READXName = System.Xml.Linq.XName.Get("PrimaryProcedure_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryProcedureGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryProcedureGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryProcedureGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryProcedureGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryProcedure_READXName), new NamedContentModelEntity(ProcedureDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public PrimaryProcedureGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual string PrimaryProcedure_READ {
                get {
                    XElement x = this.GetElement(PrimaryProcedure_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryProcedure_READXName, value, "PrimaryProcedure_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryProcedure_READ_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryProcedureGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryProcedure_READXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryProcedure_READ, ProcedureDate?)
        /// </para>
        /// </summary>
        public partial class SecondaryProcedureGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryProcedure_READXName = System.Xml.Linq.XName.Get("SecondaryProcedure_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryProcedureGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryProcedureGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryProcedureGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryProcedureGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryProcedure_READXName), new NamedContentModelEntity(ProcedureDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public SecondaryProcedureGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual string SecondaryProcedure_READ {
                get {
                    XElement x = this.GetElement(SecondaryProcedure_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryProcedure_READXName, value, "SecondaryProcedure_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Procedure_READ_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryProcedure_READ, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryProcedureGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryProcedure_READXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProcedureSchemeInUse, PrimaryTreatmentGroupAAndE, SecondaryTreatmentGroupAAndE*)
    /// </para>
    /// </summary>
    public partial class ClinicalTreatmentGroupAAndE_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProcedureSchemeInUseXName = System.Xml.Linq.XName.Get("ProcedureSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryTreatmentGroupAAndEXName = System.Xml.Linq.XName.Get("PrimaryTreatmentGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryTreatmentGroupAAndEXName = System.Xml.Linq.XName.Get("SecondaryTreatmentGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryTreatmentGroupAAndELocalType> SecondaryTreatmentGroupAAndEField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalTreatmentGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalTreatmentGroupAAndE_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalTreatmentGroupAAndE_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalTreatmentGroupAAndE_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProcedureSchemeInUseXName), new NamedContentModelEntity(PrimaryTreatmentGroupAAndEXName), new NamedContentModelEntity(SecondaryTreatmentGroupAAndEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryTreatmentGroupAAndE, SecondaryTreatmentGroupAAndE*)
        /// </para>
        /// </summary>
        public ClinicalTreatmentGroupAAndE_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryTreatmentGroupAAndE, SecondaryTreatmentGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual string ProcedureSchemeInUse {
            get {
                XElement x = this.GetElement(ProcedureSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ProcedureSchemeInUseXName, value, "ProcedureSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryTreatmentGroupAAndE, SecondaryTreatmentGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual PrimaryTreatmentGroupAAndELocalType PrimaryTreatmentGroupAAndE {
            get {
                XElement x = this.GetElement(PrimaryTreatmentGroupAAndEXName);
                return ((PrimaryTreatmentGroupAAndELocalType)(x));
            }
            set {
                this.SetElement(PrimaryTreatmentGroupAAndEXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProcedureSchemeInUse, PrimaryTreatmentGroupAAndE, SecondaryTreatmentGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalTreatmentGroupAAndE_Type.SecondaryTreatmentGroupAAndELocalType> SecondaryTreatmentGroupAAndE {
            get {
                if ((this.SecondaryTreatmentGroupAAndEField == null)) {
                    this.SecondaryTreatmentGroupAAndEField = new XTypedList<SecondaryTreatmentGroupAAndELocalType>(this, LinqToXsdTypeManager.Instance, SecondaryTreatmentGroupAAndEXName);
                }
                return this.SecondaryTreatmentGroupAAndEField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryTreatmentGroupAAndEField = null;
                }
                else {
                    if ((this.SecondaryTreatmentGroupAAndEField == null)) {
                        this.SecondaryTreatmentGroupAAndEField = XTypedList<SecondaryTreatmentGroupAAndELocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryTreatmentGroupAAndEXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryTreatmentGroupAAndELocalType>(this.SecondaryTreatmentGroupAAndEField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalTreatmentGroupAAndE_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProcedureSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryTreatmentGroupAAndEXName, typeof(PrimaryTreatmentGroupAAndELocalType));
            localElementDictionary.Add(SecondaryTreatmentGroupAAndEXName, typeof(SecondaryTreatmentGroupAAndELocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryTreatment_AAndE, ProcedureDate?)
        /// </para>
        /// </summary>
        public partial class PrimaryTreatmentGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryTreatment_AAndEXName = System.Xml.Linq.XName.Get("PrimaryTreatment_AAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryTreatmentGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryTreatmentGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryTreatmentGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryTreatmentGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryTreatment_AAndEXName), new NamedContentModelEntity(ProcedureDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public PrimaryTreatmentGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual string PrimaryTreatment_AAndE {
                get {
                    XElement x = this.GetElement(PrimaryTreatment_AAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryTreatment_AAndEXName, value, "PrimaryTreatment_AAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndETreatment_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryTreatmentGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryTreatment_AAndEXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryTreatment_AAndE, ProcedureDate?)
        /// </para>
        /// </summary>
        public partial class SecondaryTreatmentGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryTreatment_AAndEXName = System.Xml.Linq.XName.Get("SecondaryTreatment_AAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDateXName = System.Xml.Linq.XName.Get("ProcedureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryTreatmentGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryTreatmentGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryTreatmentGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryTreatmentGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryTreatment_AAndEXName), new NamedContentModelEntity(ProcedureDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public SecondaryTreatmentGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual string SecondaryTreatment_AAndE {
                get {
                    XElement x = this.GetElement(SecondaryTreatment_AAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryTreatment_AAndEXName, value, "SecondaryTreatment_AAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndETreatment_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryTreatment_AAndE, ProcedureDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate {
                get {
                    XElement x = this.GetElement(ProcedureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDateXName, value, "ProcedureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProcedureDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryTreatmentGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryTreatment_AAndEXName, typeof(string));
                localElementDictionary.Add(ProcedureDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?, ClinicalDiagnosisGroupAAndE?)
    /// </para>
    /// </summary>
    public partial class ClinicalDiagnosis_AE_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisGroupICDXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisGroupREADXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisGroupAAndEXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalDiagnosis_AE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalDiagnosis_AE_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalDiagnosis_AE_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalDiagnosis_AE_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalDiagnosisGroupICDXName), new NamedContentModelEntity(ClinicalDiagnosisGroupREADXName), new NamedContentModelEntity(ClinicalDiagnosisGroupAAndEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?, ClinicalDiagnosisGroupAAndE?)
        /// </para>
        /// </summary>
        public ClinicalDiagnosis_AE_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?, ClinicalDiagnosisGroupAAndE?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosisGroupICD_Type ClinicalDiagnosisGroupICD {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisGroupICDXName);
                return ((ClinicalDiagnosisGroupICD_Type)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisGroupICDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?, ClinicalDiagnosisGroupAAndE?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosisGroupREAD_Type ClinicalDiagnosisGroupREAD {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisGroupREADXName);
                return ((ClinicalDiagnosisGroupREAD_Type)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisGroupREADXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?, ClinicalDiagnosisGroupAAndE?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosisGroupAAndE_Type ClinicalDiagnosisGroupAAndE {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisGroupAAndEXName);
                return ((ClinicalDiagnosisGroupAAndE_Type)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisGroupAAndEXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalDiagnosis_AE_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClinicalDiagnosisGroupICDXName, typeof(ClinicalDiagnosisGroupICD_Type));
            localElementDictionary.Add(ClinicalDiagnosisGroupREADXName, typeof(ClinicalDiagnosisGroupREAD_Type));
            localElementDictionary.Add(ClinicalDiagnosisGroupAAndEXName, typeof(ClinicalDiagnosisGroupAAndE_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?)
    /// </para>
    /// </summary>
    public partial class ClinicalDiagnosis_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisGroupICDXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisGroupREADXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalDiagnosis_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalDiagnosis_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalDiagnosis_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalDiagnosis_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalDiagnosisGroupICDXName), new NamedContentModelEntity(ClinicalDiagnosisGroupREADXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?)
        /// </para>
        /// </summary>
        public ClinicalDiagnosis_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosisGroupICD_Type ClinicalDiagnosisGroupICD {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisGroupICDXName);
                return ((ClinicalDiagnosisGroupICD_Type)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisGroupICDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalDiagnosisGroupICD?, ClinicalDiagnosisGroupREAD?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosisGroupREAD_Type ClinicalDiagnosisGroupREAD {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisGroupREADXName);
                return ((ClinicalDiagnosisGroupREAD_Type)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisGroupREADXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalDiagnosis_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClinicalDiagnosisGroupICDXName, typeof(ClinicalDiagnosisGroupICD_Type));
            localElementDictionary.Add(ClinicalDiagnosisGroupREADXName, typeof(ClinicalDiagnosisGroupREAD_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupICD, SecondaryDiagnosisGroupICD*)
    /// </para>
    /// </summary>
    public partial class ClinicalDiagnosisGroupICD_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiagnosisSchemeInUseXName = System.Xml.Linq.XName.Get("DiagnosisSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryDiagnosisGroupICDXName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryDiagnosisGroupICDXName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryDiagnosisGroupICDLocalType> SecondaryDiagnosisGroupICDField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupICD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalDiagnosisGroupICD_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalDiagnosisGroupICD_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalDiagnosisGroupICD_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DiagnosisSchemeInUseXName), new NamedContentModelEntity(PrimaryDiagnosisGroupICDXName), new NamedContentModelEntity(SecondaryDiagnosisGroupICDXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupICD, SecondaryDiagnosisGroupICD*)
        /// </para>
        /// </summary>
        public ClinicalDiagnosisGroupICD_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupICD, SecondaryDiagnosisGroupICD*)
        /// </para>
        /// </summary>
        public virtual string DiagnosisSchemeInUse {
            get {
                XElement x = this.GetElement(DiagnosisSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DiagnosisSchemeInUseXName, value, "DiagnosisSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DiagnosisSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupICD, SecondaryDiagnosisGroupICD*)
        /// </para>
        /// </summary>
        public virtual PrimaryDiagnosisGroupICDLocalType PrimaryDiagnosisGroupICD {
            get {
                XElement x = this.GetElement(PrimaryDiagnosisGroupICDXName);
                return ((PrimaryDiagnosisGroupICDLocalType)(x));
            }
            set {
                this.SetElement(PrimaryDiagnosisGroupICDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupICD, SecondaryDiagnosisGroupICD*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupICD_Type.SecondaryDiagnosisGroupICDLocalType> SecondaryDiagnosisGroupICD {
            get {
                if ((this.SecondaryDiagnosisGroupICDField == null)) {
                    this.SecondaryDiagnosisGroupICDField = new XTypedList<SecondaryDiagnosisGroupICDLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryDiagnosisGroupICDXName);
                }
                return this.SecondaryDiagnosisGroupICDField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryDiagnosisGroupICDField = null;
                }
                else {
                    if ((this.SecondaryDiagnosisGroupICDField == null)) {
                        this.SecondaryDiagnosisGroupICDField = XTypedList<SecondaryDiagnosisGroupICDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryDiagnosisGroupICDXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryDiagnosisGroupICDLocalType>(this.SecondaryDiagnosisGroupICDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalDiagnosisGroupICD_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DiagnosisSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryDiagnosisGroupICDXName, typeof(PrimaryDiagnosisGroupICDLocalType));
            localElementDictionary.Add(SecondaryDiagnosisGroupICDXName, typeof(SecondaryDiagnosisGroupICDLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
        /// </para>
        /// </summary>
        public partial class PrimaryDiagnosisGroupICDLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryDiagnosis_ICDXName = System.Xml.Linq.XName.Get("PrimaryDiagnosis_ICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PresentOnAdmissionIndicatorXName = System.Xml.Linq.XName.Get("PresentOnAdmissionIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryDiagnosisGroupICDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryDiagnosisGroupICDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryDiagnosisGroupICDLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryDiagnosis_ICDXName), new NamedContentModelEntity(PresentOnAdmissionIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public PrimaryDiagnosisGroupICDLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public virtual string PrimaryDiagnosis_ICD {
                get {
                    XElement x = this.GetElement(PrimaryDiagnosis_ICDXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryDiagnosis_ICDXName, value, "PrimaryDiagnosis_ICD", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_ICD_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public virtual string PresentOnAdmissionIndicator {
                get {
                    XElement x = this.GetElement(PresentOnAdmissionIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PresentOnAdmissionIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PresentOnAdmissionIndicatorXName, value, "PresentOnAdmissionIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PresentOnAdmissionIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryDiagnosisGroupICDLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryDiagnosis_ICDXName, typeof(string));
                localElementDictionary.Add(PresentOnAdmissionIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
        /// </para>
        /// </summary>
        public partial class SecondaryDiagnosisGroupICDLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryDiagnosis_ICDXName = System.Xml.Linq.XName.Get("SecondaryDiagnosis_ICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PresentOnAdmissionIndicatorXName = System.Xml.Linq.XName.Get("PresentOnAdmissionIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryDiagnosisGroupICDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryDiagnosisGroupICDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryDiagnosisGroupICDLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryDiagnosis_ICDXName), new NamedContentModelEntity(PresentOnAdmissionIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public SecondaryDiagnosisGroupICDLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public virtual string SecondaryDiagnosis_ICD {
                get {
                    XElement x = this.GetElement(SecondaryDiagnosis_ICDXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryDiagnosis_ICDXName, value, "SecondaryDiagnosis_ICD", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SecondaryDiagnosis_ICD_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_ICD, PresentOnAdmissionIndicator?)
            /// </para>
            /// </summary>
            public virtual string PresentOnAdmissionIndicator {
                get {
                    XElement x = this.GetElement(PresentOnAdmissionIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PresentOnAdmissionIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PresentOnAdmissionIndicatorXName, value, "PresentOnAdmissionIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PresentOnAdmissionIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryDiagnosisGroupICDLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryDiagnosis_ICDXName, typeof(string));
                localElementDictionary.Add(PresentOnAdmissionIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupREAD, SecondaryDiagnosisGroupREAD*)
    /// </para>
    /// </summary>
    public partial class ClinicalDiagnosisGroupREAD_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiagnosisSchemeInUseXName = System.Xml.Linq.XName.Get("DiagnosisSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryDiagnosisGroupREADXName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryDiagnosisGroupREADXName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryDiagnosisGroupREADLocalType> SecondaryDiagnosisGroupREADField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalDiagnosisGroupREAD_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalDiagnosisGroupREAD_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalDiagnosisGroupREAD_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DiagnosisSchemeInUseXName), new NamedContentModelEntity(PrimaryDiagnosisGroupREADXName), new NamedContentModelEntity(SecondaryDiagnosisGroupREADXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupREAD, SecondaryDiagnosisGroupREAD*)
        /// </para>
        /// </summary>
        public ClinicalDiagnosisGroupREAD_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupREAD, SecondaryDiagnosisGroupREAD*)
        /// </para>
        /// </summary>
        public virtual string DiagnosisSchemeInUse {
            get {
                XElement x = this.GetElement(DiagnosisSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DiagnosisSchemeInUseXName, value, "DiagnosisSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DiagnosisSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupREAD, SecondaryDiagnosisGroupREAD*)
        /// </para>
        /// </summary>
        public virtual PrimaryDiagnosisGroupREADLocalType PrimaryDiagnosisGroupREAD {
            get {
                XElement x = this.GetElement(PrimaryDiagnosisGroupREADXName);
                return ((PrimaryDiagnosisGroupREADLocalType)(x));
            }
            set {
                this.SetElement(PrimaryDiagnosisGroupREADXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupREAD, SecondaryDiagnosisGroupREAD*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupREAD_Type.SecondaryDiagnosisGroupREADLocalType> SecondaryDiagnosisGroupREAD {
            get {
                if ((this.SecondaryDiagnosisGroupREADField == null)) {
                    this.SecondaryDiagnosisGroupREADField = new XTypedList<SecondaryDiagnosisGroupREADLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryDiagnosisGroupREADXName);
                }
                return this.SecondaryDiagnosisGroupREADField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryDiagnosisGroupREADField = null;
                }
                else {
                    if ((this.SecondaryDiagnosisGroupREADField == null)) {
                        this.SecondaryDiagnosisGroupREADField = XTypedList<SecondaryDiagnosisGroupREADLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryDiagnosisGroupREADXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryDiagnosisGroupREADLocalType>(this.SecondaryDiagnosisGroupREADField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalDiagnosisGroupREAD_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DiagnosisSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryDiagnosisGroupREADXName, typeof(PrimaryDiagnosisGroupREADLocalType));
            localElementDictionary.Add(SecondaryDiagnosisGroupREADXName, typeof(SecondaryDiagnosisGroupREADLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryDiagnosis_READ)
        /// </para>
        /// </summary>
        public partial class PrimaryDiagnosisGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryDiagnosis_READXName = System.Xml.Linq.XName.Get("PrimaryDiagnosis_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryDiagnosisGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryDiagnosisGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryDiagnosisGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryDiagnosis_READXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_READ)
            /// </para>
            /// </summary>
            public PrimaryDiagnosisGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_READ)
            /// </para>
            /// </summary>
            public virtual string PrimaryDiagnosis_READ {
                get {
                    XElement x = this.GetElement(PrimaryDiagnosis_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryDiagnosis_READXName, value, "PrimaryDiagnosis_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_READ_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryDiagnosisGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryDiagnosis_READXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryDiagnosis_READ)
        /// </para>
        /// </summary>
        public partial class SecondaryDiagnosisGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryDiagnosis_READXName = System.Xml.Linq.XName.Get("SecondaryDiagnosis_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryDiagnosisGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryDiagnosisGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryDiagnosisGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryDiagnosis_READXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_READ)
            /// </para>
            /// </summary>
            public SecondaryDiagnosisGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_READ)
            /// </para>
            /// </summary>
            public virtual string SecondaryDiagnosis_READ {
                get {
                    XElement x = this.GetElement(SecondaryDiagnosis_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryDiagnosis_READXName, value, "SecondaryDiagnosis_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SecondaryDiagnosis_READ_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryDiagnosisGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryDiagnosis_READXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupAAndE, SecondaryDiagnosisGroupAAndE*)
    /// </para>
    /// </summary>
    public partial class ClinicalDiagnosisGroupAAndE_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DiagnosisSchemeInUseXName = System.Xml.Linq.XName.Get("DiagnosisSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryDiagnosisGroupAAndEXName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryDiagnosisGroupAAndEXName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryDiagnosisGroupAAndELocalType> SecondaryDiagnosisGroupAAndEField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalDiagnosisGroupAAndE_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalDiagnosisGroupAAndE_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalDiagnosisGroupAAndE_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DiagnosisSchemeInUseXName), new NamedContentModelEntity(PrimaryDiagnosisGroupAAndEXName), new NamedContentModelEntity(SecondaryDiagnosisGroupAAndEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupAAndE, SecondaryDiagnosisGroupAAndE*)
        /// </para>
        /// </summary>
        public ClinicalDiagnosisGroupAAndE_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupAAndE, SecondaryDiagnosisGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual string DiagnosisSchemeInUse {
            get {
                XElement x = this.GetElement(DiagnosisSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DiagnosisSchemeInUseXName, value, "DiagnosisSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DiagnosisSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupAAndE, SecondaryDiagnosisGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual PrimaryDiagnosisGroupAAndELocalType PrimaryDiagnosisGroupAAndE {
            get {
                XElement x = this.GetElement(PrimaryDiagnosisGroupAAndEXName);
                return ((PrimaryDiagnosisGroupAAndELocalType)(x));
            }
            set {
                this.SetElement(PrimaryDiagnosisGroupAAndEXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DiagnosisSchemeInUse, PrimaryDiagnosisGroupAAndE, SecondaryDiagnosisGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupAAndE_Type.SecondaryDiagnosisGroupAAndELocalType> SecondaryDiagnosisGroupAAndE {
            get {
                if ((this.SecondaryDiagnosisGroupAAndEField == null)) {
                    this.SecondaryDiagnosisGroupAAndEField = new XTypedList<SecondaryDiagnosisGroupAAndELocalType>(this, LinqToXsdTypeManager.Instance, SecondaryDiagnosisGroupAAndEXName);
                }
                return this.SecondaryDiagnosisGroupAAndEField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryDiagnosisGroupAAndEField = null;
                }
                else {
                    if ((this.SecondaryDiagnosisGroupAAndEField == null)) {
                        this.SecondaryDiagnosisGroupAAndEField = XTypedList<SecondaryDiagnosisGroupAAndELocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryDiagnosisGroupAAndEXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryDiagnosisGroupAAndELocalType>(this.SecondaryDiagnosisGroupAAndEField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalDiagnosisGroupAAndE_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DiagnosisSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryDiagnosisGroupAAndEXName, typeof(PrimaryDiagnosisGroupAAndELocalType));
            localElementDictionary.Add(SecondaryDiagnosisGroupAAndEXName, typeof(SecondaryDiagnosisGroupAAndELocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryDiagnosis_AAndE)
        /// </para>
        /// </summary>
        public partial class PrimaryDiagnosisGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryDiagnosis_AAndEXName = System.Xml.Linq.XName.Get("PrimaryDiagnosis_AAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryDiagnosisGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryDiagnosisGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryDiagnosisGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryDiagnosisGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryDiagnosis_AAndEXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_AAndE)
            /// </para>
            /// </summary>
            public PrimaryDiagnosisGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryDiagnosis_AAndE)
            /// </para>
            /// </summary>
            public virtual string PrimaryDiagnosis_AAndE {
                get {
                    XElement x = this.GetElement(PrimaryDiagnosis_AAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryDiagnosis_AAndEXName, value, "PrimaryDiagnosis_AAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDiagnosis_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryDiagnosisGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryDiagnosis_AAndEXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryDiagnosis_AandE)
        /// </para>
        /// </summary>
        public partial class SecondaryDiagnosisGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryDiagnosis_AandEXName = System.Xml.Linq.XName.Get("SecondaryDiagnosis_AandE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryDiagnosisGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryDiagnosisGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryDiagnosisGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryDiagnosisGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryDiagnosis_AandEXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_AandE)
            /// </para>
            /// </summary>
            public SecondaryDiagnosisGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryDiagnosis_AandE)
            /// </para>
            /// </summary>
            public virtual string SecondaryDiagnosis_AandE {
                get {
                    XElement x = this.GetElement(SecondaryDiagnosis_AandEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryDiagnosis_AandEXName, value, "SecondaryDiagnosis_AandE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDiagnosis_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryDiagnosisGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryDiagnosis_AandEXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClinicalInvestigationGroupAAndE?)
    /// </para>
    /// </summary>
    public partial class ClinicalInvestigation_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalInvestigationGroupAAndEXName = System.Xml.Linq.XName.Get("ClinicalInvestigationGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalInvestigation_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalInvestigation_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalInvestigation_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalInvestigation_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalInvestigationGroupAAndEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalInvestigationGroupAAndE?)
        /// </para>
        /// </summary>
        public ClinicalInvestigation_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClinicalInvestigationGroupAAndE?)
        /// </para>
        /// </summary>
        public virtual ClinicalInvestigationGroupAAndE_Type ClinicalInvestigationGroupAAndE {
            get {
                XElement x = this.GetElement(ClinicalInvestigationGroupAAndEXName);
                return ((ClinicalInvestigationGroupAAndE_Type)(x));
            }
            set {
                this.SetElement(ClinicalInvestigationGroupAAndEXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalInvestigation_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClinicalInvestigationGroupAAndEXName, typeof(ClinicalInvestigationGroupAAndE_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupICD, SecondaryInvestigationGroupICD*)
    /// </para>
    /// </summary>
    public partial class ClinicalInvestigationGroupICD_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InvestigationSchemeInUseXName = System.Xml.Linq.XName.Get("InvestigationSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryInvestigationGroupICDXName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryInvestigationGroupICDXName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryInvestigationGroupICDLocalType> SecondaryInvestigationGroupICDField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalInvestigationGroupICD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalInvestigationGroupICD_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalInvestigationGroupICD_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalInvestigationGroupICD_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InvestigationSchemeInUseXName), new NamedContentModelEntity(PrimaryInvestigationGroupICDXName), new NamedContentModelEntity(SecondaryInvestigationGroupICDXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupICD, SecondaryInvestigationGroupICD*)
        /// </para>
        /// </summary>
        public ClinicalInvestigationGroupICD_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupICD, SecondaryInvestigationGroupICD*)
        /// </para>
        /// </summary>
        public virtual string InvestigationSchemeInUse {
            get {
                XElement x = this.GetElement(InvestigationSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InvestigationSchemeInUseXName, value, "InvestigationSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.InvestigationSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupICD, SecondaryInvestigationGroupICD*)
        /// </para>
        /// </summary>
        public virtual PrimaryInvestigationGroupICDLocalType PrimaryInvestigationGroupICD {
            get {
                XElement x = this.GetElement(PrimaryInvestigationGroupICDXName);
                return ((PrimaryInvestigationGroupICDLocalType)(x));
            }
            set {
                this.SetElement(PrimaryInvestigationGroupICDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupICD, SecondaryInvestigationGroupICD*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupICD_Type.SecondaryInvestigationGroupICDLocalType> SecondaryInvestigationGroupICD {
            get {
                if ((this.SecondaryInvestigationGroupICDField == null)) {
                    this.SecondaryInvestigationGroupICDField = new XTypedList<SecondaryInvestigationGroupICDLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryInvestigationGroupICDXName);
                }
                return this.SecondaryInvestigationGroupICDField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryInvestigationGroupICDField = null;
                }
                else {
                    if ((this.SecondaryInvestigationGroupICDField == null)) {
                        this.SecondaryInvestigationGroupICDField = XTypedList<SecondaryInvestigationGroupICDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryInvestigationGroupICDXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryInvestigationGroupICDLocalType>(this.SecondaryInvestigationGroupICDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalInvestigationGroupICD_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InvestigationSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryInvestigationGroupICDXName, typeof(PrimaryInvestigationGroupICDLocalType));
            localElementDictionary.Add(SecondaryInvestigationGroupICDXName, typeof(SecondaryInvestigationGroupICDLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryInvestigation_ICD)
        /// </para>
        /// </summary>
        public partial class PrimaryInvestigationGroupICDLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryInvestigation_ICDXName = System.Xml.Linq.XName.Get("PrimaryInvestigation_ICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryInvestigationGroupICDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryInvestigationGroupICDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryInvestigationGroupICDLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryInvestigation_ICDXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_ICD)
            /// </para>
            /// </summary>
            public PrimaryInvestigationGroupICDLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_ICD)
            /// </para>
            /// </summary>
            public virtual string PrimaryInvestigation_ICD {
                get {
                    XElement x = this.GetElement(PrimaryInvestigation_ICDXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryInvestigation_ICDXName, value, "PrimaryInvestigation_ICD", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_ICD_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryInvestigationGroupICDLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryInvestigation_ICDXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryInvestigation_ICD)
        /// </para>
        /// </summary>
        public partial class SecondaryInvestigationGroupICDLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryInvestigation_ICDXName = System.Xml.Linq.XName.Get("SecondaryInvestigation_ICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupICD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryInvestigationGroupICDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryInvestigationGroupICDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryInvestigationGroupICDLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryInvestigation_ICDXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_ICD)
            /// </para>
            /// </summary>
            public SecondaryInvestigationGroupICDLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_ICD)
            /// </para>
            /// </summary>
            public virtual string SecondaryInvestigation_ICD {
                get {
                    XElement x = this.GetElement(SecondaryInvestigation_ICDXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryInvestigation_ICDXName, value, "SecondaryInvestigation_ICD", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_ICD_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryInvestigationGroupICDLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryInvestigation_ICDXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupREAD, SecondaryInvestigationGroupREAD*)
    /// </para>
    /// </summary>
    public partial class ClinicalInvestigationGroupREAD_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InvestigationSchemeInUseXName = System.Xml.Linq.XName.Get("InvestigationSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryInvestigationGroupREADXName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryInvestigationGroupREADXName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryInvestigationGroupREADLocalType> SecondaryInvestigationGroupREADField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalInvestigationGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalInvestigationGroupREAD_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalInvestigationGroupREAD_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalInvestigationGroupREAD_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InvestigationSchemeInUseXName), new NamedContentModelEntity(PrimaryInvestigationGroupREADXName), new NamedContentModelEntity(SecondaryInvestigationGroupREADXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupREAD, SecondaryInvestigationGroupREAD*)
        /// </para>
        /// </summary>
        public ClinicalInvestigationGroupREAD_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupREAD, SecondaryInvestigationGroupREAD*)
        /// </para>
        /// </summary>
        public virtual string InvestigationSchemeInUse {
            get {
                XElement x = this.GetElement(InvestigationSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InvestigationSchemeInUseXName, value, "InvestigationSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.InvestigationSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupREAD, SecondaryInvestigationGroupREAD*)
        /// </para>
        /// </summary>
        public virtual PrimaryInvestigationGroupREADLocalType PrimaryInvestigationGroupREAD {
            get {
                XElement x = this.GetElement(PrimaryInvestigationGroupREADXName);
                return ((PrimaryInvestigationGroupREADLocalType)(x));
            }
            set {
                this.SetElement(PrimaryInvestigationGroupREADXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupREAD, SecondaryInvestigationGroupREAD*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupREAD_Type.SecondaryInvestigationGroupREADLocalType> SecondaryInvestigationGroupREAD {
            get {
                if ((this.SecondaryInvestigationGroupREADField == null)) {
                    this.SecondaryInvestigationGroupREADField = new XTypedList<SecondaryInvestigationGroupREADLocalType>(this, LinqToXsdTypeManager.Instance, SecondaryInvestigationGroupREADXName);
                }
                return this.SecondaryInvestigationGroupREADField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryInvestigationGroupREADField = null;
                }
                else {
                    if ((this.SecondaryInvestigationGroupREADField == null)) {
                        this.SecondaryInvestigationGroupREADField = XTypedList<SecondaryInvestigationGroupREADLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryInvestigationGroupREADXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryInvestigationGroupREADLocalType>(this.SecondaryInvestigationGroupREADField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalInvestigationGroupREAD_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InvestigationSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryInvestigationGroupREADXName, typeof(PrimaryInvestigationGroupREADLocalType));
            localElementDictionary.Add(SecondaryInvestigationGroupREADXName, typeof(SecondaryInvestigationGroupREADLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryInvestigation_READ)
        /// </para>
        /// </summary>
        public partial class PrimaryInvestigationGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryInvestigation_READXName = System.Xml.Linq.XName.Get("PrimaryInvestigation_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryInvestigationGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryInvestigationGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryInvestigationGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryInvestigation_READXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_READ)
            /// </para>
            /// </summary>
            public PrimaryInvestigationGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_READ)
            /// </para>
            /// </summary>
            public virtual string PrimaryInvestigation_READ {
                get {
                    XElement x = this.GetElement(PrimaryInvestigation_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryInvestigation_READXName, value, "PrimaryInvestigation_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_READ_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryInvestigationGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryInvestigation_READXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryInvestigation_READ)
        /// </para>
        /// </summary>
        public partial class SecondaryInvestigationGroupREADLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryInvestigation_READXName = System.Xml.Linq.XName.Get("SecondaryInvestigation_READ", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupREAD", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryInvestigationGroupREADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryInvestigationGroupREADLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryInvestigationGroupREADLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryInvestigation_READXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_READ)
            /// </para>
            /// </summary>
            public SecondaryInvestigationGroupREADLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_READ)
            /// </para>
            /// </summary>
            public virtual string SecondaryInvestigation_READ {
                get {
                    XElement x = this.GetElement(SecondaryInvestigation_READXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryInvestigation_READXName, value, "SecondaryInvestigation_READ", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PrimaryDiagnosis_READ_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryInvestigationGroupREADLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryInvestigation_READXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupAAndE, SecondaryInvestigationGroupAAndE*)
    /// </para>
    /// </summary>
    public partial class ClinicalInvestigationGroupAAndE_Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InvestigationSchemeInUseXName = System.Xml.Linq.XName.Get("InvestigationSchemeInUse", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryInvestigationGroupAAndEXName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondaryInvestigationGroupAAndEXName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SecondaryInvestigationGroupAAndELocalType> SecondaryInvestigationGroupAAndEField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClinicalInvestigationGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClinicalInvestigationGroupAAndE_Type(XElement xe) { return XTypedServices.ToXTypedElement<ClinicalInvestigationGroupAAndE_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClinicalInvestigationGroupAAndE_Type() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InvestigationSchemeInUseXName), new NamedContentModelEntity(PrimaryInvestigationGroupAAndEXName), new NamedContentModelEntity(SecondaryInvestigationGroupAAndEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupAAndE, SecondaryInvestigationGroupAAndE*)
        /// </para>
        /// </summary>
        public ClinicalInvestigationGroupAAndE_Type() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupAAndE, SecondaryInvestigationGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual string InvestigationSchemeInUse {
            get {
                XElement x = this.GetElement(InvestigationSchemeInUseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InvestigationSchemeInUseXName, value, "InvestigationSchemeInUse", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.InvestigationSchemeInUse_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupAAndE, SecondaryInvestigationGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual PrimaryInvestigationGroupAAndELocalType PrimaryInvestigationGroupAAndE {
            get {
                XElement x = this.GetElement(PrimaryInvestigationGroupAAndEXName);
                return ((PrimaryInvestigationGroupAAndELocalType)(x));
            }
            set {
                this.SetElement(PrimaryInvestigationGroupAAndEXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InvestigationSchemeInUse, PrimaryInvestigationGroupAAndE, SecondaryInvestigationGroupAAndE*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupAAndE_Type.SecondaryInvestigationGroupAAndELocalType> SecondaryInvestigationGroupAAndE {
            get {
                if ((this.SecondaryInvestigationGroupAAndEField == null)) {
                    this.SecondaryInvestigationGroupAAndEField = new XTypedList<SecondaryInvestigationGroupAAndELocalType>(this, LinqToXsdTypeManager.Instance, SecondaryInvestigationGroupAAndEXName);
                }
                return this.SecondaryInvestigationGroupAAndEField;
            }
            set {
                if ((value == null)) {
                    this.SecondaryInvestigationGroupAAndEField = null;
                }
                else {
                    if ((this.SecondaryInvestigationGroupAAndEField == null)) {
                        this.SecondaryInvestigationGroupAAndEField = XTypedList<SecondaryInvestigationGroupAAndELocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SecondaryInvestigationGroupAAndEXName);
                    }
                    else {
                        XTypedServices.SetList<SecondaryInvestigationGroupAAndELocalType>(this.SecondaryInvestigationGroupAAndEField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClinicalInvestigationGroupAAndE_Type>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InvestigationSchemeInUseXName, typeof(string));
            localElementDictionary.Add(PrimaryInvestigationGroupAAndEXName, typeof(PrimaryInvestigationGroupAAndELocalType));
            localElementDictionary.Add(SecondaryInvestigationGroupAAndEXName, typeof(SecondaryInvestigationGroupAAndELocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PrimaryInvestigation_AAndE)
        /// </para>
        /// </summary>
        public partial class PrimaryInvestigationGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrimaryInvestigation_AAndEXName = System.Xml.Linq.XName.Get("PrimaryInvestigation_AAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrimaryInvestigationGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PrimaryInvestigationGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<PrimaryInvestigationGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PrimaryInvestigationGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrimaryInvestigation_AAndEXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_AAndE)
            /// </para>
            /// </summary>
            public PrimaryInvestigationGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PrimaryInvestigation_AAndE)
            /// </para>
            /// </summary>
            public virtual string PrimaryInvestigation_AAndE {
                get {
                    XElement x = this.GetElement(PrimaryInvestigation_AAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PrimaryInvestigation_AAndEXName, value, "PrimaryInvestigation_AAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEInvestigation_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PrimaryInvestigationGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PrimaryInvestigation_AAndEXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SecondaryInvestigation_AAndE)
        /// </para>
        /// </summary>
        public partial class SecondaryInvestigationGroupAAndELocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SecondaryInvestigation_AAndEXName = System.Xml.Linq.XName.Get("SecondaryInvestigation_AAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondaryInvestigationGroupAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SecondaryInvestigationGroupAAndELocalType(XElement xe) { return XTypedServices.ToXTypedElement<SecondaryInvestigationGroupAAndELocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SecondaryInvestigationGroupAAndELocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SecondaryInvestigation_AAndEXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_AAndE)
            /// </para>
            /// </summary>
            public SecondaryInvestigationGroupAAndELocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SecondaryInvestigation_AAndE)
            /// </para>
            /// </summary>
            public virtual string SecondaryInvestigation_AAndE {
                get {
                    XElement x = this.GetElement(SecondaryInvestigation_AAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(SecondaryInvestigation_AAndEXName, value, "SecondaryInvestigation_AAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEInvestigation_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SecondaryInvestigationGroupAAndELocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SecondaryInvestigation_AAndEXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GeneralMedicalPractitioner_Specified?, GeneralPractice_PatientRegistration?)
    /// </para>
    /// </summary>
    public partial class GPRegistration_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeneralMedicalPractitioner_SpecifiedXName = System.Xml.Linq.XName.Get("GeneralMedicalPractitioner_Specified", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeneralPractice_PatientRegistrationXName = System.Xml.Linq.XName.Get("GeneralPractice_PatientRegistration", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPRegistration_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPRegistration_Structure(XElement xe) { return XTypedServices.ToXTypedElement<GPRegistration_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPRegistration_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GeneralMedicalPractitioner_SpecifiedXName), new NamedContentModelEntity(GeneralPractice_PatientRegistrationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GeneralMedicalPractitioner_Specified?, GeneralPractice_PatientRegistration?)
        /// </para>
        /// </summary>
        public GPRegistration_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GeneralMedicalPractitioner_Specified?, GeneralPractice_PatientRegistration?)
        /// </para>
        /// </summary>
        public virtual string GeneralMedicalPractitioner_Specified {
            get {
                XElement x = this.GetElement(GeneralMedicalPractitioner_SpecifiedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GeneralMedicalPractitioner_SpecifiedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GeneralMedicalPractitioner_SpecifiedXName, value, "GeneralMedicalPractitioner_Specified", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GeneralMedicalPractitioner_Specified_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GeneralMedicalPractitioner_Specified?, GeneralPractice_PatientRegistration?)
        /// </para>
        /// </summary>
        public virtual string GeneralPractice_PatientRegistration {
            get {
                XElement x = this.GetElement(GeneralPractice_PatientRegistrationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GeneralPractice_PatientRegistrationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GeneralPractice_PatientRegistrationXName, value, "GeneralPractice_PatientRegistration", GeneralPractice_PatientRegistrationLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPRegistration_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GeneralMedicalPractitioner_SpecifiedXName, typeof(string));
            localElementDictionary.Add(GeneralPractice_PatientRegistrationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GeneralPractice_PatientRegistrationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 6, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private GeneralPractice_PatientRegistrationLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LengthOfStayAdjustmentRehab?, LengthOfStayAdjustmentSpecialistPalliativeCare?)
    /// </para>
    /// </summary>
    public partial class ConsultantEpisodeLengthOfStayAdjustment_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LengthOfStayAdjustmentRehabXName = System.Xml.Linq.XName.Get("LengthOfStayAdjustmentRehab", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LengthOfStayAdjustmentSpecialistPalliativeCareXName = System.Xml.Linq.XName.Get("LengthOfStayAdjustmentSpecialistPalliativeCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConsultantEpisodeLengthOfStayAdjustment_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConsultantEpisodeLengthOfStayAdjustment_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ConsultantEpisodeLengthOfStayAdjustment_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConsultantEpisodeLengthOfStayAdjustment_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LengthOfStayAdjustmentRehabXName), new NamedContentModelEntity(LengthOfStayAdjustmentSpecialistPalliativeCareXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LengthOfStayAdjustmentRehab?, LengthOfStayAdjustmentSpecialistPalliativeCare?)
        /// </para>
        /// </summary>
        public ConsultantEpisodeLengthOfStayAdjustment_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LengthOfStayAdjustmentRehab?, LengthOfStayAdjustmentSpecialistPalliativeCare?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LengthOfStayAdjustmentRehab {
            get {
                XElement x = this.GetElement(LengthOfStayAdjustmentRehabXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LengthOfStayAdjustmentRehabXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LengthOfStayAdjustmentRehabXName, value, "LengthOfStayAdjustmentRehab", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LengthOfStayAdjustment_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LengthOfStayAdjustmentRehab?, LengthOfStayAdjustmentSpecialistPalliativeCare?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LengthOfStayAdjustmentSpecialistPalliativeCare {
            get {
                XElement x = this.GetElement(LengthOfStayAdjustmentSpecialistPalliativeCareXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LengthOfStayAdjustmentSpecialistPalliativeCareXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LengthOfStayAdjustmentSpecialistPalliativeCareXName, value, "LengthOfStayAdjustmentSpecialistPalliativeCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LengthOfStayAdjustment_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConsultantEpisodeLengthOfStayAdjustment_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LengthOfStayAdjustmentRehabXName, typeof(decimal));
            localElementDictionary.Add(LengthOfStayAdjustmentSpecialistPalliativeCareXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
    /// </para>
    /// </summary>
    public partial class PatientPathway_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientPathwayIdentityXName = System.Xml.Linq.XName.Get("PatientPathwayIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RTTPeriodCharacteristicsXName = System.Xml.Linq.XName.Get("RTTPeriodCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientPathway_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientPathway_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientPathway_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientPathway_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientPathwayIdentityXName), new NamedContentModelEntity(RTTPeriodCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public PatientPathway_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public virtual PatientPathwayIdentityLocalType PatientPathwayIdentity {
            get {
                XElement x = this.GetElement(PatientPathwayIdentityXName);
                return ((PatientPathwayIdentityLocalType)(x));
            }
            set {
                this.SetElement(PatientPathwayIdentityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public virtual RTTPeriodCharacteristicsLocalType RTTPeriodCharacteristics {
            get {
                XElement x = this.GetElement(RTTPeriodCharacteristicsXName);
                return ((RTTPeriodCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(RTTPeriodCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientPathway_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientPathwayIdentityXName, typeof(PatientPathwayIdentityLocalType));
            localElementDictionary.Add(RTTPeriodCharacteristicsXName, typeof(RTTPeriodCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationCode_PatientPathwayIdentifierIssuer)
        /// </para>
        /// </summary>
        public partial class PatientPathwayIdentityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UniqueBookingReferenceNumber_ConvertedXName = System.Xml.Linq.XName.Get("UniqueBookingReferenceNumber_Converted", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientPathwayIdentifierXName = System.Xml.Linq.XName.Get("PatientPathwayIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_PatientPathwayIdentifierIssuerXName = System.Xml.Linq.XName.Get("OrganisationCode_PatientPathwayIdentifierIssuer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientPathwayIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PatientPathwayIdentityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PatientPathwayIdentityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PatientPathwayIdentityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(UniqueBookingReferenceNumber_ConvertedXName), new NamedContentModelEntity(PatientPathwayIdentifierXName)), new NamedContentModelEntity(OrganisationCode_PatientPathwayIdentifierIssuerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationCode_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public PatientPathwayIdentityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationCode_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string UniqueBookingReferenceNumber_Converted {
                get {
                    XElement x = this.GetElement(UniqueBookingReferenceNumber_ConvertedXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(UniqueBookingReferenceNumber_ConvertedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(UniqueBookingReferenceNumber_ConvertedXName, value, "UniqueBookingReferenceNumber_Converted", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UBRN_Converted_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationCode_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string PatientPathwayIdentifier {
                get {
                    XElement x = this.GetElement(PatientPathwayIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientPathwayIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientPathwayIdentifierXName, value, "PatientPathwayIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientPathwayIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationCode_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_PatientPathwayIdentifierIssuer {
                get {
                    XElement x = this.GetElement(OrganisationCode_PatientPathwayIdentifierIssuerXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(OrganisationCode_PatientPathwayIdentifierIssuerXName, value, "OrganisationCode_PatientPathwayIdentifierIssuer", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_PatientPathwayIdentifierIssuer_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PatientPathwayIdentityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(UniqueBookingReferenceNumber_ConvertedXName, typeof(string));
                localElementDictionary.Add(PatientPathwayIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_PatientPathwayIdentifierIssuerXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
        /// </para>
        /// </summary>
        public partial class RTTPeriodCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_StatusXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_Status", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WaitingTimeMeasurementTypeXName = System.Xml.Linq.XName.Get("WaitingTimeMeasurementType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_StartDateXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_StartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_EndDateXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_EndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTTPeriodCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator RTTPeriodCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RTTPeriodCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static RTTPeriodCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReferralToTreatmentPeriod_StatusXName), new NamedContentModelEntity(WaitingTimeMeasurementTypeXName), new NamedContentModelEntity(ReferralToTreatmentPeriod_StartDateXName), new NamedContentModelEntity(ReferralToTreatmentPeriod_EndDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public RTTPeriodCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual string ReferralToTreatmentPeriod_Status {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_StatusXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ReferralToTreatmentPeriod_StatusXName, value, "ReferralToTreatmentPeriod_Status", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_Status_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual string WaitingTimeMeasurementType {
                get {
                    XElement x = this.GetElement(WaitingTimeMeasurementTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(WaitingTimeMeasurementTypeXName, value, "WaitingTimeMeasurementType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WaitingTimeMeasurementType_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferralToTreatmentPeriod_StartDate {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_StartDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferralToTreatmentPeriod_StartDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferralToTreatmentPeriod_StartDateXName, value, "ReferralToTreatmentPeriod_StartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_StartDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferralToTreatmentPeriod_EndDate {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_EndDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferralToTreatmentPeriod_EndDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferralToTreatmentPeriod_EndDateXName, value, "ReferralToTreatmentPeriod_EndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_EndDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<RTTPeriodCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ReferralToTreatmentPeriod_StatusXName, typeof(string));
                localElementDictionary.Add(WaitingTimeMeasurementTypeXName, typeof(string));
                localElementDictionary.Add(ReferralToTreatmentPeriod_StartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(ReferralToTreatmentPeriod_EndDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((PersonFullName | PersonName_Structured | PersonRequestedName)?)
    /// </para>
    /// </summary>
    public partial class PersonName_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonFullNameXName = System.Xml.Linq.XName.Get("PersonFullName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonName_StructuredXName = System.Xml.Linq.XName.Get("PersonName_Structured", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonRequestedNameXName = System.Xml.Linq.XName.Get("PersonRequestedName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonName_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonName_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonName_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonName_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PersonFullNameXName), new NamedContentModelEntity(PersonName_StructuredXName), new NamedContentModelEntity(PersonRequestedNameXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((PersonFullName | PersonName_Structured | PersonRequestedName)?)
        /// </para>
        /// </summary>
        public PersonName_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PersonFullName | PersonName_Structured | PersonRequestedName)?)
        /// </para>
        /// </summary>
        public virtual string PersonFullName {
            get {
                XElement x = this.GetElement(PersonFullNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonFullNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonFullNameXName, value, "PersonFullName", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_UnstructuredText_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PersonFullName | PersonName_Structured | PersonRequestedName)?)
        /// </para>
        /// </summary>
        public virtual PersonName_StructuredLocalType PersonName_Structured {
            get {
                XElement x = this.GetElement(PersonName_StructuredXName);
                return ((PersonName_StructuredLocalType)(x));
            }
            set {
                this.SetElement(PersonName_StructuredXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PersonFullName | PersonName_Structured | PersonRequestedName)?)
        /// </para>
        /// </summary>
        public virtual string PersonRequestedName {
            get {
                XElement x = this.GetElement(PersonRequestedNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonRequestedNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonRequestedNameXName, value, "PersonRequestedName", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_UnstructuredText_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonName_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonFullNameXName, typeof(string));
            localElementDictionary.Add(PersonName_StructuredXName, typeof(PersonName_StructuredLocalType));
            localElementDictionary.Add(PersonRequestedNameXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
        /// </para>
        /// </summary>
        public partial class PersonName_StructuredLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonTitleXName = System.Xml.Linq.XName.Get("PersonTitle", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonGivenNameXName = System.Xml.Linq.XName.Get("PersonGivenName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonFamilyNameXName = System.Xml.Linq.XName.Get("PersonFamilyName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonNameSuffixXName = System.Xml.Linq.XName.Get("PersonNameSuffix", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonInitialsXName = System.Xml.Linq.XName.Get("PersonInitials", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonName_Structured", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PersonName_StructuredLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PersonName_StructuredLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PersonName_StructuredLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonTitleXName), new NamedContentModelEntity(PersonGivenNameXName), new NamedContentModelEntity(PersonFamilyNameXName), new NamedContentModelEntity(PersonNameSuffixXName), new NamedContentModelEntity(PersonInitialsXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public PersonName_StructuredLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public virtual string PersonTitle {
                get {
                    XElement x = this.GetElement(PersonTitleXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonTitleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonTitleXName, value, "PersonTitle", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_StructuredWord_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public virtual string PersonGivenName {
                get {
                    XElement x = this.GetElement(PersonGivenNameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PersonGivenNameXName, value, "PersonGivenName", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_StructuredWord_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public virtual string PersonFamilyName {
                get {
                    XElement x = this.GetElement(PersonFamilyNameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PersonFamilyNameXName, value, "PersonFamilyName", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_StructuredWord_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public virtual string PersonNameSuffix {
                get {
                    XElement x = this.GetElement(PersonNameSuffixXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonNameSuffixXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonNameSuffixXName, value, "PersonNameSuffix", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_StructuredWord_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PersonTitle?, PersonGivenName, PersonFamilyName, PersonNameSuffix?, PersonInitials?)
            /// </para>
            /// </summary>
            public virtual string PersonInitials {
                get {
                    XElement x = this.GetElement(PersonInitialsXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonInitialsXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonInitialsXName, value, "PersonInitials", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_StructuredWord_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PersonName_StructuredLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PersonTitleXName, typeof(string));
                localElementDictionary.Add(PersonGivenNameXName, typeof(string));
                localElementDictionary.Add(PersonFamilyNameXName, typeof(string));
                localElementDictionary.Add(PersonNameSuffixXName, typeof(string));
                localElementDictionary.Add(PersonInitialsXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ReferrerCode?, ReferringOrganisationCode?)
    /// </para>
    /// </summary>
    public partial class Referrer_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferrerCodeXName = System.Xml.Linq.XName.Get("ReferrerCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferringOrganisationCodeXName = System.Xml.Linq.XName.Get("ReferringOrganisationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Referrer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Referrer_Structure(XElement xe) { return XTypedServices.ToXTypedElement<Referrer_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Referrer_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReferrerCodeXName), new NamedContentModelEntity(ReferringOrganisationCodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ReferrerCode?, ReferringOrganisationCode?)
        /// </para>
        /// </summary>
        public Referrer_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReferrerCode?, ReferringOrganisationCode?)
        /// </para>
        /// </summary>
        public virtual string ReferrerCode {
            get {
                XElement x = this.GetElement(ReferrerCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReferrerCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReferrerCodeXName, value, "ReferrerCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferrerCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReferrerCode?, ReferringOrganisationCode?)
        /// </para>
        /// </summary>
        public virtual string ReferringOrganisationCode {
            get {
                XElement x = this.GetElement(ReferringOrganisationCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReferringOrganisationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReferringOrganisationCodeXName, value, "ReferringOrganisationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferringOrganisationCode_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Referrer_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ReferrerCodeXName, typeof(string));
            localElementDictionary.Add(ReferringOrganisationCodeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
    /// </para>
    /// </summary>
    public partial class ServiceAgreementDetails_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissioningSerialNumberXName = System.Xml.Linq.XName.Get("CommissioningSerialNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NHSServiceAgreementLineNumberXName = System.Xml.Linq.XName.Get("NHSServiceAgreementLineNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderReferenceNumberXName = System.Xml.Linq.XName.Get("ProviderReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissionerReferenceNumberXName = System.Xml.Linq.XName.Get("CommissionerReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfProviderXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfProvider", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfCommissionerXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfCommissioner", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceAgreementDetails_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceAgreementDetails_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ServiceAgreementDetails_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceAgreementDetails_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommissioningSerialNumberXName), new NamedContentModelEntity(NHSServiceAgreementLineNumberXName), new NamedContentModelEntity(ProviderReferenceNumberXName), new NamedContentModelEntity(CommissionerReferenceNumberXName), new NamedContentModelEntity(OrganisationCode_CodeOfProviderXName), new NamedContentModelEntity(OrganisationCode_CodeOfCommissionerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public ServiceAgreementDetails_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string CommissioningSerialNumber {
            get {
                XElement x = this.GetElement(CommissioningSerialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissioningSerialNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissioningSerialNumberXName, value, "CommissioningSerialNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissioningSerialNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string NHSServiceAgreementLineNumber {
            get {
                XElement x = this.GetElement(NHSServiceAgreementLineNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NHSServiceAgreementLineNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NHSServiceAgreementLineNumberXName, value, "NHSServiceAgreementLineNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementLineNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string ProviderReferenceNumber {
            get {
                XElement x = this.GetElement(ProviderReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProviderReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProviderReferenceNumberXName, value, "ProviderReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProviderReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string CommissionerReferenceNumber {
            get {
                XElement x = this.GetElement(CommissionerReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissionerReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissionerReferenceNumberXName, value, "CommissionerReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissionerReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfProvider {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfProviderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfProviderXName, value, "OrganisationCode_CodeOfProvider", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfCommissioner {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfCommissionerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfCommissionerXName, value, "OrganisationCode_CodeOfCommissioner", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceAgreementDetails_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommissioningSerialNumberXName, typeof(string));
            localElementDictionary.Add(NHSServiceAgreementLineNumberXName, typeof(string));
            localElementDictionary.Add(ProviderReferenceNumberXName, typeof(string));
            localElementDictionary.Add(CommissionerReferenceNumberXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfProviderXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfCommissionerXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
    /// </para>
    /// </summary>
    public partial class ServiceAgreementDetails_EAL_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissioningSerialNumberXName = System.Xml.Linq.XName.Get("CommissioningSerialNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NHSServiceAgreementLineNumberXName = System.Xml.Linq.XName.Get("NHSServiceAgreementLineNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderReferenceNumberXName = System.Xml.Linq.XName.Get("ProviderReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissionerReferenceNumberXName = System.Xml.Linq.XName.Get("CommissionerReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfProviderXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfProvider", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfCommissionerXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfCommissioner", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NHSServiceAgreementChangeDateXName = System.Xml.Linq.XName.Get("NHSServiceAgreementChangeDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceAgreementDetails_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceAgreementDetails_EAL_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ServiceAgreementDetails_EAL_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceAgreementDetails_EAL_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommissioningSerialNumberXName), new NamedContentModelEntity(NHSServiceAgreementLineNumberXName), new NamedContentModelEntity(ProviderReferenceNumberXName), new NamedContentModelEntity(CommissionerReferenceNumberXName), new NamedContentModelEntity(OrganisationCode_CodeOfProviderXName), new NamedContentModelEntity(OrganisationCode_CodeOfCommissionerXName), new NamedContentModelEntity(NHSServiceAgreementChangeDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public ServiceAgreementDetails_EAL_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string CommissioningSerialNumber {
            get {
                XElement x = this.GetElement(CommissioningSerialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissioningSerialNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissioningSerialNumberXName, value, "CommissioningSerialNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissioningSerialNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string NHSServiceAgreementLineNumber {
            get {
                XElement x = this.GetElement(NHSServiceAgreementLineNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NHSServiceAgreementLineNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NHSServiceAgreementLineNumberXName, value, "NHSServiceAgreementLineNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementLineNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string ProviderReferenceNumber {
            get {
                XElement x = this.GetElement(ProviderReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProviderReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProviderReferenceNumberXName, value, "ProviderReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProviderReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string CommissionerReferenceNumber {
            get {
                XElement x = this.GetElement(CommissionerReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissionerReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissionerReferenceNumberXName, value, "CommissionerReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissionerReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfProvider {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfProviderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfProviderXName, value, "OrganisationCode_CodeOfProvider", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfCommissioner {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfCommissionerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfCommissionerXName, value, "OrganisationCode_CodeOfCommissioner", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? NHSServiceAgreementChangeDate {
            get {
                XElement x = this.GetElement(NHSServiceAgreementChangeDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NHSServiceAgreementChangeDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(NHSServiceAgreementChangeDateXName, value, "NHSServiceAgreementChangeDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementChangeDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceAgreementDetails_EAL_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommissioningSerialNumberXName, typeof(string));
            localElementDictionary.Add(NHSServiceAgreementLineNumberXName, typeof(string));
            localElementDictionary.Add(ProviderReferenceNumberXName, typeof(string));
            localElementDictionary.Add(CommissionerReferenceNumberXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfProviderXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfCommissionerXName, typeof(string));
            localElementDictionary.Add(NHSServiceAgreementChangeDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
    /// </para>
    /// </summary>
    public partial class ServiceAgreementChange_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissioningSerialNumberXName = System.Xml.Linq.XName.Get("CommissioningSerialNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NHSServiceAgreementLineNumberXName = System.Xml.Linq.XName.Get("NHSServiceAgreementLineNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderReferenceNumberXName = System.Xml.Linq.XName.Get("ProviderReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommissionerReferenceNumberXName = System.Xml.Linq.XName.Get("CommissionerReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfProviderXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfProvider", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationCode_CodeOfCommissionerXName = System.Xml.Linq.XName.Get("OrganisationCode_CodeOfCommissioner", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NHSServiceAgreementChangeDateXName = System.Xml.Linq.XName.Get("NHSServiceAgreementChangeDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceAgreementChange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceAgreementChange_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ServiceAgreementChange_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceAgreementChange_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommissioningSerialNumberXName), new NamedContentModelEntity(NHSServiceAgreementLineNumberXName), new NamedContentModelEntity(ProviderReferenceNumberXName), new NamedContentModelEntity(CommissionerReferenceNumberXName), new NamedContentModelEntity(OrganisationCode_CodeOfProviderXName), new NamedContentModelEntity(OrganisationCode_CodeOfCommissionerXName), new NamedContentModelEntity(NHSServiceAgreementChangeDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public ServiceAgreementChange_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string CommissioningSerialNumber {
            get {
                XElement x = this.GetElement(CommissioningSerialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissioningSerialNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissioningSerialNumberXName, value, "CommissioningSerialNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissioningSerialNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string NHSServiceAgreementLineNumber {
            get {
                XElement x = this.GetElement(NHSServiceAgreementLineNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NHSServiceAgreementLineNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NHSServiceAgreementLineNumberXName, value, "NHSServiceAgreementLineNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementLineNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string ProviderReferenceNumber {
            get {
                XElement x = this.GetElement(ProviderReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProviderReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProviderReferenceNumberXName, value, "ProviderReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProviderReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string CommissionerReferenceNumber {
            get {
                XElement x = this.GetElement(CommissionerReferenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CommissionerReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CommissionerReferenceNumberXName, value, "CommissionerReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissionerReferenceNumber_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfProvider {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfProviderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfProviderXName, value, "OrganisationCode_CodeOfProvider", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual string OrganisationCode_CodeOfCommissioner {
            get {
                XElement x = this.GetElement(OrganisationCode_CodeOfCommissionerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationCode_CodeOfCommissionerXName, value, "OrganisationCode_CodeOfCommissioner", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NHSServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationCode_CodeOfProvider, OrganisationCode_CodeOfCommissioner, NHSServiceAgreementChangeDate)
        /// </para>
        /// </summary>
        public virtual System.DateTime NHSServiceAgreementChangeDate {
            get {
                XElement x = this.GetElement(NHSServiceAgreementChangeDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(NHSServiceAgreementChangeDateXName, value, "NHSServiceAgreementChangeDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementChangeDate_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceAgreementChange_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommissioningSerialNumberXName, typeof(string));
            localElementDictionary.Add(NHSServiceAgreementLineNumberXName, typeof(string));
            localElementDictionary.Add(ProviderReferenceNumberXName, typeof(string));
            localElementDictionary.Add(CommissionerReferenceNumberXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfProviderXName, typeof(string));
            localElementDictionary.Add(OrganisationCode_CodeOfCommissionerXName, typeof(string));
            localElementDictionary.Add(NHSServiceAgreementChangeDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_General_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_General_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_General_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_General_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_General_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_General_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_General_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_General_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_General_Structure PatientIdentity_General_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_General_StructureXName);
                return ((PatientIdentity_General_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_General_Structure PatientCharacteristics_General_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_General_StructureXName);
                return ((PatientCharacteristics_General_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_General_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_General_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_General_StructureXName, typeof(PatientIdentity_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_General_StructureXName, typeof(PatientCharacteristics_General_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
    /// </para>
    /// </summary>
    public partial class PatientIdentity_General_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_StructureXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientIdentity_General_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientIdentity_General_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientIdentity_General_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_StructureXName), new NamedContentModelEntity(VerifiedIdentity_StructureXName), new NamedContentModelEntity(UnverifiedIdentity_StructureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public PatientIdentity_General_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_StructureLocalType WithheldIdentity_Structure {
            get {
                XElement x = this.GetElement(WithheldIdentity_StructureXName);
                return ((WithheldIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_StructureLocalType VerifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(VerifiedIdentity_StructureXName);
                return ((VerifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_StructureLocalType UnverifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_StructureXName);
                return ((UnverifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientIdentity_General_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_StructureXName, typeof(WithheldIdentity_StructureLocalType));
            localElementDictionary.Add(VerifiedIdentity_StructureXName, typeof(VerifiedIdentity_StructureLocalType));
            localElementDictionary.Add(UnverifiedIdentity_StructureXName, typeof(UnverifiedIdentity_StructureLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public VerifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientNameXName = System.Xml.Linq.XName.Get("PatientName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientUsualAddressXName = System.Xml.Linq.XName.Get("PatientUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PatientNameXName), new NamedContentModelEntity(PatientUsualAddressXName), new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NHSNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual PersonName_Structure PatientName {
                get {
                    XElement x = this.GetElement(PatientNameXName);
                    return ((PersonName_Structure)(x));
                }
                set {
                    this.SetElement(PatientNameXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual Address_Structure PatientUsualAddress {
                get {
                    XElement x = this.GetElement(PatientUsualAddressXName);
                    return ((Address_Structure)(x));
                }
                set {
                    this.SetElement(PatientUsualAddressXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PostcodeOfUsualAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PatientNameXName, typeof(PersonName_Structure));
                localElementDictionary.Add(PatientUsualAddressXName, typeof(Address_Structure));
                localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_General_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CarerSupportIndicatorXName = System.Xml.Linq.XName.Get("CarerSupportIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonMaritalStatusXName = System.Xml.Linq.XName.Get("PersonMaritalStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MentalHealthActLegalStatusClassificationCode_OnAdmissionXName = System.Xml.Linq.XName.Get("MentalHealthActLegalStatusClassificationCode_OnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_General_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_General_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_General_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(CarerSupportIndicatorXName), new NamedContentModelEntity(EthnicCategoryXName), new NamedContentModelEntity(PersonMaritalStatusXName), new NamedContentModelEntity(MentalHealthActLegalStatusClassificationCode_OnAdmissionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_General_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public virtual string CarerSupportIndicator {
            get {
                XElement x = this.GetElement(CarerSupportIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CarerSupportIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CarerSupportIndicatorXName, value, "CarerSupportIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CarerSupportIndicator_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public virtual string PersonMaritalStatus {
            get {
                XElement x = this.GetElement(PersonMaritalStatusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonMaritalStatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonMaritalStatusXName, value, "PersonMaritalStatus", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonMaritalStatus_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?, MentalHealthActLegalStatusClassificationCode_OnAdmission?)
        /// </para>
        /// </summary>
        public virtual string MentalHealthActLegalStatusClassificationCode_OnAdmission {
            get {
                XElement x = this.GetElement(MentalHealthActLegalStatusClassificationCode_OnAdmissionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MentalHealthActLegalStatusClassificationCode_OnAdmissionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MentalHealthActLegalStatusClassificationCode_OnAdmissionXName, value, "MentalHealthActLegalStatusClassificationCode_OnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MentalHealthActLegalStatusClassificationCode_OnAdmission_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_General_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(CarerSupportIndicatorXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
            localElementDictionary.Add(PersonMaritalStatusXName, typeof(string));
            localElementDictionary.Add(MentalHealthActLegalStatusClassificationCode_OnAdmissionXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_OtherDelivery_General_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CarerSupportIndicatorXName = System.Xml.Linq.XName.Get("CarerSupportIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonMaritalStatusXName = System.Xml.Linq.XName.Get("PersonMaritalStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_OtherDelivery_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_OtherDelivery_General_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_OtherDelivery_General_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_OtherDelivery_General_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(CarerSupportIndicatorXName), new NamedContentModelEntity(EthnicCategoryXName), new NamedContentModelEntity(PersonMaritalStatusXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_OtherDelivery_General_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
        /// </para>
        /// </summary>
        public virtual string CarerSupportIndicator {
            get {
                XElement x = this.GetElement(CarerSupportIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CarerSupportIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CarerSupportIndicatorXName, value, "CarerSupportIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CarerSupportIndicator_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?, PersonMaritalStatus?)
        /// </para>
        /// </summary>
        public virtual string PersonMaritalStatus {
            get {
                XElement x = this.GetElement(PersonMaritalStatusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonMaritalStatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonMaritalStatusXName, value, "PersonMaritalStatus", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonMaritalStatus_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_OtherDelivery_General_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(CarerSupportIndicatorXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
            localElementDictionary.Add(PersonMaritalStatusXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_Birth_Structure, PatientCharacteristics_Birth_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_Birth_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_Birth_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_Birth_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_Birth_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_Birth_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_Birth_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_Birth_StructureXName), new NamedContentModelEntity(PatientCharacteristics_Birth_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_Birth_Structure, PatientCharacteristics_Birth_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_Birth_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Birth_Structure, PatientCharacteristics_Birth_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_Birth_Structure PatientIdentity_Birth_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_Birth_StructureXName);
                return ((PatientIdentity_Birth_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_Birth_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Birth_Structure, PatientCharacteristics_Birth_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_Birth_Structure PatientCharacteristics_Birth_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_Birth_StructureXName);
                return ((PatientCharacteristics_Birth_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_Birth_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_Birth_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_Birth_StructureXName, typeof(PatientIdentity_Birth_Structure));
            localElementDictionary.Add(PatientCharacteristics_Birth_StructureXName, typeof(PatientCharacteristics_Birth_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
    /// </para>
    /// </summary>
    public partial class PatientIdentity_Birth_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_StructureXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientIdentity_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientIdentity_Birth_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientIdentity_Birth_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientIdentity_Birth_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_StructureXName), new NamedContentModelEntity(VerifiedIdentity_StructureXName), new NamedContentModelEntity(UnverifiedIdentity_StructureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public PatientIdentity_Birth_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_StructureLocalType WithheldIdentity_Structure {
            get {
                XElement x = this.GetElement(WithheldIdentity_StructureXName);
                return ((WithheldIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_StructureLocalType VerifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(VerifiedIdentity_StructureXName);
                return ((VerifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_StructureLocalType UnverifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_StructureXName);
                return ((UnverifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientIdentity_Birth_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_StructureXName, typeof(WithheldIdentity_StructureLocalType));
            localElementDictionary.Add(VerifiedIdentity_StructureXName, typeof(VerifiedIdentity_StructureLocalType));
            localElementDictionary.Add(UnverifiedIdentity_StructureXName, typeof(UnverifiedIdentity_StructureLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode, PersonBirthDate?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PersonBirthDateXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, PersonBirthDate?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, PersonBirthDate?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, PersonBirthDate?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, PersonBirthDate?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public VerifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientNameXName = System.Xml.Linq.XName.Get("PatientName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PatientNameXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NHSNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual PersonName_Structure PatientName {
                get {
                    XElement x = this.GetElement(PatientNameXName);
                    return ((PersonName_Structure)(x));
                }
                set {
                    this.SetElement(PatientNameXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PatientNameXName, typeof(PersonName_Structure));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_Birth_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiveOrStillBirthCodeXName = System.Xml.Linq.XName.Get("LiveOrStillBirthCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BirthWeightXName = System.Xml.Linq.XName.Get("BirthWeight", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_Birth_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_Birth_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_Birth_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(EthnicCategoryXName), new NamedContentModelEntity(LiveOrStillBirthCodeXName), new NamedContentModelEntity(BirthWeightXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_Birth_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
        /// </para>
        /// </summary>
        public virtual string LiveOrStillBirthCode {
            get {
                XElement x = this.GetElement(LiveOrStillBirthCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LiveOrStillBirthCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LiveOrStillBirthCodeXName, value, "LiveOrStillBirthCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LiveOrStillBirthCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, EthnicCategory?, LiveOrStillBirthCode?, BirthWeight?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BirthWeight {
            get {
                XElement x = this.GetElement(BirthWeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BirthWeightXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(BirthWeightXName, value, "BirthWeight", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BirthWeight_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_Birth_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
            localElementDictionary.Add(LiveOrStillBirthCodeXName, typeof(string));
            localElementDictionary.Add(BirthWeightXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_Delivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_Delivery_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_General_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_Delivery_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_Delivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_Delivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_Delivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_Delivery_StructureXName), new NamedContentModelEntity(PatientCharacteristics_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_Delivery_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_Delivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_Delivery_Structure PatientIdentity_Delivery_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_Delivery_StructureXName);
                return ((PatientIdentity_Delivery_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_Delivery_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_General_Structure PatientCharacteristics_General_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_General_StructureXName);
                return ((PatientCharacteristics_General_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_Delivery_Structure PatientCharacteristics_Delivery_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_Delivery_StructureXName);
                return ((PatientCharacteristics_Delivery_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_Delivery_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_Delivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_Delivery_StructureXName, typeof(PatientIdentity_Delivery_Structure));
            localElementDictionary.Add(PatientCharacteristics_General_StructureXName, typeof(PatientCharacteristics_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_Delivery_StructureXName, typeof(PatientCharacteristics_Delivery_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_OtherDelivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_Delivery_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_General_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_Delivery_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_OtherDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_OtherDelivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_OtherDelivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_OtherDelivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_Delivery_StructureXName), new NamedContentModelEntity(PatientCharacteristics_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_Delivery_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_OtherDelivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_Delivery_Structure PatientIdentity_Delivery_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_Delivery_StructureXName);
                return ((PatientIdentity_Delivery_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_Delivery_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_OtherDelivery_General_Structure PatientCharacteristics_General_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_General_StructureXName);
                return ((PatientCharacteristics_OtherDelivery_General_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_Delivery_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Delivery_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_Delivery_Structure PatientCharacteristics_Delivery_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_Delivery_StructureXName);
                return ((PatientCharacteristics_Delivery_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_Delivery_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_OtherDelivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_Delivery_StructureXName, typeof(PatientIdentity_Delivery_Structure));
            localElementDictionary.Add(PatientCharacteristics_General_StructureXName, typeof(PatientCharacteristics_OtherDelivery_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_Delivery_StructureXName, typeof(PatientCharacteristics_Delivery_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
    /// </para>
    /// </summary>
    public partial class PatientIdentity_Delivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_StructureXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientIdentity_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientIdentity_Delivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientIdentity_Delivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientIdentity_Delivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_StructureXName), new NamedContentModelEntity(VerifiedIdentity_StructureXName), new NamedContentModelEntity(UnverifiedIdentity_StructureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public PatientIdentity_Delivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_StructureLocalType WithheldIdentity_Structure {
            get {
                XElement x = this.GetElement(WithheldIdentity_StructureXName);
                return ((WithheldIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_StructureLocalType VerifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(VerifiedIdentity_StructureXName);
                return ((VerifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_StructureLocalType UnverifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_StructureXName);
                return ((UnverifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientIdentity_Delivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_StructureXName, typeof(WithheldIdentity_StructureLocalType));
            localElementDictionary.Add(VerifiedIdentity_StructureXName, typeof(VerifiedIdentity_StructureLocalType));
            localElementDictionary.Add(UnverifiedIdentity_StructureXName, typeof(UnverifiedIdentity_StructureLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public VerifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientNameXName = System.Xml.Linq.XName.Get("PatientName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientUsualAddressXName = System.Xml.Linq.XName.Get("PatientUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifierXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifierXName)), new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PatientNameXName), new NamedContentModelEntity(PatientUsualAddressXName), new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifierXName, value, "LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifierXName, value, "OrganisationCode_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber {
                get {
                    XElement x = this.GetElement(NHSNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NHSNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual PersonName_Structure PatientName {
                get {
                    XElement x = this.GetElement(PatientNameXName);
                    return ((PersonName_Structure)(x));
                }
                set {
                    this.SetElement(PatientNameXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual Address_Structure PatientUsualAddress {
                get {
                    XElement x = this.GetElement(PatientUsualAddressXName);
                    return ((Address_Structure)(x));
                }
                set {
                    this.SetElement(PatientUsualAddressXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PostcodeOfUsualAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier, OrganisationCode_LocalPatientIdentifier)?, NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?, PostcodeOfUsualAddress?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate {
                get {
                    XElement x = this.GetElement(PersonBirthDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifierXName, typeof(string));
                localElementDictionary.Add(NHSNumberXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(PatientNameXName, typeof(PersonName_Structure));
                localElementDictionary.Add(PatientUsualAddressXName, typeof(Address_Structure));
                localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PregnancyTotalPreviousPregnancies?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_Delivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PregnancyTotalPreviousPregnanciesXName = System.Xml.Linq.XName.Get("PregnancyTotalPreviousPregnancies", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_Delivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_Delivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_Delivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PregnancyTotalPreviousPregnanciesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PregnancyTotalPreviousPregnancies?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_Delivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PregnancyTotalPreviousPregnancies?)
        /// </para>
        /// </summary>
        public virtual string PregnancyTotalPreviousPregnancies {
            get {
                XElement x = this.GetElement(PregnancyTotalPreviousPregnanciesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PregnancyTotalPreviousPregnanciesXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PregnancyTotalPreviousPregnanciesXName, value, "PregnancyTotalPreviousPregnancies", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PregnancyTotalPreviousPregnancies_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_Delivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PregnancyTotalPreviousPregnanciesXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Psychiatric_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_Psychiatric_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_General_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_General_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_Psychiatric_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_Psychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_Psychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_Psychiatric_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_Psychiatric_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_Psychiatric_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_Psychiatric_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Psychiatric_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_Psychiatric_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Psychiatric_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_General_Structure PatientIdentity_General_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_General_StructureXName);
                return ((PatientIdentity_General_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Psychiatric_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_General_Structure PatientCharacteristics_General_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_General_StructureXName);
                return ((PatientCharacteristics_General_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_General_Structure?, PatientCharacteristics_Psychiatric_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_Psychiatric_Structure PatientCharacteristics_Psychiatric_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_Psychiatric_StructureXName);
                return ((PatientCharacteristics_Psychiatric_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_Psychiatric_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_Psychiatric_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_General_StructureXName, typeof(PatientIdentity_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_General_StructureXName, typeof(PatientCharacteristics_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_Psychiatric_StructureXName, typeof(PatientCharacteristics_Psychiatric_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_Psychiatric_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MentalHealthActLegalStatusClassificationCode_AtCensusDateXName = System.Xml.Linq.XName.Get("MentalHealthActLegalStatusClassificationCode_AtCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateDetentionCommencedXName = System.Xml.Linq.XName.Get("DateDetentionCommenced", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgeAtCensusXName = System.Xml.Linq.XName.Get("AgeAtCensus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationOfCareToPsychiatricCensusDateXName = System.Xml.Linq.XName.Get("DurationOfCareToPsychiatricCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationOfDetentionXName = System.Xml.Linq.XName.Get("DurationOfDetention", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MentalHealthAct2007_MentalCategoryXName = System.Xml.Linq.XName.Get("MentalHealthAct2007_MentalCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StatusOfPatientIncludedInThePsychiatricCensusCodeXName = System.Xml.Linq.XName.Get("StatusOfPatientIncludedInThePsychiatricCensusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_Psychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_Psychiatric_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_Psychiatric_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_Psychiatric_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MentalHealthActLegalStatusClassificationCode_AtCensusDateXName), new NamedContentModelEntity(DateDetentionCommencedXName), new NamedContentModelEntity(AgeAtCensusXName), new NamedContentModelEntity(DurationOfCareToPsychiatricCensusDateXName), new NamedContentModelEntity(DurationOfDetentionXName), new NamedContentModelEntity(MentalHealthAct2007_MentalCategoryXName), new NamedContentModelEntity(StatusOfPatientIncludedInThePsychiatricCensusCodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_Psychiatric_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual string MentalHealthActLegalStatusClassificationCode_AtCensusDate {
            get {
                XElement x = this.GetElement(MentalHealthActLegalStatusClassificationCode_AtCensusDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MentalHealthActLegalStatusClassificationCode_AtCensusDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MentalHealthActLegalStatusClassificationCode_AtCensusDateXName, value, "MentalHealthActLegalStatusClassificationCode_AtCensusDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MentalHealthActLegalStatusClassificationCode_AtCensusDate_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DateDetentionCommenced {
            get {
                XElement x = this.GetElement(DateDetentionCommencedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DateDetentionCommencedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(DateDetentionCommencedXName, value, "DateDetentionCommenced", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateDetentionCommenced_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual decimal AgeAtCensus {
            get {
                XElement x = this.GetElement(AgeAtCensusXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(AgeAtCensusXName, value, "AgeAtCensus", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCensus_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DurationOfCareToPsychiatricCensusDate {
            get {
                XElement x = this.GetElement(DurationOfCareToPsychiatricCensusDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationOfCareToPsychiatricCensusDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationOfCareToPsychiatricCensusDateXName, value, "DurationOfCareToPsychiatricCensusDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DurationOfCareToPsychiatricCensusDate_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DurationOfDetention {
            get {
                XElement x = this.GetElement(DurationOfDetentionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationOfDetentionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationOfDetentionXName, value, "DurationOfDetention", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DurationOfDetention_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual string MentalHealthAct2007_MentalCategory {
            get {
                XElement x = this.GetElement(MentalHealthAct2007_MentalCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MentalHealthAct2007_MentalCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MentalHealthAct2007_MentalCategoryXName, value, "MentalHealthAct2007_MentalCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MentalHealthAct2007_MentalCategory_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MentalHealthActLegalStatusClassificationCode_AtCensusDate?, DateDetentionCommenced?, AgeAtCensus, DurationOfCareToPsychiatricCensusDate?, DurationOfDetention?, MentalHealthAct2007_MentalCategory?, StatusOfPatientIncludedInThePsychiatricCensusCode?)
        /// </para>
        /// </summary>
        public virtual string StatusOfPatientIncludedInThePsychiatricCensusCode {
            get {
                XElement x = this.GetElement(StatusOfPatientIncludedInThePsychiatricCensusCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StatusOfPatientIncludedInThePsychiatricCensusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StatusOfPatientIncludedInThePsychiatricCensusCodeXName, value, "StatusOfPatientIncludedInThePsychiatricCensusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StatusOfPatientIncludedInThePsychiatricCensusCode_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_Psychiatric_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MentalHealthActLegalStatusClassificationCode_AtCensusDateXName, typeof(string));
            localElementDictionary.Add(DateDetentionCommencedXName, typeof(System.DateTime));
            localElementDictionary.Add(AgeAtCensusXName, typeof(decimal));
            localElementDictionary.Add(DurationOfCareToPsychiatricCensusDateXName, typeof(decimal));
            localElementDictionary.Add(DurationOfDetentionXName, typeof(decimal));
            localElementDictionary.Add(MentalHealthAct2007_MentalCategoryXName, typeof(string));
            localElementDictionary.Add(StatusOfPatientIncludedInThePsychiatricCensusCodeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_AAndE_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_AAndE_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_General_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_AAndE_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_AAndE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_AAndE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_AAndE_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_AAndE_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_AAndE_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_AAndE_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_AAndE_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_AAndE_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_AAndE_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_General_Structure PatientIdentity_General_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_General_StructureXName);
                return ((PatientIdentity_General_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_AAndE_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_AAndE_Structure PatientCharacteristics_AAndE_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_AAndE_StructureXName);
                return ((PatientCharacteristics_AAndE_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_AAndE_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_AAndE_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_General_StructureXName, typeof(PatientIdentity_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_AAndE_StructureXName, typeof(PatientCharacteristics_AAndE_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_AAndE_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CarerSupportIndicatorXName = System.Xml.Linq.XName.Get("CarerSupportIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_AAndE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_AAndE_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_AAndE_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_AAndE_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(CarerSupportIndicatorXName), new NamedContentModelEntity(EthnicCategoryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_AAndE_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string CarerSupportIndicator {
            get {
                XElement x = this.GetElement(CarerSupportIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CarerSupportIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CarerSupportIndicatorXName, value, "CarerSupportIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CarerSupportIndicator_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_AAndE_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(CarerSupportIndicatorXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_CareActivity_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_Outpatient_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_General_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_CareActivity_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_CareActivity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_Outpatient_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_Outpatient_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_Outpatient_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_Outpatient_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_CareActivity_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_CareActivity_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_Outpatient_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_CareActivity_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_General_Structure PatientIdentity_General_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_General_StructureXName);
                return ((PatientIdentity_General_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_CareActivity_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_CareActivity_Structure PatientCharacteristics_CareActivity_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_CareActivity_StructureXName);
                return ((PatientCharacteristics_CareActivity_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_CareActivity_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_Outpatient_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_General_StructureXName, typeof(PatientIdentity_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_CareActivity_StructureXName, typeof(PatientCharacteristics_CareActivity_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_CareActivity_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CarerSupportIndicatorXName = System.Xml.Linq.XName.Get("CarerSupportIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_CareActivity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_CareActivity_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_CareActivity_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_CareActivity_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(CarerSupportIndicatorXName), new NamedContentModelEntity(EthnicCategoryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_CareActivity_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string CarerSupportIndicator {
            get {
                XElement x = this.GetElement(CarerSupportIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CarerSupportIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CarerSupportIndicatorXName, value, "CarerSupportIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CarerSupportIndicator_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?, EthnicCategory?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_CareActivity_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(CarerSupportIndicatorXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_EAL_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_EAL_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentity_General_StructureXName = System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_EAL_StructureXName = System.Xml.Linq.XName.Get("PatientCharacteristics_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_EAL_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_EAL_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_EAL_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentity_General_StructureXName), new NamedContentModelEntity(PatientCharacteristics_EAL_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_EAL_Structure?)
        /// </para>
        /// </summary>
        public PersonGroupPatient_EAL_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_EAL_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientIdentity_General_Structure PatientIdentity_General_Structure {
            get {
                XElement x = this.GetElement(PatientIdentity_General_StructureXName);
                return ((PatientIdentity_General_Structure)(x));
            }
            set {
                this.SetElement(PatientIdentity_General_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity_General_Structure, PatientCharacteristics_EAL_Structure?)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_EAL_Structure PatientCharacteristics_EAL_Structure {
            get {
                XElement x = this.GetElement(PatientCharacteristics_EAL_StructureXName);
                return ((PatientCharacteristics_EAL_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_EAL_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_EAL_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentity_General_StructureXName, typeof(PatientIdentity_General_Structure));
            localElementDictionary.Add(PatientCharacteristics_EAL_StructureXName, typeof(PatientCharacteristics_EAL_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_EAL_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrentXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CarerSupportIndicatorXName = System.Xml.Linq.XName.Get("CarerSupportIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_EAL_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_EAL_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_EAL_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrentXName), new NamedContentModelEntity(CarerSupportIndicatorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_EAL_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrentXName, value, "PersonGenderCodeCurrent", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent?, CarerSupportIndicator?)
        /// </para>
        /// </summary>
        public virtual string CarerSupportIndicator {
            get {
                XElement x = this.GetElement(CarerSupportIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CarerSupportIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CarerSupportIndicatorXName, value, "CarerSupportIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CarerSupportIndicator_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_EAL_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrentXName, typeof(string));
            localElementDictionary.Add(CarerSupportIndicatorXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonIdentity_Baby_Structure, PersonCharacteristics_Baby_Structure?)
    /// </para>
    /// </summary>
    public partial class PersonGroup_Baby_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonIdentity_Baby_StructureXName = System.Xml.Linq.XName.Get("PersonIdentity_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonCharacteristics_Baby_StructureXName = System.Xml.Linq.XName.Get("PersonCharacteristics_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroup_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroup_Baby_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroup_Baby_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroup_Baby_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonIdentity_Baby_StructureXName), new NamedContentModelEntity(PersonCharacteristics_Baby_StructureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonIdentity_Baby_Structure, PersonCharacteristics_Baby_Structure?)
        /// </para>
        /// </summary>
        public PersonGroup_Baby_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PersonIdentity_Baby_Structure, PersonCharacteristics_Baby_Structure?)
        /// </para>
        /// </summary>
        public virtual PersonIdentity_Baby_Structure PersonIdentity_Baby_Structure {
            get {
                XElement x = this.GetElement(PersonIdentity_Baby_StructureXName);
                return ((PersonIdentity_Baby_Structure)(x));
            }
            set {
                this.SetElement(PersonIdentity_Baby_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonIdentity_Baby_Structure, PersonCharacteristics_Baby_Structure?)
        /// </para>
        /// </summary>
        public virtual PersonCharacteristics_Baby_Structure PersonCharacteristics_Baby_Structure {
            get {
                XElement x = this.GetElement(PersonCharacteristics_Baby_StructureXName);
                return ((PersonCharacteristics_Baby_Structure)(x));
            }
            set {
                this.SetElement(PersonCharacteristics_Baby_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroup_Baby_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonIdentity_Baby_StructureXName, typeof(PersonIdentity_Baby_Structure));
            localElementDictionary.Add(PersonCharacteristics_Baby_StructureXName, typeof(PersonCharacteristics_Baby_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure_Baby | VerifiedIdentity_Structure_Baby | UnverifiedIdentity_Structure_Baby))
    /// </para>
    /// </summary>
    public partial class PersonIdentity_Baby_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_Structure_BabyXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_Structure_BabyXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_Structure_BabyXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonIdentity_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonIdentity_Baby_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonIdentity_Baby_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonIdentity_Baby_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_Structure_BabyXName), new NamedContentModelEntity(VerifiedIdentity_Structure_BabyXName), new NamedContentModelEntity(UnverifiedIdentity_Structure_BabyXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Baby | VerifiedIdentity_Structure_Baby | UnverifiedIdentity_Structure_Baby))
        /// </para>
        /// </summary>
        public PersonIdentity_Baby_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Baby | VerifiedIdentity_Structure_Baby | UnverifiedIdentity_Structure_Baby))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_Structure_BabyLocalType WithheldIdentity_Structure_Baby {
            get {
                XElement x = this.GetElement(WithheldIdentity_Structure_BabyXName);
                return ((WithheldIdentity_Structure_BabyLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_Structure_BabyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Baby | VerifiedIdentity_Structure_Baby | UnverifiedIdentity_Structure_Baby))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_Structure_BabyLocalType VerifiedIdentity_Structure_Baby {
            get {
                XElement x = this.GetElement(VerifiedIdentity_Structure_BabyXName);
                return ((VerifiedIdentity_Structure_BabyLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_Structure_BabyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Baby | VerifiedIdentity_Structure_Baby | UnverifiedIdentity_Structure_Baby))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_Structure_BabyLocalType UnverifiedIdentity_Structure_Baby {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_Structure_BabyXName);
                return ((UnverifiedIdentity_Structure_BabyLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_Structure_BabyXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonIdentity_Baby_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_Structure_BabyXName, typeof(WithheldIdentity_Structure_BabyLocalType));
            localElementDictionary.Add(VerifiedIdentity_Structure_BabyXName, typeof(VerifiedIdentity_Structure_BabyLocalType));
            localElementDictionary.Add(UnverifiedIdentity_Structure_BabyXName, typeof(UnverifiedIdentity_Structure_BabyLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_Structure_BabyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_BabyXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDate_BabyXName = System.Xml.Linq.XName.Get("PersonBirthDate_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Baby1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_Structure_BabyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_Structure_BabyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_Structure_BabyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCode_BabyXName), new NamedContentModelEntity(PersonBirthDate_BabyXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_Structure_BabyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_BabyXName, value, "NHSNumberStatusIndicatorCode_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate_Baby {
                get {
                    XElement x = this.GetElement(PersonBirthDate_BabyXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDate_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDate_BabyXName, value, "PersonBirthDate_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Baby1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Baby1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_Structure_BabyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_BabyXName, typeof(string));
                localElementDictionary.Add(PersonBirthDate_BabyXName, typeof(System.DateTime));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_Structure_BabyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_BabyXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifier_BabyXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumber_BabyXName = System.Xml.Linq.XName.Get("NHSNumber_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_BabyXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDate_BabyXName = System.Xml.Linq.XName.Get("PersonBirthDate_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Baby1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_Structure_BabyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_Structure_BabyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_Structure_BabyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_BabyXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifier_BabyXName)), new NamedContentModelEntity(NHSNumber_BabyXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCode_BabyXName), new NamedContentModelEntity(PersonBirthDate_BabyXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public VerifiedIdentity_Structure_BabyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier_Baby {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifier_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifier_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifier_BabyXName, value, "LocalPatientIdentifier_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier_Baby {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifier_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifier_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifier_BabyXName, value, "OrganisationCode_LocalPatientIdentifier_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber_Baby {
                get {
                    XElement x = this.GetElement(NHSNumber_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumber_BabyXName, value, "NHSNumber_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_BabyXName, value, "NHSNumberStatusIndicatorCode_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate_Baby {
                get {
                    XElement x = this.GetElement(PersonBirthDate_BabyXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDate_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDate_BabyXName, value, "PersonBirthDate_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Baby1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Baby1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_Structure_BabyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifier_BabyXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifier_BabyXName, typeof(string));
                localElementDictionary.Add(NHSNumber_BabyXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_BabyXName, typeof(string));
                localElementDictionary.Add(PersonBirthDate_BabyXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_Structure_BabyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_BabyXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifier_BabyXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumber_BabyXName = System.Xml.Linq.XName.Get("NHSNumber_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_BabyXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDate_BabyXName = System.Xml.Linq.XName.Get("PersonBirthDate_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Baby1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Baby", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_Structure_BabyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_Structure_BabyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_Structure_BabyLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_BabyXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifier_BabyXName)), new NamedContentModelEntity(NHSNumber_BabyXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCode_BabyXName), new NamedContentModelEntity(PersonBirthDate_BabyXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_Structure_BabyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier_Baby {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifier_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifier_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifier_BabyXName, value, "LocalPatientIdentifier_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier_Baby {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifier_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifier_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifier_BabyXName, value, "OrganisationCode_LocalPatientIdentifier_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber_Baby {
                get {
                    XElement x = this.GetElement(NHSNumber_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NHSNumber_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NHSNumber_BabyXName, value, "NHSNumber_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_BabyXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_BabyXName, value, "NHSNumberStatusIndicatorCode_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Baby, OrganisationCode_LocalPatientIdentifier_Baby)?, NHSNumber_Baby?, NHSNumberStatusIndicatorCode_Baby, PersonBirthDate_Baby?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate_Baby {
                get {
                    XElement x = this.GetElement(PersonBirthDate_BabyXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDate_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDate_BabyXName, value, "PersonBirthDate_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Baby1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Baby1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Baby1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_Structure_BabyLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifier_BabyXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifier_BabyXName, typeof(string));
                localElementDictionary.Add(NHSNumber_BabyXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_BabyXName, typeof(string));
                localElementDictionary.Add(PersonBirthDate_BabyXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
    /// </para>
    /// </summary>
    public partial class PersonCharacteristics_Baby_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGenderCodeCurrent_BabyXName = System.Xml.Linq.XName.Get("PersonGenderCodeCurrent_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiveOrStillBirthCodeXName = System.Xml.Linq.XName.Get("LiveOrStillBirthCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BirthWeightXName = System.Xml.Linq.XName.Get("BirthWeight", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonCharacteristics_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonCharacteristics_Baby_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonCharacteristics_Baby_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonCharacteristics_Baby_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGenderCodeCurrent_BabyXName), new NamedContentModelEntity(LiveOrStillBirthCodeXName), new NamedContentModelEntity(BirthWeightXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public PersonCharacteristics_Baby_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual string PersonGenderCodeCurrent_Baby {
            get {
                XElement x = this.GetElement(PersonGenderCodeCurrent_BabyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonGenderCodeCurrent_BabyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonGenderCodeCurrent_BabyXName, value, "PersonGenderCodeCurrent_Baby", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGenderCodeCurrent_Baby_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual string LiveOrStillBirthCode {
            get {
                XElement x = this.GetElement(LiveOrStillBirthCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LiveOrStillBirthCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LiveOrStillBirthCodeXName, value, "LiveOrStillBirthCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LiveOrStillBirthCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BirthWeight {
            get {
                XElement x = this.GetElement(BirthWeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BirthWeightXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(BirthWeightXName, value, "BirthWeight", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BirthWeight_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGenderCodeCurrent_Baby?, LiveOrStillBirthCode?, BirthWeight?, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonCharacteristics_Baby_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGenderCodeCurrent_BabyXName, typeof(string));
            localElementDictionary.Add(LiveOrStillBirthCodeXName, typeof(string));
            localElementDictionary.Add(BirthWeightXName, typeof(decimal));
            localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonIdentity_Mother_Structure, OverseasVisitorStatusClassificationAtCDSActivityDate_Group?)
    /// </para>
    /// </summary>
    public partial class PersonGroup_Mother_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonIdentity_Mother_StructureXName = System.Xml.Linq.XName.Get("PersonIdentity_Mother_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDate_GroupXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate_Group", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroup_Mother_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroup_Mother_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroup_Mother_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroup_Mother_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonIdentity_Mother_StructureXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDate_GroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonIdentity_Mother_Structure, OverseasVisitorStatusClassificationAtCDSActivityDate_Group?)
        /// </para>
        /// </summary>
        public PersonGroup_Mother_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PersonIdentity_Mother_Structure, OverseasVisitorStatusClassificationAtCDSActivityDate_Group?)
        /// </para>
        /// </summary>
        public virtual PersonIdentity_Mother_Structure PersonIdentity_Mother_Structure {
            get {
                XElement x = this.GetElement(PersonIdentity_Mother_StructureXName);
                return ((PersonIdentity_Mother_Structure)(x));
            }
            set {
                this.SetElement(PersonIdentity_Mother_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonIdentity_Mother_Structure, OverseasVisitorStatusClassificationAtCDSActivityDate_Group?)
        /// </para>
        /// </summary>
        public virtual OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure OverseasVisitorStatusClassificationAtCDSActivityDate_Group {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDate_GroupXName);
                return ((OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure)(x));
            }
            set {
                this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDate_GroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroup_Mother_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonIdentity_Mother_StructureXName, typeof(PersonIdentity_Mother_Structure));
            localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDate_GroupXName, typeof(OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
    /// </para>
    /// </summary>
    public partial class OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure_Mother | VerifiedIdentity_Structure_Mother | UnverifiedIdentity_Structure_Mother))
    /// </para>
    /// </summary>
    public partial class PersonIdentity_Mother_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_Structure_MotherXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_Structure_MotherXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_Structure_MotherXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonIdentity_Mother_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonIdentity_Mother_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonIdentity_Mother_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonIdentity_Mother_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_Structure_MotherXName), new NamedContentModelEntity(VerifiedIdentity_Structure_MotherXName), new NamedContentModelEntity(UnverifiedIdentity_Structure_MotherXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Mother | VerifiedIdentity_Structure_Mother | UnverifiedIdentity_Structure_Mother))
        /// </para>
        /// </summary>
        public PersonIdentity_Mother_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Mother | VerifiedIdentity_Structure_Mother | UnverifiedIdentity_Structure_Mother))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_Structure_MotherLocalType WithheldIdentity_Structure_Mother {
            get {
                XElement x = this.GetElement(WithheldIdentity_Structure_MotherXName);
                return ((WithheldIdentity_Structure_MotherLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_Structure_MotherXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Mother | VerifiedIdentity_Structure_Mother | UnverifiedIdentity_Structure_Mother))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_Structure_MotherLocalType VerifiedIdentity_Structure_Mother {
            get {
                XElement x = this.GetElement(VerifiedIdentity_Structure_MotherXName);
                return ((VerifiedIdentity_Structure_MotherLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_Structure_MotherXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure_Mother | VerifiedIdentity_Structure_Mother | UnverifiedIdentity_Structure_Mother))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_Structure_MotherLocalType UnverifiedIdentity_Structure_Mother {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_Structure_MotherXName);
                return ((UnverifiedIdentity_Structure_MotherLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_Structure_MotherXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonIdentity_Mother_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_Structure_MotherXName, typeof(WithheldIdentity_Structure_MotherLocalType));
            localElementDictionary.Add(VerifiedIdentity_Structure_MotherXName, typeof(VerifiedIdentity_Structure_MotherLocalType));
            localElementDictionary.Add(UnverifiedIdentity_Structure_MotherXName, typeof(UnverifiedIdentity_Structure_MotherLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode_Mother, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_Structure_MotherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_MotherXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Mother1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_Structure_MotherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_Structure_MotherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_Structure_MotherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCode_MotherXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Mother, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_Structure_MotherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Mother, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_MotherXName, value, "NHSNumberStatusIndicatorCode_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Mother, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode_Mother, OrganisationCode_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Mother1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Mother1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_Structure_MotherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_MotherXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_Structure_MotherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_MotherXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifier_MotherXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumber_MotherXName = System.Xml.Linq.XName.Get("NHSNumber_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_MotherXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddress_MotherXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDate_MotherXName = System.Xml.Linq.XName.Get("PersonBirthDate_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Mother1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_Structure_MotherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_Structure_MotherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_Structure_MotherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_MotherXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifier_MotherXName)), new NamedContentModelEntity(NHSNumber_MotherXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCode_MotherXName), new NamedContentModelEntity(PostcodeOfUsualAddress_MotherXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDate_MotherXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public VerifiedIdentity_Structure_MotherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier_Mother {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifier_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifier_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifier_MotherXName, value, "LocalPatientIdentifier_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier_Mother {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifier_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifier_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifier_MotherXName, value, "OrganisationCode_LocalPatientIdentifier_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber_Mother {
                get {
                    XElement x = this.GetElement(NHSNumber_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumber_MotherXName, value, "NHSNumber_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_MotherXName, value, "NHSNumberStatusIndicatorCode_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress_Mother {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddress_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(PostcodeOfUsualAddress_MotherXName, value, "PostcodeOfUsualAddress_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother, NHSNumberStatusIndicatorCode_Mother, PostcodeOfUsualAddress_Mother, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate_Mother {
                get {
                    XElement x = this.GetElement(PersonBirthDate_MotherXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDate_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDate_MotherXName, value, "PersonBirthDate_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Mother1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Mother1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_Structure_MotherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifier_MotherXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifier_MotherXName, typeof(string));
                localElementDictionary.Add(NHSNumber_MotherXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_MotherXName, typeof(string));
                localElementDictionary.Add(PostcodeOfUsualAddress_MotherXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDate_MotherXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_Structure_MotherLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_MotherXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_LocalPatientIdentifier_MotherXName = System.Xml.Linq.XName.Get("OrganisationCode_LocalPatientIdentifier_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumber_MotherXName = System.Xml.Linq.XName.Get("NHSNumber_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_MotherXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientUsualAddress_MotherXName = System.Xml.Linq.XName.Get("PatientUsualAddress_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddress_MotherXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCode_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationCode_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonBirthDate_MotherXName = System.Xml.Linq.XName.Get("PersonBirthDate_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode_Mother1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode_Mother", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_Structure_MotherLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_Structure_MotherLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_Structure_MotherLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_MotherXName), new NamedContentModelEntity(OrganisationCode_LocalPatientIdentifier_MotherXName)), new NamedContentModelEntity(NHSNumber_MotherXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCode_MotherXName), new NamedContentModelEntity(PatientUsualAddress_MotherXName), new NamedContentModelEntity(PostcodeOfUsualAddress_MotherXName), new NamedContentModelEntity(OrganisationCode_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDate_MotherXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_Structure_MotherLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string LocalPatientIdentifier_Mother {
                get {
                    XElement x = this.GetElement(LocalPatientIdentifier_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocalPatientIdentifier_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocalPatientIdentifier_MotherXName, value, "LocalPatientIdentifier_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_LocalPatientIdentifier_Mother {
                get {
                    XElement x = this.GetElement(OrganisationCode_LocalPatientIdentifier_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_LocalPatientIdentifier_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_LocalPatientIdentifier_MotherXName, value, "OrganisationCode_LocalPatientIdentifier_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string NHSNumber_Mother {
                get {
                    XElement x = this.GetElement(NHSNumber_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NHSNumber_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NHSNumber_MotherXName, value, "NHSNumber_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCode_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCode_MotherXName, value, "NHSNumberStatusIndicatorCode_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual Address_Structure PatientUsualAddress_Mother {
                get {
                    XElement x = this.GetElement(PatientUsualAddress_MotherXName);
                    return ((Address_Structure)(x));
                }
                set {
                    this.SetElement(PatientUsualAddress_MotherXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string PostcodeOfUsualAddress_Mother {
                get {
                    XElement x = this.GetElement(PostcodeOfUsualAddress_MotherXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PostcodeOfUsualAddress_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PostcodeOfUsualAddress_MotherXName, value, "PostcodeOfUsualAddress_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCode_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationCode_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCode_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCode_ResidenceResponsibilityXName, value, "OrganisationCode_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: ((LocalPatientIdentifier_Mother, OrganisationCode_LocalPatientIdentifier_Mother)?, NHSNumber_Mother?, NHSNumberStatusIndicatorCode_Mother, PatientUsualAddress_Mother?, PostcodeOfUsualAddress_Mother?, OrganisationCode_ResidenceResponsibility?, PersonBirthDate_Mother?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? PersonBirthDate_Mother {
                get {
                    XElement x = this.GetElement(PersonBirthDate_MotherXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonBirthDate_MotherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonBirthDate_MotherXName, value, "PersonBirthDate_Mother", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode_Mother1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode_Mother1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode_Mother1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_Structure_MotherLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalPatientIdentifier_MotherXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_LocalPatientIdentifier_MotherXName, typeof(string));
                localElementDictionary.Add(NHSNumber_MotherXName, typeof(string));
                localElementDictionary.Add(NHSNumberStatusIndicatorCode_MotherXName, typeof(string));
                localElementDictionary.Add(PatientUsualAddress_MotherXName, typeof(Address_Structure));
                localElementDictionary.Add(PostcodeOfUsualAddress_MotherXName, typeof(string));
                localElementDictionary.Add(OrganisationCode_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(PersonBirthDate_MotherXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
    /// </para>
    /// </summary>
    public partial class PersonGroupConsultant_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConsultantCodeXName = System.Xml.Linq.XName.Get("ConsultantCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CareProfessionalMainSpecialtyCodeXName = System.Xml.Linq.XName.Get("CareProfessionalMainSpecialtyCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityTreatmentFunctionCodeXName = System.Xml.Linq.XName.Get("ActivityTreatmentFunctionCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocalSubSpecialtyCodeXName = System.Xml.Linq.XName.Get("LocalSubSpecialtyCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupConsultant_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupConsultant_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupConsultant_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupConsultant_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConsultantCodeXName), new NamedContentModelEntity(CareProfessionalMainSpecialtyCodeXName), new NamedContentModelEntity(ActivityTreatmentFunctionCodeXName), new NamedContentModelEntity(LocalSubSpecialtyCodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
        /// </para>
        /// </summary>
        public PersonGroupConsultant_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
        /// </para>
        /// </summary>
        public virtual string ConsultantCode {
            get {
                XElement x = this.GetElement(ConsultantCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ConsultantCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ConsultantCodeXName, value, "ConsultantCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ConsultantCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
        /// </para>
        /// </summary>
        public virtual string CareProfessionalMainSpecialtyCode {
            get {
                XElement x = this.GetElement(CareProfessionalMainSpecialtyCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CareProfessionalMainSpecialtyCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CareProfessionalMainSpecialtyCodeXName, value, "CareProfessionalMainSpecialtyCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CareProfessionalMainSpecialtyCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
        /// </para>
        /// </summary>
        public virtual string ActivityTreatmentFunctionCode {
            get {
                XElement x = this.GetElement(ActivityTreatmentFunctionCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ActivityTreatmentFunctionCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ActivityTreatmentFunctionCodeXName, value, "ActivityTreatmentFunctionCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityTreatmentFunctionCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ConsultantCode?, CareProfessionalMainSpecialtyCode?, ActivityTreatmentFunctionCode?, LocalSubSpecialtyCode?)
        /// </para>
        /// </summary>
        public virtual string LocalSubSpecialtyCode {
            get {
                XElement x = this.GetElement(LocalSubSpecialtyCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LocalSubSpecialtyCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LocalSubSpecialtyCodeXName, value, "LocalSubSpecialtyCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalSubSpecialtyCode_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupConsultant_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConsultantCodeXName, typeof(string));
            localElementDictionary.Add(CareProfessionalMainSpecialtyCodeXName, typeof(string));
            localElementDictionary.Add(ActivityTreatmentFunctionCodeXName, typeof(string));
            localElementDictionary.Add(LocalSubSpecialtyCodeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class HospitalProviderSpell_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HospitalProviderSpell_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HospitalProviderSpell_Structure(XElement xe) { return XTypedServices.ToXTypedElement<HospitalProviderSpell_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HospitalProviderSpell_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionCharacteristicsXName), new NamedContentModelEntity(DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public HospitalProviderSpell_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual AdmissionCharacteristicsLocalType AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(AdmissionCharacteristicsXName);
                return ((AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual DischargeCharacteristicsLocalType DischargeCharacteristics {
            get {
                XElement x = this.GetElement(DischargeCharacteristicsXName);
                return ((DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(DischargeCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HospitalProviderSpell_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionCharacteristicsXName, typeof(AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(DischargeCharacteristicsXName, typeof(DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
        /// </para>
        /// </summary>
        public partial class AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HospitalProviderSpellNumberXName = System.Xml.Linq.XName.Get("HospitalProviderSpellNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeOnAdmissionXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCodeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientClassificationCodeXName = System.Xml.Linq.XName.Get("PatientClassificationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdmissionMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("AdmissionMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfAdmissionCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("SourceOfAdmissionCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeOnAdmissionXName = System.Xml.Linq.XName.Get("AgeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AmbulanceIncidentNumberXName = System.Xml.Linq.XName.Get("AmbulanceIncidentNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCodeConveyingAmbulanceTrustXName = System.Xml.Linq.XName.Get("OrganisationCodeConveyingAmbulanceTrust", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HospitalProviderSpellNumberXName), new NamedContentModelEntity(AdministrativeCategoryCodeOnAdmissionXName), new NamedContentModelEntity(PatientClassificationCodeXName), new NamedContentModelEntity(AdmissionMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(SourceOfAdmissionCode_HospitalProviderSpellXName), new NamedContentModelEntity(StartDate_HospitalProviderSpellXName), new NamedContentModelEntity(StartTime_HospitalProviderSpellXName), new NamedContentModelEntity(AgeOnAdmissionXName), new NamedContentModelEntity(AmbulanceIncidentNumberXName), new NamedContentModelEntity(OrganisationCodeConveyingAmbulanceTrustXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string HospitalProviderSpellNumber {
                get {
                    XElement x = this.GetElement(HospitalProviderSpellNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(HospitalProviderSpellNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(HospitalProviderSpellNumberXName, value, "HospitalProviderSpellNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpellNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCodeOnAdmission {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeOnAdmissionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeOnAdmissionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeOnAdmissionXName, value, "AdministrativeCategoryCodeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string PatientClassificationCode {
                get {
                    XElement x = this.GetElement(PatientClassificationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientClassificationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientClassificationCodeXName, value, "PatientClassificationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientClassificationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AdmissionMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(AdmissionMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdmissionMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdmissionMethodCode_HospitalProviderSpellXName, value, "AdmissionMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string SourceOfAdmissionCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(SourceOfAdmissionCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfAdmissionCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfAdmissionCode_HospitalProviderSpellXName, value, "SourceOfAdmissionCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfAdmissionCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartDate_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_HospitalProviderSpellXName, value, "StartDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_HospitalProviderSpell_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_HospitalProviderSpellXName, value, "StartTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual decimal AgeOnAdmission {
                get {
                    XElement x = this.GetElement(AgeOnAdmissionXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeOnAdmissionXName, value, "AgeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeOnAdmission_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AmbulanceIncidentNumber {
                get {
                    XElement x = this.GetElement(AmbulanceIncidentNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AmbulanceIncidentNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AmbulanceIncidentNumberXName, value, "AmbulanceIncidentNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AmbulanceIncidentNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCodeConveyingAmbulanceTrust {
                get {
                    XElement x = this.GetElement(OrganisationCodeConveyingAmbulanceTrustXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCodeConveyingAmbulanceTrustXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCodeConveyingAmbulanceTrustXName, value, "OrganisationCodeConveyingAmbulanceTrust", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCodeConveyingAmbulanceTrust_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(HospitalProviderSpellNumberXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeOnAdmissionXName, typeof(string));
                localElementDictionary.Add(PatientClassificationCodeXName, typeof(string));
                localElementDictionary.Add(AdmissionMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(SourceOfAdmissionCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(StartDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeOnAdmissionXName, typeof(decimal));
                localElementDictionary.Add(AmbulanceIncidentNumberXName, typeof(string));
                localElementDictionary.Add(OrganisationCodeConveyingAmbulanceTrustXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
        /// </para>
        /// </summary>
        public partial class DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDestinationCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDestinationCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeReadyDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeReadyDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargedToHospitalAtHomeServiceIndicatorXName = System.Xml.Linq.XName.Get("DischargedToHospitalAtHomeServiceIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DischargeDestinationCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeReadyDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeTime_HospitalProviderSpellXName), new NamedContentModelEntity(DischargedToHospitalAtHomeServiceIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeDestinationCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDestinationCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDestinationCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDestinationCode_HospitalProviderSpellXName, value, "DischargeDestinationCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDestinationCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeMethodCode_HospitalProviderSpellXName, value, "DischargeMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeReadyDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeReadyDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeReadyDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeReadyDate_HospitalProviderSpellXName, value, "DischargeReadyDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeReadyDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDate_HospitalProviderSpellXName, value, "DischargeDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeTime_HospitalProviderSpellXName, value, "DischargeTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargedToHospitalAtHomeServiceIndicator {
                get {
                    XElement x = this.GetElement(DischargedToHospitalAtHomeServiceIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargedToHospitalAtHomeServiceIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargedToHospitalAtHomeServiceIndicatorXName, value, "DischargedToHospitalAtHomeServiceIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargedToHospitalAtHomeServiceIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DischargeDestinationCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeReadyDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargedToHospitalAtHomeServiceIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class HospitalProviderSpell_Birth_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HospitalProviderSpell_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HospitalProviderSpell_Birth_Structure(XElement xe) { return XTypedServices.ToXTypedElement<HospitalProviderSpell_Birth_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HospitalProviderSpell_Birth_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionCharacteristicsXName), new NamedContentModelEntity(DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public HospitalProviderSpell_Birth_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual AdmissionCharacteristicsLocalType AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(AdmissionCharacteristicsXName);
                return ((AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual DischargeCharacteristicsLocalType DischargeCharacteristics {
            get {
                XElement x = this.GetElement(DischargeCharacteristicsXName);
                return ((DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(DischargeCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HospitalProviderSpell_Birth_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionCharacteristicsXName, typeof(AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(DischargeCharacteristicsXName, typeof(DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
        /// </para>
        /// </summary>
        public partial class AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HospitalProviderSpellNumberXName = System.Xml.Linq.XName.Get("HospitalProviderSpellNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeOnAdmissionXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCodeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientClassificationCodeXName = System.Xml.Linq.XName.Get("PatientClassificationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdmissionMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("AdmissionMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfAdmissionCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("SourceOfAdmissionCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeOnAdmissionXName = System.Xml.Linq.XName.Get("AgeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HospitalProviderSpellNumberXName), new NamedContentModelEntity(AdministrativeCategoryCodeOnAdmissionXName), new NamedContentModelEntity(PatientClassificationCodeXName), new NamedContentModelEntity(AdmissionMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(SourceOfAdmissionCode_HospitalProviderSpellXName), new NamedContentModelEntity(StartDate_HospitalProviderSpellXName), new NamedContentModelEntity(StartTime_HospitalProviderSpellXName), new NamedContentModelEntity(AgeOnAdmissionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string HospitalProviderSpellNumber {
                get {
                    XElement x = this.GetElement(HospitalProviderSpellNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(HospitalProviderSpellNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(HospitalProviderSpellNumberXName, value, "HospitalProviderSpellNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpellNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCodeOnAdmission {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeOnAdmissionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeOnAdmissionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeOnAdmissionXName, value, "AdministrativeCategoryCodeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string PatientClassificationCode {
                get {
                    XElement x = this.GetElement(PatientClassificationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientClassificationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientClassificationCodeXName, value, "PatientClassificationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientClassificationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string AdmissionMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(AdmissionMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdmissionMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdmissionMethodCode_HospitalProviderSpellXName, value, "AdmissionMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string SourceOfAdmissionCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(SourceOfAdmissionCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfAdmissionCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfAdmissionCode_HospitalProviderSpellXName, value, "SourceOfAdmissionCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfAdmissionCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartDate_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_HospitalProviderSpellXName, value, "StartDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_HospitalProviderSpell_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_HospitalProviderSpellXName, value, "StartTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual decimal AgeOnAdmission {
                get {
                    XElement x = this.GetElement(AgeOnAdmissionXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeOnAdmissionXName, value, "AgeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeOnAdmission_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(HospitalProviderSpellNumberXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeOnAdmissionXName, typeof(string));
                localElementDictionary.Add(PatientClassificationCodeXName, typeof(string));
                localElementDictionary.Add(AdmissionMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(SourceOfAdmissionCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(StartDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeOnAdmissionXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
        /// </para>
        /// </summary>
        public partial class DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDestinationCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDestinationCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeReadyDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeReadyDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargedToHospitalAtHomeServiceIndicatorXName = System.Xml.Linq.XName.Get("DischargedToHospitalAtHomeServiceIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DischargeDestinationCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeReadyDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeTime_HospitalProviderSpellXName), new NamedContentModelEntity(DischargedToHospitalAtHomeServiceIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeDestinationCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDestinationCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDestinationCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDestinationCode_HospitalProviderSpellXName, value, "DischargeDestinationCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDestinationCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeMethodCode_HospitalProviderSpellXName, value, "DischargeMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeReadyDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeReadyDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeReadyDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeReadyDate_HospitalProviderSpellXName, value, "DischargeReadyDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeReadyDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDate_HospitalProviderSpellXName, value, "DischargeDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeTime_HospitalProviderSpellXName, value, "DischargeTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargedToHospitalAtHomeServiceIndicator {
                get {
                    XElement x = this.GetElement(DischargedToHospitalAtHomeServiceIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargedToHospitalAtHomeServiceIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargedToHospitalAtHomeServiceIndicatorXName, value, "DischargedToHospitalAtHomeServiceIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargedToHospitalAtHomeServiceIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DischargeDestinationCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeReadyDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargedToHospitalAtHomeServiceIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class HospitalProviderSpell_GeneralEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HospitalProviderSpell_GeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HospitalProviderSpell_GeneralEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<HospitalProviderSpell_GeneralEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HospitalProviderSpell_GeneralEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionCharacteristicsXName), new NamedContentModelEntity(DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public HospitalProviderSpell_GeneralEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual AdmissionCharacteristicsLocalType AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(AdmissionCharacteristicsXName);
                return ((AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics, DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual DischargeCharacteristicsLocalType DischargeCharacteristics {
            get {
                XElement x = this.GetElement(DischargeCharacteristicsXName);
                return ((DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(DischargeCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HospitalProviderSpell_GeneralEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionCharacteristicsXName, typeof(AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(DischargeCharacteristicsXName, typeof(DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
        /// </para>
        /// </summary>
        public partial class AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HospitalProviderSpellNumberXName = System.Xml.Linq.XName.Get("HospitalProviderSpellNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeOnAdmissionXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCodeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientClassificationCodeXName = System.Xml.Linq.XName.Get("PatientClassificationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdmissionMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("AdmissionMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfAdmissionCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("SourceOfAdmissionCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeOnAdmissionXName = System.Xml.Linq.XName.Get("AgeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AmbulanceIncidentNumberXName = System.Xml.Linq.XName.Get("AmbulanceIncidentNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCodeConveyingAmbulanceTrustXName = System.Xml.Linq.XName.Get("OrganisationCodeConveyingAmbulanceTrust", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HospitalProviderSpellNumberXName), new NamedContentModelEntity(AdministrativeCategoryCodeOnAdmissionXName), new NamedContentModelEntity(PatientClassificationCodeXName), new NamedContentModelEntity(AdmissionMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(SourceOfAdmissionCode_HospitalProviderSpellXName), new NamedContentModelEntity(StartDate_HospitalProviderSpellXName), new NamedContentModelEntity(StartTime_HospitalProviderSpellXName), new NamedContentModelEntity(AgeOnAdmissionXName), new NamedContentModelEntity(AmbulanceIncidentNumberXName), new NamedContentModelEntity(OrganisationCodeConveyingAmbulanceTrustXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string HospitalProviderSpellNumber {
                get {
                    XElement x = this.GetElement(HospitalProviderSpellNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(HospitalProviderSpellNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(HospitalProviderSpellNumberXName, value, "HospitalProviderSpellNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpellNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCodeOnAdmission {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeOnAdmissionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeOnAdmissionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeOnAdmissionXName, value, "AdministrativeCategoryCodeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string PatientClassificationCode {
                get {
                    XElement x = this.GetElement(PatientClassificationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientClassificationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientClassificationCodeXName, value, "PatientClassificationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientClassificationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AdmissionMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(AdmissionMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdmissionMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdmissionMethodCode_HospitalProviderSpellXName, value, "AdmissionMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string SourceOfAdmissionCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(SourceOfAdmissionCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfAdmissionCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfAdmissionCode_HospitalProviderSpellXName, value, "SourceOfAdmissionCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfAdmissionCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartDate_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_HospitalProviderSpellXName, value, "StartDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_HospitalProviderSpell_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_HospitalProviderSpellXName, value, "StartTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual decimal AgeOnAdmission {
                get {
                    XElement x = this.GetElement(AgeOnAdmissionXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeOnAdmissionXName, value, "AgeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeOnAdmission_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AmbulanceIncidentNumber {
                get {
                    XElement x = this.GetElement(AmbulanceIncidentNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AmbulanceIncidentNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AmbulanceIncidentNumberXName, value, "AmbulanceIncidentNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AmbulanceIncidentNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCodeConveyingAmbulanceTrust {
                get {
                    XElement x = this.GetElement(OrganisationCodeConveyingAmbulanceTrustXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCodeConveyingAmbulanceTrustXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCodeConveyingAmbulanceTrustXName, value, "OrganisationCodeConveyingAmbulanceTrust", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCodeConveyingAmbulanceTrust_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(HospitalProviderSpellNumberXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeOnAdmissionXName, typeof(string));
                localElementDictionary.Add(PatientClassificationCodeXName, typeof(string));
                localElementDictionary.Add(AdmissionMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(SourceOfAdmissionCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(StartDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeOnAdmissionXName, typeof(decimal));
                localElementDictionary.Add(AmbulanceIncidentNumberXName, typeof(string));
                localElementDictionary.Add(OrganisationCodeConveyingAmbulanceTrustXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
        /// </para>
        /// </summary>
        public partial class DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDestinationCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDestinationCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeReadyDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeReadyDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargeTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("DischargeTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DischargedToHospitalAtHomeServiceIndicatorXName = System.Xml.Linq.XName.Get("DischargedToHospitalAtHomeServiceIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DischargeDestinationCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeReadyDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeDate_HospitalProviderSpellXName), new NamedContentModelEntity(DischargeTime_HospitalProviderSpellXName), new NamedContentModelEntity(DischargedToHospitalAtHomeServiceIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeDestinationCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDestinationCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDestinationCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDestinationCode_HospitalProviderSpellXName, value, "DischargeDestinationCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDestinationCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargeMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeMethodCode_HospitalProviderSpellXName, value, "DischargeMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeReadyDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeReadyDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeReadyDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeReadyDate_HospitalProviderSpellXName, value, "DischargeReadyDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeReadyDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeDate_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeDate_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeDate_HospitalProviderSpellXName, value, "DischargeDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeDate_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DischargeTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(DischargeTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargeTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargeTime_HospitalProviderSpellXName, value, "DischargeTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargeTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DischargeDestinationCode_HospitalProviderSpell?, DischargeMethodCode_HospitalProviderSpell?, DischargeReadyDate_HospitalProviderSpell?, DischargeDate_HospitalProviderSpell?, DischargeTime_HospitalProviderSpell?, DischargedToHospitalAtHomeServiceIndicator?)
            /// </para>
            /// </summary>
            public virtual string DischargedToHospitalAtHomeServiceIndicator {
                get {
                    XElement x = this.GetElement(DischargedToHospitalAtHomeServiceIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DischargedToHospitalAtHomeServiceIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DischargedToHospitalAtHomeServiceIndicatorXName, value, "DischargedToHospitalAtHomeServiceIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DischargedToHospitalAtHomeServiceIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DischargeDestinationCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(DischargeReadyDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargeTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(DischargedToHospitalAtHomeServiceIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionCharacteristics)
    /// </para>
    /// </summary>
    public partial class HospitalProviderSpellPsychiatric_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HospitalProviderSpellPsychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HospitalProviderSpellPsychiatric_Structure(XElement xe) { return XTypedServices.ToXTypedElement<HospitalProviderSpellPsychiatric_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HospitalProviderSpellPsychiatric_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics)
        /// </para>
        /// </summary>
        public HospitalProviderSpellPsychiatric_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionCharacteristics)
        /// </para>
        /// </summary>
        public virtual AdmissionCharacteristicsLocalType AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(AdmissionCharacteristicsXName);
                return ((AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(AdmissionCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HospitalProviderSpellPsychiatric_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionCharacteristicsXName, typeof(AdmissionCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
        /// </para>
        /// </summary>
        public partial class AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HospitalProviderSpellNumberXName = System.Xml.Linq.XName.Get("HospitalProviderSpellNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeOnAdmissionXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCodeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientClassificationCodeXName = System.Xml.Linq.XName.Get("PatientClassificationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdmissionMethodCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("AdmissionMethodCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfAdmissionCode_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("SourceOfAdmissionCode_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartDate_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_HospitalProviderSpellXName = System.Xml.Linq.XName.Get("StartTime_HospitalProviderSpell", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeOnAdmissionXName = System.Xml.Linq.XName.Get("AgeOnAdmission", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HospitalProviderSpellNumberXName), new NamedContentModelEntity(AdministrativeCategoryCodeOnAdmissionXName), new NamedContentModelEntity(PatientClassificationCodeXName), new NamedContentModelEntity(AdmissionMethodCode_HospitalProviderSpellXName), new NamedContentModelEntity(SourceOfAdmissionCode_HospitalProviderSpellXName), new NamedContentModelEntity(StartDate_HospitalProviderSpellXName), new NamedContentModelEntity(StartTime_HospitalProviderSpellXName), new NamedContentModelEntity(AgeOnAdmissionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string HospitalProviderSpellNumber {
                get {
                    XElement x = this.GetElement(HospitalProviderSpellNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(HospitalProviderSpellNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(HospitalProviderSpellNumberXName, value, "HospitalProviderSpellNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpellNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCodeOnAdmission {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeOnAdmissionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeOnAdmissionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeOnAdmissionXName, value, "AdministrativeCategoryCodeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string PatientClassificationCode {
                get {
                    XElement x = this.GetElement(PatientClassificationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientClassificationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientClassificationCodeXName, value, "PatientClassificationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientClassificationCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string AdmissionMethodCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(AdmissionMethodCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdmissionMethodCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdmissionMethodCode_HospitalProviderSpellXName, value, "AdmissionMethodCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionMethodCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual string SourceOfAdmissionCode_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(SourceOfAdmissionCode_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfAdmissionCode_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfAdmissionCode_HospitalProviderSpellXName, value, "SourceOfAdmissionCode_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfAdmissionCode_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartDate_HospitalProviderSpellXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_HospitalProviderSpellXName, value, "StartDate_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_HospitalProviderSpell_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_HospitalProviderSpell {
                get {
                    XElement x = this.GetElement(StartTime_HospitalProviderSpellXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_HospitalProviderSpellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_HospitalProviderSpellXName, value, "StartTime_HospitalProviderSpell", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_HospitalProviderSpell_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (HospitalProviderSpellNumber?, AdministrativeCategoryCodeOnAdmission?, PatientClassificationCode?, AdmissionMethodCode_HospitalProviderSpell?, SourceOfAdmissionCode_HospitalProviderSpell?, StartDate_HospitalProviderSpell, StartTime_HospitalProviderSpell?, AgeOnAdmission)
            /// </para>
            /// </summary>
            public virtual decimal AgeOnAdmission {
                get {
                    XElement x = this.GetElement(AgeOnAdmissionXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeOnAdmissionXName, value, "AgeOnAdmission", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeOnAdmission_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(HospitalProviderSpellNumberXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeOnAdmissionXName, typeof(string));
                localElementDictionary.Add(PatientClassificationCodeXName, typeof(string));
                localElementDictionary.Add(AdmissionMethodCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(SourceOfAdmissionCode_HospitalProviderSpellXName, typeof(string));
                localElementDictionary.Add(StartDate_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_HospitalProviderSpellXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeOnAdmissionXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class FinishedBirthEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FinishedBirthEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FinishedBirthEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<FinishedBirthEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FinishedBirthEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public FinishedBirthEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FinishedBirthEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NeonatalLevelOfCareCodeXName = System.Xml.Linq.XName.Get("NeonatalLevelOfCareCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(NeonatalLevelOfCareCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string NeonatalLevelOfCareCode {
                get {
                    XElement x = this.GetElement(NeonatalLevelOfCareCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NeonatalLevelOfCareCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NeonatalLevelOfCareCodeXName, value, "NeonatalLevelOfCareCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalLevelOfCareCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(NeonatalLevelOfCareCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class FinishedGeneralEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FinishedGeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FinishedGeneralEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<FinishedGeneralEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FinishedGeneralEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public FinishedGeneralEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FinishedGeneralEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NeonatalLevelOfCareCodeXName = System.Xml.Linq.XName.Get("NeonatalLevelOfCareCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FirstRegularDayOrNightAdmissionCodeXName = System.Xml.Linq.XName.Get("FirstRegularDayOrNightAdmissionCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PsychiatricPatientStatusCodeXName = System.Xml.Linq.XName.Get("PsychiatricPatientStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MultiProfOrDiscIndCodeXName = System.Xml.Linq.XName.Get("MultiProfOrDiscIndCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RehabilitationAssessmentTeamTypeXName = System.Xml.Linq.XName.Get("RehabilitationAssessmentTeamType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConsultantEpisodeLengthOfStayAdjustmentXName = System.Xml.Linq.XName.Get("ConsultantEpisodeLengthOfStayAdjustment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(NeonatalLevelOfCareCodeXName), new NamedContentModelEntity(FirstRegularDayOrNightAdmissionCodeXName), new NamedContentModelEntity(PsychiatricPatientStatusCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(MultiProfOrDiscIndCodeXName), new NamedContentModelEntity(RehabilitationAssessmentTeamTypeXName), new NamedContentModelEntity(ConsultantEpisodeLengthOfStayAdjustmentXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string NeonatalLevelOfCareCode {
                get {
                    XElement x = this.GetElement(NeonatalLevelOfCareCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NeonatalLevelOfCareCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NeonatalLevelOfCareCodeXName, value, "NeonatalLevelOfCareCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalLevelOfCareCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string FirstRegularDayOrNightAdmissionCode {
                get {
                    XElement x = this.GetElement(FirstRegularDayOrNightAdmissionCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(FirstRegularDayOrNightAdmissionCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(FirstRegularDayOrNightAdmissionCodeXName, value, "FirstRegularDayOrNightAdmissionCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FirstRegularDayOrNightAdmissionCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string PsychiatricPatientStatusCode {
                get {
                    XElement x = this.GetElement(PsychiatricPatientStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PsychiatricPatientStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PsychiatricPatientStatusCodeXName, value, "PsychiatricPatientStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricPatientStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string MultiProfOrDiscIndCode {
                get {
                    XElement x = this.GetElement(MultiProfOrDiscIndCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MultiProfOrDiscIndCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MultiProfOrDiscIndCodeXName, value, "MultiProfOrDiscIndCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MultiProfOrDiscIndCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string RehabilitationAssessmentTeamType {
                get {
                    XElement x = this.GetElement(RehabilitationAssessmentTeamTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RehabilitationAssessmentTeamTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RehabilitationAssessmentTeamTypeXName, value, "RehabilitationAssessmentTeamType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RehabilitationAssessmentTeamType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual ConsultantEpisodeLengthOfStayAdjustment_Structure ConsultantEpisodeLengthOfStayAdjustment {
                get {
                    XElement x = this.GetElement(ConsultantEpisodeLengthOfStayAdjustmentXName);
                    return ((ConsultantEpisodeLengthOfStayAdjustment_Structure)(x));
                }
                set {
                    this.SetElement(ConsultantEpisodeLengthOfStayAdjustmentXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(NeonatalLevelOfCareCodeXName, typeof(string));
                localElementDictionary.Add(FirstRegularDayOrNightAdmissionCodeXName, typeof(string));
                localElementDictionary.Add(PsychiatricPatientStatusCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(MultiProfOrDiscIndCodeXName, typeof(string));
                localElementDictionary.Add(RehabilitationAssessmentTeamTypeXName, typeof(string));
                localElementDictionary.Add(ConsultantEpisodeLengthOfStayAdjustmentXName, typeof(ConsultantEpisodeLengthOfStayAdjustment_Structure));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class FinishedDeliveryEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FinishedDeliveryEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FinishedDeliveryEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<FinishedDeliveryEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FinishedDeliveryEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public FinishedDeliveryEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FinishedDeliveryEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PsychiatricPatientStatusCodeXName = System.Xml.Linq.XName.Get("PsychiatricPatientStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MultiProfOrDiscIndCodeXName = System.Xml.Linq.XName.Get("MultiProfOrDiscIndCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RehabilitationAssessmentTeamTypeXName = System.Xml.Linq.XName.Get("RehabilitationAssessmentTeamType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(PsychiatricPatientStatusCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(MultiProfOrDiscIndCodeXName), new NamedContentModelEntity(RehabilitationAssessmentTeamTypeXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string PsychiatricPatientStatusCode {
                get {
                    XElement x = this.GetElement(PsychiatricPatientStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PsychiatricPatientStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PsychiatricPatientStatusCodeXName, value, "PsychiatricPatientStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricPatientStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string MultiProfOrDiscIndCode {
                get {
                    XElement x = this.GetElement(MultiProfOrDiscIndCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MultiProfOrDiscIndCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MultiProfOrDiscIndCodeXName, value, "MultiProfOrDiscIndCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MultiProfOrDiscIndCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string RehabilitationAssessmentTeamType {
                get {
                    XElement x = this.GetElement(RehabilitationAssessmentTeamTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RehabilitationAssessmentTeamTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RehabilitationAssessmentTeamTypeXName, value, "RehabilitationAssessmentTeamType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RehabilitationAssessmentTeamType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(PsychiatricPatientStatusCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(MultiProfOrDiscIndCodeXName, typeof(string));
                localElementDictionary.Add(RehabilitationAssessmentTeamTypeXName, typeof(string));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class UnfinishedBirthEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnfinishedBirthEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnfinishedBirthEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<UnfinishedBirthEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnfinishedBirthEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public UnfinishedBirthEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnfinishedBirthEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NeonatalLevelOfCareCodeXName = System.Xml.Linq.XName.Get("NeonatalLevelOfCareCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(NeonatalLevelOfCareCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string NeonatalLevelOfCareCode {
                get {
                    XElement x = this.GetElement(NeonatalLevelOfCareCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NeonatalLevelOfCareCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NeonatalLevelOfCareCodeXName, value, "NeonatalLevelOfCareCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalLevelOfCareCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndDate_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(NeonatalLevelOfCareCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class UnfinishedGeneralEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnfinishedGeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnfinishedGeneralEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<UnfinishedGeneralEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnfinishedGeneralEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public UnfinishedGeneralEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnfinishedGeneralEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NeonatalLevelOfCareCodeXName = System.Xml.Linq.XName.Get("NeonatalLevelOfCareCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FirstRegularDayOrNightAdmissionCodeXName = System.Xml.Linq.XName.Get("FirstRegularDayOrNightAdmissionCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PsychiatricPatientStatusCodeXName = System.Xml.Linq.XName.Get("PsychiatricPatientStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MultiProfOrDiscIndCodeXName = System.Xml.Linq.XName.Get("MultiProfOrDiscIndCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RehabilitationAssessmentTeamTypeXName = System.Xml.Linq.XName.Get("RehabilitationAssessmentTeamType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConsultantEpisodeLengthOfStayAdjustmentXName = System.Xml.Linq.XName.Get("ConsultantEpisodeLengthOfStayAdjustment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(NeonatalLevelOfCareCodeXName), new NamedContentModelEntity(FirstRegularDayOrNightAdmissionCodeXName), new NamedContentModelEntity(PsychiatricPatientStatusCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(MultiProfOrDiscIndCodeXName), new NamedContentModelEntity(RehabilitationAssessmentTeamTypeXName), new NamedContentModelEntity(ConsultantEpisodeLengthOfStayAdjustmentXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string NeonatalLevelOfCareCode {
                get {
                    XElement x = this.GetElement(NeonatalLevelOfCareCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NeonatalLevelOfCareCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NeonatalLevelOfCareCodeXName, value, "NeonatalLevelOfCareCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalLevelOfCareCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string FirstRegularDayOrNightAdmissionCode {
                get {
                    XElement x = this.GetElement(FirstRegularDayOrNightAdmissionCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(FirstRegularDayOrNightAdmissionCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(FirstRegularDayOrNightAdmissionCodeXName, value, "FirstRegularDayOrNightAdmissionCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FirstRegularDayOrNightAdmissionCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string PsychiatricPatientStatusCode {
                get {
                    XElement x = this.GetElement(PsychiatricPatientStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PsychiatricPatientStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PsychiatricPatientStatusCodeXName, value, "PsychiatricPatientStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricPatientStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndDate_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string MultiProfOrDiscIndCode {
                get {
                    XElement x = this.GetElement(MultiProfOrDiscIndCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MultiProfOrDiscIndCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MultiProfOrDiscIndCodeXName, value, "MultiProfOrDiscIndCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MultiProfOrDiscIndCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string RehabilitationAssessmentTeamType {
                get {
                    XElement x = this.GetElement(RehabilitationAssessmentTeamTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RehabilitationAssessmentTeamTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RehabilitationAssessmentTeamTypeXName, value, "RehabilitationAssessmentTeamType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RehabilitationAssessmentTeamType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual ConsultantEpisodeLengthOfStayAdjustment_Structure ConsultantEpisodeLengthOfStayAdjustment {
                get {
                    XElement x = this.GetElement(ConsultantEpisodeLengthOfStayAdjustmentXName);
                    return ((ConsultantEpisodeLengthOfStayAdjustment_Structure)(x));
                }
                set {
                    this.SetElement(ConsultantEpisodeLengthOfStayAdjustmentXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, NeonatalLevelOfCareCode?, FirstRegularDayOrNightAdmissionCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, ConsultantEpisodeLengthOfStayAdjustment?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(NeonatalLevelOfCareCodeXName, typeof(string));
                localElementDictionary.Add(FirstRegularDayOrNightAdmissionCodeXName, typeof(string));
                localElementDictionary.Add(PsychiatricPatientStatusCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(MultiProfOrDiscIndCodeXName, typeof(string));
                localElementDictionary.Add(RehabilitationAssessmentTeamTypeXName, typeof(string));
                localElementDictionary.Add(ConsultantEpisodeLengthOfStayAdjustmentXName, typeof(ConsultantEpisodeLengthOfStayAdjustment_Structure));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
    /// </para>
    /// </summary>
    public partial class UnfinishedDeliveryEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName APCLocationGroupXName = System.Xml.Linq.XName.Get("APCLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnfinishedDeliveryEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnfinishedDeliveryEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<UnfinishedDeliveryEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnfinishedDeliveryEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName), new NamedContentModelEntity(APCLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public UnfinishedDeliveryEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, ClinicalTreatmentDetails?, APCLocationGroup?)
        /// </para>
        /// </summary>
        public virtual APCLocationGroup_Structure APCLocationGroup {
            get {
                XElement x = this.GetElement(APCLocationGroupXName);
                return ((APCLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(APCLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnfinishedDeliveryEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(APCLocationGroupXName, typeof(APCLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastEpisodeInSpellIndicatorCodeXName = System.Xml.Linq.XName.Get("LastEpisodeInSpellIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PsychiatricPatientStatusCodeXName = System.Xml.Linq.XName.Get("PsychiatricPatientStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDate_EpisodeXName = System.Xml.Linq.XName.Get("EndDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTime_EpisodeXName = System.Xml.Linq.XName.Get("EndTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MultiProfOrDiscIndCodeXName = System.Xml.Linq.XName.Get("MultiProfOrDiscIndCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RehabilitationAssessmentTeamTypeXName = System.Xml.Linq.XName.Get("RehabilitationAssessmentTeamType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(LastEpisodeInSpellIndicatorCodeXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(PsychiatricPatientStatusCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(EndDate_EpisodeXName), new NamedContentModelEntity(EndTime_EpisodeXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(MultiProfOrDiscIndCodeXName), new NamedContentModelEntity(RehabilitationAssessmentTeamTypeXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string LastEpisodeInSpellIndicatorCode {
                get {
                    XElement x = this.GetElement(LastEpisodeInSpellIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastEpisodeInSpellIndicatorCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastEpisodeInSpellIndicatorCodeXName, value, "LastEpisodeInSpellIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastEpisodeInSpellIndicatorCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string PsychiatricPatientStatusCode {
                get {
                    XElement x = this.GetElement(PsychiatricPatientStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PsychiatricPatientStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PsychiatricPatientStatusCodeXName, value, "PsychiatricPatientStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricPatientStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndDate_Episode {
                get {
                    XElement x = this.GetElement(EndDate_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndDate_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndDate_EpisodeXName, value, "EndDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime_Episode {
                get {
                    XElement x = this.GetElement(EndTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTime_EpisodeXName, value, "EndTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string MultiProfOrDiscIndCode {
                get {
                    XElement x = this.GetElement(MultiProfOrDiscIndCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MultiProfOrDiscIndCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MultiProfOrDiscIndCodeXName, value, "MultiProfOrDiscIndCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MultiProfOrDiscIndCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string RehabilitationAssessmentTeamType {
                get {
                    XElement x = this.GetElement(RehabilitationAssessmentTeamTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RehabilitationAssessmentTeamTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RehabilitationAssessmentTeamTypeXName, value, "RehabilitationAssessmentTeamType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RehabilitationAssessmentTeamType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, LastEpisodeInSpellIndicatorCode?, OperationStatusCode?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, EndDate_Episode?, EndTime_Episode?, AgeAtCDSActivityDate, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(LastEpisodeInSpellIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(PsychiatricPatientStatusCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(MultiProfOrDiscIndCodeXName, typeof(string));
                localElementDictionary.Add(RehabilitationAssessmentTeamTypeXName, typeof(string));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
    /// </para>
    /// </summary>
    public partial class PsychiatricEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EpisodeCharacteristicsXName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationGroupXName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PsychiatricEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PsychiatricEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PsychiatricEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PsychiatricEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(LocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public PsychiatricEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual EpisodeCharacteristicsLocalType EpisodeCharacteristics {
            get {
                XElement x = this.GetElement(EpisodeCharacteristicsXName);
                return ((EpisodeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EpisodeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (EpisodeCharacteristics, ServiceAgreementDetails, PersonGroup_Consultant?, ClinicalDiagnosisDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual LocationGroupLocalType LocationGroup {
            get {
                XElement x = this.GetElement(LocationGroupXName);
                return ((LocationGroupLocalType)(x));
            }
            set {
                this.SetElement(LocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PsychiatricEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EpisodeCharacteristicsXName, typeof(EpisodeCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
            localElementDictionary.Add(LocationGroupXName, typeof(LocationGroupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
        /// </para>
        /// </summary>
        public partial class EpisodeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EpisodeNumberXName = System.Xml.Linq.XName.Get("EpisodeNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PsychiatricPatientStatusCodeXName = System.Xml.Linq.XName.Get("PsychiatricPatientStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_EpisodeXName = System.Xml.Linq.XName.Get("StartDate_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_EpisodeXName = System.Xml.Linq.XName.Get("StartTime_Episode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DetainedAndOrLongTermPsychiatricCensusDateXName = System.Xml.Linq.XName.Get("DetainedAndOrLongTermPsychiatricCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusXName = System.Xml.Linq.XName.Get("OverseasVisitorStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OverseasVisitorStatus_Structure> OverseasVisitorStatusField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EpisodeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EpisodeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EpisodeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EpisodeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EpisodeNumberXName), new NamedContentModelEntity(PsychiatricPatientStatusCodeXName), new NamedContentModelEntity(StartDate_EpisodeXName), new NamedContentModelEntity(StartTime_EpisodeXName), new NamedContentModelEntity(DetainedAndOrLongTermPsychiatricCensusDateXName), new NamedContentModelEntity(OverseasVisitorStatusXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public EpisodeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? EpisodeNumber {
                get {
                    XElement x = this.GetElement(EpisodeNumberXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EpisodeNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EpisodeNumberXName, value, "EpisodeNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EpisodeNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual string PsychiatricPatientStatusCode {
                get {
                    XElement x = this.GetElement(PsychiatricPatientStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PsychiatricPatientStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PsychiatricPatientStatusCodeXName, value, "PsychiatricPatientStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricPatientStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime StartDate_Episode {
                get {
                    XElement x = this.GetElement(StartDate_EpisodeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(StartDate_EpisodeXName, value, "StartDate_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Episode_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_Episode {
                get {
                    XElement x = this.GetElement(StartTime_EpisodeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_EpisodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_EpisodeXName, value, "StartTime_Episode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Episode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual System.DateTime DetainedAndOrLongTermPsychiatricCensusDate {
                get {
                    XElement x = this.GetElement(DetainedAndOrLongTermPsychiatricCensusDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(DetainedAndOrLongTermPsychiatricCensusDateXName, value, "DetainedAndOrLongTermPsychiatricCensusDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DetainedAndOrLongTermPsychiatricCensusDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (EpisodeNumber?, PsychiatricPatientStatusCode?, StartDate_Episode, StartTime_Episode?, DetainedAndOrLongTermPsychiatricCensusDate, OverseasVisitorStatus*)
            /// </para>
            /// </summary>
            public virtual IList<OverseasVisitorStatus_Structure> OverseasVisitorStatus {
                get {
                    if ((this.OverseasVisitorStatusField == null)) {
                        this.OverseasVisitorStatusField = new XTypedList<OverseasVisitorStatus_Structure>(this, LinqToXsdTypeManager.Instance, OverseasVisitorStatusXName);
                    }
                    return this.OverseasVisitorStatusField;
                }
                set {
                    if ((value == null)) {
                        this.OverseasVisitorStatusField = null;
                    }
                    else {
                        if ((this.OverseasVisitorStatusField == null)) {
                            this.OverseasVisitorStatusField = XTypedList<OverseasVisitorStatus_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverseasVisitorStatusXName);
                        }
                        else {
                            XTypedServices.SetList<OverseasVisitorStatus_Structure>(this.OverseasVisitorStatusField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EpisodeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EpisodeNumberXName, typeof(decimal));
                localElementDictionary.Add(PsychiatricPatientStatusCodeXName, typeof(string));
                localElementDictionary.Add(StartDate_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_EpisodeXName, typeof(System.DateTime));
                localElementDictionary.Add(DetainedAndOrLongTermPsychiatricCensusDateXName, typeof(System.DateTime));
                localElementDictionary.Add(OverseasVisitorStatusXName, typeof(OverseasVisitorStatus_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StartOfEpisode?, WardStayAtPsychiatricCensusDate?)
        /// </para>
        /// </summary>
        public partial class LocationGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartOfEpisodeXName = System.Xml.Linq.XName.Get("StartOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardStayAtPsychiatricCensusDateXName = System.Xml.Linq.XName.Get("WardStayAtPsychiatricCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LocationGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocationGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LocationGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartOfEpisodeXName), new NamedContentModelEntity(WardStayAtPsychiatricCensusDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (StartOfEpisode?, WardStayAtPsychiatricCensusDate?)
            /// </para>
            /// </summary>
            public LocationGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartOfEpisode?, WardStayAtPsychiatricCensusDate?)
            /// </para>
            /// </summary>
            public virtual StartOfEpisodeLocalType StartOfEpisode {
                get {
                    XElement x = this.GetElement(StartOfEpisodeXName);
                    return ((StartOfEpisodeLocalType)(x));
                }
                set {
                    this.SetElement(StartOfEpisodeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartOfEpisode?, WardStayAtPsychiatricCensusDate?)
            /// </para>
            /// </summary>
            public virtual WardStayAtPsychiatricCensusDateLocalType WardStayAtPsychiatricCensusDate {
                get {
                    XElement x = this.GetElement(WardStayAtPsychiatricCensusDateXName);
                    return ((WardStayAtPsychiatricCensusDateLocalType)(x));
                }
                set {
                    this.SetElement(WardStayAtPsychiatricCensusDateXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LocationGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(StartOfEpisodeXName, typeof(StartOfEpisodeLocalType));
                localElementDictionary.Add(WardStayAtPsychiatricCensusDateXName, typeof(WardStayAtPsychiatricCensusDateLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public partial class StartOfEpisodeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IntendedClinicalCareIntensityCodeXName = System.Xml.Linq.XName.Get("IntendedClinicalCareIntensityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IntendedAgeGroupXName = System.Xml.Linq.XName.Get("IntendedAgeGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SexOfPatientsCodeXName = System.Xml.Linq.XName.Get("SexOfPatientsCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardDayPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardDayPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardNightPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardNightPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardSecurityLevelXName = System.Xml.Linq.XName.Get("WardSecurityLevel", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardCodeXName = System.Xml.Linq.XName.Get("WardCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StartOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator StartOfEpisodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<StartOfEpisodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static StartOfEpisodeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(IntendedClinicalCareIntensityCodeXName), new NamedContentModelEntity(IntendedAgeGroupXName), new NamedContentModelEntity(SexOfPatientsCodeXName), new NamedContentModelEntity(WardDayPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardNightPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardSecurityLevelXName), new NamedContentModelEntity(WardCodeXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public StartOfEpisodeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string SiteCodeOfTreatment {
                    get {
                        XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string IntendedClinicalCareIntensityCode {
                    get {
                        XElement x = this.GetElement(IntendedClinicalCareIntensityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(IntendedClinicalCareIntensityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(IntendedClinicalCareIntensityCodeXName, value, "IntendedClinicalCareIntensityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedClinicalCareIntensityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string IntendedAgeGroup {
                    get {
                        XElement x = this.GetElement(IntendedAgeGroupXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(IntendedAgeGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(IntendedAgeGroupXName, value, "IntendedAgeGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedAgeGroup_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string SexOfPatientsCode {
                    get {
                        XElement x = this.GetElement(SexOfPatientsCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(SexOfPatientsCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(SexOfPatientsCodeXName, value, "SexOfPatientsCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SexOfPatientsCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardDayPeriodAvailabilityCode {
                    get {
                        XElement x = this.GetElement(WardDayPeriodAvailabilityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardDayPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardDayPeriodAvailabilityCodeXName, value, "WardDayPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardDayPeriodAvailabilityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardNightPeriodAvailabilityCode {
                    get {
                        XElement x = this.GetElement(WardNightPeriodAvailabilityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardNightPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardNightPeriodAvailabilityCodeXName, value, "WardNightPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardNightPeriodAvailabilityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardSecurityLevel {
                    get {
                        XElement x = this.GetElement(WardSecurityLevelXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardSecurityLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardSecurityLevelXName, value, "WardSecurityLevel", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardSecurityLevel_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardCode {
                    get {
                        XElement x = this.GetElement(WardCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardCodeXName, value, "WardCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardCode_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<StartOfEpisodeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                    localElementDictionary.Add(IntendedClinicalCareIntensityCodeXName, typeof(string));
                    localElementDictionary.Add(IntendedAgeGroupXName, typeof(string));
                    localElementDictionary.Add(SexOfPatientsCodeXName, typeof(string));
                    localElementDictionary.Add(WardDayPeriodAvailabilityCodeXName, typeof(string));
                    localElementDictionary.Add(WardNightPeriodAvailabilityCodeXName, typeof(string));
                    localElementDictionary.Add(WardSecurityLevelXName, typeof(string));
                    localElementDictionary.Add(WardCodeXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public partial class WardStayAtPsychiatricCensusDateLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IntendedClinicalCareIntensityCodeXName = System.Xml.Linq.XName.Get("IntendedClinicalCareIntensityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IntendedAgeGroupXName = System.Xml.Linq.XName.Get("IntendedAgeGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SexOfPatientsCodeXName = System.Xml.Linq.XName.Get("SexOfPatientsCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardDayPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardDayPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardNightPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardNightPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DetainedAndOrLongTermPsychiatricCensusDateXName = System.Xml.Linq.XName.Get("DetainedAndOrLongTermPsychiatricCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardSecurityLevelXName = System.Xml.Linq.XName.Get("WardSecurityLevel", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WardCodeXName = System.Xml.Linq.XName.Get("WardCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WardStayAtPsychiatricCensusDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator WardStayAtPsychiatricCensusDateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WardStayAtPsychiatricCensusDateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static WardStayAtPsychiatricCensusDateLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(IntendedClinicalCareIntensityCodeXName), new NamedContentModelEntity(IntendedAgeGroupXName), new NamedContentModelEntity(SexOfPatientsCodeXName), new NamedContentModelEntity(WardDayPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardNightPeriodAvailabilityCodeXName), new NamedContentModelEntity(DetainedAndOrLongTermPsychiatricCensusDateXName), new NamedContentModelEntity(WardSecurityLevelXName), new NamedContentModelEntity(WardCodeXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public WardStayAtPsychiatricCensusDateLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string SiteCodeOfTreatment {
                    get {
                        XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string IntendedClinicalCareIntensityCode {
                    get {
                        XElement x = this.GetElement(IntendedClinicalCareIntensityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(IntendedClinicalCareIntensityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(IntendedClinicalCareIntensityCodeXName, value, "IntendedClinicalCareIntensityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedClinicalCareIntensityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string IntendedAgeGroup {
                    get {
                        XElement x = this.GetElement(IntendedAgeGroupXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(IntendedAgeGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(IntendedAgeGroupXName, value, "IntendedAgeGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedAgeGroup_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string SexOfPatientsCode {
                    get {
                        XElement x = this.GetElement(SexOfPatientsCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(SexOfPatientsCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(SexOfPatientsCodeXName, value, "SexOfPatientsCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SexOfPatientsCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardDayPeriodAvailabilityCode {
                    get {
                        XElement x = this.GetElement(WardDayPeriodAvailabilityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardDayPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardDayPeriodAvailabilityCodeXName, value, "WardDayPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardDayPeriodAvailabilityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// MYes
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardNightPeriodAvailabilityCode {
                    get {
                        XElement x = this.GetElement(WardNightPeriodAvailabilityCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardNightPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardNightPeriodAvailabilityCodeXName, value, "WardNightPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardNightPeriodAvailabilityCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual System.DateTime? DetainedAndOrLongTermPsychiatricCensusDate {
                    get {
                        XElement x = this.GetElement(DetainedAndOrLongTermPsychiatricCensusDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DetainedAndOrLongTermPsychiatricCensusDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DetainedAndOrLongTermPsychiatricCensusDateXName, value, "DetainedAndOrLongTermPsychiatricCensusDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DetainedAndOrLongTermPsychiatricCensusDate_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardSecurityLevel {
                    get {
                        XElement x = this.GetElement(WardSecurityLevelXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardSecurityLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardSecurityLevelXName, value, "WardSecurityLevel", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardSecurityLevel_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, DetainedAndOrLongTermPsychiatricCensusDate?, WardSecurityLevel?, WardCode?)
                /// </para>
                /// </summary>
                public virtual string WardCode {
                    get {
                        XElement x = this.GetElement(WardCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WardCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WardCodeXName, value, "WardCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardCode_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<WardStayAtPsychiatricCensusDateLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                    localElementDictionary.Add(IntendedClinicalCareIntensityCodeXName, typeof(string));
                    localElementDictionary.Add(IntendedAgeGroupXName, typeof(string));
                    localElementDictionary.Add(SexOfPatientsCodeXName, typeof(string));
                    localElementDictionary.Add(WardDayPeriodAvailabilityCodeXName, typeof(string));
                    localElementDictionary.Add(WardNightPeriodAvailabilityCodeXName, typeof(string));
                    localElementDictionary.Add(DetainedAndOrLongTermPsychiatricCensusDateXName, typeof(System.DateTime));
                    localElementDictionary.Add(WardSecurityLevelXName, typeof(string));
                    localElementDictionary.Add(WardCodeXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StartOfEpisode?, WardStay*, EndOfEpisode?)
    /// </para>
    /// </summary>
    public partial class APCLocationGroup_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartOfEpisodeXName = System.Xml.Linq.XName.Get("StartOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WardStayXName = System.Xml.Linq.XName.Get("WardStay", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WardStayLocalType> WardStayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndOfEpisodeXName = System.Xml.Linq.XName.Get("EndOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("APCLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator APCLocationGroup_Structure(XElement xe) { return XTypedServices.ToXTypedElement<APCLocationGroup_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static APCLocationGroup_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartOfEpisodeXName), new NamedContentModelEntity(WardStayXName), new NamedContentModelEntity(EndOfEpisodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StartOfEpisode?, WardStay*, EndOfEpisode?)
        /// </para>
        /// </summary>
        public APCLocationGroup_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StartOfEpisode?, WardStay*, EndOfEpisode?)
        /// </para>
        /// </summary>
        public virtual StartOfEpisodeLocalType StartOfEpisode {
            get {
                XElement x = this.GetElement(StartOfEpisodeXName);
                return ((StartOfEpisodeLocalType)(x));
            }
            set {
                this.SetElement(StartOfEpisodeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (StartOfEpisode?, WardStay*, EndOfEpisode?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.APCLocationGroup_Structure.WardStayLocalType> WardStay {
            get {
                if ((this.WardStayField == null)) {
                    this.WardStayField = new XTypedList<WardStayLocalType>(this, LinqToXsdTypeManager.Instance, WardStayXName);
                }
                return this.WardStayField;
            }
            set {
                if ((value == null)) {
                    this.WardStayField = null;
                }
                else {
                    if ((this.WardStayField == null)) {
                        this.WardStayField = XTypedList<WardStayLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WardStayXName);
                    }
                    else {
                        XTypedServices.SetList<WardStayLocalType>(this.WardStayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StartOfEpisode?, WardStay*, EndOfEpisode?)
        /// </para>
        /// </summary>
        public virtual EndOfEpisodeLocalType EndOfEpisode {
            get {
                XElement x = this.GetElement(EndOfEpisodeXName);
                return ((EndOfEpisodeLocalType)(x));
            }
            set {
                this.SetElement(EndOfEpisodeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<APCLocationGroup_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartOfEpisodeXName, typeof(StartOfEpisodeLocalType));
            localElementDictionary.Add(WardStayXName, typeof(WardStayLocalType));
            localElementDictionary.Add(EndOfEpisodeXName, typeof(EndOfEpisodeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
        /// </para>
        /// </summary>
        public partial class StartOfEpisodeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedClinicalCareIntensityCodeXName = System.Xml.Linq.XName.Get("IntendedClinicalCareIntensityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedAgeGroupXName = System.Xml.Linq.XName.Get("IntendedAgeGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SexOfPatientsCodeXName = System.Xml.Linq.XName.Get("SexOfPatientsCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardDayPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardDayPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardNightPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardNightPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardSecurityLevelXName = System.Xml.Linq.XName.Get("WardSecurityLevel", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardCodeXName = System.Xml.Linq.XName.Get("WardCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StartOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator StartOfEpisodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<StartOfEpisodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static StartOfEpisodeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(IntendedClinicalCareIntensityCodeXName), new NamedContentModelEntity(IntendedAgeGroupXName), new NamedContentModelEntity(SexOfPatientsCodeXName), new NamedContentModelEntity(WardDayPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardNightPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardSecurityLevelXName), new NamedContentModelEntity(WardCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public StartOfEpisodeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string LocationClass {
                get {
                    XElement x = this.GetElement(LocationClassXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SiteCodeOfTreatment {
                get {
                    XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string ActivityLocationType {
                get {
                    XElement x = this.GetElement(ActivityLocationTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedClinicalCareIntensityCode {
                get {
                    XElement x = this.GetElement(IntendedClinicalCareIntensityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedClinicalCareIntensityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedClinicalCareIntensityCodeXName, value, "IntendedClinicalCareIntensityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedClinicalCareIntensityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedAgeGroup {
                get {
                    XElement x = this.GetElement(IntendedAgeGroupXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedAgeGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedAgeGroupXName, value, "IntendedAgeGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedAgeGroup_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SexOfPatientsCode {
                get {
                    XElement x = this.GetElement(SexOfPatientsCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SexOfPatientsCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SexOfPatientsCodeXName, value, "SexOfPatientsCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SexOfPatientsCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardDayPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardDayPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardDayPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardDayPeriodAvailabilityCodeXName, value, "WardDayPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardDayPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardNightPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardNightPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardNightPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardNightPeriodAvailabilityCodeXName, value, "WardNightPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardNightPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardSecurityLevel {
                get {
                    XElement x = this.GetElement(WardSecurityLevelXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardSecurityLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardSecurityLevelXName, value, "WardSecurityLevel", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardSecurityLevel_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardCode {
                get {
                    XElement x = this.GetElement(WardCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardCodeXName, value, "WardCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<StartOfEpisodeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocationClassXName, typeof(string));
                localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
                localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                localElementDictionary.Add(IntendedClinicalCareIntensityCodeXName, typeof(string));
                localElementDictionary.Add(IntendedAgeGroupXName, typeof(string));
                localElementDictionary.Add(SexOfPatientsCodeXName, typeof(string));
                localElementDictionary.Add(WardDayPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(WardNightPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(WardSecurityLevelXName, typeof(string));
                localElementDictionary.Add(WardCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
        /// </para>
        /// </summary>
        public partial class WardStayLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedClinicalCareIntensityCodeXName = System.Xml.Linq.XName.Get("IntendedClinicalCareIntensityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedAgeGroupXName = System.Xml.Linq.XName.Get("IntendedAgeGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SexOfPatientsCodeXName = System.Xml.Linq.XName.Get("SexOfPatientsCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardDayPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardDayPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardNightPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardNightPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDateXName = System.Xml.Linq.XName.Get("StartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTimeXName = System.Xml.Linq.XName.Get("StartTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndDateXName = System.Xml.Linq.XName.Get("EndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EndTimeXName = System.Xml.Linq.XName.Get("EndTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardSecurityLevelXName = System.Xml.Linq.XName.Get("WardSecurityLevel", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardCodeXName = System.Xml.Linq.XName.Get("WardCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WardStay", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WardStayLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WardStayLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WardStayLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(IntendedClinicalCareIntensityCodeXName), new NamedContentModelEntity(IntendedAgeGroupXName), new NamedContentModelEntity(SexOfPatientsCodeXName), new NamedContentModelEntity(WardDayPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardNightPeriodAvailabilityCodeXName), new NamedContentModelEntity(StartDateXName), new NamedContentModelEntity(StartTimeXName), new NamedContentModelEntity(EndDateXName), new NamedContentModelEntity(EndTimeXName), new NamedContentModelEntity(WardSecurityLevelXName), new NamedContentModelEntity(WardCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public WardStayLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string LocationClass {
                get {
                    XElement x = this.GetElement(LocationClassXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SiteCodeOfTreatment {
                get {
                    XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string ActivityLocationType {
                get {
                    XElement x = this.GetElement(ActivityLocationTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedClinicalCareIntensityCode {
                get {
                    XElement x = this.GetElement(IntendedClinicalCareIntensityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedClinicalCareIntensityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedClinicalCareIntensityCodeXName, value, "IntendedClinicalCareIntensityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedClinicalCareIntensityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedAgeGroup {
                get {
                    XElement x = this.GetElement(IntendedAgeGroupXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedAgeGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedAgeGroupXName, value, "IntendedAgeGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedAgeGroup_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SexOfPatientsCode {
                get {
                    XElement x = this.GetElement(SexOfPatientsCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SexOfPatientsCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SexOfPatientsCodeXName, value, "SexOfPatientsCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SexOfPatientsCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardDayPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardDayPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardDayPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardDayPeriodAvailabilityCodeXName, value, "WardDayPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardDayPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardNightPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardNightPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardNightPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardNightPeriodAvailabilityCodeXName, value, "WardNightPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardNightPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartDate {
                get {
                    XElement x = this.GetElement(StartDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartDateXName, value, "StartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime {
                get {
                    XElement x = this.GetElement(StartTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTimeXName, value, "StartTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StartTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndDate {
                get {
                    XElement x = this.GetElement(EndDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndDateXName, value, "EndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EndTime {
                get {
                    XElement x = this.GetElement(EndTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EndTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EndTimeXName, value, "EndTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EndTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardSecurityLevel {
                get {
                    XElement x = this.GetElement(WardSecurityLevelXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardSecurityLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardSecurityLevelXName, value, "WardSecurityLevel", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardSecurityLevel_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, StartDate?, StartTime?, EndDate?, EndTime?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardCode {
                get {
                    XElement x = this.GetElement(WardCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardCodeXName, value, "WardCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WardStayLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocationClassXName, typeof(string));
                localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
                localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                localElementDictionary.Add(IntendedClinicalCareIntensityCodeXName, typeof(string));
                localElementDictionary.Add(IntendedAgeGroupXName, typeof(string));
                localElementDictionary.Add(SexOfPatientsCodeXName, typeof(string));
                localElementDictionary.Add(WardDayPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(WardNightPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(StartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(EndDateXName, typeof(System.DateTime));
                localElementDictionary.Add(EndTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(WardSecurityLevelXName, typeof(string));
                localElementDictionary.Add(WardCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
        /// </para>
        /// </summary>
        public partial class EndOfEpisodeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedClinicalCareIntensityCodeXName = System.Xml.Linq.XName.Get("IntendedClinicalCareIntensityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedAgeGroupXName = System.Xml.Linq.XName.Get("IntendedAgeGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SexOfPatientsCodeXName = System.Xml.Linq.XName.Get("SexOfPatientsCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardDayPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardDayPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardNightPeriodAvailabilityCodeXName = System.Xml.Linq.XName.Get("WardNightPeriodAvailabilityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardSecurityLevelXName = System.Xml.Linq.XName.Get("WardSecurityLevel", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WardCodeXName = System.Xml.Linq.XName.Get("WardCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EndOfEpisode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EndOfEpisodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EndOfEpisodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EndOfEpisodeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(IntendedClinicalCareIntensityCodeXName), new NamedContentModelEntity(IntendedAgeGroupXName), new NamedContentModelEntity(SexOfPatientsCodeXName), new NamedContentModelEntity(WardDayPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardNightPeriodAvailabilityCodeXName), new NamedContentModelEntity(WardSecurityLevelXName), new NamedContentModelEntity(WardCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public EndOfEpisodeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string LocationClass {
                get {
                    XElement x = this.GetElement(LocationClassXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SiteCodeOfTreatment {
                get {
                    XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string ActivityLocationType {
                get {
                    XElement x = this.GetElement(ActivityLocationTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedClinicalCareIntensityCode {
                get {
                    XElement x = this.GetElement(IntendedClinicalCareIntensityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedClinicalCareIntensityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedClinicalCareIntensityCodeXName, value, "IntendedClinicalCareIntensityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedClinicalCareIntensityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string IntendedAgeGroup {
                get {
                    XElement x = this.GetElement(IntendedAgeGroupXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedAgeGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedAgeGroupXName, value, "IntendedAgeGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedAgeGroup_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string SexOfPatientsCode {
                get {
                    XElement x = this.GetElement(SexOfPatientsCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SexOfPatientsCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SexOfPatientsCodeXName, value, "SexOfPatientsCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SexOfPatientsCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardDayPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardDayPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardDayPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardDayPeriodAvailabilityCodeXName, value, "WardDayPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardDayPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardNightPeriodAvailabilityCode {
                get {
                    XElement x = this.GetElement(WardNightPeriodAvailabilityCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardNightPeriodAvailabilityCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardNightPeriodAvailabilityCodeXName, value, "WardNightPeriodAvailabilityCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardNightPeriodAvailabilityCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardSecurityLevel {
                get {
                    XElement x = this.GetElement(WardSecurityLevelXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardSecurityLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardSecurityLevelXName, value, "WardSecurityLevel", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardSecurityLevel_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, IntendedClinicalCareIntensityCode?, IntendedAgeGroup?, SexOfPatientsCode?, WardDayPeriodAvailabilityCode?, WardNightPeriodAvailabilityCode?, WardSecurityLevel?, WardCode?)
            /// </para>
            /// </summary>
            public virtual string WardCode {
                get {
                    XElement x = this.GetElement(WardCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WardCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WardCodeXName, value, "WardCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WardCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EndOfEpisodeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocationClassXName, typeof(string));
                localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
                localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                localElementDictionary.Add(IntendedClinicalCareIntensityCodeXName, typeof(string));
                localElementDictionary.Add(IntendedAgeGroupXName, typeof(string));
                localElementDictionary.Add(SexOfPatientsCodeXName, typeof(string));
                localElementDictionary.Add(WardDayPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(WardNightPeriodAvailabilityCodeXName, typeof(string));
                localElementDictionary.Add(WardSecurityLevelXName, typeof(string));
                localElementDictionary.Add(WardCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NeonatalCriticalCarePeriod*, PaediatricCriticalCarePeriod*, AdultCriticalCarePeriod*)
    /// </para>
    /// </summary>
    public partial class CriticalCarePeriod_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeonatalCriticalCarePeriodXName = System.Xml.Linq.XName.Get("NeonatalCriticalCarePeriod", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NeonatalCriticalCarePeriod_Structure> NeonatalCriticalCarePeriodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PaediatricCriticalCarePeriodXName = System.Xml.Linq.XName.Get("PaediatricCriticalCarePeriod", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PaediatricCriticalCarePeriod_Structure> PaediatricCriticalCarePeriodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdultCriticalCarePeriodXName = System.Xml.Linq.XName.Get("AdultCriticalCarePeriod", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdultCriticalCarePeriod_Structure> AdultCriticalCarePeriodField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CriticalCarePeriod_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CriticalCarePeriod_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CriticalCarePeriod_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NeonatalCriticalCarePeriodXName), new NamedContentModelEntity(PaediatricCriticalCarePeriodXName), new NamedContentModelEntity(AdultCriticalCarePeriodXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NeonatalCriticalCarePeriod*, PaediatricCriticalCarePeriod*, AdultCriticalCarePeriod*)
        /// </para>
        /// </summary>
        public CriticalCarePeriod_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NeonatalCriticalCarePeriod*, PaediatricCriticalCarePeriod*, AdultCriticalCarePeriod*)
        /// </para>
        /// </summary>
        public virtual IList<NeonatalCriticalCarePeriod_Structure> NeonatalCriticalCarePeriod {
            get {
                if ((this.NeonatalCriticalCarePeriodField == null)) {
                    this.NeonatalCriticalCarePeriodField = new XTypedList<NeonatalCriticalCarePeriod_Structure>(this, LinqToXsdTypeManager.Instance, NeonatalCriticalCarePeriodXName);
                }
                return this.NeonatalCriticalCarePeriodField;
            }
            set {
                if ((value == null)) {
                    this.NeonatalCriticalCarePeriodField = null;
                }
                else {
                    if ((this.NeonatalCriticalCarePeriodField == null)) {
                        this.NeonatalCriticalCarePeriodField = XTypedList<NeonatalCriticalCarePeriod_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, NeonatalCriticalCarePeriodXName);
                    }
                    else {
                        XTypedServices.SetList<NeonatalCriticalCarePeriod_Structure>(this.NeonatalCriticalCarePeriodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NeonatalCriticalCarePeriod*, PaediatricCriticalCarePeriod*, AdultCriticalCarePeriod*)
        /// </para>
        /// </summary>
        public virtual IList<PaediatricCriticalCarePeriod_Structure> PaediatricCriticalCarePeriod {
            get {
                if ((this.PaediatricCriticalCarePeriodField == null)) {
                    this.PaediatricCriticalCarePeriodField = new XTypedList<PaediatricCriticalCarePeriod_Structure>(this, LinqToXsdTypeManager.Instance, PaediatricCriticalCarePeriodXName);
                }
                return this.PaediatricCriticalCarePeriodField;
            }
            set {
                if ((value == null)) {
                    this.PaediatricCriticalCarePeriodField = null;
                }
                else {
                    if ((this.PaediatricCriticalCarePeriodField == null)) {
                        this.PaediatricCriticalCarePeriodField = XTypedList<PaediatricCriticalCarePeriod_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, PaediatricCriticalCarePeriodXName);
                    }
                    else {
                        XTypedServices.SetList<PaediatricCriticalCarePeriod_Structure>(this.PaediatricCriticalCarePeriodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NeonatalCriticalCarePeriod*, PaediatricCriticalCarePeriod*, AdultCriticalCarePeriod*)
        /// </para>
        /// </summary>
        public virtual IList<AdultCriticalCarePeriod_Structure> AdultCriticalCarePeriod {
            get {
                if ((this.AdultCriticalCarePeriodField == null)) {
                    this.AdultCriticalCarePeriodField = new XTypedList<AdultCriticalCarePeriod_Structure>(this, LinqToXsdTypeManager.Instance, AdultCriticalCarePeriodXName);
                }
                return this.AdultCriticalCarePeriodField;
            }
            set {
                if ((value == null)) {
                    this.AdultCriticalCarePeriodField = null;
                }
                else {
                    if ((this.AdultCriticalCarePeriodField == null)) {
                        this.AdultCriticalCarePeriodField = XTypedList<AdultCriticalCarePeriod_Structure>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdultCriticalCarePeriodXName);
                    }
                    else {
                        XTypedServices.SetList<AdultCriticalCarePeriod_Structure>(this.AdultCriticalCarePeriodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CriticalCarePeriod_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NeonatalCriticalCarePeriodXName, typeof(NeonatalCriticalCarePeriod_Structure));
            localElementDictionary.Add(PaediatricCriticalCarePeriodXName, typeof(PaediatricCriticalCarePeriod_Structure));
            localElementDictionary.Add(AdultCriticalCarePeriodXName, typeof(AdultCriticalCarePeriod_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class AdultOrPaediatricCriticalCarePeriod_Structure : global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCarePeriod_Structure, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdultOrPaediatricCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
		public static explicit operator AdultOrPaediatricCriticalCarePeriod_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AdultOrPaediatricCriticalCarePeriod_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdultOrPaediatricCriticalCarePeriod_Structure() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdultOrPaediatricCriticalCarePeriod_Structure>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NCC_AdmissionCharacteristics, NCC_CareActivityGroup+, NCC_DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class NeonatalCriticalCarePeriod_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NCC_AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("NCC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NCC_CareActivityGroupXName = System.Xml.Linq.XName.Get("NCC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NCC_CareActivityGroupLocalType> NCC_CareActivityGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NCC_DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("NCC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeonatalCriticalCareStructureXName = System.Xml.Linq.XName.Get("NeonatalCriticalCareStructure", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NeonatalCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NeonatalCriticalCarePeriod_Structure(XElement xe) { return XTypedServices.ToXTypedElement<NeonatalCriticalCarePeriod_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NeonatalCriticalCarePeriod_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NCC_AdmissionCharacteristicsXName), new NamedContentModelEntity(NCC_CareActivityGroupXName), new NamedContentModelEntity(NCC_DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NCC_AdmissionCharacteristics, NCC_CareActivityGroup+, NCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public NeonatalCriticalCarePeriod_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NCC_AdmissionCharacteristics, NCC_CareActivityGroup+, NCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual NCC_AdmissionCharacteristicsLocalType NCC_AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(NCC_AdmissionCharacteristicsXName);
                return ((NCC_AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(NCC_AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NCC_AdmissionCharacteristics, NCC_CareActivityGroup+, NCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalCriticalCarePeriod_Structure.NCC_CareActivityGroupLocalType> NCC_CareActivityGroup {
            get {
                if ((this.NCC_CareActivityGroupField == null)) {
                    this.NCC_CareActivityGroupField = new XTypedList<NCC_CareActivityGroupLocalType>(this, LinqToXsdTypeManager.Instance, NCC_CareActivityGroupXName);
                }
                return this.NCC_CareActivityGroupField;
            }
            set {
                if ((value == null)) {
                    this.NCC_CareActivityGroupField = null;
                }
                else {
                    if ((this.NCC_CareActivityGroupField == null)) {
                        this.NCC_CareActivityGroupField = XTypedList<NCC_CareActivityGroupLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NCC_CareActivityGroupXName);
                    }
                    else {
                        XTypedServices.SetList<NCC_CareActivityGroupLocalType>(this.NCC_CareActivityGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NCC_AdmissionCharacteristics, NCC_CareActivityGroup+, NCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual NCC_DischargeCharacteristicsLocalType NCC_DischargeCharacteristics {
            get {
                XElement x = this.GetElement(NCC_DischargeCharacteristicsXName);
                return ((NCC_DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(NCC_DischargeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string NeonatalCriticalCareStructure {
            get {
                XAttribute x = this.Attribute(NeonatalCriticalCareStructureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NeonatalCriticalCareStructureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NeonatalCriticalCarePeriod_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NCC_AdmissionCharacteristicsXName, typeof(NCC_AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(NCC_CareActivityGroupXName, typeof(NCC_CareActivityGroupLocalType));
            localElementDictionary.Add(NCC_DischargeCharacteristicsXName, typeof(NCC_DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
        /// </para>
        /// </summary>
        public partial class NCC_AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareLocalIdentifierXName = System.Xml.Linq.XName.Get("CriticalCareLocalIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartDateXName = System.Xml.Linq.XName.Get("CriticalCareStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartTimeXName = System.Xml.Linq.XName.Get("CriticalCareStartTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareUnitFunctionXName = System.Xml.Linq.XName.Get("CriticalCareUnitFunction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GestationLength_AtDeliveryXName = System.Xml.Linq.XName.Get("GestationLength_AtDelivery", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NCC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator NCC_AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NCC_AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static NCC_AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareLocalIdentifierXName), new NamedContentModelEntity(CriticalCareStartDateXName), new NamedContentModelEntity(CriticalCareStartTimeXName), new NamedContentModelEntity(CriticalCareUnitFunctionXName), new NamedContentModelEntity(GestationLength_AtDeliveryXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public NCC_AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public virtual string CriticalCareLocalIdentifier {
                get {
                    XElement x = this.GetElement(CriticalCareLocalIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareLocalIdentifierXName, value, "CriticalCareLocalIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareLocalIdentifier_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareStartDate {
                get {
                    XElement x = this.GetElement(CriticalCareStartDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareStartDateXName, value, "CriticalCareStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareStartTime {
                get {
                    XElement x = this.GetElement(CriticalCareStartTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareStartTimeXName, value, "CriticalCareStartTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartTime_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public virtual string CriticalCareUnitFunction {
                get {
                    XElement x = this.GetElement(CriticalCareUnitFunctionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareUnitFunctionXName, value, "CriticalCareUnitFunction", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareUnitFunction_Neonatal_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction, GestationLength_AtDelivery)
            /// </para>
            /// </summary>
            public virtual decimal GestationLength_AtDelivery {
                get {
                    XElement x = this.GetElement(GestationLength_AtDeliveryXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(GestationLength_AtDeliveryXName, value, "GestationLength_AtDelivery", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GestationLength_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<NCC_AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareLocalIdentifierXName, typeof(string));
                localElementDictionary.Add(CriticalCareStartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareStartTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareUnitFunctionXName, typeof(string));
                localElementDictionary.Add(GestationLength_AtDeliveryXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
        /// </para>
        /// </summary>
        public partial class NCC_CareActivityGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityDate_CriticalCareXName = System.Xml.Linq.XName.Get("ActivityDate_CriticalCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonWeightXName = System.Xml.Linq.XName.Get("PersonWeight", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareActivityCodeXName = System.Xml.Linq.XName.Get("CriticalCareActivityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> CriticalCareActivityCodeField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HighCostDrugs_OPCSXName = System.Xml.Linq.XName.Get("HighCostDrugs_OPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> HighCostDrugs_OPCSField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NCC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator NCC_CareActivityGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NCC_CareActivityGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static NCC_CareActivityGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityDate_CriticalCareXName), new NamedContentModelEntity(PersonWeightXName), new NamedContentModelEntity(CriticalCareActivityCodeXName), new NamedContentModelEntity(HighCostDrugs_OPCSXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public NCC_CareActivityGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual System.DateTime ActivityDate_CriticalCare {
                get {
                    XElement x = this.GetElement(ActivityDate_CriticalCareXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(ActivityDate_CriticalCareXName, value, "ActivityDate_CriticalCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityDate_CriticalCare_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? PersonWeight {
                get {
                    XElement x = this.GetElement(PersonWeightXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonWeightXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonWeightXName, value, "PersonWeight", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonWeight_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual IList<string> CriticalCareActivityCode {
                get {
                    if ((this.CriticalCareActivityCodeField == null)) {
                        this.CriticalCareActivityCodeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, CriticalCareActivityCodeXName);
                    }
                    return this.CriticalCareActivityCodeField;
                }
                set {
                    if ((value == null)) {
                        this.CriticalCareActivityCodeField = null;
                    }
                    else {
                        if ((this.CriticalCareActivityCodeField == null)) {
                            this.CriticalCareActivityCodeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, CriticalCareActivityCodeXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.CriticalCareActivityCodeField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, PersonWeight?, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual IList<string> HighCostDrugs_OPCS {
                get {
                    if ((this.HighCostDrugs_OPCSField == null)) {
                        this.HighCostDrugs_OPCSField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, HighCostDrugs_OPCSXName);
                    }
                    return this.HighCostDrugs_OPCSField;
                }
                set {
                    if ((value == null)) {
                        this.HighCostDrugs_OPCSField = null;
                    }
                    else {
                        if ((this.HighCostDrugs_OPCSField == null)) {
                            this.HighCostDrugs_OPCSField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, HighCostDrugs_OPCSXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.HighCostDrugs_OPCSField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<NCC_CareActivityGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ActivityDate_CriticalCareXName, typeof(System.DateTime));
                localElementDictionary.Add(PersonWeightXName, typeof(decimal));
                localElementDictionary.Add(CriticalCareActivityCodeXName, typeof(string));
                localElementDictionary.Add(HighCostDrugs_OPCSXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
        /// </para>
        /// </summary>
        public partial class NCC_DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeDateXName = System.Xml.Linq.XName.Get("CriticalCareDischargeDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeTimeXName = System.Xml.Linq.XName.Get("CriticalCareDischargeTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NCC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator NCC_DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NCC_DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static NCC_DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareDischargeDateXName), new NamedContentModelEntity(CriticalCareDischargeTimeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public NCC_DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeDate {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeDateXName, value, "CriticalCareDischargeDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeTime {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeTimeXName, value, "CriticalCareDischargeTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeTime_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<NCC_DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareDischargeDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeTimeXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PCC_AdmissionCharacteristics, PCC_CareActivityGroup+, PCC_DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class PaediatricCriticalCarePeriod_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PCC_AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("PCC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PCC_CareActivityGroupXName = System.Xml.Linq.XName.Get("PCC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PCC_CareActivityGroupLocalType> PCC_CareActivityGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PCC_DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("PCC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PaediatricCriticalCareStructureXName = System.Xml.Linq.XName.Get("PaediatricCriticalCareStructure", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PaediatricCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PaediatricCriticalCarePeriod_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PaediatricCriticalCarePeriod_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PaediatricCriticalCarePeriod_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PCC_AdmissionCharacteristicsXName), new NamedContentModelEntity(PCC_CareActivityGroupXName), new NamedContentModelEntity(PCC_DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PCC_AdmissionCharacteristics, PCC_CareActivityGroup+, PCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public PaediatricCriticalCarePeriod_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PCC_AdmissionCharacteristics, PCC_CareActivityGroup+, PCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual PCC_AdmissionCharacteristicsLocalType PCC_AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(PCC_AdmissionCharacteristicsXName);
                return ((PCC_AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(PCC_AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PCC_AdmissionCharacteristics, PCC_CareActivityGroup+, PCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PaediatricCriticalCarePeriod_Structure.PCC_CareActivityGroupLocalType> PCC_CareActivityGroup {
            get {
                if ((this.PCC_CareActivityGroupField == null)) {
                    this.PCC_CareActivityGroupField = new XTypedList<PCC_CareActivityGroupLocalType>(this, LinqToXsdTypeManager.Instance, PCC_CareActivityGroupXName);
                }
                return this.PCC_CareActivityGroupField;
            }
            set {
                if ((value == null)) {
                    this.PCC_CareActivityGroupField = null;
                }
                else {
                    if ((this.PCC_CareActivityGroupField == null)) {
                        this.PCC_CareActivityGroupField = XTypedList<PCC_CareActivityGroupLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PCC_CareActivityGroupXName);
                    }
                    else {
                        XTypedServices.SetList<PCC_CareActivityGroupLocalType>(this.PCC_CareActivityGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PCC_AdmissionCharacteristics, PCC_CareActivityGroup+, PCC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual PCC_DischargeCharacteristicsLocalType PCC_DischargeCharacteristics {
            get {
                XElement x = this.GetElement(PCC_DischargeCharacteristicsXName);
                return ((PCC_DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(PCC_DischargeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string PaediatricCriticalCareStructure {
            get {
                XAttribute x = this.Attribute(PaediatricCriticalCareStructureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PaediatricCriticalCareStructureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PaediatricCriticalCarePeriod_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PCC_AdmissionCharacteristicsXName, typeof(PCC_AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(PCC_CareActivityGroupXName, typeof(PCC_CareActivityGroupLocalType));
            localElementDictionary.Add(PCC_DischargeCharacteristicsXName, typeof(PCC_DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
        /// </para>
        /// </summary>
        public partial class PCC_AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareLocalIdentifierXName = System.Xml.Linq.XName.Get("CriticalCareLocalIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartDateXName = System.Xml.Linq.XName.Get("CriticalCareStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartTimeXName = System.Xml.Linq.XName.Get("CriticalCareStartTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareUnitFunctionXName = System.Xml.Linq.XName.Get("CriticalCareUnitFunction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PCC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PCC_AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PCC_AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PCC_AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareLocalIdentifierXName), new NamedContentModelEntity(CriticalCareStartDateXName), new NamedContentModelEntity(CriticalCareStartTimeXName), new NamedContentModelEntity(CriticalCareUnitFunctionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
            /// </para>
            /// </summary>
            public PCC_AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
            /// </para>
            /// </summary>
            public virtual string CriticalCareLocalIdentifier {
                get {
                    XElement x = this.GetElement(CriticalCareLocalIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareLocalIdentifierXName, value, "CriticalCareLocalIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareLocalIdentifier_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareStartDate {
                get {
                    XElement x = this.GetElement(CriticalCareStartDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareStartDateXName, value, "CriticalCareStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareStartTime {
                get {
                    XElement x = this.GetElement(CriticalCareStartTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareStartTimeXName, value, "CriticalCareStartTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartTime_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime, CriticalCareUnitFunction)
            /// </para>
            /// </summary>
            public virtual string CriticalCareUnitFunction {
                get {
                    XElement x = this.GetElement(CriticalCareUnitFunctionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareUnitFunctionXName, value, "CriticalCareUnitFunction", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareUnitFunction_Paediatric_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PCC_AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareLocalIdentifierXName, typeof(string));
                localElementDictionary.Add(CriticalCareStartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareStartTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareUnitFunctionXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityDate_CriticalCare, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
        /// </para>
        /// </summary>
        public partial class PCC_CareActivityGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityDate_CriticalCareXName = System.Xml.Linq.XName.Get("ActivityDate_CriticalCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareActivityCodeXName = System.Xml.Linq.XName.Get("CriticalCareActivityCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> CriticalCareActivityCodeField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HighCostDrugs_OPCSXName = System.Xml.Linq.XName.Get("HighCostDrugs_OPCS", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> HighCostDrugs_OPCSField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PCC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PCC_CareActivityGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PCC_CareActivityGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PCC_CareActivityGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityDate_CriticalCareXName), new NamedContentModelEntity(CriticalCareActivityCodeXName), new NamedContentModelEntity(HighCostDrugs_OPCSXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public PCC_CareActivityGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual System.DateTime ActivityDate_CriticalCare {
                get {
                    XElement x = this.GetElement(ActivityDate_CriticalCareXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(ActivityDate_CriticalCareXName, value, "ActivityDate_CriticalCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityDate_CriticalCare_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual IList<string> CriticalCareActivityCode {
                get {
                    if ((this.CriticalCareActivityCodeField == null)) {
                        this.CriticalCareActivityCodeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, CriticalCareActivityCodeXName);
                    }
                    return this.CriticalCareActivityCodeField;
                }
                set {
                    if ((value == null)) {
                        this.CriticalCareActivityCodeField = null;
                    }
                    else {
                        if ((this.CriticalCareActivityCodeField == null)) {
                            this.CriticalCareActivityCodeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, CriticalCareActivityCodeXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.CriticalCareActivityCodeField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ActivityDate_CriticalCare, CriticalCareActivityCode+, HighCostDrugs_OPCS*)
            /// </para>
            /// </summary>
            public virtual IList<string> HighCostDrugs_OPCS {
                get {
                    if ((this.HighCostDrugs_OPCSField == null)) {
                        this.HighCostDrugs_OPCSField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, HighCostDrugs_OPCSXName);
                    }
                    return this.HighCostDrugs_OPCSField;
                }
                set {
                    if ((value == null)) {
                        this.HighCostDrugs_OPCSField = null;
                    }
                    else {
                        if ((this.HighCostDrugs_OPCSField == null)) {
                            this.HighCostDrugs_OPCSField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, HighCostDrugs_OPCSXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.HighCostDrugs_OPCSField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PCC_CareActivityGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ActivityDate_CriticalCareXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareActivityCodeXName, typeof(string));
                localElementDictionary.Add(HighCostDrugs_OPCSXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
        /// </para>
        /// </summary>
        public partial class PCC_DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeDateXName = System.Xml.Linq.XName.Get("CriticalCareDischargeDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeTimeXName = System.Xml.Linq.XName.Get("CriticalCareDischargeTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PCC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PCC_DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PCC_DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PCC_DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareDischargeDateXName), new NamedContentModelEntity(CriticalCareDischargeTimeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public PCC_DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeDate {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeDateXName, value, "CriticalCareDischargeDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeTime {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeTimeXName, value, "CriticalCareDischargeTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeTime_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PCC_DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareDischargeDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeTimeXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ACC_AdmissionCharacteristics, ACC_CareActivityGroup, ACC_DischargeCharacteristics?)
    /// </para>
    /// </summary>
    public partial class AdultCriticalCarePeriod_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ACC_AdmissionCharacteristicsXName = System.Xml.Linq.XName.Get("ACC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ACC_CareActivityGroupXName = System.Xml.Linq.XName.Get("ACC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ACC_DischargeCharacteristicsXName = System.Xml.Linq.XName.Get("ACC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdultCriticalCareStructureXName = System.Xml.Linq.XName.Get("AdultCriticalCareStructure", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdultCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AdultCriticalCarePeriod_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AdultCriticalCarePeriod_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AdultCriticalCarePeriod_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ACC_AdmissionCharacteristicsXName), new NamedContentModelEntity(ACC_CareActivityGroupXName), new NamedContentModelEntity(ACC_DischargeCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ACC_AdmissionCharacteristics, ACC_CareActivityGroup, ACC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public AdultCriticalCarePeriod_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ACC_AdmissionCharacteristics, ACC_CareActivityGroup, ACC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual ACC_AdmissionCharacteristicsLocalType ACC_AdmissionCharacteristics {
            get {
                XElement x = this.GetElement(ACC_AdmissionCharacteristicsXName);
                return ((ACC_AdmissionCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ACC_AdmissionCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ACC_AdmissionCharacteristics, ACC_CareActivityGroup, ACC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual ACC_CareActivityGroupLocalType ACC_CareActivityGroup {
            get {
                XElement x = this.GetElement(ACC_CareActivityGroupXName);
                return ((ACC_CareActivityGroupLocalType)(x));
            }
            set {
                this.SetElement(ACC_CareActivityGroupXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ACC_AdmissionCharacteristics, ACC_CareActivityGroup, ACC_DischargeCharacteristics?)
        /// </para>
        /// </summary>
        public virtual ACC_DischargeCharacteristicsLocalType ACC_DischargeCharacteristics {
            get {
                XElement x = this.GetElement(ACC_DischargeCharacteristicsXName);
                return ((ACC_DischargeCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ACC_DischargeCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string AdultCriticalCareStructure {
            get {
                XAttribute x = this.Attribute(AdultCriticalCareStructureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AdultCriticalCareStructureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdultCriticalCarePeriod_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ACC_AdmissionCharacteristicsXName, typeof(ACC_AdmissionCharacteristicsLocalType));
            localElementDictionary.Add(ACC_CareActivityGroupXName, typeof(ACC_CareActivityGroupLocalType));
            localElementDictionary.Add(ACC_DischargeCharacteristicsXName, typeof(ACC_DischargeCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
        /// </para>
        /// </summary>
        public partial class ACC_AdmissionCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareLocalIdentifierXName = System.Xml.Linq.XName.Get("CriticalCareLocalIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartDateXName = System.Xml.Linq.XName.Get("CriticalCareStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareStartTimeXName = System.Xml.Linq.XName.Get("CriticalCareStartTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareUnitFunctionXName = System.Xml.Linq.XName.Get("CriticalCareUnitFunction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareUnitBedConfigurationXName = System.Xml.Linq.XName.Get("CriticalCareUnitBedConfiguration", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareAdmissionSourceXName = System.Xml.Linq.XName.Get("CriticalCareAdmissionSource", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareSourceLocationXName = System.Xml.Linq.XName.Get("CriticalCareSourceLocation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareAdmissionTypeXName = System.Xml.Linq.XName.Get("CriticalCareAdmissionType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ACC_AdmissionCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ACC_AdmissionCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ACC_AdmissionCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ACC_AdmissionCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareLocalIdentifierXName), new NamedContentModelEntity(CriticalCareStartDateXName), new NamedContentModelEntity(CriticalCareStartTimeXName), new NamedContentModelEntity(CriticalCareUnitFunctionXName), new NamedContentModelEntity(CriticalCareUnitBedConfigurationXName), new NamedContentModelEntity(CriticalCareAdmissionSourceXName), new NamedContentModelEntity(CriticalCareSourceLocationXName), new NamedContentModelEntity(CriticalCareAdmissionTypeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public ACC_AdmissionCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareLocalIdentifier {
                get {
                    XElement x = this.GetElement(CriticalCareLocalIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareLocalIdentifierXName, value, "CriticalCareLocalIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareLocalIdentifier_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareStartDate {
                get {
                    XElement x = this.GetElement(CriticalCareStartDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareStartDateXName, value, "CriticalCareStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? CriticalCareStartTime {
                get {
                    XElement x = this.GetElement(CriticalCareStartTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareStartTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareStartTimeXName, value, "CriticalCareStartTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareStartTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareUnitFunction {
                get {
                    XElement x = this.GetElement(CriticalCareUnitFunctionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareUnitFunctionXName, value, "CriticalCareUnitFunction", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareUnitFunction_Adult_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareUnitBedConfiguration {
                get {
                    XElement x = this.GetElement(CriticalCareUnitBedConfigurationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareUnitBedConfigurationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareUnitBedConfigurationXName, value, "CriticalCareUnitBedConfiguration", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareUnitBedConfiguration_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareAdmissionSource {
                get {
                    XElement x = this.GetElement(CriticalCareAdmissionSourceXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareAdmissionSourceXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareAdmissionSourceXName, value, "CriticalCareAdmissionSource", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareAdmissionSource_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareSourceLocation {
                get {
                    XElement x = this.GetElement(CriticalCareSourceLocationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareSourceLocationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareSourceLocationXName, value, "CriticalCareSourceLocation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareSourceLocation_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareLocalIdentifier, CriticalCareStartDate, CriticalCareStartTime?, CriticalCareUnitFunction, CriticalCareUnitBedConfiguration?, CriticalCareAdmissionSource?, CriticalCareSourceLocation?, CriticalCareAdmissionType?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareAdmissionType {
                get {
                    XElement x = this.GetElement(CriticalCareAdmissionTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareAdmissionTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareAdmissionTypeXName, value, "CriticalCareAdmissionType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareAdmissionType_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ACC_AdmissionCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareLocalIdentifierXName, typeof(string));
                localElementDictionary.Add(CriticalCareStartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareStartTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareUnitFunctionXName, typeof(string));
                localElementDictionary.Add(CriticalCareUnitBedConfigurationXName, typeof(string));
                localElementDictionary.Add(CriticalCareAdmissionSourceXName, typeof(string));
                localElementDictionary.Add(CriticalCareSourceLocationXName, typeof(string));
                localElementDictionary.Add(CriticalCareAdmissionTypeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
        /// </para>
        /// </summary>
        public partial class ACC_CareActivityGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdvancedRespiratorySupportDaysXName = System.Xml.Linq.XName.Get("AdvancedRespiratorySupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BasicRespiratorySupportDaysXName = System.Xml.Linq.XName.Get("BasicRespiratorySupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdvancedCardiovascularSupportDaysXName = System.Xml.Linq.XName.Get("AdvancedCardiovascularSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BasicCardiovascularSupportDaysXName = System.Xml.Linq.XName.Get("BasicCardiovascularSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RenalSupportDaysXName = System.Xml.Linq.XName.Get("RenalSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NeurologicalSupportDaysXName = System.Xml.Linq.XName.Get("NeurologicalSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GastroIntestinalSupportDaysXName = System.Xml.Linq.XName.Get("GastroIntestinalSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DermatologicalSupportDaysXName = System.Xml.Linq.XName.Get("DermatologicalSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LiverSupportDaysXName = System.Xml.Linq.XName.Get("LiverSupportDays", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganSupportMaximumXName = System.Xml.Linq.XName.Get("OrganSupportMaximum", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareLevel2DaysXName = System.Xml.Linq.XName.Get("CriticalCareLevel2Days", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareLevel3DaysXName = System.Xml.Linq.XName.Get("CriticalCareLevel3Days", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ACC_CareActivityGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ACC_CareActivityGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ACC_CareActivityGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ACC_CareActivityGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdvancedRespiratorySupportDaysXName), new NamedContentModelEntity(BasicRespiratorySupportDaysXName), new NamedContentModelEntity(AdvancedCardiovascularSupportDaysXName), new NamedContentModelEntity(BasicCardiovascularSupportDaysXName), new NamedContentModelEntity(RenalSupportDaysXName), new NamedContentModelEntity(NeurologicalSupportDaysXName), new NamedContentModelEntity(GastroIntestinalSupportDaysXName), new NamedContentModelEntity(DermatologicalSupportDaysXName), new NamedContentModelEntity(LiverSupportDaysXName), new NamedContentModelEntity(OrganSupportMaximumXName), new NamedContentModelEntity(CriticalCareLevel2DaysXName), new NamedContentModelEntity(CriticalCareLevel3DaysXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public ACC_CareActivityGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? AdvancedRespiratorySupportDays {
                get {
                    XElement x = this.GetElement(AdvancedRespiratorySupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdvancedRespiratorySupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdvancedRespiratorySupportDaysXName, value, "AdvancedRespiratorySupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdvancedRespiratorySupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? BasicRespiratorySupportDays {
                get {
                    XElement x = this.GetElement(BasicRespiratorySupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(BasicRespiratorySupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(BasicRespiratorySupportDaysXName, value, "BasicRespiratorySupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BasicRespiratorySupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? AdvancedCardiovascularSupportDays {
                get {
                    XElement x = this.GetElement(AdvancedCardiovascularSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdvancedCardiovascularSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdvancedCardiovascularSupportDaysXName, value, "AdvancedCardiovascularSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdvancedCardiovascularSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? BasicCardiovascularSupportDays {
                get {
                    XElement x = this.GetElement(BasicCardiovascularSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(BasicCardiovascularSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(BasicCardiovascularSupportDaysXName, value, "BasicCardiovascularSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BasicCardiovascularSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? RenalSupportDays {
                get {
                    XElement x = this.GetElement(RenalSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RenalSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RenalSupportDaysXName, value, "RenalSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RenalSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? NeurologicalSupportDays {
                get {
                    XElement x = this.GetElement(NeurologicalSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NeurologicalSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NeurologicalSupportDaysXName, value, "NeurologicalSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeurologicalSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? GastroIntestinalSupportDays {
                get {
                    XElement x = this.GetElement(GastroIntestinalSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GastroIntestinalSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GastroIntestinalSupportDaysXName, value, "GastroIntestinalSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GastroIntestinalSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? DermatologicalSupportDays {
                get {
                    XElement x = this.GetElement(DermatologicalSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DermatologicalSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DermatologicalSupportDaysXName, value, "DermatologicalSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DermatologicalSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? LiverSupportDays {
                get {
                    XElement x = this.GetElement(LiverSupportDaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LiverSupportDaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LiverSupportDaysXName, value, "LiverSupportDays", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LiverSupportDays_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual string OrganSupportMaximum {
                get {
                    XElement x = this.GetElement(OrganSupportMaximumXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganSupportMaximumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganSupportMaximumXName, value, "OrganSupportMaximum", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganSupportMaximum_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? CriticalCareLevel2Days {
                get {
                    XElement x = this.GetElement(CriticalCareLevel2DaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareLevel2DaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareLevel2DaysXName, value, "CriticalCareLevel2Days", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareLevel2Days_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AdvancedRespiratorySupportDays?, BasicRespiratorySupportDays?, AdvancedCardiovascularSupportDays?, BasicCardiovascularSupportDays?, RenalSupportDays?, NeurologicalSupportDays?, GastroIntestinalSupportDays?, DermatologicalSupportDays?, LiverSupportDays?, OrganSupportMaximum?, CriticalCareLevel2Days?, CriticalCareLevel3Days?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? CriticalCareLevel3Days {
                get {
                    XElement x = this.GetElement(CriticalCareLevel3DaysXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareLevel3DaysXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareLevel3DaysXName, value, "CriticalCareLevel3Days", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareLevel3Days_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ACC_CareActivityGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AdvancedRespiratorySupportDaysXName, typeof(decimal));
                localElementDictionary.Add(BasicRespiratorySupportDaysXName, typeof(decimal));
                localElementDictionary.Add(AdvancedCardiovascularSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(BasicCardiovascularSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(RenalSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(NeurologicalSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(GastroIntestinalSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(DermatologicalSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(LiverSupportDaysXName, typeof(decimal));
                localElementDictionary.Add(OrganSupportMaximumXName, typeof(string));
                localElementDictionary.Add(CriticalCareLevel2DaysXName, typeof(decimal));
                localElementDictionary.Add(CriticalCareLevel3DaysXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
        /// </para>
        /// </summary>
        public partial class ACC_DischargeCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeDateXName = System.Xml.Linq.XName.Get("CriticalCareDischargeDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeTimeXName = System.Xml.Linq.XName.Get("CriticalCareDischargeTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeReadyDateXName = System.Xml.Linq.XName.Get("CriticalCareDischargeReadyDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeReadyTimeXName = System.Xml.Linq.XName.Get("CriticalCareDischargeReadyTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeStatusXName = System.Xml.Linq.XName.Get("CriticalCareDischargeStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeDestinationXName = System.Xml.Linq.XName.Get("CriticalCareDischargeDestination", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CriticalCareDischargeLocationXName = System.Xml.Linq.XName.Get("CriticalCareDischargeLocation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ACC_DischargeCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ACC_DischargeCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ACC_DischargeCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ACC_DischargeCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CriticalCareDischargeDateXName), new NamedContentModelEntity(CriticalCareDischargeTimeXName), new NamedContentModelEntity(CriticalCareDischargeReadyDateXName), new NamedContentModelEntity(CriticalCareDischargeReadyTimeXName), new NamedContentModelEntity(CriticalCareDischargeStatusXName), new NamedContentModelEntity(CriticalCareDischargeDestinationXName), new NamedContentModelEntity(CriticalCareDischargeLocationXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public ACC_DischargeCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeDate {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeDateXName, value, "CriticalCareDischargeDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime CriticalCareDischargeTime {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(CriticalCareDischargeTimeXName, value, "CriticalCareDischargeTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeTime_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? CriticalCareDischargeReadyDate {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeReadyDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareDischargeReadyDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareDischargeReadyDateXName, value, "CriticalCareDischargeReadyDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeReadyDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? CriticalCareDischargeReadyTime {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeReadyTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareDischargeReadyTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareDischargeReadyTimeXName, value, "CriticalCareDischargeReadyTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeReadyTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareDischargeStatus {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeStatusXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareDischargeStatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareDischargeStatusXName, value, "CriticalCareDischargeStatus", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeStatus_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareDischargeDestination {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeDestinationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareDischargeDestinationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareDischargeDestinationXName, value, "CriticalCareDischargeDestination", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeDestination_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CriticalCareDischargeDate, CriticalCareDischargeTime, CriticalCareDischargeReadyDate?, CriticalCareDischargeReadyTime?, CriticalCareDischargeStatus?, CriticalCareDischargeDestination?, CriticalCareDischargeLocation?)
            /// </para>
            /// </summary>
            public virtual string CriticalCareDischargeLocation {
                get {
                    XElement x = this.GetElement(CriticalCareDischargeLocationXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CriticalCareDischargeLocationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CriticalCareDischargeLocationXName, value, "CriticalCareDischargeLocation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCareDischargeLocation_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ACC_DischargeCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CriticalCareDischargeDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeReadyDateXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeReadyTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(CriticalCareDischargeStatusXName, typeof(string));
                localElementDictionary.Add(CriticalCareDischargeDestinationXName, typeof(string));
                localElementDictionary.Add(CriticalCareDischargeLocationXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?, PersonGroup_ResponsibleClinician?, LocationGroup?)
    /// </para>
    /// </summary>
    public partial class AntenatalCare_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ResponsibleClinicianXName = System.Xml.Linq.XName.Get("PersonGroup_ResponsibleClinician", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationGroupXName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AntenatalCare_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AntenatalCare_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AntenatalCare_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AntenatalCare_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(PersonGroup_ResponsibleClinicianXName), new NamedContentModelEntity(LocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_ResponsibleClinician?, LocationGroup?)
        /// </para>
        /// </summary>
        public AntenatalCare_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_ResponsibleClinician?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_ResponsibleClinician?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroup_ResponsibleClinicianLocalType PersonGroup_ResponsibleClinician {
            get {
                XElement x = this.GetElement(PersonGroup_ResponsibleClinicianXName);
                return ((PersonGroup_ResponsibleClinicianLocalType)(x));
            }
            set {
                this.SetElement(PersonGroup_ResponsibleClinicianXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_ResponsibleClinician?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual LocationGroupLocalType LocationGroup {
            get {
                XElement x = this.GetElement(LocationGroupXName);
                return ((LocationGroupLocalType)(x));
            }
            set {
                this.SetElement(LocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AntenatalCare_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(PersonGroup_ResponsibleClinicianXName, typeof(PersonGroup_ResponsibleClinicianLocalType));
            localElementDictionary.Add(LocationGroupXName, typeof(LocationGroupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FirstAntenatalAssessmentDate?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FirstAntenatalAssessmentDateXName = System.Xml.Linq.XName.Get("FirstAntenatalAssessmentDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FirstAntenatalAssessmentDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FirstAntenatalAssessmentDate?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (FirstAntenatalAssessmentDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? FirstAntenatalAssessmentDate {
                get {
                    XElement x = this.GetElement(FirstAntenatalAssessmentDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(FirstAntenatalAssessmentDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(FirstAntenatalAssessmentDateXName, value, "FirstAntenatalAssessmentDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FirstAntenatalAssessmentDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FirstAntenatalAssessmentDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GeneralMedicalPractitioner_AntenatalCare?, GeneralMedicalPractionerPractice_AntenatalCare?)
        /// </para>
        /// </summary>
        public partial class PersonGroup_ResponsibleClinicianLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GeneralMedicalPractitioner_AntenatalCareXName = System.Xml.Linq.XName.Get("GeneralMedicalPractitioner_AntenatalCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GeneralMedicalPractionerPractice_AntenatalCareXName = System.Xml.Linq.XName.Get("GeneralMedicalPractionerPractice_AntenatalCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroup_ResponsibleClinician", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PersonGroup_ResponsibleClinicianLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroup_ResponsibleClinicianLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PersonGroup_ResponsibleClinicianLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GeneralMedicalPractitioner_AntenatalCareXName), new NamedContentModelEntity(GeneralMedicalPractionerPractice_AntenatalCareXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (GeneralMedicalPractitioner_AntenatalCare?, GeneralMedicalPractionerPractice_AntenatalCare?)
            /// </para>
            /// </summary>
            public PersonGroup_ResponsibleClinicianLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (GeneralMedicalPractitioner_AntenatalCare?, GeneralMedicalPractionerPractice_AntenatalCare?)
            /// </para>
            /// </summary>
            public virtual string GeneralMedicalPractitioner_AntenatalCare {
                get {
                    XElement x = this.GetElement(GeneralMedicalPractitioner_AntenatalCareXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GeneralMedicalPractitioner_AntenatalCareXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GeneralMedicalPractitioner_AntenatalCareXName, value, "GeneralMedicalPractitioner_AntenatalCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GeneralMedicalPractitioner_AntenatalCare_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (GeneralMedicalPractitioner_AntenatalCare?, GeneralMedicalPractionerPractice_AntenatalCare?)
            /// </para>
            /// </summary>
            public virtual string GeneralMedicalPractionerPractice_AntenatalCare {
                get {
                    XElement x = this.GetElement(GeneralMedicalPractionerPractice_AntenatalCareXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GeneralMedicalPractionerPractice_AntenatalCareXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GeneralMedicalPractionerPractice_AntenatalCareXName, value, "GeneralMedicalPractionerPractice_AntenatalCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GeneralMedicalPractitionerPractice_AntenatalCare_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PersonGroup_ResponsibleClinicianLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GeneralMedicalPractitioner_AntenatalCareXName, typeof(string));
                localElementDictionary.Add(GeneralMedicalPractionerPractice_AntenatalCareXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DeliveryPlaceIntended?)
        /// </para>
        /// </summary>
        public partial class LocationGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryPlaceIntendedXName = System.Xml.Linq.XName.Get("DeliveryPlaceIntended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LocationGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocationGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LocationGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeliveryPlaceIntendedXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DeliveryPlaceIntended?)
            /// </para>
            /// </summary>
            public LocationGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DeliveryPlaceIntended?)
            /// </para>
            /// </summary>
            public virtual DeliveryPlaceIntendedLocalType DeliveryPlaceIntended {
                get {
                    XElement x = this.GetElement(DeliveryPlaceIntendedXName);
                    return ((DeliveryPlaceIntendedLocalType)(x));
                }
                set {
                    this.SetElement(DeliveryPlaceIntendedXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LocationGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DeliveryPlaceIntendedXName, typeof(DeliveryPlaceIntendedLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
            /// </para>
            /// </summary>
            public partial class DeliveryPlaceIntendedLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DeliveryPlaceChangeReasonCodeXName = System.Xml.Linq.XName.Get("DeliveryPlaceChangeReasonCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DeliveryPlaceTypeCode_IntendedXName = System.Xml.Linq.XName.Get("DeliveryPlaceTypeCode_Intended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeliveryPlaceIntended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DeliveryPlaceIntendedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DeliveryPlaceIntendedLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DeliveryPlaceIntendedLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(DeliveryPlaceChangeReasonCodeXName), new NamedContentModelEntity(DeliveryPlaceTypeCode_IntendedXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
                /// </para>
                /// </summary>
                public DeliveryPlaceIntendedLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
                /// </para>
                /// </summary>
                public virtual string DeliveryPlaceChangeReasonCode {
                    get {
                        XElement x = this.GetElement(DeliveryPlaceChangeReasonCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DeliveryPlaceChangeReasonCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DeliveryPlaceChangeReasonCodeXName, value, "DeliveryPlaceChangeReasonCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryPlaceChangeReasonCode_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceChangeReasonCode?, DeliveryPlaceTypeCode_Intended?)
                /// </para>
                /// </summary>
                public virtual string DeliveryPlaceTypeCode_Intended {
                    get {
                        XElement x = this.GetElement(DeliveryPlaceTypeCode_IntendedXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DeliveryPlaceTypeCode_IntendedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DeliveryPlaceTypeCode_IntendedXName, value, "DeliveryPlaceTypeCode_Intended", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryPlaceTypeCode_Intended_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DeliveryPlaceIntendedLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                    localElementDictionary.Add(DeliveryPlaceChangeReasonCodeXName, typeof(string));
                    localElementDictionary.Add(DeliveryPlaceTypeCode_IntendedXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?, PersonGroup_Baby?, LocationGroup?)
    /// </para>
    /// </summary>
    public partial class BirthOccurrence_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_BabyXName = System.Xml.Linq.XName.Get("PersonGroup_Baby", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationGroupXName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BirthOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BirthOccurrence_Structure(XElement xe) { return XTypedServices.ToXTypedElement<BirthOccurrence_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BirthOccurrence_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(PersonGroup_BabyXName), new NamedContentModelEntity(LocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Baby?, LocationGroup?)
        /// </para>
        /// </summary>
        public BirthOccurrence_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Baby?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Baby?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroup_Baby_Structure PersonGroup_Baby {
            get {
                XElement x = this.GetElement(PersonGroup_BabyXName);
                return ((PersonGroup_Baby_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_BabyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Baby?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual LocationGroupLocalType LocationGroup {
            get {
                XElement x = this.GetElement(LocationGroupXName);
                return ((LocationGroupLocalType)(x));
            }
            set {
                this.SetElement(LocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BirthOccurrence_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(PersonGroup_BabyXName, typeof(PersonGroup_Baby_Structure));
            localElementDictionary.Add(LocationGroupXName, typeof(LocationGroupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BirthOrderXName = System.Xml.Linq.XName.Get("BirthOrder", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryMethodCodeXName = System.Xml.Linq.XName.Get("DeliveryMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GestationLength_AssessmentXName = System.Xml.Linq.XName.Get("GestationLength_Assessment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ResuscitationMethodCodeXName = System.Xml.Linq.XName.Get("ResuscitationMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StatusOfPersonConductingDeliveryCodeXName = System.Xml.Linq.XName.Get("StatusOfPersonConductingDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BirthOrderXName), new NamedContentModelEntity(DeliveryMethodCodeXName), new NamedContentModelEntity(GestationLength_AssessmentXName), new NamedContentModelEntity(ResuscitationMethodCodeXName), new NamedContentModelEntity(StatusOfPersonConductingDeliveryCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? BirthOrder {
                get {
                    XElement x = this.GetElement(BirthOrderXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(BirthOrderXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(BirthOrderXName, value, "BirthOrder", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BirthOrder_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string DeliveryMethodCode {
                get {
                    XElement x = this.GetElement(DeliveryMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DeliveryMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DeliveryMethodCodeXName, value, "DeliveryMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? GestationLength_Assessment {
                get {
                    XElement x = this.GetElement(GestationLength_AssessmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GestationLength_AssessmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GestationLength_AssessmentXName, value, "GestationLength_Assessment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GestationLengthAssessment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string ResuscitationMethodCode {
                get {
                    XElement x = this.GetElement(ResuscitationMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ResuscitationMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ResuscitationMethodCodeXName, value, "ResuscitationMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ResuscitationMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string StatusOfPersonConductingDeliveryCode {
                get {
                    XElement x = this.GetElement(StatusOfPersonConductingDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StatusOfPersonConductingDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StatusOfPersonConductingDeliveryCodeXName, value, "StatusOfPersonConductingDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StatusOfPersonConductingDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(BirthOrderXName, typeof(decimal));
                localElementDictionary.Add(DeliveryMethodCodeXName, typeof(string));
                localElementDictionary.Add(GestationLength_AssessmentXName, typeof(decimal));
                localElementDictionary.Add(ResuscitationMethodCodeXName, typeof(string));
                localElementDictionary.Add(StatusOfPersonConductingDeliveryCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DeliveryPlaceActual?)
        /// </para>
        /// </summary>
        public partial class LocationGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryPlaceActualXName = System.Xml.Linq.XName.Get("DeliveryPlaceActual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LocationGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocationGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LocationGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeliveryPlaceActualXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DeliveryPlaceActual?)
            /// </para>
            /// </summary>
            public LocationGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DeliveryPlaceActual?)
            /// </para>
            /// </summary>
            public virtual DeliveryPlaceActualLocalType DeliveryPlaceActual {
                get {
                    XElement x = this.GetElement(DeliveryPlaceActualXName);
                    return ((DeliveryPlaceActualLocalType)(x));
                }
                set {
                    this.SetElement(DeliveryPlaceActualXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LocationGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DeliveryPlaceActualXName, typeof(DeliveryPlaceActualLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
            /// </para>
            /// </summary>
            public partial class DeliveryPlaceActualLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DeliveryPlaceTypeCode_ActualXName = System.Xml.Linq.XName.Get("DeliveryPlaceTypeCode_Actual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeliveryPlaceActual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DeliveryPlaceActualLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DeliveryPlaceActualLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DeliveryPlaceActualLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(DeliveryPlaceTypeCode_ActualXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public DeliveryPlaceActualLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string DeliveryPlaceTypeCode_Actual {
                    get {
                        XElement x = this.GetElement(DeliveryPlaceTypeCode_ActualXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DeliveryPlaceTypeCode_ActualXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DeliveryPlaceTypeCode_ActualXName, value, "DeliveryPlaceTypeCode_Actual", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryPlaceTypeCode_Actual_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DeliveryPlaceActualLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                    localElementDictionary.Add(DeliveryPlaceTypeCode_ActualXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?, PersonGroup_Mother?, LocationGroup?)
    /// </para>
    /// </summary>
    public partial class DeliveryOccurrence_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_MotherXName = System.Xml.Linq.XName.Get("PersonGroup_Mother", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationGroupXName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeliveryOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeliveryOccurrence_Structure(XElement xe) { return XTypedServices.ToXTypedElement<DeliveryOccurrence_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeliveryOccurrence_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(PersonGroup_MotherXName), new NamedContentModelEntity(LocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Mother?, LocationGroup?)
        /// </para>
        /// </summary>
        public DeliveryOccurrence_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Mother?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Mother?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroup_Mother_Structure PersonGroup_Mother {
            get {
                XElement x = this.GetElement(PersonGroup_MotherXName);
                return ((PersonGroup_Mother_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_MotherXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, PersonGroup_Mother?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual LocationGroupLocalType LocationGroup {
            get {
                XElement x = this.GetElement(LocationGroupXName);
                return ((LocationGroupLocalType)(x));
            }
            set {
                this.SetElement(LocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeliveryOccurrence_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(PersonGroup_MotherXName, typeof(PersonGroup_Mother_Structure));
            localElementDictionary.Add(LocationGroupXName, typeof(LocationGroupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BirthOrderXName = System.Xml.Linq.XName.Get("BirthOrder", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryMethodCodeXName = System.Xml.Linq.XName.Get("DeliveryMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GestationLength_AssessmentXName = System.Xml.Linq.XName.Get("GestationLength_Assessment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ResuscitationMethodCodeXName = System.Xml.Linq.XName.Get("ResuscitationMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StatusOfPersonConductingDeliveryCodeXName = System.Xml.Linq.XName.Get("StatusOfPersonConductingDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BirthOrderXName), new NamedContentModelEntity(DeliveryMethodCodeXName), new NamedContentModelEntity(GestationLength_AssessmentXName), new NamedContentModelEntity(ResuscitationMethodCodeXName), new NamedContentModelEntity(StatusOfPersonConductingDeliveryCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? BirthOrder {
                get {
                    XElement x = this.GetElement(BirthOrderXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(BirthOrderXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(BirthOrderXName, value, "BirthOrder", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BirthOrder_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string DeliveryMethodCode {
                get {
                    XElement x = this.GetElement(DeliveryMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DeliveryMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DeliveryMethodCodeXName, value, "DeliveryMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? GestationLength_Assessment {
                get {
                    XElement x = this.GetElement(GestationLength_AssessmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GestationLength_AssessmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GestationLength_AssessmentXName, value, "GestationLength_Assessment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GestationLength_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string ResuscitationMethodCode {
                get {
                    XElement x = this.GetElement(ResuscitationMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ResuscitationMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ResuscitationMethodCodeXName, value, "ResuscitationMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ResuscitationMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BirthOrder?, DeliveryMethodCode?, GestationLength_Assessment?, ResuscitationMethodCode?, StatusOfPersonConductingDeliveryCode?)
            /// </para>
            /// </summary>
            public virtual string StatusOfPersonConductingDeliveryCode {
                get {
                    XElement x = this.GetElement(StatusOfPersonConductingDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StatusOfPersonConductingDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StatusOfPersonConductingDeliveryCodeXName, value, "StatusOfPersonConductingDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.StatusOfPersonConductingDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(BirthOrderXName, typeof(decimal));
                localElementDictionary.Add(DeliveryMethodCodeXName, typeof(string));
                localElementDictionary.Add(GestationLength_AssessmentXName, typeof(decimal));
                localElementDictionary.Add(ResuscitationMethodCodeXName, typeof(string));
                localElementDictionary.Add(StatusOfPersonConductingDeliveryCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DeliveryPlaceActual?)
        /// </para>
        /// </summary>
        public partial class LocationGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryPlaceActualXName = System.Xml.Linq.XName.Get("DeliveryPlaceActual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LocationGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocationGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LocationGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeliveryPlaceActualXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DeliveryPlaceActual?)
            /// </para>
            /// </summary>
            public LocationGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DeliveryPlaceActual?)
            /// </para>
            /// </summary>
            public virtual DeliveryPlaceActualLocalType DeliveryPlaceActual {
                get {
                    XElement x = this.GetElement(DeliveryPlaceActualXName);
                    return ((DeliveryPlaceActualLocalType)(x));
                }
                set {
                    this.SetElement(DeliveryPlaceActualXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LocationGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DeliveryPlaceActualXName, typeof(DeliveryPlaceActualLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
            /// </para>
            /// </summary>
            public partial class DeliveryPlaceActualLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DeliveryPlaceTypeCode_ActualXName = System.Xml.Linq.XName.Get("DeliveryPlaceTypeCode_Actual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeliveryPlaceActual", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DeliveryPlaceActualLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DeliveryPlaceActualLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DeliveryPlaceActualLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(DeliveryPlaceTypeCode_ActualXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public DeliveryPlaceActualLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, ActivityLocationType?, DeliveryPlaceTypeCode_Actual?)
                /// </para>
                /// </summary>
                public virtual string DeliveryPlaceTypeCode_Actual {
                    get {
                        XElement x = this.GetElement(DeliveryPlaceTypeCode_ActualXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DeliveryPlaceTypeCode_ActualXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DeliveryPlaceTypeCode_ActualXName, value, "DeliveryPlaceTypeCode_Actual", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryPlaceTypeCode_Actual_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DeliveryPlaceActualLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                    localElementDictionary.Add(DeliveryPlaceTypeCode_ActualXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?)
    /// </para>
    /// </summary>
    public partial class LabourDelivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LabourDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LabourDelivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<LabourDelivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LabourDelivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?)
        /// </para>
        /// </summary>
        public LabourDelivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabourDelivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AnaestheticGivenDuringLabourOrDeliveryCodeXName = System.Xml.Linq.XName.Get("AnaestheticGivenDuringLabourOrDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AnaestheticGivenPostLabourOrDeliveryCodeXName = System.Xml.Linq.XName.Get("AnaestheticGivenPostLabourOrDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GestationLength_LabourOnsetXName = System.Xml.Linq.XName.Get("GestationLength_LabourOnset", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LabourOrDeliveryOnsetMethodCodeXName = System.Xml.Linq.XName.Get("LabourOrDeliveryOnsetMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryDateXName = System.Xml.Linq.XName.Get("DeliveryDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnaestheticGivenDuringLabourOrDeliveryCodeXName), new NamedContentModelEntity(AnaestheticGivenPostLabourOrDeliveryCodeXName), new NamedContentModelEntity(GestationLength_LabourOnsetXName), new NamedContentModelEntity(LabourOrDeliveryOnsetMethodCodeXName), new NamedContentModelEntity(DeliveryDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public virtual string AnaestheticGivenDuringLabourOrDeliveryCode {
                get {
                    XElement x = this.GetElement(AnaestheticGivenDuringLabourOrDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AnaestheticGivenDuringLabourOrDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AnaestheticGivenDuringLabourOrDeliveryCodeXName, value, "AnaestheticGivenDuringLabourOrDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AnaestheticGivenDuringLabourOrDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public virtual string AnaestheticGivenPostLabourOrDeliveryCode {
                get {
                    XElement x = this.GetElement(AnaestheticGivenPostLabourOrDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AnaestheticGivenPostLabourOrDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AnaestheticGivenPostLabourOrDeliveryCodeXName, value, "AnaestheticGivenPostLabourOrDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AnaestheticGivenPostLabourOrDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? GestationLength_LabourOnset {
                get {
                    XElement x = this.GetElement(GestationLength_LabourOnsetXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GestationLength_LabourOnsetXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GestationLength_LabourOnsetXName, value, "GestationLength_LabourOnset", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GestationLengthLabourOnset_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public virtual string LabourOrDeliveryOnsetMethodCode {
                get {
                    XElement x = this.GetElement(LabourOrDeliveryOnsetMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LabourOrDeliveryOnsetMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LabourOrDeliveryOnsetMethodCodeXName, value, "LabourOrDeliveryOnsetMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LabourOrDeliveryOnsetMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DeliveryDate {
                get {
                    XElement x = this.GetElement(DeliveryDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DeliveryDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DeliveryDateXName, value, "DeliveryDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AnaestheticGivenDuringLabourOrDeliveryCodeXName, typeof(string));
                localElementDictionary.Add(AnaestheticGivenPostLabourOrDeliveryCodeXName, typeof(string));
                localElementDictionary.Add(GestationLength_LabourOnsetXName, typeof(decimal));
                localElementDictionary.Add(LabourOrDeliveryOnsetMethodCodeXName, typeof(string));
                localElementDictionary.Add(DeliveryDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails)
    /// </para>
    /// </summary>
    public partial class OtherLabourDelivery_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherLabourDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OtherLabourDelivery_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OtherLabourDelivery_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OtherLabourDelivery_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails)
        /// </para>
        /// </summary>
        public OtherLabourDelivery_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OtherLabourDelivery_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AnaestheticGivenDuringLabourOrDeliveryCodeXName = System.Xml.Linq.XName.Get("AnaestheticGivenDuringLabourOrDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AnaestheticGivenPostLabourOrDeliveryCodeXName = System.Xml.Linq.XName.Get("AnaestheticGivenPostLabourOrDeliveryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GestationLength_LabourOnsetXName = System.Xml.Linq.XName.Get("GestationLength_LabourOnset", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LabourOrDeliveryOnsetMethodCodeXName = System.Xml.Linq.XName.Get("LabourOrDeliveryOnsetMethodCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeliveryDateXName = System.Xml.Linq.XName.Get("DeliveryDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnaestheticGivenDuringLabourOrDeliveryCodeXName), new NamedContentModelEntity(AnaestheticGivenPostLabourOrDeliveryCodeXName), new NamedContentModelEntity(GestationLength_LabourOnsetXName), new NamedContentModelEntity(LabourOrDeliveryOnsetMethodCodeXName), new NamedContentModelEntity(DeliveryDateXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual string AnaestheticGivenDuringLabourOrDeliveryCode {
                get {
                    XElement x = this.GetElement(AnaestheticGivenDuringLabourOrDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AnaestheticGivenDuringLabourOrDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AnaestheticGivenDuringLabourOrDeliveryCodeXName, value, "AnaestheticGivenDuringLabourOrDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AnaestheticGivenDuringLabourOrDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual string AnaestheticGivenPostLabourOrDeliveryCode {
                get {
                    XElement x = this.GetElement(AnaestheticGivenPostLabourOrDeliveryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AnaestheticGivenPostLabourOrDeliveryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AnaestheticGivenPostLabourOrDeliveryCodeXName, value, "AnaestheticGivenPostLabourOrDeliveryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AnaestheticGivenPostLabourOrDeliveryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? GestationLength_LabourOnset {
                get {
                    XElement x = this.GetElement(GestationLength_LabourOnsetXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GestationLength_LabourOnsetXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GestationLength_LabourOnsetXName, value, "GestationLength_LabourOnset", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GestationLength_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual string LabourOrDeliveryOnsetMethodCode {
                get {
                    XElement x = this.GetElement(LabourOrDeliveryOnsetMethodCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LabourOrDeliveryOnsetMethodCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LabourOrDeliveryOnsetMethodCodeXName, value, "LabourOrDeliveryOnsetMethodCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LabourOrDeliveryOnsetMethodCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime DeliveryDate {
                get {
                    XElement x = this.GetElement(DeliveryDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(DeliveryDateXName, value, "DeliveryDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AnaestheticGivenDuringLabourOrDeliveryCode?, AnaestheticGivenPostLabourOrDeliveryCode?, GestationLength_LabourOnset?, LabourOrDeliveryOnsetMethodCode?, DeliveryDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?)
            /// </para>
            /// </summary>
            public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AnaestheticGivenDuringLabourOrDeliveryCodeXName, typeof(string));
                localElementDictionary.Add(AnaestheticGivenPostLabourOrDeliveryCodeXName, typeof(string));
                localElementDictionary.Add(GestationLength_LabourOnsetXName, typeof(decimal));
                localElementDictionary.Add(LabourOrDeliveryOnsetMethodCodeXName, typeof(string));
                localElementDictionary.Add(DeliveryDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?)
    /// </para>
    /// </summary>
    public partial class Pregnancy_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Pregnancy_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Pregnancy_Structure(XElement xe) { return XTypedServices.ToXTypedElement<Pregnancy_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Pregnancy_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?)
        /// </para>
        /// </summary>
        public Pregnancy_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Pregnancy_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NumberOfBabiesIndicationCode?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NumberOfBabiesIndicationCodeXName = System.Xml.Linq.XName.Get("NumberOfBabiesIndicationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NumberOfBabiesIndicationCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NumberOfBabiesIndicationCode?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NumberOfBabiesIndicationCode?)
            /// </para>
            /// </summary>
            public virtual string NumberOfBabiesIndicationCode {
                get {
                    XElement x = this.GetElement(NumberOfBabiesIndicationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NumberOfBabiesIndicationCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NumberOfBabiesIndicationCodeXName, value, "NumberOfBabiesIndicationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NumberOfBabiesIndicationCode_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NumberOfBabiesIndicationCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
    /// </para>
    /// </summary>
    public partial class AttendanceOccurrence_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroupAAndEConsultantXName = System.Xml.Linq.XName.Get("PersonGroupAAndEConsultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalInvestigationDetailsXName = System.Xml.Linq.XName.Get("ClinicalInvestigationDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalTreatmentDetailsXName = System.Xml.Linq.XName.Get("ClinicalTreatmentDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AttendanceOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AttendanceOccurrence_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AttendanceOccurrence_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttendanceOccurrence_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(PersonGroupAAndEConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName), new NamedContentModelEntity(ClinicalInvestigationDetailsXName), new NamedContentModelEntity(ClinicalTreatmentDetailsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public AttendanceOccurrence_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual PersonGroupAAndEConsultant_Structure PersonGroupAAndEConsultant {
            get {
                XElement x = this.GetElement(PersonGroupAAndEConsultantXName);
                return ((PersonGroupAAndEConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroupAAndEConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_AE_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_AE_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual ClinicalInvestigation_Structure ClinicalInvestigationDetails {
            get {
                XElement x = this.GetElement(ClinicalInvestigationDetailsXName);
                return ((ClinicalInvestigation_Structure)(x));
            }
            set {
                this.SetElement(ClinicalInvestigationDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, PersonGroupAAndEConsultant?, ClinicalDiagnosisDetails?, ClinicalInvestigationDetails?, ClinicalTreatmentDetails?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_AE_Structure ClinicalTreatmentDetails {
            get {
                XElement x = this.GetElement(ClinicalTreatmentDetailsXName);
                return ((ClinicalActivity_AE_Structure)(x));
            }
            set {
                this.SetElement(ClinicalTreatmentDetailsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttendanceOccurrence_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(PersonGroupAAndEConsultantXName, typeof(PersonGroupAAndEConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_AE_Structure));
            localElementDictionary.Add(ClinicalInvestigationDetailsXName, typeof(ClinicalInvestigation_Structure));
            localElementDictionary.Add(ClinicalTreatmentDetailsXName, typeof(ClinicalActivity_AE_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEAttendanceNumberXName = System.Xml.Linq.XName.Get("AAndEAttendanceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEArrivalModeCodeXName = System.Xml.Linq.XName.Get("AAndEArrivalModeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEAttendanceCategoryCodeXName = System.Xml.Linq.XName.Get("AAndEAttendanceCategoryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEAttendanceDisposalCodeXName = System.Xml.Linq.XName.Get("AAndEAttendanceDisposalCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEIncidentLocationTypeXName = System.Xml.Linq.XName.Get("AAndEIncidentLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEPatientGroupXName = System.Xml.Linq.XName.Get("AAndEPatientGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfReferralForAAndEXName = System.Xml.Linq.XName.Get("SourceOfReferralForAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEDepartmentTypeXName = System.Xml.Linq.XName.Get("AAndEDepartmentType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ArrivalDateXName = System.Xml.Linq.XName.Get("ArrivalDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ArrivalTimeAtAAndEXName = System.Xml.Linq.XName.Get("ArrivalTimeAtAAndE", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEInitialAssessmentDateXName = System.Xml.Linq.XName.Get("AAndEInitialAssessmentDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEInitialAssessmentTimeXName = System.Xml.Linq.XName.Get("AAndEInitialAssessmentTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEDateSeenForTreatmentXName = System.Xml.Linq.XName.Get("AAndEDateSeenForTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndETimeSeenForTreatmentXName = System.Xml.Linq.XName.Get("AAndETimeSeenForTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEAttendanceConclusionDateXName = System.Xml.Linq.XName.Get("AAndEAttendanceConclusionDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEAttendanceConclusionTimeXName = System.Xml.Linq.XName.Get("AAndEAttendanceConclusionTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEDepartureDateXName = System.Xml.Linq.XName.Get("AAndEDepartureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AAndEDepartureTimeXName = System.Xml.Linq.XName.Get("AAndEDepartureTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AmbulanceIncidentNumberXName = System.Xml.Linq.XName.Get("AmbulanceIncidentNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationCodeConveyingAmbulanceTrustXName = System.Xml.Linq.XName.Get("OrganisationCodeConveyingAmbulanceTrust", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AAndEAttendanceNumberXName), new NamedContentModelEntity(AAndEArrivalModeCodeXName), new NamedContentModelEntity(AAndEAttendanceCategoryCodeXName), new NamedContentModelEntity(AAndEAttendanceDisposalCodeXName), new NamedContentModelEntity(AAndEIncidentLocationTypeXName), new NamedContentModelEntity(AAndEPatientGroupXName), new NamedContentModelEntity(SourceOfReferralForAAndEXName), new NamedContentModelEntity(AAndEDepartmentTypeXName), new NamedContentModelEntity(ArrivalDateXName), new NamedContentModelEntity(ArrivalTimeAtAAndEXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName), new NamedContentModelEntity(AAndEInitialAssessmentDateXName), new NamedContentModelEntity(AAndEInitialAssessmentTimeXName), new NamedContentModelEntity(AAndEDateSeenForTreatmentXName), new NamedContentModelEntity(AAndETimeSeenForTreatmentXName), new NamedContentModelEntity(AAndEAttendanceConclusionDateXName), new NamedContentModelEntity(AAndEAttendanceConclusionTimeXName), new NamedContentModelEntity(AAndEDepartureDateXName), new NamedContentModelEntity(AAndEDepartureTimeXName), new NamedContentModelEntity(AmbulanceIncidentNumberXName), new NamedContentModelEntity(OrganisationCodeConveyingAmbulanceTrustXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEAttendanceNumber {
                get {
                    XElement x = this.GetElement(AAndEAttendanceNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEAttendanceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEAttendanceNumberXName, value, "AAndEAttendanceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEArrivalModeCode {
                get {
                    XElement x = this.GetElement(AAndEArrivalModeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEArrivalModeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEArrivalModeCodeXName, value, "AAndEArrivalModeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEArrivalModeCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEAttendanceCategoryCode {
                get {
                    XElement x = this.GetElement(AAndEAttendanceCategoryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEAttendanceCategoryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEAttendanceCategoryCodeXName, value, "AAndEAttendanceCategoryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceCategoryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEAttendanceDisposalCode {
                get {
                    XElement x = this.GetElement(AAndEAttendanceDisposalCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEAttendanceDisposalCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEAttendanceDisposalCodeXName, value, "AAndEAttendanceDisposalCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceDisposalCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEIncidentLocationType {
                get {
                    XElement x = this.GetElement(AAndEIncidentLocationTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEIncidentLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEIncidentLocationTypeXName, value, "AAndEIncidentLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEIncidentLocationType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEPatientGroup {
                get {
                    XElement x = this.GetElement(AAndEPatientGroupXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEPatientGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEPatientGroupXName, value, "AAndEPatientGroup", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEPatientGroup_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string SourceOfReferralForAAndE {
                get {
                    XElement x = this.GetElement(SourceOfReferralForAAndEXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfReferralForAAndEXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfReferralForAAndEXName, value, "SourceOfReferralForAAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfReferralForAAndE_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AAndEDepartmentType {
                get {
                    XElement x = this.GetElement(AAndEDepartmentTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEDepartmentTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEDepartmentTypeXName, value, "AAndEDepartmentType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDepartmentType_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime ArrivalDate {
                get {
                    XElement x = this.GetElement(ArrivalDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(ArrivalDateXName, value, "ArrivalDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ArrivalDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime ArrivalTimeAtAAndE {
                get {
                    XElement x = this.GetElement(ArrivalTimeAtAAndEXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(ArrivalTimeAtAAndEXName, value, "ArrivalTimeAtAAndE", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ArrivalTimeAtAAndE_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEInitialAssessmentDate {
                get {
                    XElement x = this.GetElement(AAndEInitialAssessmentDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEInitialAssessmentDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEInitialAssessmentDateXName, value, "AAndEInitialAssessmentDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEInitialAssessmentDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEInitialAssessmentTime {
                get {
                    XElement x = this.GetElement(AAndEInitialAssessmentTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEInitialAssessmentTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEInitialAssessmentTimeXName, value, "AAndEInitialAssessmentTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEInitialAssessmentTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEDateSeenForTreatment {
                get {
                    XElement x = this.GetElement(AAndEDateSeenForTreatmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEDateSeenForTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEDateSeenForTreatmentXName, value, "AAndEDateSeenForTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDateSeenForTreatment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndETimeSeenForTreatment {
                get {
                    XElement x = this.GetElement(AAndETimeSeenForTreatmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndETimeSeenForTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndETimeSeenForTreatmentXName, value, "AAndETimeSeenForTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndETimeSeenForTreatment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEAttendanceConclusionDate {
                get {
                    XElement x = this.GetElement(AAndEAttendanceConclusionDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEAttendanceConclusionDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEAttendanceConclusionDateXName, value, "AAndEAttendanceConclusionDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceConclusionDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEAttendanceConclusionTime {
                get {
                    XElement x = this.GetElement(AAndEAttendanceConclusionTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEAttendanceConclusionTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEAttendanceConclusionTimeXName, value, "AAndEAttendanceConclusionTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceConclusionTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEDepartureDate {
                get {
                    XElement x = this.GetElement(AAndEDepartureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEDepartureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEDepartureDateXName, value, "AAndEDepartureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDepartureDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AAndEDepartureTime {
                get {
                    XElement x = this.GetElement(AAndEDepartureTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AAndEDepartureTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AAndEDepartureTimeXName, value, "AAndEDepartureTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEDepartureTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string AmbulanceIncidentNumber {
                get {
                    XElement x = this.GetElement(AmbulanceIncidentNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AmbulanceIncidentNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AmbulanceIncidentNumberXName, value, "AmbulanceIncidentNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AmbulanceIncidentNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AAndEAttendanceNumber?, AAndEArrivalModeCode?, AAndEAttendanceCategoryCode?, AAndEAttendanceDisposalCode?, AAndEIncidentLocationType?, AAndEPatientGroup?, SourceOfReferralForAAndE?, AAndEDepartmentType?, ArrivalDate, ArrivalTimeAtAAndE, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, AAndEInitialAssessmentDate?, AAndEInitialAssessmentTime?, AAndEDateSeenForTreatment?, AAndETimeSeenForTreatment?, AAndEAttendanceConclusionDate?, AAndEAttendanceConclusionTime?, AAndEDepartureDate?, AAndEDepartureTime?, AmbulanceIncidentNumber?, OrganisationCodeConveyingAmbulanceTrust?)
            /// </para>
            /// </summary>
            public virtual string OrganisationCodeConveyingAmbulanceTrust {
                get {
                    XElement x = this.GetElement(OrganisationCodeConveyingAmbulanceTrustXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationCodeConveyingAmbulanceTrustXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationCodeConveyingAmbulanceTrustXName, value, "OrganisationCodeConveyingAmbulanceTrust", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrganisationCodeConveyingAmbulanceTrust_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AAndEAttendanceNumberXName, typeof(string));
                localElementDictionary.Add(AAndEArrivalModeCodeXName, typeof(string));
                localElementDictionary.Add(AAndEAttendanceCategoryCodeXName, typeof(string));
                localElementDictionary.Add(AAndEAttendanceDisposalCodeXName, typeof(string));
                localElementDictionary.Add(AAndEIncidentLocationTypeXName, typeof(string));
                localElementDictionary.Add(AAndEPatientGroupXName, typeof(string));
                localElementDictionary.Add(SourceOfReferralForAAndEXName, typeof(string));
                localElementDictionary.Add(AAndEDepartmentTypeXName, typeof(string));
                localElementDictionary.Add(ArrivalDateXName, typeof(System.DateTime));
                localElementDictionary.Add(ArrivalTimeAtAAndEXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
                localElementDictionary.Add(AAndEInitialAssessmentDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEInitialAssessmentTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEDateSeenForTreatmentXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndETimeSeenForTreatmentXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEAttendanceConclusionDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEAttendanceConclusionTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEDepartureDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AAndEDepartureTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(AmbulanceIncidentNumberXName, typeof(string));
                localElementDictionary.Add(OrganisationCodeConveyingAmbulanceTrustXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonGroup_Consultant?, ClinicalDiagnosisDetails?)
    /// </para>
    /// </summary>
    public partial class CareEpisode_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalDiagnosisDetailsXName = System.Xml.Linq.XName.Get("ClinicalDiagnosisDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CareEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CareEpisode_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CareEpisode_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CareEpisode_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(ClinicalDiagnosisDetailsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonGroup_Consultant?, ClinicalDiagnosisDetails?)
        /// </para>
        /// </summary>
        public CareEpisode_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGroup_Consultant?, ClinicalDiagnosisDetails?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonGroup_Consultant?, ClinicalDiagnosisDetails?)
        /// </para>
        /// </summary>
        public virtual ClinicalDiagnosis_Structure ClinicalDiagnosisDetails {
            get {
                XElement x = this.GetElement(ClinicalDiagnosisDetailsXName);
                return ((ClinicalDiagnosis_Structure)(x));
            }
            set {
                this.SetElement(ClinicalDiagnosisDetailsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CareEpisode_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(ClinicalDiagnosisDetailsXName, typeof(ClinicalDiagnosis_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
    /// </para>
    /// </summary>
    public partial class CareAttendance_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicalActivityDetailsXName = System.Xml.Linq.XName.Get("ClinicalActivityDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AttendanceLocationGroupXName = System.Xml.Linq.XName.Get("AttendanceLocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CareAttendance_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CareAttendance_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CareAttendance_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CareAttendance_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(ClinicalActivityDetailsXName), new NamedContentModelEntity(AttendanceLocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
        /// </para>
        /// </summary>
        public CareAttendance_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetails_Structure ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetails_Structure)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure ClinicalActivityDetails {
            get {
                XElement x = this.GetElement(ClinicalActivityDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(ClinicalActivityDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, ServiceAgreementDetails, ClinicalActivityDetails?, AttendanceLocationGroup?)
        /// </para>
        /// </summary>
        public virtual AttendanceLocationGroup_Structure AttendanceLocationGroup {
            get {
                XElement x = this.GetElement(AttendanceLocationGroupXName);
                return ((AttendanceLocationGroup_Structure)(x));
            }
            set {
                this.SetElement(AttendanceLocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CareAttendance_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetails_Structure));
            localElementDictionary.Add(ClinicalActivityDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(AttendanceLocationGroupXName, typeof(AttendanceLocationGroup_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AttendanceIdentifierXName = System.Xml.Linq.XName.Get("AttendanceIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AttendedOrDidNotAttendCodeXName = System.Xml.Linq.XName.Get("AttendedOrDidNotAttendCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FirstAttendanceCodeXName = System.Xml.Linq.XName.Get("FirstAttendanceCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MedicalStaffTypeSeeingPatientXName = System.Xml.Linq.XName.Get("MedicalStaffTypeSeeingPatient", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperationStatusCodeXName = System.Xml.Linq.XName.Get("OperationStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OutcomeOfAttendanceCodeXName = System.Xml.Linq.XName.Get("OutcomeOfAttendanceCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AppointmentDateXName = System.Xml.Linq.XName.Get("AppointmentDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AppointmentTimeXName = System.Xml.Linq.XName.Get("AppointmentTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExpectedDurationOfAppointmentXName = System.Xml.Linq.XName.Get("ExpectedDurationOfAppointment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EarliestReasonableOfferDateXName = System.Xml.Linq.XName.Get("EarliestReasonableOfferDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EarliestClinicallyAppropriateDateXName = System.Xml.Linq.XName.Get("EarliestClinicallyAppropriateDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ConsultationMediumUsedXName = System.Xml.Linq.XName.Get("ConsultationMediumUsed", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MultiProfOrDiscIndCodeXName = System.Xml.Linq.XName.Get("MultiProfOrDiscIndCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RehabilitationAssessmentTeamTypeXName = System.Xml.Linq.XName.Get("RehabilitationAssessmentTeamType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AttendanceIdentifierXName), new NamedContentModelEntity(AdministrativeCategoryCodeXName), new NamedContentModelEntity(AttendedOrDidNotAttendCodeXName), new NamedContentModelEntity(FirstAttendanceCodeXName), new NamedContentModelEntity(MedicalStaffTypeSeeingPatientXName), new NamedContentModelEntity(OperationStatusCodeXName), new NamedContentModelEntity(OutcomeOfAttendanceCodeXName), new NamedContentModelEntity(AppointmentDateXName), new NamedContentModelEntity(AppointmentTimeXName), new NamedContentModelEntity(ExpectedDurationOfAppointmentXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName), new NamedContentModelEntity(EarliestReasonableOfferDateXName), new NamedContentModelEntity(EarliestClinicallyAppropriateDateXName), new NamedContentModelEntity(ConsultationMediumUsedXName), new NamedContentModelEntity(MultiProfOrDiscIndCodeXName), new NamedContentModelEntity(RehabilitationAssessmentTeamTypeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string AttendanceIdentifier {
                get {
                    XElement x = this.GetElement(AttendanceIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AttendanceIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AttendanceIdentifierXName, value, "AttendanceIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCode {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeXName, value, "AdministrativeCategoryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string AttendedOrDidNotAttendCode {
                get {
                    XElement x = this.GetElement(AttendedOrDidNotAttendCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AttendedOrDidNotAttendCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AttendedOrDidNotAttendCodeXName, value, "AttendedOrDidNotAttendCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendedOrDidNotAttendCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string FirstAttendanceCode {
                get {
                    XElement x = this.GetElement(FirstAttendanceCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(FirstAttendanceCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(FirstAttendanceCodeXName, value, "FirstAttendanceCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FirstAttendanceCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string MedicalStaffTypeSeeingPatient {
                get {
                    XElement x = this.GetElement(MedicalStaffTypeSeeingPatientXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MedicalStaffTypeSeeingPatientXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MedicalStaffTypeSeeingPatientXName, value, "MedicalStaffTypeSeeingPatient", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MedicalStaffTypeSeeingPatient_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string OperationStatusCode {
                get {
                    XElement x = this.GetElement(OperationStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OperationStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OperationStatusCodeXName, value, "OperationStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OperationStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string OutcomeOfAttendanceCode {
                get {
                    XElement x = this.GetElement(OutcomeOfAttendanceCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OutcomeOfAttendanceCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OutcomeOfAttendanceCodeXName, value, "OutcomeOfAttendanceCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OutcomeOfAttendanceCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime AppointmentDate {
                get {
                    XElement x = this.GetElement(AppointmentDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(AppointmentDateXName, value, "AppointmentDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AppointmentDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? AppointmentTime {
                get {
                    XElement x = this.GetElement(AppointmentTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AppointmentTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AppointmentTimeXName, value, "AppointmentTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AppointmentTime_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? ExpectedDurationOfAppointment {
                get {
                    XElement x = this.GetElement(ExpectedDurationOfAppointmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ExpectedDurationOfAppointmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ExpectedDurationOfAppointmentXName, value, "ExpectedDurationOfAppointment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ExpectedDurationOfAppointment_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EarliestReasonableOfferDate {
                get {
                    XElement x = this.GetElement(EarliestReasonableOfferDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EarliestReasonableOfferDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EarliestReasonableOfferDateXName, value, "EarliestReasonableOfferDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EarliestReasonableOfferDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EarliestClinicallyAppropriateDate {
                get {
                    XElement x = this.GetElement(EarliestClinicallyAppropriateDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EarliestClinicallyAppropriateDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EarliestClinicallyAppropriateDateXName, value, "EarliestClinicallyAppropriateDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EarliestClinicallyAppropriateDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string ConsultationMediumUsed {
                get {
                    XElement x = this.GetElement(ConsultationMediumUsedXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ConsultationMediumUsedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ConsultationMediumUsedXName, value, "ConsultationMediumUsed", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ConsultationMediumUsed_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string MultiProfOrDiscIndCode {
                get {
                    XElement x = this.GetElement(MultiProfOrDiscIndCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(MultiProfOrDiscIndCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(MultiProfOrDiscIndCodeXName, value, "MultiProfOrDiscIndCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MultiProfOrDiscIndCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AttendanceIdentifier?, AdministrativeCategoryCode?, AttendedOrDidNotAttendCode?, FirstAttendanceCode?, MedicalStaffTypeSeeingPatient?, OperationStatusCode?, OutcomeOfAttendanceCode?, AppointmentDate, AppointmentTime?, ExpectedDurationOfAppointment?, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, EarliestReasonableOfferDate?, EarliestClinicallyAppropriateDate?, ConsultationMediumUsed?, MultiProfOrDiscIndCode?, RehabilitationAssessmentTeamType?)
            /// </para>
            /// </summary>
            public virtual string RehabilitationAssessmentTeamType {
                get {
                    XElement x = this.GetElement(RehabilitationAssessmentTeamTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(RehabilitationAssessmentTeamTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(RehabilitationAssessmentTeamTypeXName, value, "RehabilitationAssessmentTeamType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.RehabilitationAssessmentTeamType_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AttendanceIdentifierXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeXName, typeof(string));
                localElementDictionary.Add(AttendedOrDidNotAttendCodeXName, typeof(string));
                localElementDictionary.Add(FirstAttendanceCodeXName, typeof(string));
                localElementDictionary.Add(MedicalStaffTypeSeeingPatientXName, typeof(string));
                localElementDictionary.Add(OperationStatusCodeXName, typeof(string));
                localElementDictionary.Add(OutcomeOfAttendanceCodeXName, typeof(string));
                localElementDictionary.Add(AppointmentDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AppointmentTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(ExpectedDurationOfAppointmentXName, typeof(decimal));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
                localElementDictionary.Add(EarliestReasonableOfferDateXName, typeof(System.DateTime));
                localElementDictionary.Add(EarliestClinicallyAppropriateDateXName, typeof(System.DateTime));
                localElementDictionary.Add(ConsultationMediumUsedXName, typeof(string));
                localElementDictionary.Add(MultiProfOrDiscIndCodeXName, typeof(string));
                localElementDictionary.Add(RehabilitationAssessmentTeamTypeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics?, Referrer?)
    /// </para>
    /// </summary>
    public partial class OutpatientReferral_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferrerXName = System.Xml.Linq.XName.Get("Referrer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutpatientReferral_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OutpatientReferral_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OutpatientReferral_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OutpatientReferral_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(ReferrerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, Referrer?)
        /// </para>
        /// </summary>
        public OutpatientReferral_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, Referrer?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics?, Referrer?)
        /// </para>
        /// </summary>
        public virtual Referrer_Structure Referrer {
            get {
                XElement x = this.GetElement(ReferrerXName);
                return ((Referrer_Structure)(x));
            }
            set {
                this.SetElement(ReferrerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OutpatientReferral_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(ReferrerXName, typeof(Referrer_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PriorityTypeCodeXName = System.Xml.Linq.XName.Get("PriorityTypeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ServiceTypeRequestedCodeXName = System.Xml.Linq.XName.Get("ServiceTypeRequestedCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SourceOfReferralForOut_PatientsXName = System.Xml.Linq.XName.Get("SourceOfReferralForOut_Patients", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralRequestReceivedDateXName = System.Xml.Linq.XName.Get("ReferralRequestReceivedDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DirectAccessReferralIndicatorXName = System.Xml.Linq.XName.Get("DirectAccessReferralIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PriorityTypeCodeXName), new NamedContentModelEntity(ServiceTypeRequestedCodeXName), new NamedContentModelEntity(SourceOfReferralForOut_PatientsXName), new NamedContentModelEntity(ReferralRequestReceivedDateXName), new NamedContentModelEntity(DirectAccessReferralIndicatorXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public virtual string PriorityTypeCode {
                get {
                    XElement x = this.GetElement(PriorityTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PriorityTypeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PriorityTypeCodeXName, value, "PriorityTypeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PriorityTypeCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public virtual string ServiceTypeRequestedCode {
                get {
                    XElement x = this.GetElement(ServiceTypeRequestedCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ServiceTypeRequestedCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ServiceTypeRequestedCodeXName, value, "ServiceTypeRequestedCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ServiceTypeRequestedCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public virtual string SourceOfReferralForOut_Patients {
                get {
                    XElement x = this.GetElement(SourceOfReferralForOut_PatientsXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(SourceOfReferralForOut_PatientsXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(SourceOfReferralForOut_PatientsXName, value, "SourceOfReferralForOut_Patients", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SourceOfReferralForOut_Patients_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferralRequestReceivedDate {
                get {
                    XElement x = this.GetElement(ReferralRequestReceivedDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferralRequestReceivedDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferralRequestReceivedDateXName, value, "ReferralRequestReceivedDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralRequestReceivedDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (PriorityTypeCode?, ServiceTypeRequestedCode?, SourceOfReferralForOut_Patients?, ReferralRequestReceivedDate?, DirectAccessReferralIndicator?)
            /// </para>
            /// </summary>
            public virtual string DirectAccessReferralIndicator {
                get {
                    XElement x = this.GetElement(DirectAccessReferralIndicatorXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DirectAccessReferralIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DirectAccessReferralIndicatorXName, value, "DirectAccessReferralIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DirectAccessReferralIndicator_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PriorityTypeCodeXName, typeof(string));
                localElementDictionary.Add(ServiceTypeRequestedCodeXName, typeof(string));
                localElementDictionary.Add(SourceOfReferralForOut_PatientsXName, typeof(string));
                localElementDictionary.Add(ReferralRequestReceivedDateXName, typeof(System.DateTime));
                localElementDictionary.Add(DirectAccessReferralIndicatorXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LastDNAOrPatientCancelledDate?)
    /// </para>
    /// </summary>
    public partial class MissedAppointmentOccurrence_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LastDNAOrPatientCancelledDateXName = System.Xml.Linq.XName.Get("LastDNAOrPatientCancelledDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MissedAppointmentOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MissedAppointmentOccurrence_Structure(XElement xe) { return XTypedServices.ToXTypedElement<MissedAppointmentOccurrence_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MissedAppointmentOccurrence_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LastDNAOrPatientCancelledDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LastDNAOrPatientCancelledDate?)
        /// </para>
        /// </summary>
        public MissedAppointmentOccurrence_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastDNAOrPatientCancelledDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? LastDNAOrPatientCancelledDate {
            get {
                XElement x = this.GetElement(LastDNAOrPatientCancelledDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LastDNAOrPatientCancelledDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(LastDNAOrPatientCancelledDateXName, value, "LastDNAOrPatientCancelledDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastDNAOrPatientCancelledDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MissedAppointmentOccurrence_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LastDNAOrPatientCancelledDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AAndEStaffMemberCode?)
    /// </para>
    /// </summary>
    public partial class PersonGroupAAndEConsultant_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AAndEStaffMemberCodeXName = System.Xml.Linq.XName.Get("AAndEStaffMemberCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupAAndEConsultant_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupAAndEConsultant_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupAAndEConsultant_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupAAndEConsultant_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AAndEStaffMemberCodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AAndEStaffMemberCode?)
        /// </para>
        /// </summary>
        public PersonGroupAAndEConsultant_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AAndEStaffMemberCode?)
        /// </para>
        /// </summary>
        public virtual string AAndEStaffMemberCode {
            get {
                XElement x = this.GetElement(AAndEStaffMemberCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AAndEStaffMemberCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AAndEStaffMemberCodeXName, value, "AAndEStaffMemberCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEStaffMemberCode_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupAAndEConsultant_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AAndEStaffMemberCodeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
    /// </para>
    /// </summary>
    public partial class AttendanceLocationGroup_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClinicCodeXName = System.Xml.Linq.XName.Get("ClinicCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AttendanceLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AttendanceLocationGroup_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AttendanceLocationGroup_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttendanceLocationGroup_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(SiteCodeOfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName), new NamedContentModelEntity(ClinicCodeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
        /// </para>
        /// </summary>
        public AttendanceLocationGroup_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
        /// </para>
        /// </summary>
        public virtual string LocationClass {
            get {
                XElement x = this.GetElement(LocationClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
        /// </para>
        /// </summary>
        public virtual string SiteCodeOfTreatment {
            get {
                XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SiteCodeOfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
        /// </para>
        /// </summary>
        public virtual string ActivityLocationType {
            get {
                XElement x = this.GetElement(ActivityLocationTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationClass?, SiteCodeOfTreatment?, ActivityLocationType?, ClinicCode?)
        /// </para>
        /// </summary>
        public virtual string ClinicCode {
            get {
                XElement x = this.GetElement(ClinicCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ClinicCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ClinicCodeXName, value, "ClinicCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicCode_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttendanceLocationGroup_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LocationClassXName, typeof(string));
            localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
            localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
            localElementDictionary.Add(ClinicCodeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
    /// </para>
    /// </summary>
    public partial class EALEntry_APCReference_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationOfElectiveWaitXName = System.Xml.Linq.XName.Get("DurationOfElectiveWait", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntendedManagementCodeXName = System.Xml.Linq.XName.Get("IntendedManagementCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DecidedToAdmitDateXName = System.Xml.Linq.XName.Get("DecidedToAdmitDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EarliestReasonableOfferDateXName = System.Xml.Linq.XName.Get("EarliestReasonableOfferDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EALEntry_APCReference_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EALEntry_APCReference_Structure(XElement xe) { return XTypedServices.ToXTypedElement<EALEntry_APCReference_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EALEntry_APCReference_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DurationOfElectiveWaitXName), new NamedContentModelEntity(IntendedManagementCodeXName), new NamedContentModelEntity(DecidedToAdmitDateXName), new NamedContentModelEntity(EarliestReasonableOfferDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public EALEntry_APCReference_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DurationOfElectiveWait {
            get {
                XElement x = this.GetElement(DurationOfElectiveWaitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationOfElectiveWaitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationOfElectiveWaitXName, value, "DurationOfElectiveWait", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DurationOfElectiveWait_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual string IntendedManagementCode {
            get {
                XElement x = this.GetElement(IntendedManagementCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IntendedManagementCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(IntendedManagementCodeXName, value, "IntendedManagementCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedManagementCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DecidedToAdmitDate {
            get {
                XElement x = this.GetElement(DecidedToAdmitDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DecidedToAdmitDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(DecidedToAdmitDateXName, value, "DecidedToAdmitDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DecidedToAdmitDate_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DurationOfElectiveWait?, IntendedManagementCode?, DecidedToAdmitDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? EarliestReasonableOfferDate {
            get {
                XElement x = this.GetElement(EarliestReasonableOfferDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EarliestReasonableOfferDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(EarliestReasonableOfferDateXName, value, "EarliestReasonableOfferDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EarliestReasonableOfferDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EALEntry_APCReference_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DurationOfElectiveWaitXName, typeof(decimal));
            localElementDictionary.Add(IntendedManagementCodeXName, typeof(string));
            localElementDictionary.Add(DecidedToAdmitDateXName, typeof(System.DateTime));
            localElementDictionary.Add(EarliestReasonableOfferDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate?)
    /// </para>
    /// </summary>
    public partial class EALEntryRemoval_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectiveAdmissionListRemovalReasonCodeXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListRemovalReasonCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectiveAdmissionListRemovalDateXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListRemovalDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EALEntryRemoval_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EALEntryRemoval_Structure(XElement xe) { return XTypedServices.ToXTypedElement<EALEntryRemoval_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EALEntryRemoval_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ElectiveAdmissionListRemovalReasonCodeXName), new NamedContentModelEntity(ElectiveAdmissionListRemovalDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate?)
        /// </para>
        /// </summary>
        public EALEntryRemoval_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate?)
        /// </para>
        /// </summary>
        public virtual string ElectiveAdmissionListRemovalReasonCode {
            get {
                XElement x = this.GetElement(ElectiveAdmissionListRemovalReasonCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ElectiveAdmissionListRemovalReasonCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ElectiveAdmissionListRemovalReasonCodeXName, value, "ElectiveAdmissionListRemovalReasonCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListRemovalReasonCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? ElectiveAdmissionListRemovalDate {
            get {
                XElement x = this.GetElement(ElectiveAdmissionListRemovalDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ElectiveAdmissionListRemovalDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(ElectiveAdmissionListRemovalDateXName, value, "ElectiveAdmissionListRemovalDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListRemovalDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EALEntryRemoval_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ElectiveAdmissionListRemovalReasonCodeXName, typeof(string));
            localElementDictionary.Add(ElectiveAdmissionListRemovalDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate)
    /// </para>
    /// </summary>
    public partial class EDPEntryRemoval_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectiveAdmissionListRemovalReasonCodeXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListRemovalReasonCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectiveAdmissionListRemovalDateXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListRemovalDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EDPEntryRemoval_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EDPEntryRemoval_Structure(XElement xe) { return XTypedServices.ToXTypedElement<EDPEntryRemoval_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EDPEntryRemoval_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ElectiveAdmissionListRemovalReasonCodeXName), new NamedContentModelEntity(ElectiveAdmissionListRemovalDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate)
        /// </para>
        /// </summary>
        public EDPEntryRemoval_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate)
        /// </para>
        /// </summary>
        public virtual string ElectiveAdmissionListRemovalReasonCode {
            get {
                XElement x = this.GetElement(ElectiveAdmissionListRemovalReasonCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ElectiveAdmissionListRemovalReasonCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ElectiveAdmissionListRemovalReasonCodeXName, value, "ElectiveAdmissionListRemovalReasonCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListRemovalReasonCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListRemovalReasonCode?, ElectiveAdmissionListRemovalDate)
        /// </para>
        /// </summary>
        public virtual System.DateTime ElectiveAdmissionListRemovalDate {
            get {
                XElement x = this.GetElement(ElectiveAdmissionListRemovalDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(ElectiveAdmissionListRemovalDateXName, value, "ElectiveAdmissionListRemovalDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListRemovalDate_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EDPEntryRemoval_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ElectiveAdmissionListRemovalReasonCodeXName, typeof(string));
            localElementDictionary.Add(ElectiveAdmissionListRemovalDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate, EarliestReasonableOfferDate?)
    /// </para>
    /// </summary>
    public partial class EDPOfferOfAdmission_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionOfferOutcomeCodeXName = System.Xml.Linq.XName.Get("AdmissionOfferOutcomeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OfferedForAdmissionDateXName = System.Xml.Linq.XName.Get("OfferedForAdmissionDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EarliestReasonableOfferDateXName = System.Xml.Linq.XName.Get("EarliestReasonableOfferDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EDPOfferOfAdmission_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EDPOfferOfAdmission_Structure(XElement xe) { return XTypedServices.ToXTypedElement<EDPOfferOfAdmission_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EDPOfferOfAdmission_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionOfferOutcomeCodeXName), new NamedContentModelEntity(OfferedForAdmissionDateXName), new NamedContentModelEntity(EarliestReasonableOfferDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public EDPOfferOfAdmission_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual string AdmissionOfferOutcomeCode {
            get {
                XElement x = this.GetElement(AdmissionOfferOutcomeCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AdmissionOfferOutcomeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AdmissionOfferOutcomeCodeXName, value, "AdmissionOfferOutcomeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionOfferOutcomeCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime OfferedForAdmissionDate {
            get {
                XElement x = this.GetElement(OfferedForAdmissionDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(OfferedForAdmissionDateXName, value, "OfferedForAdmissionDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OfferedForAdmissionDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? EarliestReasonableOfferDate {
            get {
                XElement x = this.GetElement(EarliestReasonableOfferDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EarliestReasonableOfferDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(EarliestReasonableOfferDateXName, value, "EarliestReasonableOfferDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EarliestReasonableOfferDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EDPOfferOfAdmission_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionOfferOutcomeCodeXName, typeof(string));
            localElementDictionary.Add(OfferedForAdmissionDateXName, typeof(System.DateTime));
            localElementDictionary.Add(EarliestReasonableOfferDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SuspensionStartDate, SuspensionEndDate?)
    /// </para>
    /// </summary>
    public partial class EDPPatientSuspension_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuspensionStartDateXName = System.Xml.Linq.XName.Get("SuspensionStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuspensionEndDateXName = System.Xml.Linq.XName.Get("SuspensionEndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EDPPatientSuspension_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EDPPatientSuspension_Structure(XElement xe) { return XTypedServices.ToXTypedElement<EDPPatientSuspension_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EDPPatientSuspension_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SuspensionStartDateXName), new NamedContentModelEntity(SuspensionEndDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SuspensionStartDate, SuspensionEndDate?)
        /// </para>
        /// </summary>
        public EDPPatientSuspension_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SuspensionStartDate, SuspensionEndDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime SuspensionStartDate {
            get {
                XElement x = this.GetElement(SuspensionStartDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(SuspensionStartDateXName, value, "SuspensionStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SuspensionStartDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SuspensionStartDate, SuspensionEndDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? SuspensionEndDate {
            get {
                XElement x = this.GetElement(SuspensionEndDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SuspensionEndDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(SuspensionEndDateXName, value, "SuspensionEndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SuspensionEndDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EDPPatientSuspension_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SuspensionStartDateXName, typeof(System.DateTime));
            localElementDictionary.Add(SuspensionEndDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
    /// </para>
    /// </summary>
    public partial class ElectiveAdmissionListEntry_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivityCharacteristicsXName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroup_ConsultantXName = System.Xml.Linq.XName.Get("PersonGroup_Consultant", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntendedProcedureDetailsXName = System.Xml.Linq.XName.Get("IntendedProcedureDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationGroupXName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElectiveAdmissionListEntry_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ElectiveAdmissionListEntry_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ElectiveAdmissionListEntry_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElectiveAdmissionListEntry_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivityCharacteristicsXName), new NamedContentModelEntity(PersonGroup_ConsultantXName), new NamedContentModelEntity(IntendedProcedureDetailsXName), new NamedContentModelEntity(LocationGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public ElectiveAdmissionListEntry_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ActivityCharacteristicsLocalType ActivityCharacteristics {
            get {
                XElement x = this.GetElement(ActivityCharacteristicsXName);
                return ((ActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(ActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual PersonGroupConsultant_Structure PersonGroup_Consultant {
            get {
                XElement x = this.GetElement(PersonGroup_ConsultantXName);
                return ((PersonGroupConsultant_Structure)(x));
            }
            set {
                this.SetElement(PersonGroup_ConsultantXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual ClinicalActivity_Structure IntendedProcedureDetails {
            get {
                XElement x = this.GetElement(IntendedProcedureDetailsXName);
                return ((ClinicalActivity_Structure)(x));
            }
            set {
                this.SetElement(IntendedProcedureDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ActivityCharacteristics, PersonGroup_Consultant?, IntendedProcedureDetails?, LocationGroup?)
        /// </para>
        /// </summary>
        public virtual LocationGroupLocalType LocationGroup {
            get {
                XElement x = this.GetElement(LocationGroupXName);
                return ((LocationGroupLocalType)(x));
            }
            set {
                this.SetElement(LocationGroupXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElectiveAdmissionListEntry_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivityCharacteristicsXName, typeof(ActivityCharacteristicsLocalType));
            localElementDictionary.Add(PersonGroup_ConsultantXName, typeof(PersonGroupConsultant_Structure));
            localElementDictionary.Add(IntendedProcedureDetailsXName, typeof(ClinicalActivity_Structure));
            localElementDictionary.Add(LocationGroupXName, typeof(LocationGroupLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
        /// </para>
        /// </summary>
        public partial class ActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectiveAdmissionListEntryNumberXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListEntryNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AdministrativeCategoryCodeXName = System.Xml.Linq.XName.Get("AdministrativeCategoryCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CountOfDaysSuspendedXName = System.Xml.Linq.XName.Get("CountOfDaysSuspended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectiveAdmissionListStatusXName = System.Xml.Linq.XName.Get("ElectiveAdmissionListStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectiveAdmissionTypeCodeXName = System.Xml.Linq.XName.Get("ElectiveAdmissionTypeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedManagementCodeXName = System.Xml.Linq.XName.Get("IntendedManagementCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedProcedureStatusCodeXName = System.Xml.Linq.XName.Get("IntendedProcedureStatusCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PriorityTypeCodeXName = System.Xml.Linq.XName.Get("PriorityTypeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DecidedToAdmitDateXName = System.Xml.Linq.XName.Get("DecidedToAdmitDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCDSActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GuaranteedAdmissionDateXName = System.Xml.Linq.XName.Get("GuaranteedAdmissionDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LastDNAOrPatientCancelledDateXName = System.Xml.Linq.XName.Get("LastDNAOrPatientCancelledDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WaitingListEntryLastReviewedDateXName = System.Xml.Linq.XName.Get("WaitingListEntryLastReviewedDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ElectiveAdmissionListEntryNumberXName), new NamedContentModelEntity(AdministrativeCategoryCodeXName), new NamedContentModelEntity(CountOfDaysSuspendedXName), new NamedContentModelEntity(ElectiveAdmissionListStatusXName), new NamedContentModelEntity(ElectiveAdmissionTypeCodeXName), new NamedContentModelEntity(IntendedManagementCodeXName), new NamedContentModelEntity(IntendedProcedureStatusCodeXName), new NamedContentModelEntity(PriorityTypeCodeXName), new NamedContentModelEntity(DecidedToAdmitDateXName), new NamedContentModelEntity(AgeAtCDSActivityDateXName), new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName), new NamedContentModelEntity(GuaranteedAdmissionDateXName), new NamedContentModelEntity(LastDNAOrPatientCancelledDateXName), new NamedContentModelEntity(WaitingListEntryLastReviewedDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public ActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string ElectiveAdmissionListEntryNumber {
                get {
                    XElement x = this.GetElement(ElectiveAdmissionListEntryNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ElectiveAdmissionListEntryNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ElectiveAdmissionListEntryNumberXName, value, "ElectiveAdmissionListEntryNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListEntryNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string AdministrativeCategoryCode {
                get {
                    XElement x = this.GetElement(AdministrativeCategoryCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AdministrativeCategoryCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AdministrativeCategoryCodeXName, value, "AdministrativeCategoryCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdministrativeCategoryCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? CountOfDaysSuspended {
                get {
                    XElement x = this.GetElement(CountOfDaysSuspendedXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CountOfDaysSuspendedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CountOfDaysSuspendedXName, value, "CountOfDaysSuspended", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CountOfDaysSuspended_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string ElectiveAdmissionListStatus {
                get {
                    XElement x = this.GetElement(ElectiveAdmissionListStatusXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ElectiveAdmissionListStatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ElectiveAdmissionListStatusXName, value, "ElectiveAdmissionListStatus", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListStatus_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string ElectiveAdmissionTypeCode {
                get {
                    XElement x = this.GetElement(ElectiveAdmissionTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ElectiveAdmissionTypeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ElectiveAdmissionTypeCodeXName, value, "ElectiveAdmissionTypeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionTypeCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string IntendedManagementCode {
                get {
                    XElement x = this.GetElement(IntendedManagementCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedManagementCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedManagementCodeXName, value, "IntendedManagementCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedManagementCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string IntendedProcedureStatusCode {
                get {
                    XElement x = this.GetElement(IntendedProcedureStatusCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(IntendedProcedureStatusCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(IntendedProcedureStatusCodeXName, value, "IntendedProcedureStatusCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedProcedureStatusCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string PriorityTypeCode {
                get {
                    XElement x = this.GetElement(PriorityTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PriorityTypeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PriorityTypeCodeXName, value, "PriorityTypeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PriorityTypeCode_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime DecidedToAdmitDate {
                get {
                    XElement x = this.GetElement(DecidedToAdmitDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(DecidedToAdmitDateXName, value, "DecidedToAdmitDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DecidedToAdmitDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCDSActivityDateXName, value, "AgeAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
                get {
                    XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? GuaranteedAdmissionDate {
                get {
                    XElement x = this.GetElement(GuaranteedAdmissionDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(GuaranteedAdmissionDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(GuaranteedAdmissionDateXName, value, "GuaranteedAdmissionDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GuaranteedAdmissionDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? LastDNAOrPatientCancelledDate {
                get {
                    XElement x = this.GetElement(LastDNAOrPatientCancelledDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(LastDNAOrPatientCancelledDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(LastDNAOrPatientCancelledDateXName, value, "LastDNAOrPatientCancelledDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LastDNAOrPatientCancelledDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ElectiveAdmissionListEntryNumber?, AdministrativeCategoryCode?, CountOfDaysSuspended?, ElectiveAdmissionListStatus?, ElectiveAdmissionTypeCode?, IntendedManagementCode?, IntendedProcedureStatusCode?, PriorityTypeCode?, DecidedToAdmitDate, AgeAtCDSActivityDate, OverseasVisitorStatusClassificationAtCDSActivityDate?, GuaranteedAdmissionDate?, LastDNAOrPatientCancelledDate?, WaitingListEntryLastReviewedDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? WaitingListEntryLastReviewedDate {
                get {
                    XElement x = this.GetElement(WaitingListEntryLastReviewedDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WaitingListEntryLastReviewedDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WaitingListEntryLastReviewedDateXName, value, "WaitingListEntryLastReviewedDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WaitingListEntryLastReviewedDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ElectiveAdmissionListEntryNumberXName, typeof(string));
                localElementDictionary.Add(AdministrativeCategoryCodeXName, typeof(string));
                localElementDictionary.Add(CountOfDaysSuspendedXName, typeof(decimal));
                localElementDictionary.Add(ElectiveAdmissionListStatusXName, typeof(string));
                localElementDictionary.Add(ElectiveAdmissionTypeCodeXName, typeof(string));
                localElementDictionary.Add(IntendedManagementCodeXName, typeof(string));
                localElementDictionary.Add(IntendedProcedureStatusCodeXName, typeof(string));
                localElementDictionary.Add(PriorityTypeCodeXName, typeof(string));
                localElementDictionary.Add(DecidedToAdmitDateXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCDSActivityDateXName, typeof(decimal));
                localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
                localElementDictionary.Add(GuaranteedAdmissionDateXName, typeof(System.DateTime));
                localElementDictionary.Add(LastDNAOrPatientCancelledDateXName, typeof(System.DateTime));
                localElementDictionary.Add(WaitingListEntryLastReviewedDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (IntendedSiteOfTreatment?)
        /// </para>
        /// </summary>
        public partial class LocationGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IntendedSiteOfTreatmentXName = System.Xml.Linq.XName.Get("IntendedSiteOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationGroup", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LocationGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocationGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LocationGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IntendedSiteOfTreatmentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (IntendedSiteOfTreatment?)
            /// </para>
            /// </summary>
            public LocationGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (IntendedSiteOfTreatment?)
            /// </para>
            /// </summary>
            public virtual IntendedSiteOfTreatmentLocalType IntendedSiteOfTreatment {
                get {
                    XElement x = this.GetElement(IntendedSiteOfTreatmentXName);
                    return ((IntendedSiteOfTreatmentLocalType)(x));
                }
                set {
                    this.SetElement(IntendedSiteOfTreatmentXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LocationGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(IntendedSiteOfTreatmentXName, typeof(IntendedSiteOfTreatmentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationClass?, IntendedSiteCode_OfTreatment?, ActivityLocationType?)
            /// </para>
            /// </summary>
            public partial class IntendedSiteOfTreatmentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocationClassXName = System.Xml.Linq.XName.Get("LocationClass", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IntendedSiteCode_OfTreatmentXName = System.Xml.Linq.XName.Get("IntendedSiteCode_OfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActivityLocationTypeXName = System.Xml.Linq.XName.Get("ActivityLocationType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IntendedSiteOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator IntendedSiteOfTreatmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IntendedSiteOfTreatmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static IntendedSiteOfTreatmentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationClassXName), new NamedContentModelEntity(IntendedSiteCode_OfTreatmentXName), new NamedContentModelEntity(ActivityLocationTypeXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocationClass?, IntendedSiteCode_OfTreatment?, ActivityLocationType?)
                /// </para>
                /// </summary>
                public IntendedSiteOfTreatmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, IntendedSiteCode_OfTreatment?, ActivityLocationType?)
                /// </para>
                /// </summary>
                public virtual string LocationClass {
                    get {
                        XElement x = this.GetElement(LocationClassXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocationClassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocationClassXName, value, "LocationClass", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocationClass_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, IntendedSiteCode_OfTreatment?, ActivityLocationType?)
                /// </para>
                /// </summary>
                public virtual string IntendedSiteCode_OfTreatment {
                    get {
                        XElement x = this.GetElement(IntendedSiteCode_OfTreatmentXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(IntendedSiteCode_OfTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(IntendedSiteCode_OfTreatmentXName, value, "IntendedSiteCode_OfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.IntendedSiteCode_OfTreatment_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LocationClass?, IntendedSiteCode_OfTreatment?, ActivityLocationType?)
                /// </para>
                /// </summary>
                public virtual string ActivityLocationType {
                    get {
                        XElement x = this.GetElement(ActivityLocationTypeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActivityLocationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActivityLocationTypeXName, value, "ActivityLocationType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ActivityLocationType_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<IntendedSiteOfTreatmentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocationClassXName, typeof(string));
                    localElementDictionary.Add(IntendedSiteCode_OfTreatmentXName, typeof(string));
                    localElementDictionary.Add(ActivityLocationTypeXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate?, EarliestReasonableOfferDate?)
    /// </para>
    /// </summary>
    public partial class OfferOfAdmission_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmissionOfferOutcomeCodeXName = System.Xml.Linq.XName.Get("AdmissionOfferOutcomeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OfferedForAdmissionDateXName = System.Xml.Linq.XName.Get("OfferedForAdmissionDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EarliestReasonableOfferDateXName = System.Xml.Linq.XName.Get("EarliestReasonableOfferDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OfferOfAdmission_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OfferOfAdmission_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OfferOfAdmission_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OfferOfAdmission_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdmissionOfferOutcomeCodeXName), new NamedContentModelEntity(OfferedForAdmissionDateXName), new NamedContentModelEntity(EarliestReasonableOfferDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public OfferOfAdmission_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual string AdmissionOfferOutcomeCode {
            get {
                XElement x = this.GetElement(AdmissionOfferOutcomeCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AdmissionOfferOutcomeCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AdmissionOfferOutcomeCodeXName, value, "AdmissionOfferOutcomeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdmissionOfferOutcomeCode_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? OfferedForAdmissionDate {
            get {
                XElement x = this.GetElement(OfferedForAdmissionDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OfferedForAdmissionDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(OfferedForAdmissionDateXName, value, "OfferedForAdmissionDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OfferedForAdmissionDate_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdmissionOfferOutcomeCode?, OfferedForAdmissionDate?, EarliestReasonableOfferDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? EarliestReasonableOfferDate {
            get {
                XElement x = this.GetElement(EarliestReasonableOfferDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EarliestReasonableOfferDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(EarliestReasonableOfferDateXName, value, "EarliestReasonableOfferDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EarliestReasonableOfferDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OfferOfAdmission_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdmissionOfferOutcomeCodeXName, typeof(string));
            localElementDictionary.Add(OfferedForAdmissionDateXName, typeof(System.DateTime));
            localElementDictionary.Add(EarliestReasonableOfferDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OriginalDecidedToAdmitDate?)
    /// </para>
    /// </summary>
    public partial class OriginalEALEntry_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OriginalDecidedToAdmitDateXName = System.Xml.Linq.XName.Get("OriginalDecidedToAdmitDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OriginalEALEntry_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OriginalEALEntry_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OriginalEALEntry_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OriginalEALEntry_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OriginalDecidedToAdmitDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OriginalDecidedToAdmitDate?)
        /// </para>
        /// </summary>
        public OriginalEALEntry_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OriginalDecidedToAdmitDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? OriginalDecidedToAdmitDate {
            get {
                XElement x = this.GetElement(OriginalDecidedToAdmitDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OriginalDecidedToAdmitDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(OriginalDecidedToAdmitDateXName, value, "OriginalDecidedToAdmitDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OriginalDecidedToAdmitDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OriginalEALEntry_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OriginalDecidedToAdmitDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SiteCodeOfTreatment)
    /// </para>
    /// </summary>
    public partial class AAndEAttendanceLocationGroup_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteCodeOfTreatmentXName = System.Xml.Linq.XName.Get("SiteCodeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AAndEAttendanceLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AAndEAttendanceLocationGroup_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AAndEAttendanceLocationGroup_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AAndEAttendanceLocationGroup_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiteCodeOfTreatmentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SiteCodeOfTreatment)
        /// </para>
        /// </summary>
        public AAndEAttendanceLocationGroup_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiteCodeOfTreatment)
        /// </para>
        /// </summary>
        public virtual string SiteCodeOfTreatment {
            get {
                XElement x = this.GetElement(SiteCodeOfTreatmentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(SiteCodeOfTreatmentXName, value, "SiteCodeOfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.SiteCodeOfTreatment_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AAndEAttendanceLocationGroup_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiteCodeOfTreatmentXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DirectAccessReferralIndicator?)
    /// </para>
    /// </summary>
    public partial class Referral_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DirectAccessReferralIndicatorXName = System.Xml.Linq.XName.Get("DirectAccessReferralIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Referral_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Referral_Structure(XElement xe) { return XTypedServices.ToXTypedElement<Referral_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Referral_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DirectAccessReferralIndicatorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DirectAccessReferralIndicator?)
        /// </para>
        /// </summary>
        public Referral_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DirectAccessReferralIndicator?)
        /// </para>
        /// </summary>
        public virtual string DirectAccessReferralIndicator {
            get {
                XElement x = this.GetElement(DirectAccessReferralIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DirectAccessReferralIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DirectAccessReferralIndicatorXName, value, "DirectAccessReferralIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DirectAccessReferralIndicator_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Referral_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DirectAccessReferralIndicatorXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OverseasVisitorClassification, OverseasVisitorStatusStartDate, OverseasVisitorStatusEndDate?)
    /// </para>
    /// </summary>
    public partial class OverseasVisitorStatus_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorClassificationXName = System.Xml.Linq.XName.Get("OverseasVisitorClassification", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusStartDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusEndDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusEndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverseasVisitorStatus_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OverseasVisitorStatus_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OverseasVisitorStatus_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OverseasVisitorStatus_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OverseasVisitorClassificationXName), new NamedContentModelEntity(OverseasVisitorStatusStartDateXName), new NamedContentModelEntity(OverseasVisitorStatusEndDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OverseasVisitorClassification, OverseasVisitorStatusStartDate, OverseasVisitorStatusEndDate?)
        /// </para>
        /// </summary>
        public OverseasVisitorStatus_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OverseasVisitorClassification, OverseasVisitorStatusStartDate, OverseasVisitorStatusEndDate?)
        /// </para>
        /// </summary>
        public virtual string OverseasVisitorClassification {
            get {
                XElement x = this.GetElement(OverseasVisitorClassificationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OverseasVisitorClassificationXName, value, "OverseasVisitorClassification", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorClassification_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OverseasVisitorClassification, OverseasVisitorStatusStartDate, OverseasVisitorStatusEndDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime OverseasVisitorStatusStartDate {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusStartDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(OverseasVisitorStatusStartDateXName, value, "OverseasVisitorStatusStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusStartDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OverseasVisitorClassification, OverseasVisitorStatusStartDate, OverseasVisitorStatusEndDate?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? OverseasVisitorStatusEndDate {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusEndDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OverseasVisitorStatusEndDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                else {
                    this.SetElementWithValidation(OverseasVisitorStatusEndDateXName, value, "OverseasVisitorStatusEndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusEndDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverseasVisitorStatus_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OverseasVisitorClassificationXName, typeof(string));
            localElementDictionary.Add(OverseasVisitorStatusStartDateXName, typeof(System.DateTime));
            localElementDictionary.Add(OverseasVisitorStatusEndDateXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier)
    /// </para>
    /// </summary>
    public partial class ProfessionalsInvolved_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfessionalRegistrationIssuerCodeXName = System.Xml.Linq.XName.Get("ProfessionalRegistrationIssuerCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfessionalRegistrationEntryIdentifierXName = System.Xml.Linq.XName.Get("ProfessionalRegistrationEntryIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProfessionalsInvolved_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProfessionalsInvolved_Structure(XElement xe) { return XTypedServices.ToXTypedElement<ProfessionalsInvolved_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProfessionalsInvolved_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProfessionalRegistrationIssuerCodeXName), new NamedContentModelEntity(ProfessionalRegistrationEntryIdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier)
        /// </para>
        /// </summary>
        public ProfessionalsInvolved_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier)
        /// </para>
        /// </summary>
        public virtual string ProfessionalRegistrationIssuerCode {
            get {
                XElement x = this.GetElement(ProfessionalRegistrationIssuerCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ProfessionalRegistrationIssuerCodeXName, value, "ProfessionalRegistrationIssuerCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProfessionalRegistrationIssuerCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier)
        /// </para>
        /// </summary>
        public virtual string ProfessionalRegistrationEntryIdentifier {
            get {
                XElement x = this.GetElement(ProfessionalRegistrationEntryIdentifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ProfessionalRegistrationEntryIdentifierXName, value, "ProfessionalRegistrationEntryIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProfessionalRegistrationEntryIdentifier_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProfessionalsInvolved_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProfessionalRegistrationIssuerCodeXName, typeof(string));
            localElementDictionary.Add(ProfessionalRegistrationEntryIdentifierXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
    /// </para>
    /// </summary>
    public partial class OverseasVisitorStatusClassificationAtCDSActivityDate_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorStatusClassificationAtCDSActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OverseasVisitorStatusClassificationAtCDSActivityDate_Structure(XElement xe) { return XTypedServices.ToXTypedElement<OverseasVisitorStatusClassificationAtCDSActivityDate_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OverseasVisitorStatusClassificationAtCDSActivityDate_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OverseasVisitorStatusClassificationAtCDSActivityDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public OverseasVisitorStatusClassificationAtCDSActivityDate_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OverseasVisitorStatusClassificationAtCDSActivityDate?)
        /// </para>
        /// </summary>
        public virtual string OverseasVisitorStatusClassificationAtCDSActivityDate {
            get {
                XElement x = this.GetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OverseasVisitorStatusClassificationAtCDSActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OverseasVisitorStatusClassificationAtCDSActivityDateXName, value, "OverseasVisitorStatusClassificationAtCDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverseasVisitorStatusClassificationAtCDSActivityDate_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OverseasVisitorStatusClassificationAtCDSActivityDateXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
    /// </para>
    /// </summary>
    public partial class EmergencyCare_Stucture : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientPathwayXName = System.Xml.Linq.XName.Get("PatientPathway", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonGroupPatientXName = System.Xml.Linq.XName.Get("PersonGroupPatient", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPRegistrationXName = System.Xml.Linq.XName.Get("GPRegistration", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmergencyCareAttendanceLocationXName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceLocation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AttendanceOccurrenceXName = System.Xml.Linq.XName.Get("AttendanceOccurrence", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCare_Stucture", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EmergencyCare_Stucture(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCare_Stucture>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EmergencyCare_Stucture() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientPathwayXName), new NamedContentModelEntity(PersonGroupPatientXName), new NamedContentModelEntity(GPRegistrationXName), new NamedContentModelEntity(EmergencyCareAttendanceLocationXName), new NamedContentModelEntity(AttendanceOccurrenceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public EmergencyCare_Stucture() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public virtual PatientPathway_EC_Structure PatientPathway {
            get {
                XElement x = this.GetElement(PatientPathwayXName);
                return ((PatientPathway_EC_Structure)(x));
            }
            set {
                this.SetElement(PatientPathwayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public virtual PersonGroupPatient_EC_Structure PersonGroupPatient {
            get {
                XElement x = this.GetElement(PersonGroupPatientXName);
                return ((PersonGroupPatient_EC_Structure)(x));
            }
            set {
                this.SetElement(PersonGroupPatientXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public virtual GPRegistration_Structure GPRegistration {
            get {
                XElement x = this.GetElement(GPRegistrationXName);
                return ((GPRegistration_Structure)(x));
            }
            set {
                this.SetElement(GPRegistrationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public virtual EmergencyCareAttendanceLocationLocalType EmergencyCareAttendanceLocation {
            get {
                XElement x = this.GetElement(EmergencyCareAttendanceLocationXName);
                return ((EmergencyCareAttendanceLocationLocalType)(x));
            }
            set {
                this.SetElement(EmergencyCareAttendanceLocationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathway?, PersonGroupPatient, GPRegistration?, EmergencyCareAttendanceLocation, AttendanceOccurrence)
        /// </para>
        /// </summary>
        public virtual AttendanceOccurrence_EC_Structure AttendanceOccurrence {
            get {
                XElement x = this.GetElement(AttendanceOccurrenceXName);
                return ((AttendanceOccurrence_EC_Structure)(x));
            }
            set {
                this.SetElement(AttendanceOccurrenceXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmergencyCare_Stucture>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientPathwayXName, typeof(PatientPathway_EC_Structure));
            localElementDictionary.Add(PersonGroupPatientXName, typeof(PersonGroupPatient_EC_Structure));
            localElementDictionary.Add(GPRegistrationXName, typeof(GPRegistration_Structure));
            localElementDictionary.Add(EmergencyCareAttendanceLocationXName, typeof(EmergencyCareAttendanceLocationLocalType));
            localElementDictionary.Add(AttendanceOccurrenceXName, typeof(AttendanceOccurrence_EC_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OrganisationSiteIdentifier_OfTreatment, EmergencyCareDepartmentType)
        /// </para>
        /// </summary>
        public partial class EmergencyCareAttendanceLocationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationSiteIdentifier_OfTreatmentXName = System.Xml.Linq.XName.Get("OrganisationSiteIdentifier_OfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDepartmentTypeXName = System.Xml.Linq.XName.Get("EmergencyCareDepartmentType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceLocation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EmergencyCareAttendanceLocationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCareAttendanceLocationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EmergencyCareAttendanceLocationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrganisationSiteIdentifier_OfTreatmentXName), new NamedContentModelEntity(EmergencyCareDepartmentTypeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (OrganisationSiteIdentifier_OfTreatment, EmergencyCareDepartmentType)
            /// </para>
            /// </summary>
            public EmergencyCareAttendanceLocationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (OrganisationSiteIdentifier_OfTreatment, EmergencyCareDepartmentType)
            /// </para>
            /// </summary>
            public virtual string OrganisationSiteIdentifier_OfTreatment {
                get {
                    XElement x = this.GetElement(OrganisationSiteIdentifier_OfTreatmentXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(OrganisationSiteIdentifier_OfTreatmentXName, value, "OrganisationSiteIdentifier_OfTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_5_9_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (OrganisationSiteIdentifier_OfTreatment, EmergencyCareDepartmentType)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDepartmentType {
                get {
                    XElement x = this.GetElement(EmergencyCareDepartmentTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareDepartmentTypeXName, value, "EmergencyCareDepartmentType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_2_EC_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EmergencyCareAttendanceLocationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OrganisationSiteIdentifier_OfTreatmentXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDepartmentTypeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
    /// </para>
    /// </summary>
    public partial class PatientPathway_EC_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientPathwayIdentityXName = System.Xml.Linq.XName.Get("PatientPathwayIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RTTPeriodCharacteristicsXName = System.Xml.Linq.XName.Get("RTTPeriodCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientPathway_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientPathway_EC_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientPathway_EC_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientPathway_EC_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientPathwayIdentityXName), new NamedContentModelEntity(RTTPeriodCharacteristicsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public PatientPathway_EC_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public virtual PatientPathwayIdentityLocalType PatientPathwayIdentity {
            get {
                XElement x = this.GetElement(PatientPathwayIdentityXName);
                return ((PatientPathwayIdentityLocalType)(x));
            }
            set {
                this.SetElement(PatientPathwayIdentityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientPathwayIdentity, RTTPeriodCharacteristics)
        /// </para>
        /// </summary>
        public virtual RTTPeriodCharacteristicsLocalType RTTPeriodCharacteristics {
            get {
                XElement x = this.GetElement(RTTPeriodCharacteristicsXName);
                return ((RTTPeriodCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(RTTPeriodCharacteristicsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientPathway_EC_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientPathwayIdentityXName, typeof(PatientPathwayIdentityLocalType));
            localElementDictionary.Add(RTTPeriodCharacteristicsXName, typeof(RTTPeriodCharacteristicsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationIdentifier_PatientPathwayIdentifierIssuer)
        /// </para>
        /// </summary>
        public partial class PatientPathwayIdentityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UniqueBookingReferenceNumber_ConvertedXName = System.Xml.Linq.XName.Get("UniqueBookingReferenceNumber_Converted", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PatientPathwayIdentifierXName = System.Xml.Linq.XName.Get("PatientPathwayIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationIdentifier_PatientPathwayIdentifierIssuerXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_PatientPathwayIdentifierIssuer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientPathwayIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PatientPathwayIdentityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PatientPathwayIdentityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PatientPathwayIdentityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(UniqueBookingReferenceNumber_ConvertedXName), new NamedContentModelEntity(PatientPathwayIdentifierXName)), new NamedContentModelEntity(OrganisationIdentifier_PatientPathwayIdentifierIssuerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationIdentifier_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public PatientPathwayIdentityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationIdentifier_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string UniqueBookingReferenceNumber_Converted {
                get {
                    XElement x = this.GetElement(UniqueBookingReferenceNumber_ConvertedXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(UniqueBookingReferenceNumber_ConvertedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(UniqueBookingReferenceNumber_ConvertedXName, value, "UniqueBookingReferenceNumber_Converted", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UBRN_Converted_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationIdentifier_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string PatientPathwayIdentifier {
                get {
                    XElement x = this.GetElement(PatientPathwayIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PatientPathwayIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PatientPathwayIdentifierXName, value, "PatientPathwayIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientPathwayIdentifier_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: ((UniqueBookingReferenceNumber_Converted | PatientPathwayIdentifier), OrganisationIdentifier_PatientPathwayIdentifierIssuer)
            /// </para>
            /// </summary>
            public virtual string OrganisationIdentifier_PatientPathwayIdentifierIssuer {
                get {
                    XElement x = this.GetElement(OrganisationIdentifier_PatientPathwayIdentifierIssuerXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(OrganisationIdentifier_PatientPathwayIdentifierIssuerXName, value, "OrganisationIdentifier_PatientPathwayIdentifierIssuer", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PatientPathwayIdentityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(UniqueBookingReferenceNumber_ConvertedXName, typeof(string));
                localElementDictionary.Add(PatientPathwayIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationIdentifier_PatientPathwayIdentifierIssuerXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
        /// </para>
        /// </summary>
        public partial class RTTPeriodCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_StatusXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_Status", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WaitingTimeMeasurementTypeXName = System.Xml.Linq.XName.Get("WaitingTimeMeasurementType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_StartDateXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_StartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferralToTreatmentPeriod_EndDateXName = System.Xml.Linq.XName.Get("ReferralToTreatmentPeriod_EndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTTPeriodCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator RTTPeriodCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RTTPeriodCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static RTTPeriodCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReferralToTreatmentPeriod_StatusXName), new NamedContentModelEntity(WaitingTimeMeasurementTypeXName), new NamedContentModelEntity(ReferralToTreatmentPeriod_StartDateXName), new NamedContentModelEntity(ReferralToTreatmentPeriod_EndDateXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public RTTPeriodCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual string ReferralToTreatmentPeriod_Status {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_StatusXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ReferralToTreatmentPeriod_StatusXName, value, "ReferralToTreatmentPeriod_Status", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_Status_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual string WaitingTimeMeasurementType {
                get {
                    XElement x = this.GetElement(WaitingTimeMeasurementTypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(WaitingTimeMeasurementTypeXName, value, "WaitingTimeMeasurementType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WaitingTimeMeasurementType_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferralToTreatmentPeriod_StartDate {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_StartDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferralToTreatmentPeriod_StartDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferralToTreatmentPeriod_StartDateXName, value, "ReferralToTreatmentPeriod_StartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_StartDate_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferralToTreatmentPeriod_Status, WaitingTimeMeasurementType, ReferralToTreatmentPeriod_StartDate?, ReferralToTreatmentPeriod_EndDate?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferralToTreatmentPeriod_EndDate {
                get {
                    XElement x = this.GetElement(ReferralToTreatmentPeriod_EndDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferralToTreatmentPeriod_EndDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferralToTreatmentPeriod_EndDateXName, value, "ReferralToTreatmentPeriod_EndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ReferralToTreatmentPeriod_EndDate_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<RTTPeriodCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ReferralToTreatmentPeriod_StatusXName, typeof(string));
                localElementDictionary.Add(WaitingTimeMeasurementTypeXName, typeof(string));
                localElementDictionary.Add(ReferralToTreatmentPeriod_StartDateXName, typeof(System.DateTime));
                localElementDictionary.Add(ReferralToTreatmentPeriod_EndDateXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PatientIdentity, PatientCharacteristics_EmergencyCare?, MentalHealthActLegalStatus*)
    /// </para>
    /// </summary>
    public partial class PersonGroupPatient_EC_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientIdentityXName = System.Xml.Linq.XName.Get("PatientIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientCharacteristics_EmergencyCareXName = System.Xml.Linq.XName.Get("PatientCharacteristics_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MentalHealthActLegalStatusXName = System.Xml.Linq.XName.Get("MentalHealthActLegalStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MentalHealthActLegalStatusLocalType> MentalHealthActLegalStatusField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonGroupPatient_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonGroupPatient_EC_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PersonGroupPatient_EC_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonGroupPatient_EC_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PatientIdentityXName), new NamedContentModelEntity(PatientCharacteristics_EmergencyCareXName), new NamedContentModelEntity(MentalHealthActLegalStatusXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PatientIdentity, PatientCharacteristics_EmergencyCare?, MentalHealthActLegalStatus*)
        /// </para>
        /// </summary>
        public PersonGroupPatient_EC_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity, PatientCharacteristics_EmergencyCare?, MentalHealthActLegalStatus*)
        /// </para>
        /// </summary>
        public virtual PatientIdentity PatientIdentity {
            get {
                XElement x = this.GetElement(PatientIdentityXName);
                return ((PatientIdentity)(x));
            }
            set {
                this.SetElement(PatientIdentityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity, PatientCharacteristics_EmergencyCare?, MentalHealthActLegalStatus*)
        /// </para>
        /// </summary>
        public virtual PatientCharacteristics_EmergencyCare_Structure PatientCharacteristics_EmergencyCare {
            get {
                XElement x = this.GetElement(PatientCharacteristics_EmergencyCareXName);
                return ((PatientCharacteristics_EmergencyCare_Structure)(x));
            }
            set {
                this.SetElement(PatientCharacteristics_EmergencyCareXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PatientIdentity, PatientCharacteristics_EmergencyCare?, MentalHealthActLegalStatus*)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_EC_Structure.MentalHealthActLegalStatusLocalType> MentalHealthActLegalStatus {
            get {
                if ((this.MentalHealthActLegalStatusField == null)) {
                    this.MentalHealthActLegalStatusField = new XTypedList<MentalHealthActLegalStatusLocalType>(this, LinqToXsdTypeManager.Instance, MentalHealthActLegalStatusXName);
                }
                return this.MentalHealthActLegalStatusField;
            }
            set {
                if ((value == null)) {
                    this.MentalHealthActLegalStatusField = null;
                }
                else {
                    if ((this.MentalHealthActLegalStatusField == null)) {
                        this.MentalHealthActLegalStatusField = XTypedList<MentalHealthActLegalStatusLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MentalHealthActLegalStatusXName);
                    }
                    else {
                        XTypedServices.SetList<MentalHealthActLegalStatusLocalType>(this.MentalHealthActLegalStatusField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonGroupPatient_EC_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PatientIdentityXName, typeof(PatientIdentity));
            localElementDictionary.Add(PatientCharacteristics_EmergencyCareXName, typeof(PatientCharacteristics_EmergencyCare_Structure));
            localElementDictionary.Add(MentalHealthActLegalStatusXName, typeof(MentalHealthActLegalStatusLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
        /// </para>
        /// </summary>
        public partial class MentalHealthActLegalStatusLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName = System.Xml.Linq.XName.Get("StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName = System.Xml.Linq.XName.Get("StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExpiryDate_MentalHealthActLegalStatusClassificationXName = System.Xml.Linq.XName.Get("ExpiryDate_MentalHealthActLegalStatusClassification", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExpiryTime_MentalHealthActLegalStatusClassificationXName = System.Xml.Linq.XName.Get("ExpiryTime_MentalHealthActLegalStatusClassification", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MentalHealthActLegalStatusClassificationCodeXName = System.Xml.Linq.XName.Get("MentalHealthActLegalStatusClassificationCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MentalHealthActLegalStatus", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator MentalHealthActLegalStatusLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MentalHealthActLegalStatusLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static MentalHealthActLegalStatusLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName), new NamedContentModelEntity(StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName), new NamedContentModelEntity(ExpiryDate_MentalHealthActLegalStatusClassificationXName), new NamedContentModelEntity(ExpiryTime_MentalHealthActLegalStatusClassificationXName), new NamedContentModelEntity(MentalHealthActLegalStatusClassificationCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public MentalHealthActLegalStatusLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod {
                get {
                    XElement x = this.GetElement(StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, value, "StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public virtual System.DateTime? StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod {
                get {
                    XElement x = this.GetElement(StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, value, "StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ExpiryDate_MentalHealthActLegalStatusClassification {
                get {
                    XElement x = this.GetElement(ExpiryDate_MentalHealthActLegalStatusClassificationXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ExpiryDate_MentalHealthActLegalStatusClassificationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ExpiryDate_MentalHealthActLegalStatusClassificationXName, value, "ExpiryDate_MentalHealthActLegalStatusClassification", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ExpiryTime_MentalHealthActLegalStatusClassification {
                get {
                    XElement x = this.GetElement(ExpiryTime_MentalHealthActLegalStatusClassificationXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ExpiryTime_MentalHealthActLegalStatusClassificationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ExpiryTime_MentalHealthActLegalStatusClassificationXName, value, "ExpiryTime_MentalHealthActLegalStatusClassification", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriod?, StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriod?, ExpiryDate_MentalHealthActLegalStatusClassification?, ExpiryTime_MentalHealthActLegalStatusClassification?, MentalHealthActLegalStatusClassificationCode)
            /// </para>
            /// </summary>
            public virtual string MentalHealthActLegalStatusClassificationCode {
                get {
                    XElement x = this.GetElement(MentalHealthActLegalStatusClassificationCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(MentalHealthActLegalStatusClassificationCodeXName, value, "MentalHealthActLegalStatusClassificationCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MH_Status_EC_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<MentalHealthActLegalStatusLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(StartDate_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, typeof(System.DateTime));
                localElementDictionary.Add(StartTime_MentalHealthActLegalStatusClassificationAssignmentPeriodXName, typeof(System.DateTime));
                localElementDictionary.Add(ExpiryDate_MentalHealthActLegalStatusClassificationXName, typeof(System.DateTime));
                localElementDictionary.Add(ExpiryTime_MentalHealthActLegalStatusClassificationXName, typeof(System.DateTime));
                localElementDictionary.Add(MentalHealthActLegalStatusClassificationCodeXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
    /// </para>
    /// </summary>
    public partial class PatientIdentity : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WithheldIdentity_StructureXName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnverifiedIdentity_StructureXName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientIdentity(XElement xe) { return XTypedServices.ToXTypedElement<PatientIdentity>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientIdentity() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(WithheldIdentity_StructureXName), new NamedContentModelEntity(VerifiedIdentity_StructureXName), new NamedContentModelEntity(UnverifiedIdentity_StructureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public PatientIdentity() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual WithheldIdentity_StructureLocalType WithheldIdentity_Structure {
            get {
                XElement x = this.GetElement(WithheldIdentity_StructureXName);
                return ((WithheldIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(WithheldIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual VerifiedIdentity_StructureLocalType VerifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(VerifiedIdentity_StructureXName);
                return ((VerifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(VerifiedIdentity_StructureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((WithheldIdentity_Structure | VerifiedIdentity_Structure | UnverifiedIdentity_Structure))
        /// </para>
        /// </summary>
        public virtual UnverifiedIdentity_StructureLocalType UnverifiedIdentity_Structure {
            get {
                XElement x = this.GetElement(UnverifiedIdentity_StructureXName);
                return ((UnverifiedIdentity_StructureLocalType)(x));
            }
            set {
                this.SetElement(UnverifiedIdentity_StructureXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientIdentity>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WithheldIdentity_StructureXName, typeof(WithheldIdentity_StructureLocalType));
            localElementDictionary.Add(VerifiedIdentity_StructureXName, typeof(VerifiedIdentity_StructureLocalType));
            localElementDictionary.Add(UnverifiedIdentity_StructureXName, typeof(UnverifiedIdentity_StructureLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationIdentifier_ResidenceResponsibility?, WithheldIdentityReason?)
        /// </para>
        /// </summary>
        public partial class WithheldIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationIdentifier_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WithheldIdentityReasonXName = System.Xml.Linq.XName.Get("WithheldIdentityReason", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCode1XName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WithheldIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WithheldIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WithheldIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WithheldIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(OrganisationIdentifier_ResidenceResponsibilityXName), new NamedContentModelEntity(WithheldIdentityReasonXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationIdentifier_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public WithheldIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationIdentifier_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Withheld_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationIdentifier_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string OrganisationIdentifier_ResidenceResponsibility {
                get {
                    XElement x = this.GetElement(OrganisationIdentifier_ResidenceResponsibilityXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationIdentifier_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationIdentifier_ResidenceResponsibilityXName, value, "OrganisationIdentifier_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (NHSNumberStatusIndicatorCode, OrganisationIdentifier_ResidenceResponsibility?, WithheldIdentityReason?)
            /// </para>
            /// </summary>
            public virtual string WithheldIdentityReason {
                get {
                    XElement x = this.GetElement(WithheldIdentityReasonXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(WithheldIdentityReasonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(WithheldIdentityReasonXName, value, "WithheldIdentityReason", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.WithheldIdentityReason_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode1 {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCode1XName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCode1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WithheldIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                localElementDictionary.Add(OrganisationIdentifier_ResidenceResponsibilityXName, typeof(string));
                localElementDictionary.Add(WithheldIdentityReasonXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocalIdentifierStructure?, DataElementStructure)
        /// </para>
        /// </summary>
        public partial class VerifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalIdentifierStructureXName = System.Xml.Linq.XName.Get("LocalIdentifierStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataElementStructureXName = System.Xml.Linq.XName.Get("DataElementStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocalIdentifierStructureXName), new NamedContentModelEntity(DataElementStructureXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocalIdentifierStructure?, DataElementStructure)
            /// </para>
            /// </summary>
            public VerifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (LocalIdentifierStructure?, DataElementStructure)
            /// </para>
            /// </summary>
            public virtual LocalIdentifierStructureLocalType LocalIdentifierStructure {
                get {
                    XElement x = this.GetElement(LocalIdentifierStructureXName);
                    return ((LocalIdentifierStructureLocalType)(x));
                }
                set {
                    this.SetElement(LocalIdentifierStructureXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (LocalIdentifierStructure?, DataElementStructure)
            /// </para>
            /// </summary>
            public virtual DataElementStructureLocalType DataElementStructure {
                get {
                    XElement x = this.GetElement(DataElementStructureXName);
                    return ((DataElementStructureLocalType)(x));
                }
                set {
                    this.SetElement(DataElementStructureXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalIdentifierStructureXName, typeof(LocalIdentifierStructureLocalType));
                localElementDictionary.Add(DataElementStructureXName, typeof(DataElementStructureLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)?
            /// </para>
            /// </summary>
            public partial class LocalIdentifierStructureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_ExtendedXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Extended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OrganisationIdentifier_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocalIdentifierStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator LocalIdentifierStructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocalIdentifierStructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static LocalIdentifierStructureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_ExtendedXName), new NamedContentModelEntity(OrganisationIdentifier_LocalPatientIdentifierXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)?
                /// </para>
                /// </summary>
                public LocalIdentifierStructureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)?
                /// </para>
                /// </summary>
                public virtual string LocalPatientIdentifier_Extended {
                    get {
                        XElement x = this.GetElement(LocalPatientIdentifier_ExtendedXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LocalPatientIdentifier_ExtendedXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LocalPatientIdentifier_ExtendedXName, value, "LocalPatientIdentifier_Extended", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_EC_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)?
                /// </para>
                /// </summary>
                public virtual string OrganisationIdentifier_LocalPatientIdentifier {
                    get {
                        XElement x = this.GetElement(OrganisationIdentifier_LocalPatientIdentifierXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(OrganisationIdentifier_LocalPatientIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(OrganisationIdentifier_LocalPatientIdentifierXName, value, "OrganisationIdentifier_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<LocalIdentifierStructureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocalPatientIdentifier_ExtendedXName, typeof(string));
                    localElementDictionary.Add(OrganisationIdentifier_LocalPatientIdentifierXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public partial class DataElementStructureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OrganisationIdentifier_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataElementStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DataElementStructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DataElementStructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DataElementStructureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationIdentifier_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public DataElementStructureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string NHSNumber {
                    get {
                        XElement x = this.GetElement(NHSNumberXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string NHSNumberStatusIndicatorCode {
                    get {
                        XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Verified_Type.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string PostcodeOfUsualAddress {
                    get {
                        XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string OrganisationIdentifier_ResidenceResponsibility {
                    get {
                        XElement x = this.GetElement(OrganisationIdentifier_ResidenceResponsibilityXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(OrganisationIdentifier_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(OrganisationIdentifier_ResidenceResponsibilityXName, value, "OrganisationIdentifier_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber, NHSNumberStatusIndicatorCode, PostcodeOfUsualAddress, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual System.DateTime? PersonBirthDate {
                    get {
                        XElement x = this.GetElement(PersonBirthDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DataElementStructureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(NHSNumberXName, typeof(string));
                    localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                    localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                    localElementDictionary.Add(OrganisationIdentifier_ResidenceResponsibilityXName, typeof(string));
                    localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LocalIdentifierStructure?, DataElementStructure, DataElementStructure2?)?)
        /// </para>
        /// </summary>
        public partial class UnverifiedIdentity_StructureLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocalIdentifierStructureXName = System.Xml.Linq.XName.Get("LocalIdentifierStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataElementStructureXName = System.Xml.Linq.XName.Get("DataElementStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataElementStructure2XName = System.Xml.Linq.XName.Get("DataElementStructure2", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnverifiedIdentity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UnverifiedIdentity_StructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UnverifiedIdentity_StructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UnverifiedIdentity_StructureLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(LocalIdentifierStructureXName), new NamedContentModelEntity(DataElementStructureXName), new NamedContentModelEntity(DataElementStructure2XName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((LocalIdentifierStructure?, DataElementStructure, DataElementStructure2?)?)
            /// </para>
            /// </summary>
            public UnverifiedIdentity_StructureLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalIdentifierStructure?, DataElementStructure, DataElementStructure2?)?)
            /// </para>
            /// </summary>
            public virtual LocalIdentifierStructureLocalType LocalIdentifierStructure {
                get {
                    XElement x = this.GetElement(LocalIdentifierStructureXName);
                    return ((LocalIdentifierStructureLocalType)(x));
                }
                set {
                    this.SetElement(LocalIdentifierStructureXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalIdentifierStructure?, DataElementStructure, DataElementStructure2?)?)
            /// </para>
            /// </summary>
            public virtual DataElementStructureLocalType DataElementStructure {
                get {
                    XElement x = this.GetElement(DataElementStructureXName);
                    return ((DataElementStructureLocalType)(x));
                }
                set {
                    this.SetElement(DataElementStructureXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((LocalIdentifierStructure?, DataElementStructure, DataElementStructure2?)?)
            /// </para>
            /// </summary>
            public virtual DataElementStructure2LocalType DataElementStructure2 {
                get {
                    XElement x = this.GetElement(DataElementStructure2XName);
                    return ((DataElementStructure2LocalType)(x));
                }
                set {
                    this.SetElement(DataElementStructure2XName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string NHSNumberStatusIndicatorCode {
                get {
                    XAttribute x = this.Attribute(NHSNumberStatusIndicatorCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NHSNumberStatusIndicatorCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UnverifiedIdentity_StructureLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocalIdentifierStructureXName, typeof(LocalIdentifierStructureLocalType));
                localElementDictionary.Add(DataElementStructureXName, typeof(DataElementStructureLocalType));
                localElementDictionary.Add(DataElementStructure2XName, typeof(DataElementStructure2LocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)
            /// </para>
            /// </summary>
            public partial class LocalIdentifierStructureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LocalPatientIdentifier_ExtendedXName = System.Xml.Linq.XName.Get("LocalPatientIdentifier_Extended", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OrganisationIdentifier_LocalPatientIdentifierXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_LocalPatientIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocalIdentifierStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator LocalIdentifierStructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LocalIdentifierStructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static LocalIdentifierStructureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocalPatientIdentifier_ExtendedXName), new NamedContentModelEntity(OrganisationIdentifier_LocalPatientIdentifierXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)
                /// </para>
                /// </summary>
                public LocalIdentifierStructureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)
                /// </para>
                /// </summary>
                public virtual string LocalPatientIdentifier_Extended {
                    get {
                        XElement x = this.GetElement(LocalPatientIdentifier_ExtendedXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(LocalPatientIdentifier_ExtendedXName, value, "LocalPatientIdentifier_Extended", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LocalPatientIdentifier_EC_Type.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LocalPatientIdentifier_Extended, OrganisationIdentifier_LocalPatientIdentifier)
                /// </para>
                /// </summary>
                public virtual string OrganisationIdentifier_LocalPatientIdentifier {
                    get {
                        XElement x = this.GetElement(OrganisationIdentifier_LocalPatientIdentifierXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(OrganisationIdentifier_LocalPatientIdentifierXName, value, "OrganisationIdentifier_LocalPatientIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<LocalIdentifierStructureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LocalPatientIdentifier_ExtendedXName, typeof(string));
                    localElementDictionary.Add(OrganisationIdentifier_LocalPatientIdentifierXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
            /// </para>
            /// </summary>
            public partial class DataElementStructureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NHSNumberXName = System.Xml.Linq.XName.Get("NHSNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NHSNumberStatusIndicatorCodeXName = System.Xml.Linq.XName.Get("NHSNumberStatusIndicatorCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PatientNameXName = System.Xml.Linq.XName.Get("PatientName", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PatientUsualAddressXName = System.Xml.Linq.XName.Get("PatientUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataElementStructure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DataElementStructureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DataElementStructureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DataElementStructureLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NHSNumberXName), new NamedContentModelEntity(NHSNumberStatusIndicatorCodeXName), new NamedContentModelEntity(PatientNameXName), new NamedContentModelEntity(PatientUsualAddressXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
                /// </para>
                /// </summary>
                public DataElementStructureLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
                /// </para>
                /// </summary>
                public virtual string NHSNumber {
                    get {
                        XElement x = this.GetElement(NHSNumberXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(NHSNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(NHSNumberXName, value, "NHSNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumber_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
                /// </para>
                /// </summary>
                public virtual string NHSNumberStatusIndicatorCode {
                    get {
                        XElement x = this.GetElement(NHSNumberStatusIndicatorCodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(NHSNumberStatusIndicatorCodeXName, value, "NHSNumberStatusIndicatorCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSNumberStatusIndicatorCode_Unverified_Type.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
                /// </para>
                /// </summary>
                public virtual PersonName_Structure PatientName {
                    get {
                        XElement x = this.GetElement(PatientNameXName);
                        return ((PersonName_Structure)(x));
                    }
                    set {
                        this.SetElement(PatientNameXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (NHSNumber?, NHSNumberStatusIndicatorCode, PatientName?, PatientUsualAddress?)
                /// </para>
                /// </summary>
                public virtual Address_Structure PatientUsualAddress {
                    get {
                        XElement x = this.GetElement(PatientUsualAddressXName);
                        return ((Address_Structure)(x));
                    }
                    set {
                        this.SetElement(PatientUsualAddressXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DataElementStructureLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(NHSNumberXName, typeof(string));
                    localElementDictionary.Add(NHSNumberStatusIndicatorCodeXName, typeof(string));
                    localElementDictionary.Add(PatientNameXName, typeof(PersonName_Structure));
                    localElementDictionary.Add(PatientUsualAddressXName, typeof(Address_Structure));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PostcodeOfUsualAddress?, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
            /// </para>
            /// </summary>
            public partial class DataElementStructure2LocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PostcodeOfUsualAddressXName = System.Xml.Linq.XName.Get("PostcodeOfUsualAddress", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OrganisationIdentifier_ResidenceResponsibilityXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_ResidenceResponsibility", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PersonBirthDateXName = System.Xml.Linq.XName.Get("PersonBirthDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataElementStructure2", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator DataElementStructure2LocalType(XElement xe) { return XTypedServices.ToXTypedElement<DataElementStructure2LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DataElementStructure2LocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PostcodeOfUsualAddressXName), new NamedContentModelEntity(OrganisationIdentifier_ResidenceResponsibilityXName), new NamedContentModelEntity(PersonBirthDateXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (PostcodeOfUsualAddress?, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public DataElementStructure2LocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (PostcodeOfUsualAddress?, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string PostcodeOfUsualAddress {
                    get {
                        XElement x = this.GetElement(PostcodeOfUsualAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(PostcodeOfUsualAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(PostcodeOfUsualAddressXName, value, "PostcodeOfUsualAddress", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PostcodeOfUsualAddress_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (PostcodeOfUsualAddress?, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual string OrganisationIdentifier_ResidenceResponsibility {
                    get {
                        XElement x = this.GetElement(OrganisationIdentifier_ResidenceResponsibilityXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(OrganisationIdentifier_ResidenceResponsibilityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(OrganisationIdentifier_ResidenceResponsibilityXName, value, "OrganisationIdentifier_ResidenceResponsibility", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OrgIden_EC_Type.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (PostcodeOfUsualAddress?, OrganisationIdentifier_ResidenceResponsibility?, PersonBirthDate?)
                /// </para>
                /// </summary>
                public virtual System.DateTime? PersonBirthDate {
                    get {
                        XElement x = this.GetElement(PersonBirthDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(PersonBirthDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(PersonBirthDateXName, value, "PersonBirthDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonBirthDate_Type.TypeDefinition);
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DataElementStructure2LocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(PostcodeOfUsualAddressXName, typeof(string));
                    localElementDictionary.Add(OrganisationIdentifier_ResidenceResponsibilityXName, typeof(string));
                    localElementDictionary.Add(PersonBirthDateXName, typeof(System.DateTime));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
    /// </para>
    /// </summary>
    public partial class PatientCharacteristics_EmergencyCare_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonStatedGenderCodeXName = System.Xml.Linq.XName.Get("PersonStatedGenderCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategoryXName = System.Xml.Linq.XName.Get("EthnicCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EthnicCategory2021XName = System.Xml.Linq.XName.Get("EthnicCategory2021", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AccommodationStatus_SnomedCtXName = System.Xml.Linq.XName.Get("AccommodationStatus_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PreferredSpokenLanguage_SnomedCtXName = System.Xml.Linq.XName.Get("PreferredSpokenLanguage_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AccessibleInformationProfessionalRequiredCode_SnomedCtXName = System.Xml.Linq.XName.Get("AccessibleInformationProfessionalRequiredCode_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterpreterLanguage_SnomedCtXName = System.Xml.Linq.XName.Get("InterpreterLanguage_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverseasVisitorChargingCategoryAtCdsActivityDateXName = System.Xml.Linq.XName.Get("OverseasVisitorChargingCategoryAtCdsActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientCharacteristics_EmergencyCare_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PatientCharacteristics_EmergencyCare_Structure(XElement xe) { return XTypedServices.ToXTypedElement<PatientCharacteristics_EmergencyCare_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PatientCharacteristics_EmergencyCare_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PersonStatedGenderCodeXName), new NamedContentModelEntity(EthnicCategoryXName), new NamedContentModelEntity(EthnicCategory2021XName), new NamedContentModelEntity(AccommodationStatus_SnomedCtXName), new NamedContentModelEntity(PreferredSpokenLanguage_SnomedCtXName), new NamedContentModelEntity(AccessibleInformationProfessionalRequiredCode_SnomedCtXName), new NamedContentModelEntity(InterpreterLanguage_SnomedCtXName), new NamedContentModelEntity(OverseasVisitorChargingCategoryAtCdsActivityDateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public PatientCharacteristics_EmergencyCare_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string PersonStatedGenderCode {
            get {
                XElement x = this.GetElement(PersonStatedGenderCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PersonStatedGenderCodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PersonStatedGenderCodeXName, value, "PersonStatedGenderCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonStatedGenderCode_EC_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory {
            get {
                XElement x = this.GetElement(EthnicCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategoryXName, value, "EthnicCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string EthnicCategory2021 {
            get {
                XElement x = this.GetElement(EthnicCategory2021XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EthnicCategory2021XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EthnicCategory2021XName, value, "EthnicCategory2021", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EthnicCategory2021_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string AccommodationStatus_SnomedCt {
            get {
                XElement x = this.GetElement(AccommodationStatus_SnomedCtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AccommodationStatus_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AccommodationStatus_SnomedCtXName, value, "AccommodationStatus_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string PreferredSpokenLanguage_SnomedCt {
            get {
                XElement x = this.GetElement(PreferredSpokenLanguage_SnomedCtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PreferredSpokenLanguage_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(PreferredSpokenLanguage_SnomedCtXName, value, "PreferredSpokenLanguage_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string AccessibleInformationProfessionalRequiredCode_SnomedCt {
            get {
                XElement x = this.GetElement(AccessibleInformationProfessionalRequiredCode_SnomedCtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AccessibleInformationProfessionalRequiredCode_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AccessibleInformationProfessionalRequiredCode_SnomedCtXName, value, "AccessibleInformationProfessionalRequiredCode_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string InterpreterLanguage_SnomedCt {
            get {
                XElement x = this.GetElement(InterpreterLanguage_SnomedCtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InterpreterLanguage_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InterpreterLanguage_SnomedCtXName, value, "InterpreterLanguage_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PersonStatedGenderCode?, EthnicCategory?, EthnicCategory2021?, AccommodationStatus_SnomedCt?, PreferredSpokenLanguage_SnomedCt?, AccessibleInformationProfessionalRequiredCode_SnomedCt?, InterpreterLanguage_SnomedCt?, OverseasVisitorChargingCategoryAtCdsActivityDate?)
        /// </para>
        /// </summary>
        public virtual string OverseasVisitorChargingCategoryAtCdsActivityDate {
            get {
                XElement x = this.GetElement(OverseasVisitorChargingCategoryAtCdsActivityDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OverseasVisitorChargingCategoryAtCdsActivityDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OverseasVisitorChargingCategoryAtCdsActivityDateXName, value, "OverseasVisitorChargingCategoryAtCdsActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Overseas_EC_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PatientCharacteristics_EmergencyCare_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonStatedGenderCodeXName, typeof(string));
            localElementDictionary.Add(EthnicCategoryXName, typeof(string));
            localElementDictionary.Add(EthnicCategory2021XName, typeof(string));
            localElementDictionary.Add(AccommodationStatus_SnomedCtXName, typeof(string));
            localElementDictionary.Add(PreferredSpokenLanguage_SnomedCtXName, typeof(string));
            localElementDictionary.Add(AccessibleInformationProfessionalRequiredCode_SnomedCtXName, typeof(string));
            localElementDictionary.Add(InterpreterLanguage_SnomedCtXName, typeof(string));
            localElementDictionary.Add(OverseasVisitorChargingCategoryAtCdsActivityDateXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
    /// </para>
    /// </summary>
    public partial class AttendanceOccurrence_EC_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AmbulanceDetailsXName = System.Xml.Linq.XName.Get("AmbulanceDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExpectedDateTimeOfTreatmentXName = System.Xml.Linq.XName.Get("ExpectedDateTimeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExpectedDateTimeOfTreatmentLocalType> ExpectedDateTimeOfTreatmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmergencyCareAttendanceActivityCharacteristicsXName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodedScoredAssessmentXName = System.Xml.Linq.XName.Get("CodedScoredAssessment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodedScoredAssessmentLocalType> CodedScoredAssessmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodedClinicalObservationsXName = System.Xml.Linq.XName.Get("CodedClinicalObservations", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodedClinicalObservationsLocalType> CodedClinicalObservationsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodedClinicalFindingXName = System.Xml.Linq.XName.Get("CodedClinicalFinding", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CodedClinicalFindingLocalType> CodedClinicalFindingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InjuryCharacteristicsXName = System.Xml.Linq.XName.Get("InjuryCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PatientClinicalHistoryXName = System.Xml.Linq.XName.Get("PatientClinicalHistory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceAgreementDetailsXName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CareProfessionals_EmergencyCareXName = System.Xml.Linq.XName.Get("CareProfessionals_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CareProfessionals_EmergencyCareLocalType> CareProfessionals_EmergencyCareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmergencyCareDiagnoses_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDiagnoses_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmergencyCareDiagnoses_SnomedCtLocalType> EmergencyCareDiagnoses_SnomedCtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmergencyCareInvestigations_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInvestigations_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmergencyCareInvestigations_SnomedCtLocalType> EmergencyCareInvestigations_SnomedCtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmergencyCareTreatments_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareTreatments_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmergencyCareTreatments_SnomedCtLocalType> EmergencyCareTreatments_SnomedCtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferralsToOtherServicesXName = System.Xml.Linq.XName.Get("ReferralsToOtherServices", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReferralsToOtherServicesLocalType> ReferralsToOtherServicesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DischargeFromEmergencyCareXName = System.Xml.Linq.XName.Get("DischargeFromEmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResearchAndDiseaseOutbreakNotificationXName = System.Xml.Linq.XName.Get("ResearchAndDiseaseOutbreakNotification", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AttendanceOccurrence_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AttendanceOccurrence_EC_Structure(XElement xe) { return XTypedServices.ToXTypedElement<AttendanceOccurrence_EC_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AttendanceOccurrence_EC_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AmbulanceDetailsXName), new NamedContentModelEntity(ExpectedDateTimeOfTreatmentXName), new NamedContentModelEntity(EmergencyCareAttendanceActivityCharacteristicsXName), new NamedContentModelEntity(CodedScoredAssessmentXName), new NamedContentModelEntity(CodedClinicalObservationsXName), new NamedContentModelEntity(CodedClinicalFindingXName), new NamedContentModelEntity(InjuryCharacteristicsXName), new NamedContentModelEntity(PatientClinicalHistoryXName), new NamedContentModelEntity(ServiceAgreementDetailsXName), new NamedContentModelEntity(CareProfessionals_EmergencyCareXName), new NamedContentModelEntity(EmergencyCareDiagnoses_SnomedCtXName), new NamedContentModelEntity(EmergencyCareInvestigations_SnomedCtXName), new NamedContentModelEntity(EmergencyCareTreatments_SnomedCtXName), new NamedContentModelEntity(ReferralsToOtherServicesXName), new NamedContentModelEntity(DischargeFromEmergencyCareXName), new NamedContentModelEntity(ResearchAndDiseaseOutbreakNotificationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public AttendanceOccurrence_EC_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual AmbulanceDetailsLocalType AmbulanceDetails {
            get {
                XElement x = this.GetElement(AmbulanceDetailsXName);
                return ((AmbulanceDetailsLocalType)(x));
            }
            set {
                this.SetElement(AmbulanceDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.ExpectedDateTimeOfTreatmentLocalType> ExpectedDateTimeOfTreatment {
            get {
                if ((this.ExpectedDateTimeOfTreatmentField == null)) {
                    this.ExpectedDateTimeOfTreatmentField = new XTypedList<ExpectedDateTimeOfTreatmentLocalType>(this, LinqToXsdTypeManager.Instance, ExpectedDateTimeOfTreatmentXName);
                }
                return this.ExpectedDateTimeOfTreatmentField;
            }
            set {
                if ((value == null)) {
                    this.ExpectedDateTimeOfTreatmentField = null;
                }
                else {
                    if ((this.ExpectedDateTimeOfTreatmentField == null)) {
                        this.ExpectedDateTimeOfTreatmentField = XTypedList<ExpectedDateTimeOfTreatmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExpectedDateTimeOfTreatmentXName);
                    }
                    else {
                        XTypedServices.SetList<ExpectedDateTimeOfTreatmentLocalType>(this.ExpectedDateTimeOfTreatmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual EmergencyCareAttendanceActivityCharacteristicsLocalType EmergencyCareAttendanceActivityCharacteristics {
            get {
                XElement x = this.GetElement(EmergencyCareAttendanceActivityCharacteristicsXName);
                return ((EmergencyCareAttendanceActivityCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(EmergencyCareAttendanceActivityCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.CodedScoredAssessmentLocalType> CodedScoredAssessment {
            get {
                if ((this.CodedScoredAssessmentField == null)) {
                    this.CodedScoredAssessmentField = new XTypedList<CodedScoredAssessmentLocalType>(this, LinqToXsdTypeManager.Instance, CodedScoredAssessmentXName);
                }
                return this.CodedScoredAssessmentField;
            }
            set {
                if ((value == null)) {
                    this.CodedScoredAssessmentField = null;
                }
                else {
                    if ((this.CodedScoredAssessmentField == null)) {
                        this.CodedScoredAssessmentField = XTypedList<CodedScoredAssessmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CodedScoredAssessmentXName);
                    }
                    else {
                        XTypedServices.SetList<CodedScoredAssessmentLocalType>(this.CodedScoredAssessmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.CodedClinicalObservationsLocalType> CodedClinicalObservations {
            get {
                if ((this.CodedClinicalObservationsField == null)) {
                    this.CodedClinicalObservationsField = new XTypedList<CodedClinicalObservationsLocalType>(this, LinqToXsdTypeManager.Instance, CodedClinicalObservationsXName);
                }
                return this.CodedClinicalObservationsField;
            }
            set {
                if ((value == null)) {
                    this.CodedClinicalObservationsField = null;
                }
                else {
                    if ((this.CodedClinicalObservationsField == null)) {
                        this.CodedClinicalObservationsField = XTypedList<CodedClinicalObservationsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CodedClinicalObservationsXName);
                    }
                    else {
                        XTypedServices.SetList<CodedClinicalObservationsLocalType>(this.CodedClinicalObservationsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.CodedClinicalFindingLocalType> CodedClinicalFinding {
            get {
                if ((this.CodedClinicalFindingField == null)) {
                    this.CodedClinicalFindingField = new XTypedList<CodedClinicalFindingLocalType>(this, LinqToXsdTypeManager.Instance, CodedClinicalFindingXName);
                }
                return this.CodedClinicalFindingField;
            }
            set {
                if ((value == null)) {
                    this.CodedClinicalFindingField = null;
                }
                else {
                    if ((this.CodedClinicalFindingField == null)) {
                        this.CodedClinicalFindingField = XTypedList<CodedClinicalFindingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CodedClinicalFindingXName);
                    }
                    else {
                        XTypedServices.SetList<CodedClinicalFindingLocalType>(this.CodedClinicalFindingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual InjuryCharacteristicsLocalType InjuryCharacteristics {
            get {
                XElement x = this.GetElement(InjuryCharacteristicsXName);
                return ((InjuryCharacteristicsLocalType)(x));
            }
            set {
                this.SetElement(InjuryCharacteristicsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual PatientClinicalHistoryLocalType PatientClinicalHistory {
            get {
                XElement x = this.GetElement(PatientClinicalHistoryXName);
                return ((PatientClinicalHistoryLocalType)(x));
            }
            set {
                this.SetElement(PatientClinicalHistoryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual ServiceAgreementDetailsLocalType ServiceAgreementDetails {
            get {
                XElement x = this.GetElement(ServiceAgreementDetailsXName);
                return ((ServiceAgreementDetailsLocalType)(x));
            }
            set {
                this.SetElement(ServiceAgreementDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.CareProfessionals_EmergencyCareLocalType> CareProfessionals_EmergencyCare {
            get {
                if ((this.CareProfessionals_EmergencyCareField == null)) {
                    this.CareProfessionals_EmergencyCareField = new XTypedList<CareProfessionals_EmergencyCareLocalType>(this, LinqToXsdTypeManager.Instance, CareProfessionals_EmergencyCareXName);
                }
                return this.CareProfessionals_EmergencyCareField;
            }
            set {
                if ((value == null)) {
                    this.CareProfessionals_EmergencyCareField = null;
                }
                else {
                    if ((this.CareProfessionals_EmergencyCareField == null)) {
                        this.CareProfessionals_EmergencyCareField = XTypedList<CareProfessionals_EmergencyCareLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CareProfessionals_EmergencyCareXName);
                    }
                    else {
                        XTypedServices.SetList<CareProfessionals_EmergencyCareLocalType>(this.CareProfessionals_EmergencyCareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.EmergencyCareDiagnoses_SnomedCtLocalType> EmergencyCareDiagnoses_SnomedCt {
            get {
                if ((this.EmergencyCareDiagnoses_SnomedCtField == null)) {
                    this.EmergencyCareDiagnoses_SnomedCtField = new XTypedList<EmergencyCareDiagnoses_SnomedCtLocalType>(this, LinqToXsdTypeManager.Instance, EmergencyCareDiagnoses_SnomedCtXName);
                }
                return this.EmergencyCareDiagnoses_SnomedCtField;
            }
            set {
                if ((value == null)) {
                    this.EmergencyCareDiagnoses_SnomedCtField = null;
                }
                else {
                    if ((this.EmergencyCareDiagnoses_SnomedCtField == null)) {
                        this.EmergencyCareDiagnoses_SnomedCtField = XTypedList<EmergencyCareDiagnoses_SnomedCtLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EmergencyCareDiagnoses_SnomedCtXName);
                    }
                    else {
                        XTypedServices.SetList<EmergencyCareDiagnoses_SnomedCtLocalType>(this.EmergencyCareDiagnoses_SnomedCtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.EmergencyCareInvestigations_SnomedCtLocalType> EmergencyCareInvestigations_SnomedCt {
            get {
                if ((this.EmergencyCareInvestigations_SnomedCtField == null)) {
                    this.EmergencyCareInvestigations_SnomedCtField = new XTypedList<EmergencyCareInvestigations_SnomedCtLocalType>(this, LinqToXsdTypeManager.Instance, EmergencyCareInvestigations_SnomedCtXName);
                }
                return this.EmergencyCareInvestigations_SnomedCtField;
            }
            set {
                if ((value == null)) {
                    this.EmergencyCareInvestigations_SnomedCtField = null;
                }
                else {
                    if ((this.EmergencyCareInvestigations_SnomedCtField == null)) {
                        this.EmergencyCareInvestigations_SnomedCtField = XTypedList<EmergencyCareInvestigations_SnomedCtLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EmergencyCareInvestigations_SnomedCtXName);
                    }
                    else {
                        XTypedServices.SetList<EmergencyCareInvestigations_SnomedCtLocalType>(this.EmergencyCareInvestigations_SnomedCtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.EmergencyCareTreatments_SnomedCtLocalType> EmergencyCareTreatments_SnomedCt {
            get {
                if ((this.EmergencyCareTreatments_SnomedCtField == null)) {
                    this.EmergencyCareTreatments_SnomedCtField = new XTypedList<EmergencyCareTreatments_SnomedCtLocalType>(this, LinqToXsdTypeManager.Instance, EmergencyCareTreatments_SnomedCtXName);
                }
                return this.EmergencyCareTreatments_SnomedCtField;
            }
            set {
                if ((value == null)) {
                    this.EmergencyCareTreatments_SnomedCtField = null;
                }
                else {
                    if ((this.EmergencyCareTreatments_SnomedCtField == null)) {
                        this.EmergencyCareTreatments_SnomedCtField = XTypedList<EmergencyCareTreatments_SnomedCtLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EmergencyCareTreatments_SnomedCtXName);
                    }
                    else {
                        XTypedServices.SetList<EmergencyCareTreatments_SnomedCtLocalType>(this.EmergencyCareTreatments_SnomedCtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure.ReferralsToOtherServicesLocalType> ReferralsToOtherServices {
            get {
                if ((this.ReferralsToOtherServicesField == null)) {
                    this.ReferralsToOtherServicesField = new XTypedList<ReferralsToOtherServicesLocalType>(this, LinqToXsdTypeManager.Instance, ReferralsToOtherServicesXName);
                }
                return this.ReferralsToOtherServicesField;
            }
            set {
                if ((value == null)) {
                    this.ReferralsToOtherServicesField = null;
                }
                else {
                    if ((this.ReferralsToOtherServicesField == null)) {
                        this.ReferralsToOtherServicesField = XTypedList<ReferralsToOtherServicesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReferralsToOtherServicesXName);
                    }
                    else {
                        XTypedServices.SetList<ReferralsToOtherServicesLocalType>(this.ReferralsToOtherServicesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual DischargeFromEmergencyCareLocalType DischargeFromEmergencyCare {
            get {
                XElement x = this.GetElement(DischargeFromEmergencyCareXName);
                return ((DischargeFromEmergencyCareLocalType)(x));
            }
            set {
                this.SetElement(DischargeFromEmergencyCareXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AmbulanceDetails?, ExpectedDateTimeOfTreatment*, EmergencyCareAttendanceActivityCharacteristics, CodedScoredAssessment*, CodedClinicalObservations*, CodedClinicalFinding*, InjuryCharacteristics?, PatientClinicalHistory?, ServiceAgreementDetails, CareProfessionals_EmergencyCare*, EmergencyCareDiagnoses_SnomedCt*, EmergencyCareInvestigations_SnomedCt*, EmergencyCareTreatments_SnomedCt*, ReferralsToOtherServices*, DischargeFromEmergencyCare?, ResearchAndDiseaseOutbreakNotification?)
        /// </para>
        /// </summary>
        public virtual ResearchAndDiseaseOutbreakNotificationLocalType ResearchAndDiseaseOutbreakNotification {
            get {
                XElement x = this.GetElement(ResearchAndDiseaseOutbreakNotificationXName);
                return ((ResearchAndDiseaseOutbreakNotificationLocalType)(x));
            }
            set {
                this.SetElement(ResearchAndDiseaseOutbreakNotificationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AttendanceOccurrence_EC_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AmbulanceDetailsXName, typeof(AmbulanceDetailsLocalType));
            localElementDictionary.Add(ExpectedDateTimeOfTreatmentXName, typeof(ExpectedDateTimeOfTreatmentLocalType));
            localElementDictionary.Add(EmergencyCareAttendanceActivityCharacteristicsXName, typeof(EmergencyCareAttendanceActivityCharacteristicsLocalType));
            localElementDictionary.Add(CodedScoredAssessmentXName, typeof(CodedScoredAssessmentLocalType));
            localElementDictionary.Add(CodedClinicalObservationsXName, typeof(CodedClinicalObservationsLocalType));
            localElementDictionary.Add(CodedClinicalFindingXName, typeof(CodedClinicalFindingLocalType));
            localElementDictionary.Add(InjuryCharacteristicsXName, typeof(InjuryCharacteristicsLocalType));
            localElementDictionary.Add(PatientClinicalHistoryXName, typeof(PatientClinicalHistoryLocalType));
            localElementDictionary.Add(ServiceAgreementDetailsXName, typeof(ServiceAgreementDetailsLocalType));
            localElementDictionary.Add(CareProfessionals_EmergencyCareXName, typeof(CareProfessionals_EmergencyCareLocalType));
            localElementDictionary.Add(EmergencyCareDiagnoses_SnomedCtXName, typeof(EmergencyCareDiagnoses_SnomedCtLocalType));
            localElementDictionary.Add(EmergencyCareInvestigations_SnomedCtXName, typeof(EmergencyCareInvestigations_SnomedCtLocalType));
            localElementDictionary.Add(EmergencyCareTreatments_SnomedCtXName, typeof(EmergencyCareTreatments_SnomedCtLocalType));
            localElementDictionary.Add(ReferralsToOtherServicesXName, typeof(ReferralsToOtherServicesLocalType));
            localElementDictionary.Add(DischargeFromEmergencyCareXName, typeof(DischargeFromEmergencyCareLocalType));
            localElementDictionary.Add(ResearchAndDiseaseOutbreakNotificationXName, typeof(ResearchAndDiseaseOutbreakNotificationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AmbulanceCallIdentifier?, OrganisationIdentifier_ConveyingAmbulanceTrust?, CareContactIdentifier_AmbulanceService?)
        /// </para>
        /// </summary>
        public partial class AmbulanceDetailsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AmbulanceCallIdentifierXName = System.Xml.Linq.XName.Get("AmbulanceCallIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationIdentifier_ConveyingAmbulanceTrustXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_ConveyingAmbulanceTrust", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CareContactIdentifier_AmbulanceServiceXName = System.Xml.Linq.XName.Get("CareContactIdentifier_AmbulanceService", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AmbulanceDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AmbulanceDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AmbulanceDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AmbulanceDetailsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AmbulanceCallIdentifierXName), new NamedContentModelEntity(OrganisationIdentifier_ConveyingAmbulanceTrustXName), new NamedContentModelEntity(CareContactIdentifier_AmbulanceServiceXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AmbulanceCallIdentifier?, OrganisationIdentifier_ConveyingAmbulanceTrust?, CareContactIdentifier_AmbulanceService?)
            /// </para>
            /// </summary>
            public AmbulanceDetailsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AmbulanceCallIdentifier?, OrganisationIdentifier_ConveyingAmbulanceTrust?, CareContactIdentifier_AmbulanceService?)
            /// </para>
            /// </summary>
            public virtual string AmbulanceCallIdentifier {
                get {
                    XElement x = this.GetElement(AmbulanceCallIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AmbulanceCallIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AmbulanceCallIdentifierXName, value, "AmbulanceCallIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_20_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AmbulanceCallIdentifier?, OrganisationIdentifier_ConveyingAmbulanceTrust?, CareContactIdentifier_AmbulanceService?)
            /// </para>
            /// </summary>
            public virtual string OrganisationIdentifier_ConveyingAmbulanceTrust {
                get {
                    XElement x = this.GetElement(OrganisationIdentifier_ConveyingAmbulanceTrustXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationIdentifier_ConveyingAmbulanceTrustXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationIdentifier_ConveyingAmbulanceTrustXName, value, "OrganisationIdentifier_ConveyingAmbulanceTrust", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_3_5_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AmbulanceCallIdentifier?, OrganisationIdentifier_ConveyingAmbulanceTrust?, CareContactIdentifier_AmbulanceService?)
            /// </para>
            /// </summary>
            public virtual string CareContactIdentifier_AmbulanceService {
                get {
                    XElement x = this.GetElement(CareContactIdentifier_AmbulanceServiceXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CareContactIdentifier_AmbulanceServiceXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CareContactIdentifier_AmbulanceServiceXName, value, "CareContactIdentifier_AmbulanceService", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_20_EC_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AmbulanceDetailsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AmbulanceCallIdentifierXName, typeof(string));
                localElementDictionary.Add(OrganisationIdentifier_ConveyingAmbulanceTrustXName, typeof(string));
                localElementDictionary.Add(CareContactIdentifier_AmbulanceServiceXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EmergencyCareExpectedDateTimestampTreatment?, EmergencyCareTreatmentTimestamp?)
        /// </para>
        /// </summary>
        public partial class ExpectedDateTimeOfTreatmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareExpectedDateTimestampTreatmentXName = System.Xml.Linq.XName.Get("EmergencyCareExpectedDateTimestampTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareTreatmentTimestampXName = System.Xml.Linq.XName.Get("EmergencyCareTreatmentTimestamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExpectedDateTimeOfTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ExpectedDateTimeOfTreatmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExpectedDateTimeOfTreatmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ExpectedDateTimeOfTreatmentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EmergencyCareExpectedDateTimestampTreatmentXName), new NamedContentModelEntity(EmergencyCareTreatmentTimestampXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EmergencyCareExpectedDateTimestampTreatment?, EmergencyCareTreatmentTimestamp?)
            /// </para>
            /// </summary>
            public ExpectedDateTimeOfTreatmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareExpectedDateTimestampTreatment?, EmergencyCareTreatmentTimestamp?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareExpectedDateTimestampTreatment {
                get {
                    XElement x = this.GetElement(EmergencyCareExpectedDateTimestampTreatmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareExpectedDateTimestampTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareExpectedDateTimestampTreatmentXName, value, "EmergencyCareExpectedDateTimestampTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareExpectedDateTimestampTreatment?, EmergencyCareTreatmentTimestamp?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareTreatmentTimestamp {
                get {
                    XElement x = this.GetElement(EmergencyCareTreatmentTimestampXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareTreatmentTimestampXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareTreatmentTimestampXName, value, "EmergencyCareTreatmentTimestamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ExpectedDateTimeOfTreatmentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EmergencyCareExpectedDateTimestampTreatmentXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareTreatmentTimestampXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
        /// </para>
        /// </summary>
        public partial class EmergencyCareAttendanceActivityCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareAttendanceIdentifierXName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareArrivalMode_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareArrivalMode_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareAttendanceCategoryXName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceCategory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareAttendanceSource_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceSource_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName = System.Xml.Linq.XName.Get("OrganisationSiteIdentifier_EmergencyCareAttendanceSource", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareArrivalDateXName = System.Xml.Linq.XName.Get("EmergencyCareArrivalDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareArrivalTimeXName = System.Xml.Linq.XName.Get("EmergencyCareArrivalTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AgeAtCdsActivityDateXName = System.Xml.Linq.XName.Get("AgeAtCdsActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInitialAssessmentDateXName = System.Xml.Linq.XName.Get("EmergencyCareInitialAssessmentDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInitialAssessmentTimeXName = System.Xml.Linq.XName.Get("EmergencyCareInitialAssessmentTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareAcuity_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareAcuity_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareChiefComplaint_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareChiefComplaint_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDateSeenForTreatmentXName = System.Xml.Linq.XName.Get("EmergencyCareDateSeenForTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareTimeSeenForTreatmentXName = System.Xml.Linq.XName.Get("EmergencyCareTimeSeenForTreatment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCareAttendanceActivityCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EmergencyCareAttendanceActivityCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCareAttendanceActivityCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EmergencyCareAttendanceActivityCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EmergencyCareAttendanceIdentifierXName), new NamedContentModelEntity(EmergencyCareArrivalMode_SnomedCtXName), new NamedContentModelEntity(EmergencyCareAttendanceCategoryXName), new NamedContentModelEntity(EmergencyCareAttendanceSource_SnomedCtXName), new NamedContentModelEntity(OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName), new NamedContentModelEntity(EmergencyCareArrivalDateXName), new NamedContentModelEntity(EmergencyCareArrivalTimeXName), new NamedContentModelEntity(AgeAtCdsActivityDateXName), new NamedContentModelEntity(EmergencyCareInitialAssessmentDateXName), new NamedContentModelEntity(EmergencyCareInitialAssessmentTimeXName), new NamedContentModelEntity(EmergencyCareAcuity_SnomedCtXName), new NamedContentModelEntity(EmergencyCareChiefComplaint_SnomedCtXName), new NamedContentModelEntity(EmergencyCareDateSeenForTreatmentXName), new NamedContentModelEntity(EmergencyCareTimeSeenForTreatmentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public EmergencyCareAttendanceActivityCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareAttendanceIdentifier {
                get {
                    XElement x = this.GetElement(EmergencyCareAttendanceIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareAttendanceIdentifierXName, value, "EmergencyCareAttendanceIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_min_1_max_12_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareArrivalMode_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareArrivalMode_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareArrivalMode_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareArrivalMode_SnomedCtXName, value, "EmergencyCareArrivalMode_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareAttendanceCategory {
                get {
                    XElement x = this.GetElement(EmergencyCareAttendanceCategoryXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareAttendanceCategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareAttendanceCategoryXName, value, "EmergencyCareAttendanceCategory", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendCat_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareAttendanceSource_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareAttendanceSource_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareAttendanceSource_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareAttendanceSource_SnomedCtXName, value, "EmergencyCareAttendanceSource_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string OrganisationSiteIdentifier_EmergencyCareAttendanceSource {
                get {
                    XElement x = this.GetElement(OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName, value, "OrganisationSiteIdentifier_EmergencyCareAttendanceSource", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_5_9_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime EmergencyCareArrivalDate {
                get {
                    XElement x = this.GetElement(EmergencyCareArrivalDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareArrivalDateXName, value, "EmergencyCareArrivalDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime EmergencyCareArrivalTime {
                get {
                    XElement x = this.GetElement(EmergencyCareArrivalTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareArrivalTimeXName, value, "EmergencyCareArrivalTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual decimal AgeAtCdsActivityDate {
                get {
                    XElement x = this.GetElement(AgeAtCdsActivityDateXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
                }
                set {
                    this.SetElementWithValidation(AgeAtCdsActivityDateXName, value, "AgeAtCdsActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AgeAtCDSActivityDate_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareInitialAssessmentDate {
                get {
                    XElement x = this.GetElement(EmergencyCareInitialAssessmentDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInitialAssessmentDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInitialAssessmentDateXName, value, "EmergencyCareInitialAssessmentDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareInitialAssessmentTime {
                get {
                    XElement x = this.GetElement(EmergencyCareInitialAssessmentTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInitialAssessmentTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInitialAssessmentTimeXName, value, "EmergencyCareInitialAssessmentTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareAcuity_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareAcuity_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareAcuity_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareAcuity_SnomedCtXName, value, "EmergencyCareAcuity_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareChiefComplaint_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareChiefComplaint_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareChiefComplaint_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareChiefComplaint_SnomedCtXName, value, "EmergencyCareChiefComplaint_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareDateSeenForTreatment {
                get {
                    XElement x = this.GetElement(EmergencyCareDateSeenForTreatmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDateSeenForTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDateSeenForTreatmentXName, value, "EmergencyCareDateSeenForTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareAttendanceIdentifier, EmergencyCareArrivalMode_SnomedCt?, EmergencyCareAttendanceCategory?, EmergencyCareAttendanceSource_SnomedCt?, OrganisationSiteIdentifier_EmergencyCareAttendanceSource?, EmergencyCareArrivalDate, EmergencyCareArrivalTime, AgeAtCdsActivityDate, EmergencyCareInitialAssessmentDate?, EmergencyCareInitialAssessmentTime?, EmergencyCareAcuity_SnomedCt?, EmergencyCareChiefComplaint_SnomedCt?, EmergencyCareDateSeenForTreatment?, EmergencyCareTimeSeenForTreatment?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareTimeSeenForTreatment {
                get {
                    XElement x = this.GetElement(EmergencyCareTimeSeenForTreatmentXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareTimeSeenForTreatmentXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareTimeSeenForTreatmentXName, value, "EmergencyCareTimeSeenForTreatment", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EmergencyCareAttendanceActivityCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EmergencyCareAttendanceIdentifierXName, typeof(string));
                localElementDictionary.Add(EmergencyCareArrivalMode_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareAttendanceCategoryXName, typeof(string));
                localElementDictionary.Add(EmergencyCareAttendanceSource_SnomedCtXName, typeof(string));
                localElementDictionary.Add(OrganisationSiteIdentifier_EmergencyCareAttendanceSourceXName, typeof(string));
                localElementDictionary.Add(EmergencyCareArrivalDateXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareArrivalTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(AgeAtCdsActivityDateXName, typeof(decimal));
                localElementDictionary.Add(EmergencyCareInitialAssessmentDateXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareInitialAssessmentTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareAcuity_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareChiefComplaint_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDateSeenForTreatmentXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareTimeSeenForTreatmentXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CodedAssessmentToolType_SnomedCt, PersonScore?, AssessmentToolValidationTimestamp)
        /// </para>
        /// </summary>
        public partial class CodedScoredAssessmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedAssessmentToolType_SnomedCtXName = System.Xml.Linq.XName.Get("CodedAssessmentToolType_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PersonScoreXName = System.Xml.Linq.XName.Get("PersonScore", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AssessmentToolValidationTimestampXName = System.Xml.Linq.XName.Get("AssessmentToolValidationTimestamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodedScoredAssessment", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CodedScoredAssessmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CodedScoredAssessmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CodedScoredAssessmentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CodedAssessmentToolType_SnomedCtXName), new NamedContentModelEntity(PersonScoreXName), new NamedContentModelEntity(AssessmentToolValidationTimestampXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CodedAssessmentToolType_SnomedCt, PersonScore?, AssessmentToolValidationTimestamp)
            /// </para>
            /// </summary>
            public CodedScoredAssessmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedAssessmentToolType_SnomedCt, PersonScore?, AssessmentToolValidationTimestamp)
            /// </para>
            /// </summary>
            public virtual string CodedAssessmentToolType_SnomedCt {
                get {
                    XElement x = this.GetElement(CodedAssessmentToolType_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedAssessmentToolType_SnomedCtXName, value, "CodedAssessmentToolType_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CodedAssessmentToolType_SnomedCt, PersonScore?, AssessmentToolValidationTimestamp)
            /// </para>
            /// </summary>
            public virtual string PersonScore {
                get {
                    XElement x = this.GetElement(PersonScoreXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PersonScoreXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PersonScoreXName, value, "PersonScore", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_5_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedAssessmentToolType_SnomedCt, PersonScore?, AssessmentToolValidationTimestamp)
            /// </para>
            /// </summary>
            public virtual System.DateTime AssessmentToolValidationTimestamp {
                get {
                    XElement x = this.GetElement(AssessmentToolValidationTimestampXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElementWithValidation(AssessmentToolValidationTimestampXName, value, "AssessmentToolValidationTimestamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CodedScoredAssessmentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CodedAssessmentToolType_SnomedCtXName, typeof(string));
                localElementDictionary.Add(PersonScoreXName, typeof(string));
                localElementDictionary.Add(AssessmentToolValidationTimestampXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
        /// </para>
        /// </summary>
        public partial class CodedClinicalObservationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedObservation_SnomedCtXName = System.Xml.Linq.XName.Get("CodedObservation_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ObservationValueXName = System.Xml.Linq.XName.Get("ObservationValue", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UCUMunitOfMeasurementXName = System.Xml.Linq.XName.Get("UCUMunitOfMeasurement", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedObservationTimeStampXName = System.Xml.Linq.XName.Get("CodedObservationTimeStamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodedClinicalObservations", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CodedClinicalObservationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CodedClinicalObservationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CodedClinicalObservationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CodedObservation_SnomedCtXName), new NamedContentModelEntity(ObservationValueXName), new NamedContentModelEntity(UCUMunitOfMeasurementXName), new NamedContentModelEntity(CodedObservationTimeStampXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
            /// </para>
            /// </summary>
            public CodedClinicalObservationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
            /// </para>
            /// </summary>
            public virtual string CodedObservation_SnomedCt {
                get {
                    XElement x = this.GetElement(CodedObservation_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedObservation_SnomedCtXName, value, "CodedObservation_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
            /// </para>
            /// </summary>
            public virtual string ObservationValue {
                get {
                    XElement x = this.GetElement(ObservationValueXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ObservationValueXName, value, "ObservationValue", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_10_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
            /// </para>
            /// </summary>
            public virtual string UCUMunitOfMeasurement {
                get {
                    XElement x = this.GetElement(UCUMunitOfMeasurementXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(UCUMunitOfMeasurementXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(UCUMunitOfMeasurementXName, value, "UCUMunitOfMeasurement", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_10_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedObservation_SnomedCt, ObservationValue, UCUMunitOfMeasurement?, CodedObservationTimeStamp)
            /// </para>
            /// </summary>
            public virtual System.DateTime CodedObservationTimeStamp {
                get {
                    XElement x = this.GetElement(CodedObservationTimeStampXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedObservationTimeStampXName, value, "CodedObservationTimeStamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CodedClinicalObservationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CodedObservation_SnomedCtXName, typeof(string));
                localElementDictionary.Add(ObservationValueXName, typeof(string));
                localElementDictionary.Add(UCUMunitOfMeasurementXName, typeof(string));
                localElementDictionary.Add(CodedObservationTimeStampXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CodedFinding_SnomedCt, CodedFinding_TimeStamp)
        /// </para>
        /// </summary>
        public partial class CodedClinicalFindingLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedFinding_SnomedCtXName = System.Xml.Linq.XName.Get("CodedFinding_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedFinding_TimeStampXName = System.Xml.Linq.XName.Get("CodedFinding_TimeStamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodedClinicalFinding", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CodedClinicalFindingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CodedClinicalFindingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CodedClinicalFindingLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CodedFinding_SnomedCtXName), new NamedContentModelEntity(CodedFinding_TimeStampXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CodedFinding_SnomedCt, CodedFinding_TimeStamp)
            /// </para>
            /// </summary>
            public CodedClinicalFindingLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedFinding_SnomedCt, CodedFinding_TimeStamp)
            /// </para>
            /// </summary>
            public virtual string CodedFinding_SnomedCt {
                get {
                    XElement x = this.GetElement(CodedFinding_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedFinding_SnomedCtXName, value, "CodedFinding_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CodedFinding_SnomedCt, CodedFinding_TimeStamp)
            /// </para>
            /// </summary>
            public virtual System.DateTime CodedFinding_TimeStamp {
                get {
                    XElement x = this.GetElement(CodedFinding_TimeStampXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedFinding_TimeStampXName, value, "CodedFinding_TimeStamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CodedClinicalFindingLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CodedFinding_SnomedCtXName, typeof(string));
                localElementDictionary.Add(CodedFinding_TimeStampXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
        /// </para>
        /// </summary>
        public partial class InjuryCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName InjuryDateXName = System.Xml.Linq.XName.Get("InjuryDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName InjuryTimeXName = System.Xml.Linq.XName.Get("InjuryTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCarePlaceOfInjury_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCarePlaceOfInjury_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCarePlaceOfInjury_LatitudeAndLongitudeXName = System.Xml.Linq.XName.Get("EmergencyCarePlaceOfInjury_LatitudeAndLongitude", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInjuryIntent_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInjuryIntent_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInjuryActivityStatus_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInjuryActivityStatus_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInjuryActivityType_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInjuryActivityType_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInjuryMechanism_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInjuryMechanism_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AssaultLocationDescriptionXName = System.Xml.Linq.XName.Get("AssaultLocationDescription", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InjuryCharacteristics", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator InjuryCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InjuryCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static InjuryCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InjuryDateXName), new NamedContentModelEntity(InjuryTimeXName), new NamedContentModelEntity(EmergencyCarePlaceOfInjury_SnomedCtXName), new NamedContentModelEntity(EmergencyCarePlaceOfInjury_LatitudeAndLongitudeXName), new NamedContentModelEntity(EmergencyCareInjuryIntent_SnomedCtXName), new NamedContentModelEntity(EmergencyCareInjuryActivityStatus_SnomedCtXName), new NamedContentModelEntity(EmergencyCareInjuryActivityType_SnomedCtXName), new NamedContentModelEntity(EmergencyCareInjuryMechanism_SnomedCtXName), new NamedContentModelEntity(EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtXName), new NamedContentModelEntity(AssaultLocationDescriptionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public InjuryCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual System.DateTime InjuryDate {
                get {
                    XElement x = this.GetElement(InjuryDateXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(InjuryDateXName, value, "InjuryDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual System.DateTime InjuryTime {
                get {
                    XElement x = this.GetElement(InjuryTimeXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(InjuryTimeXName, value, "InjuryTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCarePlaceOfInjury_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCarePlaceOfInjury_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCarePlaceOfInjury_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCarePlaceOfInjury_SnomedCtXName, value, "EmergencyCarePlaceOfInjury_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType EmergencyCarePlaceOfInjury_LatitudeAndLongitude {
                get {
                    XElement x = this.GetElement(EmergencyCarePlaceOfInjury_LatitudeAndLongitudeXName);
                    return ((EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType)(x));
                }
                set {
                    this.SetElement(EmergencyCarePlaceOfInjury_LatitudeAndLongitudeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareInjuryIntent_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareInjuryIntent_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInjuryIntent_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInjuryIntent_SnomedCtXName, value, "EmergencyCareInjuryIntent_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareInjuryActivityStatus_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareInjuryActivityStatus_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInjuryActivityStatus_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInjuryActivityStatus_SnomedCtXName, value, "EmergencyCareInjuryActivityStatus_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareInjuryActivityType_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareInjuryActivityType_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInjuryActivityType_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInjuryActivityType_SnomedCtXName, value, "EmergencyCareInjuryActivityType_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareInjuryMechanism_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareInjuryMechanism_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareInjuryMechanism_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareInjuryMechanism_SnomedCtXName, value, "EmergencyCareInjuryMechanism_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual IList<string> EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt {
                get {
                    if ((this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField == null)) {
                        this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtXName);
                    }
                    return this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField;
                }
                set {
                    if ((value == null)) {
                        this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField = null;
                    }
                    else {
                        if ((this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField == null)) {
                            this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (InjuryDate, InjuryTime, EmergencyCarePlaceOfInjury_SnomedCt?, EmergencyCarePlaceOfInjury_LatitudeAndLongitude?, EmergencyCareInjuryIntent_SnomedCt?, EmergencyCareInjuryActivityStatus_SnomedCt?, EmergencyCareInjuryActivityType_SnomedCt?, EmergencyCareInjuryMechanism_SnomedCt?, EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCt*, AssaultLocationDescription?)
            /// </para>
            /// </summary>
            public virtual string AssaultLocationDescription {
                get {
                    XElement x = this.GetElement(AssaultLocationDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AssaultLocationDescriptionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AssaultLocationDescriptionXName, value, "AssaultLocationDescription", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_255_EC_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InjuryCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(InjuryDateXName, typeof(System.DateTime));
                localElementDictionary.Add(InjuryTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCarePlaceOfInjury_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCarePlaceOfInjury_LatitudeAndLongitudeXName, typeof(EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType));
                localElementDictionary.Add(EmergencyCareInjuryIntent_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareInjuryActivityStatus_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareInjuryActivityType_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareInjuryMechanism_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareInjuryAlcoholOrDrugInvolvement_SnomedCtXName, typeof(string));
                localElementDictionary.Add(AssaultLocationDescriptionXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Latitude, Longitude)
            /// </para>
            /// </summary>
            public partial class EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LatitudeXName = System.Xml.Linq.XName.Get("Latitude", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LongitudeXName = System.Xml.Linq.XName.Get("Longitude", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCarePlaceOfInjury_LatitudeAndLongitude", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LatitudeXName), new NamedContentModelEntity(LongitudeXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Latitude, Longitude)
                /// </para>
                /// </summary>
                public EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Latitude, Longitude)
                /// </para>
                /// </summary>
                public virtual decimal Latitude {
                    get {
                        XElement x = this.GetElement(LatitudeXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(LatitudeXName, value, "Latitude", LatitudeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Latitude, Longitude)
                /// </para>
                /// </summary>
                public virtual decimal Longitude {
                    get {
                        XElement x = this.GetElement(LongitudeXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(LongitudeXName, value, "Longitude", LongitudeLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EmergencyCarePlaceOfInjury_LatitudeAndLongitudeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LatitudeXName, typeof(decimal));
                    localElementDictionary.Add(LongitudeXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class LatitudeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2368)), null, 6, 0, null, 90m, 0, null, -90m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private LatitudeLocalType() {
                    }
                }
                
                private class LongitudeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2368)), null, 6, 0, null, 180m, 0, null, -180m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private LongitudeLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Comorbidity_SnomedCt*)
        /// </para>
        /// </summary>
        public partial class PatientClinicalHistoryLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Comorbidity_SnomedCtXName = System.Xml.Linq.XName.Get("Comorbidity_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Comorbidity_SnomedCtField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PatientClinicalHistory", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PatientClinicalHistoryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PatientClinicalHistoryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PatientClinicalHistoryLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Comorbidity_SnomedCtXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Comorbidity_SnomedCt*)
            /// </para>
            /// </summary>
            public PatientClinicalHistoryLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Comorbidity_SnomedCt*)
            /// </para>
            /// </summary>
            public virtual IList<string> Comorbidity_SnomedCt {
                get {
                    if ((this.Comorbidity_SnomedCtField == null)) {
                        this.Comorbidity_SnomedCtField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, Comorbidity_SnomedCtXName);
                    }
                    return this.Comorbidity_SnomedCtField;
                }
                set {
                    if ((value == null)) {
                        this.Comorbidity_SnomedCtField = null;
                    }
                    else {
                        if ((this.Comorbidity_SnomedCtField == null)) {
                            this.Comorbidity_SnomedCtField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, Comorbidity_SnomedCtXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Comorbidity_SnomedCtField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PatientClinicalHistoryLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(Comorbidity_SnomedCtXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
        /// </para>
        /// </summary>
        public partial class ServiceAgreementDetailsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CommissioningSerialNumberXName = System.Xml.Linq.XName.Get("CommissioningSerialNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NhsServiceAgreementLineNumberXName = System.Xml.Linq.XName.Get("NhsServiceAgreementLineNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProviderReferenceNumberXName = System.Xml.Linq.XName.Get("ProviderReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CommissionerReferenceNumberXName = System.Xml.Linq.XName.Get("CommissionerReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CodeOfProviderXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CodeOfProvider", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CodeOfCommissionerXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CodeOfCommissioner", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceAgreementDetails", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ServiceAgreementDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ServiceAgreementDetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ServiceAgreementDetailsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommissioningSerialNumberXName), new NamedContentModelEntity(NhsServiceAgreementLineNumberXName), new NamedContentModelEntity(ProviderReferenceNumberXName), new NamedContentModelEntity(CommissionerReferenceNumberXName), new NamedContentModelEntity(OrganisationIdentifier_CodeOfProviderXName), new NamedContentModelEntity(OrganisationIdentifier_CodeOfCommissionerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public ServiceAgreementDetailsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string CommissioningSerialNumber {
                get {
                    XElement x = this.GetElement(CommissioningSerialNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CommissioningSerialNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CommissioningSerialNumberXName, value, "CommissioningSerialNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissioningSerialNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string NhsServiceAgreementLineNumber {
                get {
                    XElement x = this.GetElement(NhsServiceAgreementLineNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(NhsServiceAgreementLineNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(NhsServiceAgreementLineNumberXName, value, "NhsServiceAgreementLineNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NHSServiceAgreementLineNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string ProviderReferenceNumber {
                get {
                    XElement x = this.GetElement(ProviderReferenceNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProviderReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProviderReferenceNumberXName, value, "ProviderReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProviderReferenceNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string CommissionerReferenceNumber {
                get {
                    XElement x = this.GetElement(CommissionerReferenceNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CommissionerReferenceNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CommissionerReferenceNumberXName, value, "CommissionerReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CommissionerReferenceNumber_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string OrganisationIdentifier_CodeOfProvider {
                get {
                    XElement x = this.GetElement(OrganisationIdentifier_CodeOfProviderXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(OrganisationIdentifier_CodeOfProviderXName, value, "OrganisationIdentifier_CodeOfProvider", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_3_5_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CommissioningSerialNumber?, NhsServiceAgreementLineNumber?, ProviderReferenceNumber?, CommissionerReferenceNumber?, OrganisationIdentifier_CodeOfProvider, OrganisationIdentifier_CodeOfCommissioner)
            /// </para>
            /// </summary>
            public virtual string OrganisationIdentifier_CodeOfCommissioner {
                get {
                    XElement x = this.GetElement(OrganisationIdentifier_CodeOfCommissionerXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(OrganisationIdentifier_CodeOfCommissionerXName, value, "OrganisationIdentifier_CodeOfCommissioner", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_3_5_EC_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ServiceAgreementDetailsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CommissioningSerialNumberXName, typeof(string));
                localElementDictionary.Add(NhsServiceAgreementLineNumberXName, typeof(string));
                localElementDictionary.Add(ProviderReferenceNumberXName, typeof(string));
                localElementDictionary.Add(CommissionerReferenceNumberXName, typeof(string));
                localElementDictionary.Add(OrganisationIdentifier_CodeOfProviderXName, typeof(string));
                localElementDictionary.Add(OrganisationIdentifier_CodeOfCommissionerXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
        /// </para>
        /// </summary>
        public partial class CareProfessionals_EmergencyCareLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProfessionalRegistrationIssuerCodeXName = System.Xml.Linq.XName.Get("ProfessionalRegistrationIssuerCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProfessionalRegistrationEntryIdentifierXName = System.Xml.Linq.XName.Get("ProfessionalRegistrationEntryIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CareProfessionalTier_EmergencyCareXName = System.Xml.Linq.XName.Get("CareProfessionalTier_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CareProfessionalDischargeResponsibilityIndicator_EmergencyCareXName = System.Xml.Linq.XName.Get("CareProfessionalDischargeResponsibilityIndicator_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CareProfessionalClinicalResponsibilityTimeStampXName = System.Xml.Linq.XName.Get("CareProfessionalClinicalResponsibilityTimeStamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CareProfessionals_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CareProfessionals_EmergencyCareLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CareProfessionals_EmergencyCareLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CareProfessionals_EmergencyCareLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProfessionalRegistrationIssuerCodeXName), new NamedContentModelEntity(ProfessionalRegistrationEntryIdentifierXName), new NamedContentModelEntity(CareProfessionalTier_EmergencyCareXName), new NamedContentModelEntity(CareProfessionalDischargeResponsibilityIndicator_EmergencyCareXName), new NamedContentModelEntity(CareProfessionalClinicalResponsibilityTimeStampXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public CareProfessionals_EmergencyCareLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public virtual string ProfessionalRegistrationIssuerCode {
                get {
                    XElement x = this.GetElement(ProfessionalRegistrationIssuerCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ProfessionalRegistrationIssuerCodeXName, value, "ProfessionalRegistrationIssuerCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProfessionalRegistrationIssuerCode_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public virtual string ProfessionalRegistrationEntryIdentifier {
                get {
                    XElement x = this.GetElement(ProfessionalRegistrationEntryIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ProfessionalRegistrationEntryIdentifierXName, value, "ProfessionalRegistrationEntryIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_min_1_max_32_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public virtual string CareProfessionalTier_EmergencyCare {
                get {
                    XElement x = this.GetElement(CareProfessionalTier_EmergencyCareXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CareProfessionalTier_EmergencyCareXName, value, "CareProfessionalTier_EmergencyCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CareProfessionalTier_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public virtual string CareProfessionalDischargeResponsibilityIndicator_EmergencyCare {
                get {
                    XElement x = this.GetElement(CareProfessionalDischargeResponsibilityIndicator_EmergencyCareXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CareProfessionalDischargeResponsibilityIndicator_EmergencyCareXName, value, "CareProfessionalDischargeResponsibilityIndicator_EmergencyCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Yes_No_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ProfessionalRegistrationIssuerCode, ProfessionalRegistrationEntryIdentifier, CareProfessionalTier_EmergencyCare, CareProfessionalDischargeResponsibilityIndicator_EmergencyCare, CareProfessionalClinicalResponsibilityTimeStamp?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? CareProfessionalClinicalResponsibilityTimeStamp {
                get {
                    XElement x = this.GetElement(CareProfessionalClinicalResponsibilityTimeStampXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(CareProfessionalClinicalResponsibilityTimeStampXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(CareProfessionalClinicalResponsibilityTimeStampXName, value, "CareProfessionalClinicalResponsibilityTimeStamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CareProfessionals_EmergencyCareLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ProfessionalRegistrationIssuerCodeXName, typeof(string));
                localElementDictionary.Add(ProfessionalRegistrationEntryIdentifierXName, typeof(string));
                localElementDictionary.Add(CareProfessionalTier_EmergencyCareXName, typeof(string));
                localElementDictionary.Add(CareProfessionalDischargeResponsibilityIndicator_EmergencyCareXName, typeof(string));
                localElementDictionary.Add(CareProfessionalClinicalResponsibilityTimeStampXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EmergencyCareDiagnosis_SnomedCt, CodedClinicalEntrySequenceNumber, EmergencyCareDiagnosisQualifier_SnomedCt)
        /// </para>
        /// </summary>
        public partial class EmergencyCareDiagnoses_SnomedCtLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDiagnosis_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDiagnosis_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CodedClinicalEntrySequenceNumberXName = System.Xml.Linq.XName.Get("CodedClinicalEntrySequenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDiagnosisQualifier_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDiagnosisQualifier_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCareDiagnoses_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EmergencyCareDiagnoses_SnomedCtLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCareDiagnoses_SnomedCtLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EmergencyCareDiagnoses_SnomedCtLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EmergencyCareDiagnosis_SnomedCtXName), new NamedContentModelEntity(CodedClinicalEntrySequenceNumberXName), new NamedContentModelEntity(EmergencyCareDiagnosisQualifier_SnomedCtXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EmergencyCareDiagnosis_SnomedCt, CodedClinicalEntrySequenceNumber, EmergencyCareDiagnosisQualifier_SnomedCt)
            /// </para>
            /// </summary>
            public EmergencyCareDiagnoses_SnomedCtLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareDiagnosis_SnomedCt, CodedClinicalEntrySequenceNumber, EmergencyCareDiagnosisQualifier_SnomedCt)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDiagnosis_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDiagnosis_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareDiagnosis_SnomedCtXName, value, "EmergencyCareDiagnosis_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareDiagnosis_SnomedCt, CodedClinicalEntrySequenceNumber, EmergencyCareDiagnosisQualifier_SnomedCt)
            /// </para>
            /// </summary>
            public virtual string CodedClinicalEntrySequenceNumber {
                get {
                    XElement x = this.GetElement(CodedClinicalEntrySequenceNumberXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(CodedClinicalEntrySequenceNumberXName, value, "CodedClinicalEntrySequenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_1_N_5_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareDiagnosis_SnomedCt, CodedClinicalEntrySequenceNumber, EmergencyCareDiagnosisQualifier_SnomedCt)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDiagnosisQualifier_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDiagnosisQualifier_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareDiagnosisQualifier_SnomedCtXName, value, "EmergencyCareDiagnosisQualifier_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EmergencyCareDiagnoses_SnomedCtLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EmergencyCareDiagnosis_SnomedCtXName, typeof(string));
                localElementDictionary.Add(CodedClinicalEntrySequenceNumberXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDiagnosisQualifier_SnomedCtXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EmergencyCareClinicalInvestigation_SnomedCt, ProcedureDate_EmergencyCareClinicalInvestigation?, ProcedureTime_EmergencyCareClinicalInvestigation?)
        /// </para>
        /// </summary>
        public partial class EmergencyCareInvestigations_SnomedCtLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareClinicalInvestigation_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareClinicalInvestigation_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDate_EmergencyCareClinicalInvestigationXName = System.Xml.Linq.XName.Get("ProcedureDate_EmergencyCareClinicalInvestigation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureTime_EmergencyCareClinicalInvestigationXName = System.Xml.Linq.XName.Get("ProcedureTime_EmergencyCareClinicalInvestigation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCareInvestigations_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EmergencyCareInvestigations_SnomedCtLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCareInvestigations_SnomedCtLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EmergencyCareInvestigations_SnomedCtLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EmergencyCareClinicalInvestigation_SnomedCtXName), new NamedContentModelEntity(ProcedureDate_EmergencyCareClinicalInvestigationXName), new NamedContentModelEntity(ProcedureTime_EmergencyCareClinicalInvestigationXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EmergencyCareClinicalInvestigation_SnomedCt, ProcedureDate_EmergencyCareClinicalInvestigation?, ProcedureTime_EmergencyCareClinicalInvestigation?)
            /// </para>
            /// </summary>
            public EmergencyCareInvestigations_SnomedCtLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareClinicalInvestigation_SnomedCt, ProcedureDate_EmergencyCareClinicalInvestigation?, ProcedureTime_EmergencyCareClinicalInvestigation?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareClinicalInvestigation_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareClinicalInvestigation_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareClinicalInvestigation_SnomedCtXName, value, "EmergencyCareClinicalInvestigation_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareClinicalInvestigation_SnomedCt, ProcedureDate_EmergencyCareClinicalInvestigation?, ProcedureTime_EmergencyCareClinicalInvestigation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate_EmergencyCareClinicalInvestigation {
                get {
                    XElement x = this.GetElement(ProcedureDate_EmergencyCareClinicalInvestigationXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDate_EmergencyCareClinicalInvestigationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDate_EmergencyCareClinicalInvestigationXName, value, "ProcedureDate_EmergencyCareClinicalInvestigation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareClinicalInvestigation_SnomedCt, ProcedureDate_EmergencyCareClinicalInvestigation?, ProcedureTime_EmergencyCareClinicalInvestigation?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureTime_EmergencyCareClinicalInvestigation {
                get {
                    XElement x = this.GetElement(ProcedureTime_EmergencyCareClinicalInvestigationXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureTime_EmergencyCareClinicalInvestigationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureTime_EmergencyCareClinicalInvestigationXName, value, "ProcedureTime_EmergencyCareClinicalInvestigation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EmergencyCareInvestigations_SnomedCtLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EmergencyCareClinicalInvestigation_SnomedCtXName, typeof(string));
                localElementDictionary.Add(ProcedureDate_EmergencyCareClinicalInvestigationXName, typeof(System.DateTime));
                localElementDictionary.Add(ProcedureTime_EmergencyCareClinicalInvestigationXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (EmergencyCareProcedure_SnomedCt, ProcedureDate_EmergencyCareProcedure?, ProcedureTime_EmergencyCareProcedure?)
        /// </para>
        /// </summary>
        public partial class EmergencyCareTreatments_SnomedCtLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareProcedure_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareProcedure_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureDate_EmergencyCareProcedureXName = System.Xml.Linq.XName.Get("ProcedureDate_EmergencyCareProcedure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ProcedureTime_EmergencyCareProcedureXName = System.Xml.Linq.XName.Get("ProcedureTime_EmergencyCareProcedure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmergencyCareTreatments_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EmergencyCareTreatments_SnomedCtLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmergencyCareTreatments_SnomedCtLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EmergencyCareTreatments_SnomedCtLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EmergencyCareProcedure_SnomedCtXName), new NamedContentModelEntity(ProcedureDate_EmergencyCareProcedureXName), new NamedContentModelEntity(ProcedureTime_EmergencyCareProcedureXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (EmergencyCareProcedure_SnomedCt, ProcedureDate_EmergencyCareProcedure?, ProcedureTime_EmergencyCareProcedure?)
            /// </para>
            /// </summary>
            public EmergencyCareTreatments_SnomedCtLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareProcedure_SnomedCt, ProcedureDate_EmergencyCareProcedure?, ProcedureTime_EmergencyCareProcedure?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareProcedure_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareProcedure_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(EmergencyCareProcedure_SnomedCtXName, value, "EmergencyCareProcedure_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareProcedure_SnomedCt, ProcedureDate_EmergencyCareProcedure?, ProcedureTime_EmergencyCareProcedure?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureDate_EmergencyCareProcedure {
                get {
                    XElement x = this.GetElement(ProcedureDate_EmergencyCareProcedureXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureDate_EmergencyCareProcedureXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureDate_EmergencyCareProcedureXName, value, "ProcedureDate_EmergencyCareProcedure", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (EmergencyCareProcedure_SnomedCt, ProcedureDate_EmergencyCareProcedure?, ProcedureTime_EmergencyCareProcedure?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ProcedureTime_EmergencyCareProcedure {
                get {
                    XElement x = this.GetElement(ProcedureTime_EmergencyCareProcedureXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ProcedureTime_EmergencyCareProcedureXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ProcedureTime_EmergencyCareProcedureXName, value, "ProcedureTime_EmergencyCareProcedure", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EmergencyCareTreatments_SnomedCtLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EmergencyCareProcedure_SnomedCtXName, typeof(string));
                localElementDictionary.Add(ProcedureDate_EmergencyCareProcedureXName, typeof(System.DateTime));
                localElementDictionary.Add(ProcedureTime_EmergencyCareProcedureXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
        /// </para>
        /// </summary>
        public partial class ReferralsToOtherServicesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferredToService_SnomedCtXName = System.Xml.Linq.XName.Get("ReferredToService_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityServiceRequestDate_EmergencyCareXName = System.Xml.Linq.XName.Get("ActivityServiceRequestDate_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityServiceRequestTime_EmergencyCareXName = System.Xml.Linq.XName.Get("ActivityServiceRequestTime_EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferredToServiceAssessmentDateXName = System.Xml.Linq.XName.Get("ReferredToServiceAssessmentDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ReferredToServiceAssessmentTimeXName = System.Xml.Linq.XName.Get("ReferredToServiceAssessmentTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferralsToOtherServices", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ReferralsToOtherServicesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferralsToOtherServicesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ReferralsToOtherServicesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReferredToService_SnomedCtXName), new NamedContentModelEntity(ActivityServiceRequestDate_EmergencyCareXName), new NamedContentModelEntity(ActivityServiceRequestTime_EmergencyCareXName), new NamedContentModelEntity(ReferredToServiceAssessmentDateXName), new NamedContentModelEntity(ReferredToServiceAssessmentTimeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public ReferralsToOtherServicesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public virtual string ReferredToService_SnomedCt {
                get {
                    XElement x = this.GetElement(ReferredToService_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferredToService_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferredToService_SnomedCtXName, value, "ReferredToService_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public virtual System.DateTime ActivityServiceRequestDate_EmergencyCare {
                get {
                    XElement x = this.GetElement(ActivityServiceRequestDate_EmergencyCareXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetElementWithValidation(ActivityServiceRequestDate_EmergencyCareXName, value, "ActivityServiceRequestDate_EmergencyCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public virtual System.DateTime ActivityServiceRequestTime_EmergencyCare {
                get {
                    XElement x = this.GetElement(ActivityServiceRequestTime_EmergencyCareXName);
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    this.SetElementWithValidation(ActivityServiceRequestTime_EmergencyCareXName, value, "ActivityServiceRequestTime_EmergencyCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferredToServiceAssessmentDate {
                get {
                    XElement x = this.GetElement(ReferredToServiceAssessmentDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferredToServiceAssessmentDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferredToServiceAssessmentDateXName, value, "ReferredToServiceAssessmentDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ReferredToService_SnomedCt?, ActivityServiceRequestDate_EmergencyCare, ActivityServiceRequestTime_EmergencyCare, ReferredToServiceAssessmentDate?, ReferredToServiceAssessmentTime?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? ReferredToServiceAssessmentTime {
                get {
                    XElement x = this.GetElement(ReferredToServiceAssessmentTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ReferredToServiceAssessmentTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ReferredToServiceAssessmentTimeXName, value, "ReferredToServiceAssessmentTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ReferralsToOtherServicesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ReferredToService_SnomedCtXName, typeof(string));
                localElementDictionary.Add(ActivityServiceRequestDate_EmergencyCareXName, typeof(System.DateTime));
                localElementDictionary.Add(ActivityServiceRequestTime_EmergencyCareXName, typeof(System.DateTime));
                localElementDictionary.Add(ReferredToServiceAssessmentDateXName, typeof(System.DateTime));
                localElementDictionary.Add(ReferredToServiceAssessmentTimeXName, typeof(System.DateTime));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
        /// </para>
        /// </summary>
        public partial class DischargeFromEmergencyCareLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DecidedToAdmitDateXName = System.Xml.Linq.XName.Get("DecidedToAdmitDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DecidedToAdmitTimeXName = System.Xml.Linq.XName.Get("DecidedToAdmitTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivityTreatmentFunctionCode_DecisionToAdmitXName = System.Xml.Linq.XName.Get("ActivityTreatmentFunctionCode_DecisionToAdmit", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareClinicallyReadyToProceedTimeStampXName = System.Xml.Linq.XName.Get("EmergencyCareClinicallyReadyToProceedTimeStamp", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDischargeStatus_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDischargeStatus_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDepartureDateXName = System.Xml.Linq.XName.Get("EmergencyCareDepartureDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDepartureTimeXName = System.Xml.Linq.XName.Get("EmergencyCareDepartureTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SafeguardingConcern_SnomedCtXName = System.Xml.Linq.XName.Get("SafeguardingConcern_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> SafeguardingConcern_SnomedCtField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDischargeDestination_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDischargeDestination_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrganisationSiteIdentifier_DischargeFromEmergencyCareXName = System.Xml.Linq.XName.Get("OrganisationSiteIdentifier_DischargeFromEmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDischargeFollowUp_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDischargeFollowUp_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareDischargeInformationGiven_SnomedCtXName = System.Xml.Linq.XName.Get("EmergencyCareDischargeInformationGiven_SnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DischargeFromEmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DischargeFromEmergencyCareLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DischargeFromEmergencyCareLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DischargeFromEmergencyCareLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DecidedToAdmitDateXName), new NamedContentModelEntity(DecidedToAdmitTimeXName), new NamedContentModelEntity(ActivityTreatmentFunctionCode_DecisionToAdmitXName), new NamedContentModelEntity(EmergencyCareClinicallyReadyToProceedTimeStampXName), new NamedContentModelEntity(EmergencyCareDischargeStatus_SnomedCtXName), new NamedContentModelEntity(EmergencyCareDepartureDateXName), new NamedContentModelEntity(EmergencyCareDepartureTimeXName), new NamedContentModelEntity(SafeguardingConcern_SnomedCtXName), new NamedContentModelEntity(EmergencyCareDischargeDestination_SnomedCtXName), new NamedContentModelEntity(OrganisationSiteIdentifier_DischargeFromEmergencyCareXName), new NamedContentModelEntity(EmergencyCareDischargeFollowUp_SnomedCtXName), new NamedContentModelEntity(EmergencyCareDischargeInformationGiven_SnomedCtXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public DischargeFromEmergencyCareLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DecidedToAdmitDate {
                get {
                    XElement x = this.GetElement(DecidedToAdmitDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DecidedToAdmitDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DecidedToAdmitDateXName, value, "DecidedToAdmitDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? DecidedToAdmitTime {
                get {
                    XElement x = this.GetElement(DecidedToAdmitTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DecidedToAdmitTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DecidedToAdmitTimeXName, value, "DecidedToAdmitTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string ActivityTreatmentFunctionCode_DecisionToAdmit {
                get {
                    XElement x = this.GetElement(ActivityTreatmentFunctionCode_DecisionToAdmitXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ActivityTreatmentFunctionCode_DecisionToAdmitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ActivityTreatmentFunctionCode_DecisionToAdmitXName, value, "ActivityTreatmentFunctionCode_DecisionToAdmit", ActivityTreatmentFunctionCode_DecisionToAdmitLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareClinicallyReadyToProceedTimeStamp {
                get {
                    XElement x = this.GetElement(EmergencyCareClinicallyReadyToProceedTimeStampXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareClinicallyReadyToProceedTimeStampXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareClinicallyReadyToProceedTimeStampXName, value, "EmergencyCareClinicallyReadyToProceedTimeStamp", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DateTimeStamp.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDischargeStatus_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDischargeStatus_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDischargeStatus_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDischargeStatus_SnomedCtXName, value, "EmergencyCareDischargeStatus_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareDepartureDate {
                get {
                    XElement x = this.GetElement(EmergencyCareDepartureDateXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDepartureDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDepartureDateXName, value, "EmergencyCareDepartureDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Date_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual System.DateTime? EmergencyCareDepartureTime {
                get {
                    XElement x = this.GetElement(EmergencyCareDepartureTimeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDepartureTimeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDepartureTimeXName, value, "EmergencyCareDepartureTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Time_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual IList<string> SafeguardingConcern_SnomedCt {
                get {
                    if ((this.SafeguardingConcern_SnomedCtField == null)) {
                        this.SafeguardingConcern_SnomedCtField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, SafeguardingConcern_SnomedCtXName);
                    }
                    return this.SafeguardingConcern_SnomedCtField;
                }
                set {
                    if ((value == null)) {
                        this.SafeguardingConcern_SnomedCtField = null;
                    }
                    else {
                        if ((this.SafeguardingConcern_SnomedCtField == null)) {
                            this.SafeguardingConcern_SnomedCtField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, SafeguardingConcern_SnomedCtXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.SafeguardingConcern_SnomedCtField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDischargeDestination_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDischargeDestination_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDischargeDestination_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDischargeDestination_SnomedCtXName, value, "EmergencyCareDischargeDestination_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string OrganisationSiteIdentifier_DischargeFromEmergencyCare {
                get {
                    XElement x = this.GetElement(OrganisationSiteIdentifier_DischargeFromEmergencyCareXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(OrganisationSiteIdentifier_DischargeFromEmergencyCareXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(OrganisationSiteIdentifier_DischargeFromEmergencyCareXName, value, "OrganisationSiteIdentifier_DischargeFromEmergencyCare", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_5_9_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDischargeFollowUp_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDischargeFollowUp_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDischargeFollowUp_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDischargeFollowUp_SnomedCtXName, value, "EmergencyCareDischargeFollowUp_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DecidedToAdmitDate?, DecidedToAdmitTime?, ActivityTreatmentFunctionCode_DecisionToAdmit?, EmergencyCareClinicallyReadyToProceedTimeStamp?, EmergencyCareDischargeStatus_SnomedCt?, EmergencyCareDepartureDate?, EmergencyCareDepartureTime?, SafeguardingConcern_SnomedCt*, EmergencyCareDischargeDestination_SnomedCt?, OrganisationSiteIdentifier_DischargeFromEmergencyCare?, EmergencyCareDischargeFollowUp_SnomedCt?, EmergencyCareDischargeInformationGiven_SnomedCt?)
            /// </para>
            /// </summary>
            public virtual string EmergencyCareDischargeInformationGiven_SnomedCt {
                get {
                    XElement x = this.GetElement(EmergencyCareDischargeInformationGiven_SnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(EmergencyCareDischargeInformationGiven_SnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(EmergencyCareDischargeInformationGiven_SnomedCtXName, value, "EmergencyCareDischargeInformationGiven_SnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DischargeFromEmergencyCareLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DecidedToAdmitDateXName, typeof(System.DateTime));
                localElementDictionary.Add(DecidedToAdmitTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(ActivityTreatmentFunctionCode_DecisionToAdmitXName, typeof(string));
                localElementDictionary.Add(EmergencyCareClinicallyReadyToProceedTimeStampXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareDischargeStatus_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDepartureDateXName, typeof(System.DateTime));
                localElementDictionary.Add(EmergencyCareDepartureTimeXName, typeof(System.DateTime));
                localElementDictionary.Add(SafeguardingConcern_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDischargeDestination_SnomedCtXName, typeof(string));
                localElementDictionary.Add(OrganisationSiteIdentifier_DischargeFromEmergencyCareXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDischargeFollowUp_SnomedCtXName, typeof(string));
                localElementDictionary.Add(EmergencyCareDischargeInformationGiven_SnomedCtXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class ActivityTreatmentFunctionCode_DecisionToAdmitLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 3, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private ActivityTreatmentFunctionCode_DecisionToAdmitLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClinicalTrialIdentifier?, DiseaseOutBreakNotificationSnomedCt?, DiseaseOutBreakNotificationDescription?)
        /// </para>
        /// </summary>
        public partial class ResearchAndDiseaseOutbreakNotificationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ClinicalTrialIdentifierXName = System.Xml.Linq.XName.Get("ClinicalTrialIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DiseaseOutBreakNotificationSnomedCtXName = System.Xml.Linq.XName.Get("DiseaseOutBreakNotificationSnomedCt", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DiseaseOutBreakNotificationDescriptionXName = System.Xml.Linq.XName.Get("DiseaseOutBreakNotificationDescription", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResearchAndDiseaseOutbreakNotification", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ResearchAndDiseaseOutbreakNotificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ResearchAndDiseaseOutbreakNotificationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ResearchAndDiseaseOutbreakNotificationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClinicalTrialIdentifierXName), new NamedContentModelEntity(DiseaseOutBreakNotificationSnomedCtXName), new NamedContentModelEntity(DiseaseOutBreakNotificationDescriptionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ClinicalTrialIdentifier?, DiseaseOutBreakNotificationSnomedCt?, DiseaseOutBreakNotificationDescription?)
            /// </para>
            /// </summary>
            public ResearchAndDiseaseOutbreakNotificationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ClinicalTrialIdentifier?, DiseaseOutBreakNotificationSnomedCt?, DiseaseOutBreakNotificationDescription?)
            /// </para>
            /// </summary>
            public virtual string ClinicalTrialIdentifier {
                get {
                    XElement x = this.GetElement(ClinicalTrialIdentifierXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ClinicalTrialIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ClinicalTrialIdentifierXName, value, "ClinicalTrialIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_20_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ClinicalTrialIdentifier?, DiseaseOutBreakNotificationSnomedCt?, DiseaseOutBreakNotificationDescription?)
            /// </para>
            /// </summary>
            public virtual string DiseaseOutBreakNotificationSnomedCt {
                get {
                    XElement x = this.GetElement(DiseaseOutBreakNotificationSnomedCtXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DiseaseOutBreakNotificationSnomedCtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DiseaseOutBreakNotificationSnomedCtXName, value, "DiseaseOutBreakNotificationSnomedCt", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.N_6_18_EC_Type.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ClinicalTrialIdentifier?, DiseaseOutBreakNotificationSnomedCt?, DiseaseOutBreakNotificationDescription?)
            /// </para>
            /// </summary>
            public virtual string DiseaseOutBreakNotificationDescription {
                get {
                    XElement x = this.GetElement(DiseaseOutBreakNotificationDescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DiseaseOutBreakNotificationDescriptionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DiseaseOutBreakNotificationDescriptionXName, value, "DiseaseOutBreakNotificationDescription", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AN_max_20_EC_Type.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ResearchAndDiseaseOutbreakNotificationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ClinicalTrialIdentifierXName, typeof(string));
                localElementDictionary.Add(DiseaseOutBreakNotificationSnomedCtXName, typeof(string));
                localElementDictionary.Add(DiseaseOutBreakNotificationDescriptionXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public sealed class OrgIden_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private OrgIden_EC_Type() {
        }
    }
    
    public sealed class LocalPatientIdentifier_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 20, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LocalPatientIdentifier_EC_Type() {
        }
    }
    
    public sealed class PersonStatedGenderCode_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "9",
                        "X"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PersonStatedGenderCode_EC_Type() {
        }
    }
    
    public sealed class N_6_18_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 18, null, null, 6, new string[] {
                        "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private N_6_18_EC_Type() {
        }
    }
    
    public sealed class N_5_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(12)), null, 0, 0, null, null, 5, null, null, 0, new string[] {
                        "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private N_5_EC_Type() {
        }
    }
    
    public sealed class N_1_N_5_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 5, null, null, 1, new string[] {
                        "[0-9]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private N_1_N_5_EC_Type() {
        }
    }
    
    public sealed class Overseas_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "P",
                        "9"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Overseas_EC_Type() {
        }
    }
    
    public sealed class MH_Status_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MH_Status_EC_Type() {
        }
    }
    
    public sealed class AN_5_9_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 9, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_5_9_EC_Type() {
        }
    }
    
    public sealed class AN_2_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_2_EC_Type() {
        }
    }
    
    public sealed class AN_max_5_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_5_EC_Type() {
        }
    }
    
    public sealed class AN_max_10_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_10_EC_Type() {
        }
    }
    
    public sealed class AN_max_12_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 12, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_12_EC_Type() {
        }
    }
    
    public sealed class AN_max_255_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_255_EC_Type() {
        }
    }
    
    public sealed class AN_min_1_max_12_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 12, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_min_1_max_12_EC_Type() {
        }
    }
    
    public sealed class AN_max_20_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_20_EC_Type() {
        }
    }
    
    public sealed class AN_max_32_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 32, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_max_32_EC_Type() {
        }
    }
    
    public sealed class AN_min_1_max_32_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 32, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_min_1_max_32_EC_Type() {
        }
    }
    
    public sealed class AN_3_5_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AN_3_5_EC_Type() {
        }
    }
    
    public sealed class AttendCat_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "X"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AttendCat_EC_Type() {
        }
    }
    
    public sealed class ProfessionalRegistrationIssuerCode_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProfessionalRegistrationIssuerCode_EC_Type() {
        }
    }
    
    public sealed class CareProfessionalTier_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "01",
                        "02",
                        "03",
                        "04",
                        "05"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CareProfessionalTier_EC_Type() {
        }
    }
    
    public sealed class Yes_No_EC_Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "Y",
                        "N"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Yes_No_EC_Type() {
        }
    }
    
    /// <summary>
    /// <para>
    /// CDS Interchange Entry Point For ALL Protocols (Bulk and Net)
    /// </para>
    /// <para>
    /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
    /// </para>
    /// </summary>
    public partial class CDSInterchange_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeHeaderXName = System.Xml.Linq.XName.Get("CDSInterchangeHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSNetChangeAllMessageTypesXName = System.Xml.Linq.XName.Get("CDSNetChange-All-MessageTypes", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CDSNetChangeAllMessageTypesLocalType> CDSNetChangeAllMessageTypesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSBulkGroup160MessageXName = System.Xml.Linq.XName.Get("CDSBulkGroup-160-Message", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CDSBulkGroup160MessageLocalType> CDSBulkGroup160MessageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeTrailerXName = System.Xml.Linq.XName.Get("CDSInterchangeTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSInterchange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSInterchange_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSInterchange_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSInterchange_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSInterchangeHeaderXName), new ChoiceContentModelEntity(new NamedContentModelEntity(CDSNetChangeAllMessageTypesXName), new NamedContentModelEntity(CDSBulkGroup160MessageXName)), new NamedContentModelEntity(CDSInterchangeTrailerXName));
        }
        
        /// <summary>
        /// <para>
        /// CDS Interchange Entry Point For ALL Protocols (Bulk and Net)
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public CDSInterchange_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual CDSInterchangeHeader_Structure CDSInterchangeHeader {
            get {
                XElement x = this.GetElement(CDSInterchangeHeaderXName);
                return ((CDSInterchangeHeader_Structure)(x));
            }
            set {
                this.SetElement(CDSInterchangeHeaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ALL CDS Types Any combination or sequenced
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchange_Structure.CDSNetChangeAllMessageTypesLocalType> CDSNetChangeAllMessageTypes {
            get {
                if ((this.CDSNetChangeAllMessageTypesField == null)) {
                    this.CDSNetChangeAllMessageTypesField = new XTypedList<CDSNetChangeAllMessageTypesLocalType>(this, LinqToXsdTypeManager.Instance, CDSNetChangeAllMessageTypesXName);
                }
                return this.CDSNetChangeAllMessageTypesField;
            }
            set {
                if ((value == null)) {
                    this.CDSNetChangeAllMessageTypesField = null;
                }
                else {
                    if ((this.CDSNetChangeAllMessageTypesField == null)) {
                        this.CDSNetChangeAllMessageTypesField = XTypedList<CDSNetChangeAllMessageTypesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CDSNetChangeAllMessageTypesXName);
                    }
                    else {
                        XTypedServices.SetList<CDSNetChangeAllMessageTypesLocalType>(this.CDSNetChangeAllMessageTypesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Emergency  Care  - CDS Type 011  Added in V6-2-1 Feb 2017
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual IList<www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchange_Structure.CDSBulkGroup160MessageLocalType> CDSBulkGroup160Message {
            get {
                if ((this.CDSBulkGroup160MessageField == null)) {
                    this.CDSBulkGroup160MessageField = new XTypedList<CDSBulkGroup160MessageLocalType>(this, LinqToXsdTypeManager.Instance, CDSBulkGroup160MessageXName);
                }
                return this.CDSBulkGroup160MessageField;
            }
            set {
                if ((value == null)) {
                    this.CDSBulkGroup160MessageField = null;
                }
                else {
                    if ((this.CDSBulkGroup160MessageField == null)) {
                        this.CDSBulkGroup160MessageField = XTypedList<CDSBulkGroup160MessageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CDSBulkGroup160MessageXName);
                    }
                    else {
                        XTypedServices.SetList<CDSBulkGroup160MessageLocalType>(this.CDSBulkGroup160MessageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeHeader, (CDSNetChangeAllMessageTypes+ | CDSBulkGroup160Message+), CDSInterchangeTrailer)
        /// </para>
        /// </summary>
        public virtual CDSInterchangeTrailer_Structure CDSInterchangeTrailer {
            get {
                XElement x = this.GetElement(CDSInterchangeTrailerXName);
                return ((CDSInterchangeTrailer_Structure)(x));
            }
            set {
                this.SetElement(CDSInterchangeTrailerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSInterchange_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSInterchangeHeaderXName, typeof(CDSInterchangeHeader_Structure));
            localElementDictionary.Add(CDSNetChangeAllMessageTypesXName, typeof(CDSNetChangeAllMessageTypesLocalType));
            localElementDictionary.Add(CDSBulkGroup160MessageXName, typeof(CDSBulkGroup160MessageLocalType));
            localElementDictionary.Add(CDSInterchangeTrailerXName, typeof(CDSInterchangeTrailer_Structure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
        /// </para>
        /// </summary>
        public partial class CDSNetChangeAllMessageTypesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageHeaderXName = System.Xml.Linq.XName.Get("CDSMessageHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTransactionHeader_NetChangeXName = System.Xml.Linq.XName.Get("CDSTransactionHeader_NetChange", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareXName = System.Xml.Linq.XName.Get("EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeleteTransactionXName = System.Xml.Linq.XName.Get("DeleteTransaction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageTrailerXName = System.Xml.Linq.XName.Get("CDSMessageTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSProtocolIdentifierCodeFixedValue = "010";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSNetChange-All-MessageTypes", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CDSNetChangeAllMessageTypesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDSNetChangeAllMessageTypesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CDSNetChangeAllMessageTypesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageHeaderXName), new NamedContentModelEntity(CDSTransactionHeader_NetChangeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(EmergencyCareXName), new NamedContentModelEntity(DeleteTransactionXName)), new NamedContentModelEntity(CDSMessageTrailerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public CDSNetChangeAllMessageTypesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageHeader_Structure CDSMessageHeader {
                get {
                    XElement x = this.GetElement(CDSMessageHeaderXName);
                    return ((CDSMessageHeader_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageHeaderXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSTransactionHeader_NetChange_Structure CDSTransactionHeader_NetChange {
                get {
                    XElement x = this.GetElement(CDSTransactionHeader_NetChangeXName);
                    return ((CDSTransactionHeader_NetChange_Structure)(x));
                }
                set {
                    this.SetElement(CDSTransactionHeader_NetChangeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS TYPE 011
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual EmergencyCare_Stucture EmergencyCare {
                get {
                    XElement x = this.GetElement(EmergencyCareXName);
                    return ((EmergencyCare_Stucture)(x));
                }
                set {
                    this.SetElement(EmergencyCareXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual DeleteTransactionLocalType DeleteTransaction {
                get {
                    XElement x = this.GetElement(DeleteTransactionXName);
                    return ((DeleteTransactionLocalType)(x));
                }
                set {
                    this.SetElement(DeleteTransactionXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_NetChange, (EmergencyCare | DeleteTransaction), CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageTrailer_Structure CDSMessageTrailer {
                get {
                    XElement x = this.GetElement(CDSMessageTrailerXName);
                    return ((CDSMessageTrailer_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageTrailerXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Enforce CDS Protocols 010 = NET
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSProtocolIdentifierCode {
                get {
                    return CDSProtocolIdentifierCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSProtocolIdentifierCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSProtocolIdentifierCodeFixedValue);
                    }
                    this.SetAttribute(CDSProtocolIdentifierCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// All valid CDS Types
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSTypeCode {
                get {
                    XAttribute x = this.Attribute(CDSTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(CDSTypeCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CDSNetChangeAllMessageTypesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CDSMessageHeaderXName, typeof(CDSMessageHeader_Structure));
                localElementDictionary.Add(CDSTransactionHeader_NetChangeXName, typeof(CDSTransactionHeader_NetChange_Structure));
                localElementDictionary.Add(EmergencyCareXName, typeof(EmergencyCare_Stucture));
                localElementDictionary.Add(DeleteTransactionXName, typeof(DeleteTransactionLocalType));
                localElementDictionary.Add(CDSMessageTrailerXName, typeof(CDSMessageTrailer_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class DeleteTransactionLocalType : XTypedElement, IXMetaData {
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeleteTransaction", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
                
		public static explicit operator DeleteTransactionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DeleteTransactionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DeleteTransactionLocalType() {
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DeleteTransactionLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
        /// </para>
        /// </summary>
        public partial class CDSBulkGroup160MessageLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageHeaderXName = System.Xml.Linq.XName.Get("CDSMessageHeader", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTransactionHeader_BulkUpdateXName = System.Xml.Linq.XName.Get("CDSTransactionHeader_BulkUpdate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EmergencyCareXName = System.Xml.Linq.XName.Get("EmergencyCare", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSMessageTrailerXName = System.Xml.Linq.XName.Get("CDSMessageTrailer", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSProtocolIdentifierCodeFixedValue = "020";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSBulkReplacementGroupCodeXName = System.Xml.Linq.XName.Get("CDSBulkReplacementGroupCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string CDSBulkReplacementGroupCodeFixedValue = "160";
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSBulkGroup-160-Message", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CDSBulkGroup160MessageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDSBulkGroup160MessageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CDSBulkGroup160MessageLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageHeaderXName), new NamedContentModelEntity(CDSTransactionHeader_BulkUpdateXName), new NamedContentModelEntity(EmergencyCareXName), new NamedContentModelEntity(CDSMessageTrailerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public CDSBulkGroup160MessageLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageHeader_Structure CDSMessageHeader {
                get {
                    XElement x = this.GetElement(CDSMessageHeaderXName);
                    return ((CDSMessageHeader_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageHeaderXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSTransactionHeader_BulkUpdate_Structure CDSTransactionHeader_BulkUpdate {
                get {
                    XElement x = this.GetElement(CDSTransactionHeader_BulkUpdateXName);
                    return ((CDSTransactionHeader_BulkUpdate_Structure)(x));
                }
                set {
                    this.SetElement(CDSTransactionHeader_BulkUpdateXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS TYPE 011
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual EmergencyCare_Stucture EmergencyCare {
                get {
                    XElement x = this.GetElement(EmergencyCareXName);
                    return ((EmergencyCare_Stucture)(x));
                }
                set {
                    this.SetElement(EmergencyCareXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CDSMessageHeader, CDSTransactionHeader_BulkUpdate, EmergencyCare, CDSMessageTrailer)
            /// </para>
            /// </summary>
            public virtual CDSMessageTrailer_Structure CDSMessageTrailer {
                get {
                    XElement x = this.GetElement(CDSMessageTrailerXName);
                    return ((CDSMessageTrailer_Structure)(x));
                }
                set {
                    this.SetElement(CDSMessageTrailerXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSProtocolIdentifierCode {
                get {
                    return CDSProtocolIdentifierCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSProtocolIdentifierCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSProtocolIdentifierCodeFixedValue);
                    }
                    this.SetAttribute(CDSProtocolIdentifierCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSBulkReplacementGroupCode {
                get {
                    return CDSBulkReplacementGroupCodeFixedValue;
                }
                set {
                    if (value.Equals(CDSBulkReplacementGroupCodeFixedValue)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, CDSBulkReplacementGroupCodeFixedValue);
                    }
                    this.SetAttribute(CDSBulkReplacementGroupCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// CDS Type 011 only
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string CDSTypeCode {
                get {
                    XAttribute x = this.Attribute(CDSTypeCodeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(CDSTypeCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CDSBulkGroup160MessageLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CDSMessageHeaderXName, typeof(CDSMessageHeader_Structure));
                localElementDictionary.Add(CDSTransactionHeader_BulkUpdateXName, typeof(CDSTransactionHeader_BulkUpdate_Structure));
                localElementDictionary.Add(EmergencyCareXName, typeof(EmergencyCare_Stucture));
                localElementDictionary.Add(CDSMessageTrailerXName, typeof(CDSMessageTrailer_Structure));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// CDS Interchange Header
    /// </para>
    /// <para>
    /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
    /// </para>
    /// </summary>
    public partial class CDSInterchangeHeader_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeSenderIdentityXName = System.Xml.Linq.XName.Get("CDSInterchangeSenderIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeReceiverIdentityXName = System.Xml.Linq.XName.Get("CDSInterchangeReceiverIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeControlReferenceXName = System.Xml.Linq.XName.Get("CDSInterchangeControlReference", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeDateOfPreparationXName = System.Xml.Linq.XName.Get("CDSInterchangeDateOfPreparation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeTimeOfPreparationXName = System.Xml.Linq.XName.Get("CDSInterchangeTimeOfPreparation", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeApplicationReferenceXName = System.Xml.Linq.XName.Get("CDSInterchangeApplicationReference", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeTestIndicatorXName = System.Xml.Linq.XName.Get("CDSInterchangeTestIndicator", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSInterchangeHeader_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSInterchangeHeader_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSInterchangeHeader_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSInterchangeHeader_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSInterchangeSenderIdentityXName), new NamedContentModelEntity(CDSInterchangeReceiverIdentityXName), new NamedContentModelEntity(CDSInterchangeControlReferenceXName), new NamedContentModelEntity(CDSInterchangeDateOfPreparationXName), new NamedContentModelEntity(CDSInterchangeTimeOfPreparationXName), new NamedContentModelEntity(CDSInterchangeApplicationReferenceXName), new NamedContentModelEntity(CDSInterchangeTestIndicatorXName));
        }
        
        /// <summary>
        /// <para>
        /// CDS Interchange Header
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public CDSInterchangeHeader_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeSenderIdentity {
            get {
                XElement x = this.GetElement(CDSInterchangeSenderIdentityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeSenderIdentityXName, value, "CDSInterchangeSenderIdentity", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeSenderIdentity_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeReceiverIdentity {
            get {
                XElement x = this.GetElement(CDSInterchangeReceiverIdentityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeReceiverIdentityXName, value, "CDSInterchangeReceiverIdentity", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeReceiverIdentity_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeControlReference {
            get {
                XElement x = this.GetElement(CDSInterchangeControlReferenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeControlReferenceXName, value, "CDSInterchangeControlReference", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeControlReference_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSInterchangeDateOfPreparation {
            get {
                XElement x = this.GetElement(CDSInterchangeDateOfPreparationXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeDateOfPreparationXName, value, "CDSInterchangeDateOfPreparation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeDateOfPreparation_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSInterchangeTimeOfPreparation {
            get {
                XElement x = this.GetElement(CDSInterchangeTimeOfPreparationXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeTimeOfPreparationXName, value, "CDSInterchangeTimeOfPreparation", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeTimeOfPreparation_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeApplicationReference {
            get {
                XElement x = this.GetElement(CDSInterchangeApplicationReferenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeApplicationReferenceXName, value, "CDSInterchangeApplicationReference", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeApplicationReference_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// It is recommended that test CDS should be  only be sent using separate Interchanges using this facility.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeSenderIdentity, CDSInterchangeReceiverIdentity, CDSInterchangeControlReference, CDSInterchangeDateOfPreparation, CDSInterchangeTimeOfPreparation, CDSInterchangeApplicationReference, CDSInterchangeTestIndicator?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeTestIndicator {
            get {
                XElement x = this.GetElement(CDSInterchangeTestIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CDSInterchangeTestIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CDSInterchangeTestIndicatorXName, value, "CDSInterchangeTestIndicator", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeTestIndicator_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSInterchangeHeader_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSInterchangeSenderIdentityXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeReceiverIdentityXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeControlReferenceXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeDateOfPreparationXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSInterchangeTimeOfPreparationXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSInterchangeApplicationReferenceXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeTestIndicatorXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CDS Interchange Trailer
    /// </para>
    /// <para>
    /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
    /// </para>
    /// </summary>
    public partial class CDSInterchangeTrailer_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeControlReferenceXName = System.Xml.Linq.XName.Get("CDSInterchangeControlReference", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeControlCountXName = System.Xml.Linq.XName.Get("CDSInterchangeControlCount", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeSenderIdentityXName = System.Xml.Linq.XName.Get("CDSInterchangeSenderIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSInterchangeReceiverIdentityXName = System.Xml.Linq.XName.Get("CDSInterchangeReceiverIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSInterchangeTrailer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSInterchangeTrailer_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSInterchangeTrailer_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSInterchangeTrailer_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSInterchangeControlReferenceXName), new NamedContentModelEntity(CDSInterchangeControlCountXName), new NamedContentModelEntity(CDSInterchangeSenderIdentityXName), new NamedContentModelEntity(CDSInterchangeReceiverIdentityXName));
        }
        
        /// <summary>
        /// <para>
        /// CDS Interchange Trailer
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
        /// </para>
        /// </summary>
        public CDSInterchangeTrailer_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeControlReference {
            get {
                XElement x = this.GetElement(CDSInterchangeControlReferenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeControlReferenceXName, value, "CDSInterchangeControlReference", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeControlReference_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
        /// </para>
        /// </summary>
        public virtual decimal CDSInterchangeControlCount {
            get {
                XElement x = this.GetElement(CDSInterchangeControlCountXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSInterchangeControlCountXName, value, "CDSInterchangeControlCount", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeControlCount_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeSenderIdentity {
            get {
                XElement x = this.GetElement(CDSInterchangeSenderIdentityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CDSInterchangeSenderIdentityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CDSInterchangeSenderIdentityXName, value, "CDSInterchangeSenderIdentity", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeSenderIdentity_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CDSInterchangeControlReference, CDSInterchangeControlCount, CDSInterchangeSenderIdentity?, CDSInterchangeReceiverIdentity?)
        /// </para>
        /// </summary>
        public virtual string CDSInterchangeReceiverIdentity {
            get {
                XElement x = this.GetElement(CDSInterchangeReceiverIdentityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CDSInterchangeReceiverIdentityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CDSInterchangeReceiverIdentityXName, value, "CDSInterchangeReceiverIdentity", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeReceiverIdentity_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSInterchangeTrailer_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSInterchangeControlReferenceXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeControlCountXName, typeof(decimal));
            localElementDictionary.Add(CDSInterchangeSenderIdentityXName, typeof(string));
            localElementDictionary.Add(CDSInterchangeReceiverIdentityXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CDS Message Header
    /// </para>
    /// <para>
    /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
    /// </para>
    /// </summary>
    public partial class CDSMessageHeader_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSMessageTypeXName = System.Xml.Linq.XName.Get("CDSMessageType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSMessageVersionNumberXName = System.Xml.Linq.XName.Get("CDSMessageVersionNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSMessageReferenceNumberXName = System.Xml.Linq.XName.Get("CDSMessageReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSMessageRecordIdentifierXName = System.Xml.Linq.XName.Get("CDSMessageRecordIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSMessageHeader_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSMessageHeader_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSMessageHeader_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSMessageHeader_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageTypeXName), new NamedContentModelEntity(CDSMessageVersionNumberXName), new NamedContentModelEntity(CDSMessageReferenceNumberXName), new NamedContentModelEntity(CDSMessageRecordIdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// CDS Message Header
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
        /// </para>
        /// </summary>
        public CDSMessageHeader_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
        /// </para>
        /// </summary>
        public virtual string CDSMessageType {
            get {
                XElement x = this.GetElement(CDSMessageTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSMessageTypeXName, value, "CDSMessageType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageType_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
        /// </para>
        /// </summary>
        public virtual string CDSMessageVersionNumber {
            get {
                XElement x = this.GetElement(CDSMessageVersionNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSMessageVersionNumberXName, value, "CDSMessageVersionNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageVersionNumber_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
        /// </para>
        /// </summary>
        public virtual decimal CDSMessageReferenceNumber {
            get {
                XElement x = this.GetElement(CDSMessageReferenceNumberXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSMessageReferenceNumberXName, value, "CDSMessageReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageReferenceNumber_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageType, CDSMessageVersionNumber, CDSMessageReferenceNumber, CDSMessageRecordIdentifier?)
        /// </para>
        /// </summary>
        public virtual string CDSMessageRecordIdentifier {
            get {
                XElement x = this.GetElement(CDSMessageRecordIdentifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CDSMessageRecordIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CDSMessageRecordIdentifierXName, value, "CDSMessageRecordIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageRecordIdentifier_Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSMessageHeader_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSMessageTypeXName, typeof(string));
            localElementDictionary.Add(CDSMessageVersionNumberXName, typeof(string));
            localElementDictionary.Add(CDSMessageReferenceNumberXName, typeof(decimal));
            localElementDictionary.Add(CDSMessageRecordIdentifierXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// CDS Message Trailer
    /// </para>
    /// <para>
    /// Regular expression: (CDSMessageReferenceNumber)
    /// </para>
    /// </summary>
    public partial class CDSMessageTrailer_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSMessageReferenceNumberXName = System.Xml.Linq.XName.Get("CDSMessageReferenceNumber", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSMessageTrailer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSMessageTrailer_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSMessageTrailer_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSMessageTrailer_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSMessageReferenceNumberXName));
        }
        
        /// <summary>
        /// <para>
        /// CDS Message Trailer
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageReferenceNumber)
        /// </para>
        /// </summary>
        public CDSMessageTrailer_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSMessageReferenceNumber)
        /// </para>
        /// </summary>
        public virtual decimal CDSMessageReferenceNumber {
            get {
                XElement x = this.GetElement(CDSMessageReferenceNumberXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSMessageReferenceNumberXName, value, "CDSMessageReferenceNumber", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageReferenceNumber_Type.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSMessageTrailer_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSMessageReferenceNumberXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// NET CHANGE CDS Transaction Header Group
    /// </para>
    /// <para>
    /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
    /// </para>
    /// </summary>
    public partial class CDSTransactionHeader_NetChange_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSUniqueIdentifierXName = System.Xml.Linq.XName.Get("CDSUniqueIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSUpdateTypeXName = System.Xml.Linq.XName.Get("CDSUpdateType", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSApplicableDateXName = System.Xml.Linq.XName.Get("CDSApplicableDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSApplicableTimeXName = System.Xml.Linq.XName.Get("CDSApplicableTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSActivityDateXName = System.Xml.Linq.XName.Get("CDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CDSSenderXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CDSSender", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CDSRecipientXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CDSRecipient", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> OrganisationIdentifier_CDSRecipientField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSTransactionHeader_NetChange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSTransactionHeader_NetChange_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSTransactionHeader_NetChange_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSTransactionHeader_NetChange_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSTypeCodeXName), new NamedContentModelEntity(CDSProtocolIdentifierCodeXName), new NamedContentModelEntity(CDSUniqueIdentifierXName), new NamedContentModelEntity(CDSUpdateTypeXName), new NamedContentModelEntity(CDSApplicableDateXName), new NamedContentModelEntity(CDSApplicableTimeXName), new NamedContentModelEntity(CDSActivityDateXName), new NamedContentModelEntity(OrganisationIdentifier_CDSSenderXName), new NamedContentModelEntity(OrganisationIdentifier_CDSRecipientXName));
        }
        
        /// <summary>
        /// <para>
        /// NET CHANGE CDS Transaction Header Group
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public CDSTransactionHeader_NetChange_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSTypeCode {
            get {
                XElement x = this.GetElement(CDSTypeCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSTypeCodeXName, value, "CDSTypeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSTypeCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSProtocolIdentifierCode {
            get {
                XElement x = this.GetElement(CDSProtocolIdentifierCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSProtocolIdentifierCodeXName, value, "CDSProtocolIdentifierCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSProtocolIdentifierCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSUniqueIdentifier {
            get {
                XElement x = this.GetElement(CDSUniqueIdentifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSUniqueIdentifierXName, value, "CDSUniqueIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSUniqueIdentifier_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSUpdateType {
            get {
                XElement x = this.GetElement(CDSUpdateTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSUpdateTypeXName, value, "CDSUpdateType", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSUpdateType_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSApplicableDate {
            get {
                XElement x = this.GetElement(CDSApplicableDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSApplicableDateXName, value, "CDSApplicableDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSApplicableDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSApplicableTime {
            get {
                XElement x = this.GetElement(CDSApplicableTimeXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSApplicableTimeXName, value, "CDSApplicableTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSApplicableTime_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Added in V6 For CDS Type 170 and the EAL "Census" CDS Types this data element carries the CDS CENSUS DATE
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSActivityDate {
            get {
                XElement x = this.GetElement(CDSActivityDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSActivityDateXName, value, "CDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSActivityDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string OrganisationIdentifier_CDSSender {
            get {
                XElement x = this.GetElement(OrganisationIdentifier_CDSSenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationIdentifier_CDSSenderXName, value, "OrganisationIdentifier_CDSSender", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSSender_Identifier_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier, CDSUpdateType, CDSApplicableDate, CDSApplicableTime, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual IList<string> OrganisationIdentifier_CDSRecipient {
            get {
                if ((this.OrganisationIdentifier_CDSRecipientField == null)) {
                    this.OrganisationIdentifier_CDSRecipientField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, OrganisationIdentifier_CDSRecipientXName);
                }
                return this.OrganisationIdentifier_CDSRecipientField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationIdentifier_CDSRecipientField = null;
                }
                else {
                    if ((this.OrganisationIdentifier_CDSRecipientField == null)) {
                        this.OrganisationIdentifier_CDSRecipientField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, OrganisationIdentifier_CDSRecipientXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.OrganisationIdentifier_CDSRecipientField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSTransactionHeader_NetChange_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSTypeCodeXName, typeof(string));
            localElementDictionary.Add(CDSProtocolIdentifierCodeXName, typeof(string));
            localElementDictionary.Add(CDSUniqueIdentifierXName, typeof(string));
            localElementDictionary.Add(CDSUpdateTypeXName, typeof(string));
            localElementDictionary.Add(CDSApplicableDateXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSApplicableTimeXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSActivityDateXName, typeof(System.DateTime));
            localElementDictionary.Add(OrganisationIdentifier_CDSSenderXName, typeof(string));
            localElementDictionary.Add(OrganisationIdentifier_CDSRecipientXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// BULK UPDATE CDS Transaction Header Group
    /// </para>
    /// <para>
    /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
    /// </para>
    /// </summary>
    public partial class CDSTransactionHeader_BulkUpdate_Structure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSTypeCodeXName = System.Xml.Linq.XName.Get("CDSTypeCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSProtocolIdentifierCodeXName = System.Xml.Linq.XName.Get("CDSProtocolIdentifierCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSUniqueIdentifierXName = System.Xml.Linq.XName.Get("CDSUniqueIdentifier", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSBulkReplacementGroupCodeXName = System.Xml.Linq.XName.Get("CDSBulkReplacementGroupCode", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSExtractDateXName = System.Xml.Linq.XName.Get("CDSExtractDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSExtractTimeXName = System.Xml.Linq.XName.Get("CDSExtractTime", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSReportPeriodStartDateXName = System.Xml.Linq.XName.Get("CDSReportPeriodStartDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSReportPeriodEndDateXName = System.Xml.Linq.XName.Get("CDSReportPeriodEndDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CDSActivityDateXName = System.Xml.Linq.XName.Get("CDSActivityDate", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CDSSenderXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CDSSender", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationIdentifier_CDSRecipientXName = System.Xml.Linq.XName.Get("OrganisationIdentifier_CDSRecipient", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> OrganisationIdentifier_CDSRecipientField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CDSTransactionHeader_BulkUpdate_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CDSTransactionHeader_BulkUpdate_Structure(XElement xe) { return XTypedServices.ToXTypedElement<CDSTransactionHeader_BulkUpdate_Structure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CDSTransactionHeader_BulkUpdate_Structure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CDSTypeCodeXName), new NamedContentModelEntity(CDSProtocolIdentifierCodeXName), new NamedContentModelEntity(CDSUniqueIdentifierXName), new NamedContentModelEntity(CDSBulkReplacementGroupCodeXName), new NamedContentModelEntity(CDSExtractDateXName), new NamedContentModelEntity(CDSExtractTimeXName), new NamedContentModelEntity(CDSReportPeriodStartDateXName), new NamedContentModelEntity(CDSReportPeriodEndDateXName), new NamedContentModelEntity(CDSActivityDateXName), new NamedContentModelEntity(OrganisationIdentifier_CDSSenderXName), new NamedContentModelEntity(OrganisationIdentifier_CDSRecipientXName));
        }
        
        /// <summary>
        /// <para>
        /// BULK UPDATE CDS Transaction Header Group
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public CDSTransactionHeader_BulkUpdate_Structure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSTypeCode {
            get {
                XElement x = this.GetElement(CDSTypeCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSTypeCodeXName, value, "CDSTypeCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSTypeCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSProtocolIdentifierCode {
            get {
                XElement x = this.GetElement(CDSProtocolIdentifierCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSProtocolIdentifierCodeXName, value, "CDSProtocolIdentifierCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSProtocolIdentifierCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSUniqueIdentifier {
            get {
                XElement x = this.GetElement(CDSUniqueIdentifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CDSUniqueIdentifierXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CDSUniqueIdentifierXName, value, "CDSUniqueIdentifier", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSUniqueIdentifier_Type.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string CDSBulkReplacementGroupCode {
            get {
                XElement x = this.GetElement(CDSBulkReplacementGroupCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSBulkReplacementGroupCodeXName, value, "CDSBulkReplacementGroupCode", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSBulkReplacementGroupCode_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSExtractDate {
            get {
                XElement x = this.GetElement(CDSExtractDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSExtractDateXName, value, "CDSExtractDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSExtractDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSExtractTime {
            get {
                XElement x = this.GetElement(CDSExtractTimeXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSExtractTimeXName, value, "CDSExtractTime", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSExtractTime_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSReportPeriodStartDate {
            get {
                XElement x = this.GetElement(CDSReportPeriodStartDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSReportPeriodStartDateXName, value, "CDSReportPeriodStartDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSReportPeriodStartDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSReportPeriodEndDate {
            get {
                XElement x = this.GetElement(CDSReportPeriodEndDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSReportPeriodEndDateXName, value, "CDSReportPeriodEndDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSReportPeriodEndDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Added in V6 For CDS Type 170 and the EAL "Census" CDS Types this data element carries the CDS CENSUS DATE
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual System.DateTime CDSActivityDate {
            get {
                XElement x = this.GetElement(CDSActivityDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElementWithValidation(CDSActivityDateXName, value, "CDSActivityDate", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSActivityDate_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual string OrganisationIdentifier_CDSSender {
            get {
                XElement x = this.GetElement(OrganisationIdentifier_CDSSenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(OrganisationIdentifier_CDSSenderXName, value, "OrganisationIdentifier_CDSSender", global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSSender_Identifier_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CDSTypeCode, CDSProtocolIdentifierCode, CDSUniqueIdentifier?, CDSBulkReplacementGroupCode, CDSExtractDate, CDSExtractTime, CDSReportPeriodStartDate, CDSReportPeriodEndDate, CDSActivityDate, OrganisationIdentifier_CDSSender, OrganisationIdentifier_CDSRecipient*)
        /// </para>
        /// </summary>
        public virtual IList<string> OrganisationIdentifier_CDSRecipient {
            get {
                if ((this.OrganisationIdentifier_CDSRecipientField == null)) {
                    this.OrganisationIdentifier_CDSRecipientField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, OrganisationIdentifier_CDSRecipientXName);
                }
                return this.OrganisationIdentifier_CDSRecipientField;
            }
            set {
                if ((value == null)) {
                    this.OrganisationIdentifier_CDSRecipientField = null;
                }
                else {
                    if ((this.OrganisationIdentifier_CDSRecipientField == null)) {
                        this.OrganisationIdentifier_CDSRecipientField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, OrganisationIdentifier_CDSRecipientXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.OrganisationIdentifier_CDSRecipientField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CDSTransactionHeader_BulkUpdate_Structure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CDSTypeCodeXName, typeof(string));
            localElementDictionary.Add(CDSProtocolIdentifierCodeXName, typeof(string));
            localElementDictionary.Add(CDSUniqueIdentifierXName, typeof(string));
            localElementDictionary.Add(CDSBulkReplacementGroupCodeXName, typeof(string));
            localElementDictionary.Add(CDSExtractDateXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSExtractTimeXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSReportPeriodStartDateXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSReportPeriodEndDateXName, typeof(System.DateTime));
            localElementDictionary.Add(CDSActivityDateXName, typeof(System.DateTime));
            localElementDictionary.Add(OrganisationIdentifier_CDSSenderXName, typeof(string));
            localElementDictionary.Add(OrganisationIdentifier_CDSRecipientXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("Address_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Address_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalActivity_AE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivity_AE_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalActivity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivity_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalActivityGroupOPCS_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivityGroupOPCS_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalActivityGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalActivityGroupREAD_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalTreatmentGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalTreatmentGroupAAndE_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalDiagnosis_AE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosis_AE_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalDiagnosis_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosis_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupICD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupICD_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupREAD_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalDiagnosisGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalDiagnosisGroupAAndE_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalInvestigation_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigation_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalInvestigationGroupICD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupICD_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalInvestigationGroupREAD_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupREAD_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClinicalInvestigationGroupAAndE_Type", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ClinicalInvestigationGroupAAndE_Type));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GPRegistration_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.GPRegistration_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConsultantEpisodeLengthOfStayAdjustment_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ConsultantEpisodeLengthOfStayAdjustment_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientPathway_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientPathway_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonName_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonName_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Referrer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Referrer_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceAgreementDetails_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ServiceAgreementDetails_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceAgreementDetails_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ServiceAgreementDetails_EAL_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceAgreementChange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ServiceAgreementChange_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_General_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientIdentity_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientIdentity_General_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_General_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_OtherDelivery_General_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_OtherDelivery_General_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_Birth_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientIdentity_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientIdentity_Birth_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_Birth_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_Delivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_OtherDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_OtherDelivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientIdentity_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientIdentity_Delivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_Delivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_Delivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_Psychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_Psychiatric_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_Psychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_Psychiatric_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_AAndE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_AAndE_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_AAndE_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_AAndE_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_Outpatient_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_Outpatient_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_CareActivity_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_CareActivity_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_EAL_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_EAL_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_EAL_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroup_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroup_Baby_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonIdentity_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonIdentity_Baby_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonCharacteristics_Baby_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonCharacteristics_Baby_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroup_Mother_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroup_Mother_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Group_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonIdentity_Mother_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonIdentity_Mother_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupConsultant_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupConsultant_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HospitalProviderSpell_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpell_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HospitalProviderSpell_Birth_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpell_Birth_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HospitalProviderSpell_GeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpell_GeneralEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HospitalProviderSpellPsychiatric_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.HospitalProviderSpellPsychiatric_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FinishedBirthEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FinishedBirthEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FinishedGeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FinishedGeneralEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FinishedDeliveryEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.FinishedDeliveryEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnfinishedBirthEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UnfinishedBirthEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnfinishedGeneralEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UnfinishedGeneralEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnfinishedDeliveryEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.UnfinishedDeliveryEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PsychiatricEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PsychiatricEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("APCLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.APCLocationGroup_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CriticalCarePeriod_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AdultOrPaediatricCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdultOrPaediatricCriticalCarePeriod_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NeonatalCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.NeonatalCriticalCarePeriod_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PaediatricCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PaediatricCriticalCarePeriod_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AdultCriticalCarePeriod_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AdultCriticalCarePeriod_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AntenatalCare_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AntenatalCare_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BirthOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.BirthOccurrence_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeliveryOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.DeliveryOccurrence_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LabourDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.LabourDelivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OtherLabourDelivery_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OtherLabourDelivery_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Pregnancy_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Pregnancy_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AttendanceOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CareEpisode_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CareEpisode_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CareAttendance_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CareAttendance_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OutpatientReferral_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OutpatientReferral_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MissedAppointmentOccurrence_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.MissedAppointmentOccurrence_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupAAndEConsultant_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupAAndEConsultant_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AttendanceLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceLocationGroup_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EALEntry_APCReference_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EALEntry_APCReference_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EALEntryRemoval_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EALEntryRemoval_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EDPEntryRemoval_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EDPEntryRemoval_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EDPOfferOfAdmission_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EDPOfferOfAdmission_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EDPPatientSuspension_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EDPPatientSuspension_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ElectiveAdmissionListEntry_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ElectiveAdmissionListEntry_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OfferOfAdmission_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OfferOfAdmission_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OriginalEALEntry_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OriginalEALEntry_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AAndEAttendanceLocationGroup_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AAndEAttendanceLocationGroup_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Referral_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.Referral_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverseasVisitorStatus_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatus_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProfessionalsInvolved_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.ProfessionalsInvolved_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverseasVisitorStatusClassificationAtCDSActivityDate_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.OverseasVisitorStatusClassificationAtCDSActivityDate_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EmergencyCare_Stucture", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.EmergencyCare_Stucture));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientPathway_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientPathway_EC_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonGroupPatient_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PersonGroupPatient_EC_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientIdentity", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientIdentity));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PatientCharacteristics_EmergencyCare_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.PatientCharacteristics_EmergencyCare_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AttendanceOccurrence_EC_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.AttendanceOccurrence_EC_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSInterchange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchange_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSInterchangeHeader_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeHeader_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSInterchangeTrailer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSInterchangeTrailer_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSMessageHeader_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageHeader_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSMessageTrailer_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSMessageTrailer_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSTransactionHeader_NetChange_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSTransactionHeader_NetChange_Structure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CDSTransactionHeader_BulkUpdate_Structure", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSTransactionHeader_BulkUpdate_Structure));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("CDS-XMLInterchange", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns"), typeof(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("CDS-XMLInterchange", "http://www.nhsia.nhs.uk/DataStandards/XMLschema/CDS/ns")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public CDSXMLInterchange CDSXMLInterchange {  get {return rootObject as CDSXMLInterchange; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(CDSXMLInterchange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange CDSXMLInterchange {  get {return rootObject as global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange; } }
        
        private XRoot() {
        }
        
        public XRoot(global::www.nhsia.nhs.uk.DataStandards.XMLschema.CDS.ns.CDSXMLInterchange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
