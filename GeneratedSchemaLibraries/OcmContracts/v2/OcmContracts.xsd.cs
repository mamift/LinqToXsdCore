//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ocm.Contracts {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
    /// </para>
    /// </summary>
    public partial class Contract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SupplierXName = System.Xml.Linq.XName.Get("Supplier", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartDateXName = System.Xml.Linq.XName.Get("StartDate", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReviewPeriodXName = System.Xml.Linq.XName.Get("ReviewPeriod", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<periodType> ReviewPeriodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndDateXName = System.Xml.Linq.XName.Get("EndDate", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomDataXName = System.Xml.Linq.XName.Get("CustomData", "urn:ocm/#/ocmContracts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Contract(XElement xe) { return XTypedServices.ToXTypedElement<Contract>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Contract() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NameXName), new NamedContentModelEntity(DescriptionXName), new NamedContentModelEntity(SupplierXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(StartDateXName), new NamedContentModelEntity(ReviewPeriodXName), new NamedContentModelEntity(EndDateXName), new NamedContentModelEntity(CustomDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public Contract() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XElement x = this.GetElement(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the supplier or vendor that is the contractor.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual string Supplier {
            get {
                XElement x = this.GetElement(SupplierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SupplierXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The value of the contract from the contractee perspective.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Value {
            get {
                XElement x = this.GetElement(ValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ValueXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(ValueXName, value, "Value", global::Ocm.Contracts.money.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The date the terms of the contract become enforceable.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual absoluteDateType StartDate {
            get {
                XElement x = this.GetElement(StartDateXName);
                return ((absoluteDateType)(x));
            }
            set {
                this.SetElement(StartDateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A contract can have any number of arbitrary review periods. They can be treated like a duration, like a week, or a single instance of time (one datetime).
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual IList<periodType> ReviewPeriod {
            get {
                if ((this.ReviewPeriodField == null)) {
                    this.ReviewPeriodField = new XTypedList<periodType>(this, LinqToXsdTypeManager.Instance, ReviewPeriodXName);
                }
                return this.ReviewPeriodField;
            }
            set {
                if ((value == null)) {
                    this.ReviewPeriodField = null;
                }
                else {
                    if ((this.ReviewPeriodField == null)) {
                        this.ReviewPeriodField = XTypedList<periodType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReviewPeriodXName);
                    }
                    else {
                        XTypedServices.SetList<periodType>(this.ReviewPeriodField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The date the contract expires.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual absoluteDateType EndDate {
            get {
                XElement x = this.GetElement(EndDateXName);
                return ((absoluteDateType)(x));
            }
            set {
                this.SetElement(EndDateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Store custom data here.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, Supplier?, Value?, StartDate, ReviewPeriod*, EndDate, CustomData?)
        /// </para>
        /// </summary>
        public virtual CustomDataLocalType CustomData {
            get {
                XElement x = this.GetElement(CustomDataXName);
                return ((CustomDataLocalType)(x));
            }
            set {
                this.SetElement(CustomDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Contract Load(string xmlFile) {
            return XTypedServices.Load<Contract>(xmlFile);
        }
        
        public static Contract Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Contract>(xmlFile);
        }
        
        public static Contract Parse(string xml) {
            return XTypedServices.Parse<Contract>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Contract>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(DescriptionXName, typeof(string));
            localElementDictionary.Add(SupplierXName, typeof(string));
            localElementDictionary.Add(ValueXName, typeof(decimal));
            localElementDictionary.Add(StartDateXName, typeof(absoluteDateType));
            localElementDictionary.Add(ReviewPeriodXName, typeof(periodType));
            localElementDictionary.Add(EndDateXName, typeof(absoluteDateType));
            localElementDictionary.Add(CustomDataXName, typeof(CustomDataLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class CustomDataLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomData", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator CustomDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CustomDataLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public CustomDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CustomDataLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "urn:ocm/#/ocmContracts"), 2)));
                validationStates = new FSM(1, new Set<int>(2), transitions);
            }
        }
    }
    
    public sealed class money {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2048)), null, 2, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private money() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Specifies the type of calculation to perform on the date (either calculate before or after)
    /// </para>
    /// </summary>
    public enum calculationType {
        
        before,
        
        after,
    }
    
    /// <summary>
    /// <para>
    /// Specifies the type of calculation to perform on the date (either calculate before or after)
    /// </para>
    /// </summary>
    public sealed class calculationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "before",
                        "after"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private calculationTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A periodType represnts a specific time period or date within the term of a contract that can be used to notify or remind users to do something, like review the contract terms etc.
    ///
    ///This type allows for computing the date or date ranges from a given expression, and storing the date or duration after it's been computed. 
    /// </para>
    /// <para>
    /// Regular expression: (StartBoundary, EndBoundary?, ComputedDuration?)
    /// </para>
    /// </summary>
    public partial class periodType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartBoundaryXName = System.Xml.Linq.XName.Get("StartBoundary", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndBoundaryXName = System.Xml.Linq.XName.Get("EndBoundary", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComputedDurationXName = System.Xml.Linq.XName.Get("ComputedDuration", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsComputedXName = System.Xml.Linq.XName.Get("IsComputed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsDurationXName = System.Xml.Linq.XName.Get("IsDuration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool IsDurationDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("periodType", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator periodType(XElement xe) { return XTypedServices.ToXTypedElement<periodType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static periodType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(ComputedDurationXName));
        }
        
        /// <summary>
        /// <para>
        /// A periodType represnts a specific time period or date within the term of a contract that can be used to notify or remind users to do something, like review the contract terms etc.
        ///
        ///This type allows for computing the date or date ranges from a given expression, and storing the date or duration after it's been computed. 
        /// </para>
        /// <para>
        /// Regular expression: (StartBoundary, EndBoundary?, ComputedDuration?)
        /// </para>
        /// </summary>
        public periodType() {
        }
        
        /// <summary>
        /// <para>
        /// Specify the start datetime of this period. Only specifying this means this periodType functions as an instant of time and not a duration.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StartBoundary, EndBoundary?, ComputedDuration?)
        /// </para>
        /// </summary>
        public virtual computeExpressionType StartBoundary {
            get {
                XElement x = this.GetElement(StartBoundaryXName);
                return ((computeExpressionType)(x));
            }
            set {
                this.SetElement(StartBoundaryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Specify this optional EndDuration to make this a time spanning-period
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StartBoundary, EndBoundary?, ComputedDuration?)
        /// </para>
        /// </summary>
        public virtual computeExpressionType EndBoundary {
            get {
                XElement x = this.GetElement(EndBoundaryXName);
                return ((computeExpressionType)(x));
            }
            set {
                this.SetElement(EndBoundaryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// If an EndBoundary was specified, then this is the computed duration.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StartBoundary, EndBoundary?, ComputedDuration?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? ComputedDuration {
            get {
                XElement x = this.GetElement(ComputedDurationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(ComputedDurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? IsComputed {
            get {
                XAttribute x = this.Attribute(IsComputedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(IsComputedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool IsDuration {
            get {
                XAttribute x = this.Attribute(IsDurationXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, IsDurationDefaultValue);
            }
            set {
                this.SetAttribute(IsDurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<periodType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartBoundaryXName, typeof(computeExpressionType));
            localElementDictionary.Add(EndBoundaryXName, typeof(computeExpressionType));
            localElementDictionary.Add(ComputedDurationXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Before | After)?
    /// </para>
    /// </summary>
    public partial class computeExpressionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeforeXName = System.Xml.Linq.XName.Get("Before", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AfterXName = System.Xml.Linq.XName.Get("After", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateTimeValueXName = System.Xml.Linq.XName.Get("DateTimeValue", "urn:ocm/#/ocmContracts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computeExpressionType", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computeExpressionType(XElement xe) { return XTypedServices.ToXTypedElement<computeExpressionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computeExpressionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(BeforeXName), new NamedContentModelEntity(AfterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Before | After)?
        /// </para>
        /// </summary>
        public computeExpressionType() {
        }
        
        public computeExpressionType(BeforeLocalType Before) {
            this.Before = Before;
        }
        
        public computeExpressionType(AfterLocalType After) {
            this.After = After;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Before | After)?
        /// </para>
        /// </summary>
        public virtual BeforeLocalType Before {
            get {
                XElement x = this.GetElement(BeforeXName);
                return ((BeforeLocalType)(x));
            }
            set {
                this.SetElement(BeforeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Before | After)?
        /// </para>
        /// </summary>
        public virtual AfterLocalType After {
            get {
                XElement x = this.GetElement(AfterXName);
                return ((AfterLocalType)(x));
            }
            set {
                this.SetElement(AfterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? DateTimeValue {
            get {
                XAttribute x = this.Attribute(DateTimeValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(DateTimeValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computeExpressionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BeforeXName, typeof(BeforeLocalType));
            localElementDictionary.Add(AfterXName, typeof(AfterLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
        /// </para>
        /// </summary>
        public partial class BeforeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MinuteXName = System.Xml.Linq.XName.Get("Minute", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<int> MinuteField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HourXName = System.Xml.Linq.XName.Get("Hour", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> HourField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DayXName = System.Xml.Linq.XName.Get("Day", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> DayField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WeekXName = System.Xml.Linq.XName.Get("Week", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> WeekField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WorkweekXName = System.Xml.Linq.XName.Get("Workweek", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> WorkweekField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FortnightXName = System.Xml.Linq.XName.Get("Fortnight", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> FortnightField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MonthXName = System.Xml.Linq.XName.Get("Month", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> MonthField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName QuarterXName = System.Xml.Linq.XName.Get("Quarter", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> QuarterField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HalfYearXName = System.Xml.Linq.XName.Get("HalfYear", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> HalfYearField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName YearXName = System.Xml.Linq.XName.Get("Year", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> YearField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Before", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator BeforeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BeforeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static BeforeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(MinuteXName), new NamedContentModelEntity(HourXName), new NamedContentModelEntity(DayXName), new NamedContentModelEntity(WeekXName), new NamedContentModelEntity(WorkweekXName), new NamedContentModelEntity(FortnightXName), new NamedContentModelEntity(MonthXName), new NamedContentModelEntity(QuarterXName), new NamedContentModelEntity(HalfYearXName), new NamedContentModelEntity(YearXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public BeforeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<int> Minute {
                get {
                    if ((this.MinuteField == null)) {
                        this.MinuteField = new XSimpleList<int>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, MinuteXName);
                    }
                    return this.MinuteField;
                }
                set {
                    if ((value == null)) {
                        this.MinuteField = null;
                    }
                    else {
                        if ((this.MinuteField == null)) {
                            this.MinuteField = XSimpleList<int>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, value, MinuteXName);
                        }
                        else {
                            XTypedServices.SetList<System.Int32>(this.MinuteField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Hour {
                get {
                    if ((this.HourField == null)) {
                        this.HourField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, HourXName);
                    }
                    return this.HourField;
                }
                set {
                    if ((value == null)) {
                        this.HourField = null;
                    }
                    else {
                        if ((this.HourField == null)) {
                            this.HourField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, HourXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.HourField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Day {
                get {
                    if ((this.DayField == null)) {
                        this.DayField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, DayXName);
                    }
                    return this.DayField;
                }
                set {
                    if ((value == null)) {
                        this.DayField = null;
                    }
                    else {
                        if ((this.DayField == null)) {
                            this.DayField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, DayXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.DayField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Week {
                get {
                    if ((this.WeekField == null)) {
                        this.WeekField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, WeekXName);
                    }
                    return this.WeekField;
                }
                set {
                    if ((value == null)) {
                        this.WeekField = null;
                    }
                    else {
                        if ((this.WeekField == null)) {
                            this.WeekField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, WeekXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.WeekField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Workweek {
                get {
                    if ((this.WorkweekField == null)) {
                        this.WorkweekField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, WorkweekXName);
                    }
                    return this.WorkweekField;
                }
                set {
                    if ((value == null)) {
                        this.WorkweekField = null;
                    }
                    else {
                        if ((this.WorkweekField == null)) {
                            this.WorkweekField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, WorkweekXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.WorkweekField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Fortnight {
                get {
                    if ((this.FortnightField == null)) {
                        this.FortnightField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, FortnightXName);
                    }
                    return this.FortnightField;
                }
                set {
                    if ((value == null)) {
                        this.FortnightField = null;
                    }
                    else {
                        if ((this.FortnightField == null)) {
                            this.FortnightField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, FortnightXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.FortnightField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Month {
                get {
                    if ((this.MonthField == null)) {
                        this.MonthField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, MonthXName);
                    }
                    return this.MonthField;
                }
                set {
                    if ((value == null)) {
                        this.MonthField = null;
                    }
                    else {
                        if ((this.MonthField == null)) {
                            this.MonthField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, MonthXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.MonthField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Quarter {
                get {
                    if ((this.QuarterField == null)) {
                        this.QuarterField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, QuarterXName);
                    }
                    return this.QuarterField;
                }
                set {
                    if ((value == null)) {
                        this.QuarterField = null;
                    }
                    else {
                        if ((this.QuarterField == null)) {
                            this.QuarterField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, QuarterXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.QuarterField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> HalfYear {
                get {
                    if ((this.HalfYearField == null)) {
                        this.HalfYearField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, HalfYearXName);
                    }
                    return this.HalfYearField;
                }
                set {
                    if ((value == null)) {
                        this.HalfYearField = null;
                    }
                    else {
                        if ((this.HalfYearField == null)) {
                            this.HalfYearField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, HalfYearXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.HalfYearField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Year {
                get {
                    if ((this.YearField == null)) {
                        this.YearField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, YearXName);
                    }
                    return this.YearField;
                }
                set {
                    if ((value == null)) {
                        this.YearField = null;
                    }
                    else {
                        if ((this.YearField == null)) {
                            this.YearField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, YearXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.YearField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<BeforeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(MinuteXName, typeof(int));
                localElementDictionary.Add(HourXName, typeof(decimal));
                localElementDictionary.Add(DayXName, typeof(decimal));
                localElementDictionary.Add(WeekXName, typeof(decimal));
                localElementDictionary.Add(WorkweekXName, typeof(decimal));
                localElementDictionary.Add(FortnightXName, typeof(decimal));
                localElementDictionary.Add(MonthXName, typeof(decimal));
                localElementDictionary.Add(QuarterXName, typeof(decimal));
                localElementDictionary.Add(HalfYearXName, typeof(decimal));
                localElementDictionary.Add(YearXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
        /// </para>
        /// </summary>
        public partial class AfterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MinuteXName = System.Xml.Linq.XName.Get("Minute", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<int> MinuteField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HourXName = System.Xml.Linq.XName.Get("Hour", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> HourField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DayXName = System.Xml.Linq.XName.Get("Day", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> DayField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WeekXName = System.Xml.Linq.XName.Get("Week", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> WeekField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WorkweekXName = System.Xml.Linq.XName.Get("Workweek", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> WorkweekField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FortnightXName = System.Xml.Linq.XName.Get("Fortnight", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> FortnightField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MonthXName = System.Xml.Linq.XName.Get("Month", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> MonthField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName QuarterXName = System.Xml.Linq.XName.Get("Quarter", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> QuarterField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HalfYearXName = System.Xml.Linq.XName.Get("HalfYear", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> HalfYearField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName YearXName = System.Xml.Linq.XName.Get("Year", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<decimal> YearField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("After", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AfterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AfterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AfterLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(MinuteXName), new NamedContentModelEntity(HourXName), new NamedContentModelEntity(DayXName), new NamedContentModelEntity(WeekXName), new NamedContentModelEntity(WorkweekXName), new NamedContentModelEntity(FortnightXName), new NamedContentModelEntity(MonthXName), new NamedContentModelEntity(QuarterXName), new NamedContentModelEntity(HalfYearXName), new NamedContentModelEntity(YearXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public AfterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<int> Minute {
                get {
                    if ((this.MinuteField == null)) {
                        this.MinuteField = new XSimpleList<int>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, MinuteXName);
                    }
                    return this.MinuteField;
                }
                set {
                    if ((value == null)) {
                        this.MinuteField = null;
                    }
                    else {
                        if ((this.MinuteField == null)) {
                            this.MinuteField = XSimpleList<int>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, value, MinuteXName);
                        }
                        else {
                            XTypedServices.SetList<System.Int32>(this.MinuteField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Hour {
                get {
                    if ((this.HourField == null)) {
                        this.HourField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, HourXName);
                    }
                    return this.HourField;
                }
                set {
                    if ((value == null)) {
                        this.HourField = null;
                    }
                    else {
                        if ((this.HourField == null)) {
                            this.HourField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, HourXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.HourField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Day {
                get {
                    if ((this.DayField == null)) {
                        this.DayField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, DayXName);
                    }
                    return this.DayField;
                }
                set {
                    if ((value == null)) {
                        this.DayField = null;
                    }
                    else {
                        if ((this.DayField == null)) {
                            this.DayField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, DayXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.DayField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Week {
                get {
                    if ((this.WeekField == null)) {
                        this.WeekField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, WeekXName);
                    }
                    return this.WeekField;
                }
                set {
                    if ((value == null)) {
                        this.WeekField = null;
                    }
                    else {
                        if ((this.WeekField == null)) {
                            this.WeekField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, WeekXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.WeekField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Workweek {
                get {
                    if ((this.WorkweekField == null)) {
                        this.WorkweekField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, WorkweekXName);
                    }
                    return this.WorkweekField;
                }
                set {
                    if ((value == null)) {
                        this.WorkweekField = null;
                    }
                    else {
                        if ((this.WorkweekField == null)) {
                            this.WorkweekField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, WorkweekXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.WorkweekField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Fortnight {
                get {
                    if ((this.FortnightField == null)) {
                        this.FortnightField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, FortnightXName);
                    }
                    return this.FortnightField;
                }
                set {
                    if ((value == null)) {
                        this.FortnightField = null;
                    }
                    else {
                        if ((this.FortnightField == null)) {
                            this.FortnightField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, FortnightXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.FortnightField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Month {
                get {
                    if ((this.MonthField == null)) {
                        this.MonthField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, MonthXName);
                    }
                    return this.MonthField;
                }
                set {
                    if ((value == null)) {
                        this.MonthField = null;
                    }
                    else {
                        if ((this.MonthField == null)) {
                            this.MonthField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, MonthXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.MonthField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Quarter {
                get {
                    if ((this.QuarterField == null)) {
                        this.QuarterField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, QuarterXName);
                    }
                    return this.QuarterField;
                }
                set {
                    if ((value == null)) {
                        this.QuarterField = null;
                    }
                    else {
                        if ((this.QuarterField == null)) {
                            this.QuarterField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, QuarterXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.QuarterField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> HalfYear {
                get {
                    if ((this.HalfYearField == null)) {
                        this.HalfYearField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, HalfYearXName);
                    }
                    return this.HalfYearField;
                }
                set {
                    if ((value == null)) {
                        this.HalfYearField = null;
                    }
                    else {
                        if ((this.HalfYearField == null)) {
                            this.HalfYearField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, HalfYearXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.HalfYearField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Minute? | Hour? | Day? | Week? | Workweek? | Fortnight? | Month? | Quarter? | HalfYear? | Year?)+)
            /// </para>
            /// </summary>
            public virtual IList<decimal> Year {
                get {
                    if ((this.YearField == null)) {
                        this.YearField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, YearXName);
                    }
                    return this.YearField;
                }
                set {
                    if ((value == null)) {
                        this.YearField = null;
                    }
                    else {
                        if ((this.YearField == null)) {
                            this.YearField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, YearXName);
                        }
                        else {
                            XTypedServices.SetList<System.Decimal>(this.YearField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AfterLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(MinuteXName, typeof(int));
                localElementDictionary.Add(HourXName, typeof(decimal));
                localElementDictionary.Add(DayXName, typeof(decimal));
                localElementDictionary.Add(WeekXName, typeof(decimal));
                localElementDictionary.Add(WorkweekXName, typeof(decimal));
                localElementDictionary.Add(FortnightXName, typeof(decimal));
                localElementDictionary.Add(MonthXName, typeof(decimal));
                localElementDictionary.Add(QuarterXName, typeof(decimal));
                localElementDictionary.Add(HalfYearXName, typeof(decimal));
                localElementDictionary.Add(YearXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public partial class absoluteDateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("absoluteDateType", "urn:ocm/#/ocmContracts");
        
		public static explicit operator absoluteDateType(XElement xe) { return XTypedServices.ToXTypedElement<absoluteDateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public absoluteDateType() {
        }
        
        public virtual System.DateTime TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<absoluteDateType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("periodType", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.periodType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computeExpressionType", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.computeExpressionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("absoluteDateType", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.absoluteDateType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.Contract));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Contract Contract {  get {return rootObject as Contract; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Contract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Ocm.Contracts.Contract Contract {  get {return rootObject as global::Ocm.Contracts.Contract; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Ocm.Contracts.Contract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
