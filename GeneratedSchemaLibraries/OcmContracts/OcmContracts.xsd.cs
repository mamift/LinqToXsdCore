//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ocm.Contracts {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
    /// </para>
    /// </summary>
    public partial class Contract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartDateXName = System.Xml.Linq.XName.Get("StartDate", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OtherDatesXName = System.Xml.Linq.XName.Get("OtherDates", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndDateXName = System.Xml.Linq.XName.Get("EndDate", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VendorXName = System.Xml.Linq.XName.Get("Vendor", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomDataXName = System.Xml.Linq.XName.Get("CustomData", "urn:ocm/#/ocmContracts");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Contract(XElement xe) { return XTypedServices.ToXTypedElement<Contract>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Contract() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NameXName), new NamedContentModelEntity(DescriptionXName), new NamedContentModelEntity(StartDateXName), new NamedContentModelEntity(OtherDatesXName), new NamedContentModelEntity(EndDateXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(VendorXName), new NamedContentModelEntity(CustomDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public Contract() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XElement x = this.GetElement(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual System.DateTime StartDate {
            get {
                XElement x = this.GetElement(StartDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(StartDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual OtherDatesLocalType OtherDates {
            get {
                XElement x = this.GetElement(OtherDatesXName);
                return ((OtherDatesLocalType)(x));
            }
            set {
                this.SetElement(OtherDatesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual System.DateTime EndDate {
            get {
                XElement x = this.GetElement(EndDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(EndDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Value {
            get {
                XElement x = this.GetElement(ValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ValueXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(ValueXName, value, "Value", global::Ocm.Contracts.money.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The vendor's name.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual VendorLocalType Vendor {
            get {
                XElement x = this.GetElement(VendorXName);
                return ((VendorLocalType)(x));
            }
            set {
                this.SetElement(VendorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Store custom data here.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name, Description, StartDate, OtherDates?, EndDate, Value?, Vendor?, CustomData?)
        /// </para>
        /// </summary>
        public virtual CustomDataLocalType CustomData {
            get {
                XElement x = this.GetElement(CustomDataXName);
                return ((CustomDataLocalType)(x));
            }
            set {
                this.SetElement(CustomDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Contract Load(string xmlFile) {
            return XTypedServices.Load<Contract>(xmlFile);
        }
        
        public static Contract Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Contract>(xmlFile);
        }
        
        public static Contract Parse(string xml) {
            return XTypedServices.Parse<Contract>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Contract>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(DescriptionXName, typeof(string));
            localElementDictionary.Add(StartDateXName, typeof(System.DateTime));
            localElementDictionary.Add(OtherDatesXName, typeof(OtherDatesLocalType));
            localElementDictionary.Add(EndDateXName, typeof(System.DateTime));
            localElementDictionary.Add(ValueXName, typeof(decimal));
            localElementDictionary.Add(VendorXName, typeof(VendorLocalType));
            localElementDictionary.Add(CustomDataXName, typeof(CustomDataLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Date | DateCalculation))*
        /// </para>
        /// </summary>
        public partial class OtherDatesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DateXName = System.Xml.Linq.XName.Get("Date", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<otherDate> DateField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DateCalculationXName = System.Xml.Linq.XName.Get("DateCalculation", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<calculatedDate> DateCalculationField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherDates", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator OtherDatesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OtherDatesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static OtherDatesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(DateXName), new NamedContentModelEntity(DateCalculationXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((Date | DateCalculation))*
            /// </para>
            /// </summary>
            public OtherDatesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Date | DateCalculation))*
            /// </para>
            /// </summary>
            public virtual IList<otherDate> Date {
                get {
                    if ((this.DateField == null)) {
                        this.DateField = new XTypedList<otherDate>(this, LinqToXsdTypeManager.Instance, DateXName);
                    }
                    return this.DateField;
                }
                set {
                    if ((value == null)) {
                        this.DateField = null;
                    }
                    else {
                        if ((this.DateField == null)) {
                            this.DateField = XTypedList<otherDate>.Initialize(this, LinqToXsdTypeManager.Instance, value, DateXName);
                        }
                        else {
                            XTypedServices.SetList<otherDate>(this.DateField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((Date | DateCalculation))*
            /// </para>
            /// </summary>
            public virtual IList<calculatedDate> DateCalculation {
                get {
                    if ((this.DateCalculationField == null)) {
                        this.DateCalculationField = new XTypedList<calculatedDate>(this, LinqToXsdTypeManager.Instance, DateCalculationXName);
                    }
                    return this.DateCalculationField;
                }
                set {
                    if ((value == null)) {
                        this.DateCalculationField = null;
                    }
                    else {
                        if ((this.DateCalculationField == null)) {
                            this.DateCalculationField = XTypedList<calculatedDate>.Initialize(this, LinqToXsdTypeManager.Instance, value, DateCalculationXName);
                        }
                        else {
                            XTypedServices.SetList<calculatedDate>(this.DateCalculationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<OtherDatesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DateXName, typeof(otherDate));
                localElementDictionary.Add(DateCalculationXName, typeof(calculatedDate));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        public partial class VendorLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Vendor", "urn:ocm/#/ocmContracts");
            
		public static explicit operator VendorLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VendorLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public VendorLocalType() {
            }
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Description {
                get {
                    XAttribute x = this.Attribute(DescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VendorLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class CustomDataLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomData", "urn:ocm/#/ocmContracts");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator CustomDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CustomDataLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public CustomDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CustomDataLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "urn:ocm/#/ocmContracts"), 2)));
                validationStates = new FSM(1, new Set<int>(2), transitions);
            }
        }
    }
    
    public enum dateTypes {
        
        ContractReviewDate,
        
        PaymentDate,
        
        OtherReviewDate,
    }
    
    public sealed class dateTypesValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ContractReviewDate",
                        "PaymentDate",
                        "OtherReviewDate"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private dateTypesValidator() {
        }
    }
    
    public sealed class money {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2048)), null, 2, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private money() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Specifies the type of calculation to perform on the date (either calculate before or after)
    /// </para>
    /// </summary>
    public enum calculatedDurationType {
        
        before,
        
        after,
    }
    
    /// <summary>
    /// <para>
    /// Specifies the type of calculation to perform on the date (either calculate before or after)
    /// </para>
    /// </summary>
    public sealed class calculatedDurationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "before",
                        "after"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private calculatedDurationTypeValidator() {
        }
    }
    
    public partial class calculatedDate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalculatedDate1XName = System.Xml.Linq.XName.Get("CalculatedDate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("calculatedDate", "urn:ocm/#/ocmContracts");
        
		public static explicit operator calculatedDate(XElement xe) { return XTypedServices.ToXTypedElement<calculatedDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public calculatedDate() {
        }
        
        public virtual System.TimeSpan TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The type of calculation to make.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Ocm.Contracts.calculatedDurationType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Ocm.Contracts.calculatedDurationType)(Enum.Parse(typeof(Ocm.Contracts.calculatedDurationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The calculated date value stored for caching.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? CalculatedDate1 {
            get {
                XAttribute x = this.Attribute(CalculatedDate1XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(CalculatedDate1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<calculatedDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class otherDate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("otherDate", "urn:ocm/#/ocmContracts");
        
		public static explicit operator otherDate(XElement xe) { return XTypedServices.ToXTypedElement<otherDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public otherDate() {
        }
        
        public virtual System.DateTime TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Ocm.Contracts.dateTypes? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Ocm.Contracts.dateTypes)(Enum.Parse(typeof(Ocm.Contracts.dateTypes), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<otherDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("calculatedDate", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.calculatedDate));
            typeDictionary.Add(System.Xml.Linq.XName.Get("otherDate", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.otherDate));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts"), typeof(global::Ocm.Contracts.Contract));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Contract", "urn:ocm/#/ocmContracts")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Contract Contract {  get {return rootObject as Contract; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Contract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Ocm.Contracts.Contract Contract {  get {return rootObject as global::Ocm.Contracts.Contract; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Ocm.Contracts.Contract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
