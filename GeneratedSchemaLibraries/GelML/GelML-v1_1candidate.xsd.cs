//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace psidev.info.gelml {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    ///  An abstract class for describing database entries of biological molecules such as DNA and protein sequences, metabolites or lipids etc. 
    /// </para>
    /// </summary>
    public abstract partial class FuGEBioConceptualMoleculeConceptualMoleculeType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.ConceptualMolecule.ConceptualMoleculeType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGEBioConceptualMoleculeConceptualMoleculeType(XElement xe) {  return (FuGEBioConceptualMoleculeConceptualMoleculeType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An abstract class for describing database entries of biological molecules such as DNA and protein sequences, metabolites or lipids etc. 
        /// </para>
        /// </summary>
        public FuGEBioConceptualMoleculeConceptualMoleculeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Data can be an input to or an output from a ProtocolApplication. Data may be produced from a Material (data acquisition) or from another Data object (data transformation).  Examples of Data are gene expression measurements, or phenotypes associated with genetic manipulations. 
    /// </para>
    /// </summary>
    public abstract partial class FuGEBioDataDataType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Data.DataType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGEBioDataDataType(XElement xe) {  return (FuGEBioDataDataType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Data can be an input to or an output from a ProtocolApplication. Data may be produced from a Material (data acquisition) or from another Data object (data transformation).  Examples of Data are gene expression measurements, or phenotypes associated with genetic manipulations. 
        /// </para>
        /// </summary>
        public FuGEBioDataDataType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Data external to the XML instance document. The location of the data file is given in the location attribute. 
    /// </para>
    /// <para>
    /// Regular expression: (externalFormatDocumentation?, fileFormat?)
    /// </para>
    /// </summary>
    public partial class FuGEBioDataExternalDataType : global::psidev.info.gelml.FuGEBioDataDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalFormatDocumentationXName = System.Xml.Linq.XName.Get("externalFormatDocumentation", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileFormatXName = System.Xml.Linq.XName.Get("fileFormat", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Data.ExternalDataType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGEBioDataExternalDataType(XElement xe) { return XTypedServices.ToXTypedElement<FuGEBioDataExternalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGEBioDataExternalDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(externalFormatDocumentationXName), new NamedContentModelEntity(fileFormatXName));
        }
        
        /// <summary>
        /// <para>
        ///  Data external to the XML instance document. The location of the data file is given in the location attribute. 
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?)
        /// </para>
        /// </summary>
        public FuGEBioDataExternalDataType() {
        }
        
        /// <summary>
        /// <para>
        ///  A URI to access documentation and tools to interpret the external format of the ExternalData instance. For example, XML Schema or static libraries (APIs) to access binary formats. 
        ///         					 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?)
        /// </para>
        /// </summary>
        public virtual System.Uri externalFormatDocumentation {
            get {
                XElement x = this.GetElement(externalFormatDocumentationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(externalFormatDocumentationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The format of the ExternalData file, for example "tiff" for image files.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?)
        /// </para>
        /// </summary>
        public virtual fileFormatLocalType fileFormat {
            get {
                XElement x = this.GetElement(fileFormatXName);
                return ((fileFormatLocalType)(x));
            }
            set {
                this.SetElement(fileFormatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The location of the data file. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri location {
            get {
                XAttribute x = this.Attribute(locationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGEBioDataExternalDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(externalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(fileFormatXName, typeof(fileFormatLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class fileFormatLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("fileFormat", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator fileFormatLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fileFormatLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static fileFormatLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public fileFormatLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<fileFormatLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Data that is internal to an instance XML document.   InternalData can be extended with an element that defines a particular encoding or data type for the storage array or the subclass GenericInternalData should be instantiated.   The array will typically use pointer arithmetic to access values based on the rank (e.g. number of)  Dimensions and their respective sizes (e.g. the number of contained DimensionElements). 
    /// </para>
    /// </summary>
    public abstract partial class FuGEBioDataInternalDataType : global::psidev.info.gelml.FuGEBioDataDataType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Data.InternalDataType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGEBioDataInternalDataType(XElement xe) {  return (FuGEBioDataInternalDataType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Data that is internal to an instance XML document.   InternalData can be extended with an element that defines a particular encoding or data type for the storage array or the subclass GenericInternalData should be instantiated.   The array will typically use pointer arithmetic to access values based on the rank (e.g. number of)  Dimensions and their respective sizes (e.g. the number of contained DimensionElements). 
        /// </para>
        /// </summary>
        public FuGEBioDataInternalDataType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Material represents any kind of substance used in an experimental workflow, such as whole organisms, cells, DNA, solutions, compounds and experimental substances (gels, arrays etc.). The Material class can be extended by adding subclasses to model domain specific properties, or the relationships to OntologyIndividual can be used to describe the characteristics and type of Material.   Materials can be related to other materials through a directed acyclic graph (represented by ProtocolApplication(s)). Sub-component materials can be represented by the self-association on Material (e.g. Wells within a array). These associations are abstract and should be extended to represent these semantics for extensions of ProtocolApplication and Material. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public abstract partial class FuGEBioMaterialMaterialType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactRole> ContactRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologycvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologyuserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Material.MaterialType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGEBioMaterialMaterialType(XElement xe) {  return (FuGEBioMaterialMaterialType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGEBioMaterialMaterialType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  Material represents any kind of substance used in an experimental workflow, such as whole organisms, cells, DNA, solutions, compounds and experimental substances (gels, arrays etc.). The Material class can be extended by adding subclasses to model domain specific properties, or the relationships to OntologyIndividual can be used to describe the characteristics and type of Material.   Materials can be related to other materials through a directed acyclic graph (represented by ProtocolApplication(s)). Sub-component materials can be represented by the self-association on Material (e.g. Wells within a array). These associations are abstract and should be extended to represent these semantics for extensions of ProtocolApplication and Material. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public FuGEBioMaterialMaterialType() {
        }
        
        /// <summary>
        /// <para>
        ///  Contact details for the Material. The association to ContactRole could specify, for example, the creator or provider of the Material. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ContactRole> ContactRole {
            get {
                if ((this.ContactRoleField == null)) {
                    this.ContactRoleField = new XTypedList<ContactRole>(this, LinqToXsdTypeManager.Instance, ContactRoleXName);
                }
                return this.ContactRoleField;
            }
            set {
                if ((value == null)) {
                    this.ContactRoleField = null;
                }
                else {
                    if ((this.ContactRoleField == null)) {
                        this.ContactRoleField = XTypedList<ContactRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContactRoleXName);
                    }
                    else {
                        XTypedServices.SetList<ContactRole>(this.ContactRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologycvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<FuGECommonOntologycvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<FuGECommonOntologycvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologycvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologyuserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<FuGECommonOntologyuserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<FuGECommonOntologyuserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologyuserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  MaterialMeasurement represents the quantity of a source Material used in a ProtocolApplication. MaterialMeasurement is abstract and should be extended if a subclass of ProtocolApplication has to be associated with a measured source of a subclass of Material. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public abstract partial class FuGEBioMaterialMaterialMeasurementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Material.MaterialMeasurementType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGEBioMaterialMaterialMeasurementType(XElement xe) {  return (FuGEBioMaterialMaterialMeasurementType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGEBioMaterialMaterialMeasurementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  MaterialMeasurement represents the quantity of a source Material used in a ProtocolApplication. MaterialMeasurement is abstract and should be extended if a subclass of ProtocolApplication has to be associated with a measured source of a subclass of Material. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public FuGEBioMaterialMaterialMeasurementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
            get {
                XElement x = this.GetElement(AtomicValueXName);
                return ((FuGECommonMeasurementAtomicValueType)(x));
            }
            set {
                this.SetElement(AtomicValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
            get {
                XElement x = this.GetElement(BooleanValueXName);
                return ((FuGECommonMeasurementBooleanValueType)(x));
            }
            set {
                this.SetElement(BooleanValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementComplexValueType ComplexValue {
            get {
                XElement x = this.GetElement(ComplexValueXName);
                return ((FuGECommonMeasurementComplexValueType)(x));
            }
            set {
                this.SetElement(ComplexValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                XElement x = this.GetElement(RangeXName);
                return ((FuGECommonMeasurementRangeType)(x));
            }
            set {
                this.SetElement(RangeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Material class, which should be used in conjunction with controlled vocabulary terms to describe Materials of any types used in an investigation. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, components*)
    /// </para>
    /// </summary>
    public partial class FuGEBioMaterialGenericMaterialType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentsXName = System.Xml.Linq.XName.Get("components", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<componentsLocalType> componentsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Material.GenericMaterialType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGEBioMaterialGenericMaterialType(XElement xe) { return XTypedServices.ToXTypedElement<FuGEBioMaterialGenericMaterialType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGEBioMaterialGenericMaterialType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(componentsXName));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Material class, which should be used in conjunction with controlled vocabulary terms to describe Materials of any types used in an investigation. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, components*)
        /// </para>
        /// </summary>
        public FuGEBioMaterialGenericMaterialType() {
        }
        
        /// <summary>
        /// <para>
        ///  Association from a GenericMaterial to other GenericMaterials that are sub-components (such as wells within an array plate). If a subcomponent undergoes a ProtocolApplication, then the containing GenericMaterial must also be an input to the ProtocolApplication and be output as a new GenericMaterial or version of the GenericMaterial. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, components*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGEBioMaterialGenericMaterialType.componentsLocalType> components {
            get {
                if ((this.componentsField == null)) {
                    this.componentsField = new XTypedList<componentsLocalType>(this, LinqToXsdTypeManager.Instance, componentsXName);
                }
                return this.componentsField;
            }
            set {
                if ((value == null)) {
                    this.componentsField = null;
                }
                else {
                    if ((this.componentsField == null)) {
                        this.componentsField = XTypedList<componentsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, componentsXName);
                    }
                    else {
                        XTypedServices.SetList<componentsLocalType>(this.componentsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGEBioMaterialGenericMaterialType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(componentsXName, typeof(componentsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class componentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericMaterial_refXName = System.Xml.Linq.XName.Get("GenericMaterial_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("components", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator componentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<componentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public componentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericMaterial_ref {
                get {
                    XAttribute x = this.Attribute(GenericMaterial_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericMaterial_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<componentsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of MaterialMeasurement to be used without being extended in conjunction with GenericProtocolApplication and GenericMaterial to model measured sources of materials. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class FuGEBioMaterialGenericMaterialMeasurementType : global::psidev.info.gelml.FuGEBioMaterialMaterialMeasurementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Material_refXName = System.Xml.Linq.XName.Get("Material_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Bio.Material.GenericMaterialMeasurementType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGEBioMaterialGenericMaterialMeasurementType(XElement xe) { return XTypedServices.ToXTypedElement<FuGEBioMaterialGenericMaterialMeasurementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGEBioMaterialGenericMaterialMeasurementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of MaterialMeasurement to be used without being extended in conjunction with GenericProtocolApplication and GenericMaterial to model measured sources of materials. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public FuGEBioMaterialGenericMaterialMeasurementType() {
        }
        
        /// <summary>
        /// <para>
        ///  The instance of GenericMaterial or a subclass of Material that is input to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Material_ref {
            get {
                XAttribute x = this.Attribute(Material_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Material_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGEBioMaterialGenericMaterialMeasurementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A person for which the attributes are self describing. 
    /// </para>
    /// <para>
    /// Regular expression: (affiliations*)
    /// </para>
    /// </summary>
    public partial class FuGECommonAuditPersonType : global::psidev.info.gelml.FuGECommonAuditContactType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName affiliationsXName = System.Xml.Linq.XName.Get("affiliations", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<affiliationsLocalType> affiliationsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lastNameXName = System.Xml.Linq.XName.Get("lastName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName firstNameXName = System.Xml.Linq.XName.Get("firstName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midInitialsXName = System.Xml.Linq.XName.Get("midInitials", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Audit.PersonType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonAuditPersonType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonAuditPersonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonAuditPersonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(affiliationsXName));
        }
        
        /// <summary>
        /// <para>
        ///  A person for which the attributes are self describing. 
        /// </para>
        /// <para>
        /// Regular expression: (affiliations*)
        /// </para>
        /// </summary>
        public FuGECommonAuditPersonType() {
        }
        
        /// <summary>
        /// <para>
        ///  The organization a person belongs to. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (affiliations*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonAuditPersonType.affiliationsLocalType> affiliations {
            get {
                if ((this.affiliationsField == null)) {
                    this.affiliationsField = new XTypedList<affiliationsLocalType>(this, LinqToXsdTypeManager.Instance, affiliationsXName);
                }
                return this.affiliationsField;
            }
            set {
                if ((value == null)) {
                    this.affiliationsField = null;
                }
                else {
                    if ((this.affiliationsField == null)) {
                        this.affiliationsField = XTypedList<affiliationsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, affiliationsXName);
                    }
                    else {
                        XTypedServices.SetList<affiliationsLocalType>(this.affiliationsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's last/family name. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lastName {
            get {
                XAttribute x = this.Attribute(lastNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(lastNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's first name. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string firstName {
            get {
                XAttribute x = this.Attribute(firstNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(firstNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's middle initial. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string midInitials {
            get {
                XAttribute x = this.Attribute(midInitialsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midInitialsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonAuditPersonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(affiliationsXName, typeof(affiliationsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class affiliationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Organization_refXName = System.Xml.Linq.XName.Get("Organization_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("affiliations", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator affiliationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<affiliationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public affiliationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Organization_ref {
                get {
                    XAttribute x = this.Attribute(Organization_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Organization_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<affiliationsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Organizations are entities like companies, universities, government agencies for which the attributes are self describing. 
    /// </para>
    /// <para>
    /// Regular expression: (parent?)
    /// </para>
    /// </summary>
    public partial class FuGECommonAuditOrganizationType : global::psidev.info.gelml.FuGECommonAuditContactType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parentXName = System.Xml.Linq.XName.Get("parent", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Audit.OrganizationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonAuditOrganizationType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonAuditOrganizationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonAuditOrganizationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(parentXName));
        }
        
        /// <summary>
        /// <para>
        ///  Organizations are entities like companies, universities, government agencies for which the attributes are self describing. 
        /// </para>
        /// <para>
        /// Regular expression: (parent?)
        /// </para>
        /// </summary>
        public FuGECommonAuditOrganizationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The containing organization (the university or business which a lab belongs to, etc.) 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (parent?)
        /// </para>
        /// </summary>
        public virtual parentLocalType parent {
            get {
                XElement x = this.GetElement(parentXName);
                return ((parentLocalType)(x));
            }
            set {
                this.SetElement(parentXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonAuditOrganizationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(parentXName, typeof(parentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class parentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Organization_refXName = System.Xml.Linq.XName.Get("Organization_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parent", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator parentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<parentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public parentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Organization_ref {
                get {
                    XAttribute x = this.Attribute(Organization_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Organization_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<parentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A contact is either a person or an organization. 
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonAuditContactType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phoneXName = System.Xml.Linq.XName.Get("phone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emailXName = System.Xml.Linq.XName.Get("email", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName faxXName = System.Xml.Linq.XName.Get("fax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tollFreePhoneXName = System.Xml.Linq.XName.Get("tollFreePhone", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Audit.ContactType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonAuditContactType(XElement xe) {  return (FuGECommonAuditContactType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A contact is either a person or an organization. 
        /// </para>
        /// </summary>
        public FuGECommonAuditContactType() {
        }
        
        /// <summary>
        /// <para>
        ///  The address of the Contact. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string address {
            get {
                XAttribute x = this.Attribute(addressXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(addressXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The telephone number of the Contact including the suitable area codes. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string phone {
            get {
                XAttribute x = this.Attribute(phoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(phoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The email address of the Contact. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string email {
            get {
                XAttribute x = this.Attribute(emailXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(emailXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The fax number of the Contact. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fax {
            get {
                XAttribute x = this.Attribute(faxXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(faxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A toll free phone number for the Contact, including suitable area codes. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tollFreePhone {
            get {
                XAttribute x = this.Attribute(tollFreePhoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(tollFreePhoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The role that a Contact plays in an organization or with respect to the associating class.  A Contact may have several Roles within scope, and as such, associations to ContactRole allow the use of a Contact in a certain manner.  Examples might include a provider, or a data analyst. 
    /// </para>
    /// <para>
    /// Regular expression: (role)
    /// </para>
    /// </summary>
    public partial class FuGECommonAuditContactRoleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Contact_refXName = System.Xml.Linq.XName.Get("Contact_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Audit.ContactRoleType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonAuditContactRoleType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonAuditContactRoleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonAuditContactRoleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(roleXName));
        }
        
        /// <summary>
        /// <para>
        ///  The role that a Contact plays in an organization or with respect to the associating class.  A Contact may have several Roles within scope, and as such, associations to ContactRole allow the use of a Contact in a certain manner.  Examples might include a provider, or a data analyst. 
        /// </para>
        /// <para>
        /// Regular expression: (role)
        /// </para>
        /// </summary>
        public FuGECommonAuditContactRoleType() {
        }
        
        /// <summary>
        /// <para>
        ///  The roles (lab equipment sales, contractor, etc.) the Contact fills. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (role)
        /// </para>
        /// </summary>
        public virtual roleLocalType role {
            get {
                XElement x = this.GetElement(roleXName);
                return ((roleLocalType)(x));
            }
            set {
                this.SetElement(roleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  When a ContactRole is used, it specifies which Contact the role is associated with. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Contact_ref {
            get {
                XAttribute x = this.Attribute(Contact_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Contact_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonAuditContactRoleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(roleXName, typeof(roleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class roleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("role", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator roleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<roleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static roleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public roleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<roleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Represents bibliographic references, including the most common attributes. Note that because a BibliographicReference is Identifiable, a DatabaseEntry can also be specified. 
    /// </para>
    /// </summary>
    public partial class FuGECommonReferencesBibliographicReferenceType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorsXName = System.Xml.Linq.XName.Get("authors", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publicationXName = System.Xml.Linq.XName.Get("publication", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publisherXName = System.Xml.Linq.XName.Get("publisher", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editorXName = System.Xml.Linq.XName.Get("editor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName issueXName = System.Xml.Linq.XName.Get("issue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pagesXName = System.Xml.Linq.XName.Get("pages", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.References.BibliographicReferenceType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonReferencesBibliographicReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonReferencesBibliographicReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Represents bibliographic references, including the most common attributes. Note that because a BibliographicReference is Identifiable, a DatabaseEntry can also be specified. 
        /// </para>
        /// </summary>
        public FuGECommonReferencesBibliographicReferenceType() {
        }
        
        /// <summary>
        /// <para>
        ///  The names of the authors of the reference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authors {
            get {
                XAttribute x = this.Attribute(authorsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(authorsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the journal, book etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publication {
            get {
                XAttribute x = this.Attribute(publicationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(publicationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The publisher of the publication. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publisher {
            get {
                XAttribute x = this.Attribute(publisherXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(publisherXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The editor(s) of the reference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string editor {
            get {
                XAttribute x = this.Attribute(editorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(editorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The year of publication. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? year {
            get {
                XAttribute x = this.Attribute(yearXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(yearXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The volume name or number. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The issue name or number. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string issue {
            get {
                XAttribute x = this.Attribute(issueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(issueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The page numbers. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pages {
            get {
                XAttribute x = this.Attribute(pagesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pagesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The title of the BibliographicReference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonReferencesBibliographicReferenceType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  An address to a repository. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*)
    /// </para>
    /// </summary>
    public partial class FuGECommonReferencesDatabaseType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactRole> ContactRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIXName = System.Xml.Linq.XName.Get("URI", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.References.DatabaseType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonReferencesDatabaseType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonReferencesDatabaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonReferencesDatabaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName));
        }
        
        /// <summary>
        /// <para>
        ///  An address to a repository. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*)
        /// </para>
        /// </summary>
        public FuGECommonReferencesDatabaseType() {
        }
        
        /// <summary>
        /// <para>
        ///  Contacts associated with this database, such as hosting institution, database curators, manager etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*)
        /// </para>
        /// </summary>
        public virtual IList<ContactRole> ContactRole {
            get {
                if ((this.ContactRoleField == null)) {
                    this.ContactRoleField = new XTypedList<ContactRole>(this, LinqToXsdTypeManager.Instance, ContactRoleXName);
                }
                return this.ContactRoleField;
            }
            set {
                if ((value == null)) {
                    this.ContactRoleField = null;
                }
                else {
                    if ((this.ContactRoleField == null)) {
                        this.ContactRoleField = XTypedList<ContactRole>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContactRoleXName);
                    }
                    else {
                        XTypedServices.SetList<ContactRole>(this.ContactRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The version of the Database. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The location of the Database. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                XAttribute x = this.Attribute(URIXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(URIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonReferencesDatabaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to a record in a database. 
    /// </para>
    /// </summary>
    public partial class FuGECommonReferencesDatabaseReferenceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionXName = System.Xml.Linq.XName.Get("accession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionVersionXName = System.Xml.Linq.XName.Get("accessionVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Database_refXName = System.Xml.Linq.XName.Get("Database_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.References.DatabaseReferenceType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonReferencesDatabaseReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonReferencesDatabaseReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A reference to a record in a database. 
        /// </para>
        /// </summary>
        public FuGECommonReferencesDatabaseReferenceType() {
        }
        
        /// <summary>
        /// <para>
        ///  The identifier used to look up the record. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                XAttribute x = this.Attribute(accessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The appropriate version of the accession (if applicable). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string accessionVersion {
            get {
                XAttribute x = this.Attribute(accessionVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the database where the DatabaseEntry instance can be found. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Database_ref {
            get {
                XAttribute x = this.Attribute(Database_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Database_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonReferencesDatabaseReferenceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A free text description of an object. 
    /// </para>
    /// </summary>
    public partial class FuGECommonDescriptionDescriptionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName textXName = System.Xml.Linq.XName.Get("text", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Description.DescriptionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonDescriptionDescriptionType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonDescriptionDescriptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A free text description of an object. 
        /// </para>
        /// </summary>
        public FuGECommonDescriptionDescriptionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The description. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string text {
            get {
                XAttribute x = this.Attribute(textXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(textXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonDescriptionDescriptionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Protocol is a parameterizable description of a method.  ProtocolApplication is used to specify the ParameterValues of its Protocol's Parameters.   Protocol should be extended in data formats. For cases where no extension is developed, the subclass of Protocol, GenericProtocol, should be used to capture experimental protocols. 
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolProtocolType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonProtocolProtocolType(XElement xe) {  return (FuGECommonProtocolProtocolType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A Protocol is a parameterizable description of a method.  ProtocolApplication is used to specify the ParameterValues of its Protocol's Parameters.   Protocol should be extended in data formats. For cases where no extension is developed, the subclass of Protocol, GenericProtocol, should be used to capture experimental protocols. 
        /// </para>
        /// </summary>
        public FuGECommonProtocolProtocolType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Parameter is a replaceable value in a Parameterizable class, and uses the Measurement class for giving a specific type of value.  Examples of Parameters include: scanning wavelength, laser power, centrifuge speed, multiplicative errors, the number of input nodes to a SOM, and PCR temperatures.   Parameter is abstract and should be extended by subclassing. The GenericParameter class offers the functionality of a parameter defined by a controlled vocabulary term. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolParameterType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolParameterType(XElement xe) {  return (FuGECommonProtocolParameterType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolParameterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A Parameter is a replaceable value in a Parameterizable class, and uses the Measurement class for giving a specific type of value.  Examples of Parameters include: scanning wavelength, laser power, centrifuge speed, multiplicative errors, the number of input nodes to a SOM, and PCR temperatures.   Parameter is abstract and should be extended by subclassing. The GenericParameter class offers the functionality of a parameter defined by a controlled vocabulary term. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public FuGECommonProtocolParameterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
            get {
                XElement x = this.GetElement(AtomicValueXName);
                return ((FuGECommonMeasurementAtomicValueType)(x));
            }
            set {
                this.SetElement(AtomicValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
            get {
                XElement x = this.GetElement(BooleanValueXName);
                return ((FuGECommonMeasurementBooleanValueType)(x));
            }
            set {
                this.SetElement(BooleanValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementComplexValueType ComplexValue {
            get {
                XElement x = this.GetElement(ComplexValueXName);
                return ((FuGECommonMeasurementComplexValueType)(x));
            }
            set {
                this.SetElement(ComplexValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                XElement x = this.GetElement(RangeXName);
                return ((FuGECommonMeasurementRangeType)(x));
            }
            set {
                this.SetElement(RangeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The runtime value of a Parameter. 
    /// </para>
    /// <para>
    /// Regular expression: (value)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolParameterValueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Parameter_refXName = System.Xml.Linq.XName.Get("Parameter_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterValueType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolParameterValueType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolParameterValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolParameterValueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valueXName));
        }
        
        /// <summary>
        /// <para>
        ///  The runtime value of a Parameter. 
        /// </para>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public FuGECommonProtocolParameterValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XElement x = this.GetElement(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameter this value is for. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Parameter_ref {
            get {
                XAttribute x = this.Attribute(Parameter_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Parameter_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolParameterValueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valueXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a protocol with the requisite Parameters and ParameterValues. ProtocolApplications can take Material or Data (or both) as input and produce Material or Data (or both) as output. ProtocolApplication is abstract and should be subclassed in the development of modular formats. The subclass GenericProtocolApplication can be used without extension. 
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolProtocolApplicationType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName activityDateXName = System.Xml.Linq.XName.Get("activityDate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ProtocolApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonProtocolProtocolApplicationType(XElement xe) {  return (FuGECommonProtocolProtocolApplicationType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The use of a protocol with the requisite Parameters and ParameterValues. ProtocolApplications can take Material or Data (or both) as input and produce Material or Data (or both) as output. ProtocolApplication is abstract and should be subclassed in the development of modular formats. The subclass GenericProtocolApplication can be used without extension. 
        /// </para>
        /// </summary>
        public FuGECommonProtocolProtocolApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  When the protocol was applied. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? activityDate {
            get {
                XAttribute x = this.Attribute(activityDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(activityDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Software used in the Protocol.  Examples of Software include: feature extraction software, clustering software, etc...   Software is abstract and should either be extended by subclassing or the GenericSoftware class, a functional version of Software, should be used without extension. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole?)
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolSoftwareType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.SoftwareType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolSoftwareType(XElement xe) {  return (FuGECommonProtocolSoftwareType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolSoftwareType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName));
        }
        
        /// <summary>
        /// <para>
        ///  Software used in the Protocol.  Examples of Software include: feature extraction software, clustering software, etc...   Software is abstract and should either be extended by subclassing or the GenericSoftware class, a functional version of Software, should be used without extension. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public FuGECommonProtocolSoftwareType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRole ContactRole {
            get {
                XElement x = this.GetElement(ContactRoleXName);
                return ((ContactRole)(x));
            }
            set {
                this.SetElement(ContactRoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The version of Software used. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The equipment (hardware) used in the Protocol. Examples include: computers, scanners, wash stations etc...   Equipment is abstract and should either be extended by subclassing or the GenericEquipment class, a functional version of Equipment, should be used. 
    /// </para>
    /// <para>
    /// Regular expression: (make?, model?)
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolEquipmentType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName makeXName = System.Xml.Linq.XName.Get("make", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.EquipmentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolEquipmentType(XElement xe) {  return (FuGECommonProtocolEquipmentType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolEquipmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(makeXName), new NamedContentModelEntity(modelXName));
        }
        
        /// <summary>
        /// <para>
        ///  The equipment (hardware) used in the Protocol. Examples include: computers, scanners, wash stations etc...   Equipment is abstract and should either be extended by subclassing or the GenericEquipment class, a functional version of Equipment, should be used. 
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?)
        /// </para>
        /// </summary>
        public FuGECommonProtocolEquipmentType() {
        }
        
        /// <summary>
        /// <para>
        ///  The equipment make, usually the organization that makes the equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?)
        /// </para>
        /// </summary>
        public virtual ParamType make {
            get {
                XElement x = this.GetElement(makeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(makeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Equipment model. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?)
        /// </para>
        /// </summary>
        public virtual ParamType model {
            get {
                XElement x = this.GetElement(modelXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(modelXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(makeXName, typeof(ParamType));
            localElementDictionary.Add(modelXName, typeof(ParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a piece of Equipment with the requisite Parameters and ParameterValues. 
    /// </para>
    /// <para>
    /// Regular expression: (ParameterValue*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolEquipmentApplicationType : global::psidev.info.gelml.FuGECommonProtocolParameterizableApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serialNumberXName = System.Xml.Linq.XName.Get("serialNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Equipment_refXName = System.Xml.Linq.XName.Get("Equipment_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.EquipmentApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolEquipmentApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolEquipmentApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolEquipmentApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterValueXName));
        }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of Equipment with the requisite Parameters and ParameterValues. 
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolEquipmentApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  Manufacturer's identifier for the Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                XAttribute x = this.Attribute(serialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serialNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Equipment that was used in the ProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Equipment_ref {
            get {
                XAttribute x = this.Attribute(Equipment_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Equipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolEquipmentApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterValueXName, typeof(ParameterValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a piece of software with the requisite Parameters and ParameterValues. 
    /// </para>
    /// <para>
    /// Regular expression: (ParameterValue*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolSoftwareApplicationType : global::psidev.info.gelml.FuGECommonProtocolParameterizableApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Software_refXName = System.Xml.Linq.XName.Get("Software_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.SoftwareApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolSoftwareApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolSoftwareApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolSoftwareApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterValueXName));
        }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of software with the requisite Parameters and ParameterValues. 
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolSoftwareApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Software that was used in the ProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Software_ref {
            get {
                XAttribute x = this.Attribute(Software_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Software_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolSoftwareApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterValueXName, typeof(ParameterValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The interface that is the use of a Parameterizable class. 
    /// </para>
    /// <para>
    /// Regular expression: (ParameterValue*)
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolParameterizableApplicationType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterValueXName = System.Xml.Linq.XName.Get("ParameterValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterValue> ParameterValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterizableApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolParameterizableApplicationType(XElement xe) {  return (FuGECommonProtocolParameterizableApplicationType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolParameterizableApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterValueXName));
        }
        
        /// <summary>
        /// <para>
        ///  The interface that is the use of a Parameterizable class. 
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolParameterizableApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The parameter values for this Parameterizable Application. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<ParameterValue> ParameterValue {
            get {
                if ((this.ParameterValueField == null)) {
                    this.ParameterValueField = new XTypedList<ParameterValue>(this, LinqToXsdTypeManager.Instance, ParameterValueXName);
                }
                return this.ParameterValueField;
            }
            set {
                if ((value == null)) {
                    this.ParameterValueField = null;
                }
                else {
                    if ((this.ParameterValueField == null)) {
                        this.ParameterValueField = XTypedList<ParameterValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterValueXName);
                    }
                    else {
                        XTypedServices.SetList<ParameterValue>(this.ParameterValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterValueXName, typeof(ParameterValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An Action is one step of a Protocol. Sets of ordered Actions define the Protocol. Action is abstract and can be extended to specify particular types of steps within a subclass of Protocol. 
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonProtocolActionType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actionOrdinalXName = System.Xml.Linq.XName.Get("actionOrdinal", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonProtocolActionType(XElement xe) {  return (FuGECommonProtocolActionType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An Action is one step of a Protocol. Sets of ordered Actions define the Protocol. Action is abstract and can be extended to specify particular types of steps within a subclass of Protocol. 
        /// </para>
        /// </summary>
        public FuGECommonProtocolActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The order by which this Action should occur with respect to the Parent protocol. Note that two Actions with the same actionOrdinal are performed in parallel or the order is not important. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? actionOrdinal {
            get {
                XAttribute x = this.Attribute(actionOrdinalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(actionOrdinalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  ActionApplication mirrors the structure of Actions within Protocols and allows ActionDeviations to be reported.   RULE:   If an Action references a childProtocol, an ActionApplication must be created and reference a childProtocolApplication of the corresponding type (or GenericProtocolApplication) to mirror the Protocol structure.   ActionApplications can be (but need not be) created for simple Actions. 
    /// </para>
    /// <para>
    /// Regular expression: (ParameterValue*, actionDeviation?)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolActionApplicationType : global::psidev.info.gelml.FuGECommonProtocolParameterizableApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actionDeviationXName = System.Xml.Linq.XName.Get("actionDeviation", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Action_refXName = System.Xml.Linq.XName.Get("Action_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProtocolApplication_refXName = System.Xml.Linq.XName.Get("ProtocolApplication_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ActionApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolActionApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolActionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolActionApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterValueXName), new NamedContentModelEntity(actionDeviationXName));
        }
        
        /// <summary>
        /// <para>
        ///  ActionApplication mirrors the structure of Actions within Protocols and allows ActionDeviations to be reported.   RULE:   If an Action references a childProtocol, an ActionApplication must be created and reference a childProtocolApplication of the corresponding type (or GenericProtocolApplication) to mirror the Protocol structure.   ActionApplications can be (but need not be) created for simple Actions. 
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*, actionDeviation?)
        /// </para>
        /// </summary>
        public FuGECommonProtocolActionApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  Used to define human readable notes for annotating deviations to an Action during the ActionApplication. 
        ///          
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*, actionDeviation?)
        /// </para>
        /// </summary>
        public virtual actionDeviationLocalType actionDeviation {
            get {
                XElement x = this.GetElement(actionDeviationXName);
                return ((actionDeviationLocalType)(x));
            }
            set {
                this.SetElement(actionDeviationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Association to the Action that is being performed as recorded by this ActionApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Action_ref {
            get {
                XAttribute x = this.Attribute(Action_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Action_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Association to ProtocolApplication if a hierarchical Protocol has been defined representing the child step of the Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProtocolApplication_ref {
            get {
                XAttribute x = this.Attribute(ProtocolApplication_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProtocolApplication_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolActionApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterValueXName, typeof(ParameterValue));
            localElementDictionary.Add(actionDeviationXName, typeof(actionDeviationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Description)
        /// </para>
        /// </summary>
        public partial class actionDeviationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("actionDeviation", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator actionDeviationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<actionDeviationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static actionDeviationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DescriptionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Description)
            /// </para>
            /// </summary>
            public actionDeviationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Description)
            /// </para>
            /// </summary>
            public virtual Description Description {
                get {
                    XElement x = this.GetElement(DescriptionXName);
                    return ((Description)(x));
                }
                set {
                    this.SetElement(DescriptionXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<actionDeviationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DescriptionXName, typeof(Description));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  GenericProtocol should be used with GenericAction, GenericParameter or protocolText to describe protocols in a data format for cases where no explicit extension of Protocol has been developed. 
    /// </para>
    /// <para>
    /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolTextXName = System.Xml.Linq.XName.Get("protocolText", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName softwareXName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<softwareLocalType> softwareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentXName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<equipmentLocalType> equipmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericActionXName = System.Xml.Linq.XName.Get("GenericAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericAction> GenericActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(protocolTextXName), new NamedContentModelEntity(softwareXName), new NamedContentModelEntity(equipmentXName), new NamedContentModelEntity(GenericParameterXName), new NamedContentModelEntity(GenericActionXName));
        }
        
        /// <summary>
        /// <para>
        ///  GenericProtocol should be used with GenericAction, GenericParameter or protocolText to describe protocols in a data format for cases where no explicit extension of Protocol has been developed. 
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericProtocolType() {
        }
        
        /// <summary>
        /// <para>
        ///  The text that applies to the entire Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                XElement x = this.GetElement(protocolTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(protocolTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericSoftware used with this GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolType.softwareLocalType> software {
            get {
                if ((this.softwareField == null)) {
                    this.softwareField = new XTypedList<softwareLocalType>(this, LinqToXsdTypeManager.Instance, softwareXName);
                }
                return this.softwareField;
            }
            set {
                if ((value == null)) {
                    this.softwareField = null;
                }
                else {
                    if ((this.softwareField == null)) {
                        this.softwareField = XTypedList<softwareLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, softwareXName);
                    }
                    else {
                        XTypedServices.SetList<softwareLocalType>(this.softwareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol used with this GenericEquipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolType.equipmentLocalType> equipment {
            get {
                if ((this.equipmentField == null)) {
                    this.equipmentField = new XTypedList<equipmentLocalType>(this, LinqToXsdTypeManager.Instance, equipmentXName);
                }
                return this.equipmentField;
            }
            set {
                if ((value == null)) {
                    this.equipmentField = null;
                }
                else {
                    if ((this.equipmentField == null)) {
                        this.equipmentField = XTypedList<equipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, equipmentXName);
                    }
                    else {
                        XTypedServices.SetList<equipmentLocalType>(this.equipmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters defined for the GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The actions performed within a GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<GenericAction> GenericAction {
            get {
                if ((this.GenericActionField == null)) {
                    this.GenericActionField = new XTypedList<GenericAction>(this, LinqToXsdTypeManager.Instance, GenericActionXName);
                }
                return this.GenericActionField;
            }
            set {
                if ((value == null)) {
                    this.GenericActionField = null;
                }
                else {
                    if ((this.GenericActionField == null)) {
                        this.GenericActionField = XTypedList<GenericAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericActionXName);
                    }
                    else {
                        XTypedServices.SetList<GenericAction>(this.GenericActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(protocolTextXName, typeof(string));
            localElementDictionary.Add(softwareXName, typeof(softwareLocalType));
            localElementDictionary.Add(equipmentXName, typeof(equipmentLocalType));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
            localElementDictionary.Add(GenericActionXName, typeof(GenericAction));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class softwareLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericSoftware_refXName = System.Xml.Linq.XName.Get("GenericSoftware_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator softwareLocalType(XElement xe) { return XTypedServices.ToXTypedElement<softwareLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public softwareLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericSoftware_ref {
                get {
                    XAttribute x = this.Attribute(GenericSoftware_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<softwareLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class equipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator equipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<equipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public equipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<equipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A GenericAction represents a step within a GenericProtocol. It allows a reference to a sub-GenericProtocol, user entered text to describe the GenericAction or a term from a controlled vocabulary to be given. 
    /// </para>
    /// <para>
    /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actionTermXName = System.Xml.Linq.XName.Get("actionTerm", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterPairXName = System.Xml.Linq.XName.Get("ParameterPair", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterPair> ParameterPairField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actionTextXName = System.Xml.Linq.XName.Get("actionText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Protocol_refXName = System.Xml.Linq.XName.Get("Protocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericActionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericActionType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericActionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(actionTermXName), new NamedContentModelEntity(GenericParameterXName), new NamedContentModelEntity(ParameterPairXName));
        }
        
        /// <summary>
        /// <para>
        ///  A GenericAction represents a step within a GenericProtocol. It allows a reference to a sub-GenericProtocol, user entered text to describe the GenericAction or a term from a controlled vocabulary to be given. 
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  Each GenericAction may be associated with an OntologyTerm that defines that GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual actionTermLocalType actionTerm {
            get {
                XElement x = this.GetElement(actionTermXName);
                return ((actionTermLocalType)(x));
            }
            set {
                this.SetElement(actionTermXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters belonging to the GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  ParameterPairs owned by the GenericAction. The TargetParameter should reference a Parameter owned by a child Protocol which is also referenced by the GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual IList<ParameterPair> ParameterPair {
            get {
                if ((this.ParameterPairField == null)) {
                    this.ParameterPairField = new XTypedList<ParameterPair>(this, LinqToXsdTypeManager.Instance, ParameterPairXName);
                }
                return this.ParameterPairField;
            }
            set {
                if ((value == null)) {
                    this.ParameterPairField = null;
                }
                else {
                    if ((this.ParameterPairField == null)) {
                        this.ParameterPairField = XTypedList<ParameterPair>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterPairXName);
                    }
                    else {
                        XTypedServices.SetList<ParameterPair>(this.ParameterPairField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Free text to describe this Action. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actionText {
            get {
                XAttribute x = this.Attribute(actionTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(actionTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This is an instantiation of the ChildProtocol association for associating complex, hierarchical protocols together. A GenericAction can reference substeps within the parent GenericProtocol. The substeps can be further instances of GenericProtocol, or defined subclasses of Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Protocol_ref {
            get {
                XAttribute x = this.Attribute(Protocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Protocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericActionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(actionTermXName, typeof(actionTermLocalType));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
            localElementDictionary.Add(ParameterPairXName, typeof(ParameterPair));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class actionTermLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("actionTerm", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator actionTermLocalType(XElement xe) { return XTypedServices.ToXTypedElement<actionTermLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static actionTermLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public actionTermLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<actionTermLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Software class for capturing the description of Software used. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericSoftwareType : global::psidev.info.gelml.FuGECommonProtocolSoftwareType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentXName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<equipmentLocalType> equipmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericSoftwareType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericSoftwareType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericSoftwareType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericSoftwareType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(equipmentXName), new NamedContentModelEntity(GenericParameterXName));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Software class for capturing the description of Software used. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericSoftwareType() {
        }
        
        /// <summary>
        /// <para>
        ///  Associates GenericEquipment with GenericSoftware to indicate that instances of software are run on piece(s) of Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericSoftwareType.equipmentLocalType> equipment {
            get {
                if ((this.equipmentField == null)) {
                    this.equipmentField = new XTypedList<equipmentLocalType>(this, LinqToXsdTypeManager.Instance, equipmentXName);
                }
                return this.equipmentField;
            }
            set {
                if ((value == null)) {
                    this.equipmentField = null;
                }
                else {
                    if ((this.equipmentField == null)) {
                        this.equipmentField = XTypedList<equipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, equipmentXName);
                    }
                    else {
                        XTypedServices.SetList<equipmentLocalType>(this.equipmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters for this piece of GenericSoftware. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericSoftwareType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(equipmentXName, typeof(equipmentLocalType));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class equipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator equipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<equipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public equipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<equipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Equipment class for capturing the description of Equipment used. 
    /// </para>
    /// <para>
    /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericEquipmentType : global::psidev.info.gelml.FuGECommonProtocolEquipmentType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName softwareXName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<softwareLocalType> softwareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentPartsXName = System.Xml.Linq.XName.Get("equipmentParts", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<equipmentPartsLocalType> equipmentPartsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericEquipmentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericEquipmentType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericEquipmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericEquipmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(makeXName), new NamedContentModelEntity(modelXName), new NamedContentModelEntity(softwareXName), new NamedContentModelEntity(GenericParameterXName), new NamedContentModelEntity(equipmentPartsXName));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Equipment class for capturing the description of Equipment used. 
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericEquipmentType() {
        }
        
        /// <summary>
        /// <para>
        ///  Associates GenericEquipment with GenericSoftware to indicate that instances of software are run on piece(s) of Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericEquipmentType.softwareLocalType> software {
            get {
                if ((this.softwareField == null)) {
                    this.softwareField = new XTypedList<softwareLocalType>(this, LinqToXsdTypeManager.Instance, softwareXName);
                }
                return this.softwareField;
            }
            set {
                if ((value == null)) {
                    this.softwareField = null;
                }
                else {
                    if ((this.softwareField == null)) {
                        this.softwareField = XTypedList<softwareLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, softwareXName);
                    }
                    else {
                        XTypedServices.SetList<softwareLocalType>(this.softwareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters for this piece of GenericEquipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  An association between a parent GenericEquipment and its parts. If a GenericProtocol utilises GenericEquipment and its parts, both the parent and child GenericEquipment instances should be referenced. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericEquipmentType.equipmentPartsLocalType> equipmentParts {
            get {
                if ((this.equipmentPartsField == null)) {
                    this.equipmentPartsField = new XTypedList<equipmentPartsLocalType>(this, LinqToXsdTypeManager.Instance, equipmentPartsXName);
                }
                return this.equipmentPartsField;
            }
            set {
                if ((value == null)) {
                    this.equipmentPartsField = null;
                }
                else {
                    if ((this.equipmentPartsField == null)) {
                        this.equipmentPartsField = XTypedList<equipmentPartsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, equipmentPartsXName);
                    }
                    else {
                        XTypedServices.SetList<equipmentPartsLocalType>(this.equipmentPartsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericEquipmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(makeXName, typeof(ParamType));
            localElementDictionary.Add(modelXName, typeof(ParamType));
            localElementDictionary.Add(softwareXName, typeof(softwareLocalType));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
            localElementDictionary.Add(equipmentPartsXName, typeof(equipmentPartsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class softwareLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericSoftware_refXName = System.Xml.Linq.XName.Get("GenericSoftware_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator softwareLocalType(XElement xe) { return XTypedServices.ToXTypedElement<softwareLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public softwareLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericSoftware_ref {
                get {
                    XAttribute x = this.Attribute(GenericSoftware_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<softwareLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class equipmentPartsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("equipmentParts", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator equipmentPartsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<equipmentPartsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public equipmentPartsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<equipmentPartsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Parameter class to represent a parameter that is defined by a controlled vocabulary term. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?, parameterType?)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericParameterType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parameterTypeXName = System.Xml.Linq.XName.Get("parameterType", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericParameterType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericParameterType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericParameterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericParameterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)), new NamedContentModelEntity(parameterTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Parameter class to represent a parameter that is defined by a controlled vocabulary term. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?, parameterType?)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericParameterType() {
        }
        
        /// <summary>
        /// <para>
        ///  The name of the parameter. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?, parameterType?)
        /// </para>
        /// </summary>
        public virtual parameterTypeLocalType parameterType {
            get {
                XElement x = this.GetElement(parameterTypeXName);
                return ((parameterTypeLocalType)(x));
            }
            set {
                this.SetElement(parameterTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericParameterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            localElementDictionary.Add(parameterTypeXName, typeof(parameterTypeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class parameterTypeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parameterType", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator parameterTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<parameterTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static parameterTypeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public parameterTypeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<parameterTypeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of ProtocolApplication to be used as it is in data formats without being extended. 
    /// </para>
    /// <para>
    /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolGenericProtocolApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericMaterialMeasurementXName = System.Xml.Linq.XName.Get("GenericMaterialMeasurement", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericMaterialMeasurement> GenericMaterialMeasurementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputDataXName = System.Xml.Linq.XName.Get("inputData", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<inputDataLocalType> inputDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputDataXName = System.Xml.Linq.XName.Get("outputData", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<outputDataLocalType> outputDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputMaterialsXName = System.Xml.Linq.XName.Get("outputMaterials", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<outputMaterialsLocalType> outputMaterialsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputCompleteMaterialsXName = System.Xml.Linq.XName.Get("inputCompleteMaterials", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<inputCompleteMaterialsLocalType> inputCompleteMaterialsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterValueXName = System.Xml.Linq.XName.Get("ParameterValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterValue> ParameterValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Protocol_refXName = System.Xml.Linq.XName.Get("Protocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericProtocolApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolGenericProtocolApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolGenericProtocolApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolGenericProtocolApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GenericMaterialMeasurementXName), new NamedContentModelEntity(inputDataXName), new NamedContentModelEntity(outputDataXName), new NamedContentModelEntity(outputMaterialsXName), new NamedContentModelEntity(inputCompleteMaterialsXName), new NamedContentModelEntity(ParameterValueXName));
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of ProtocolApplication to be used as it is in data formats without being extended. 
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public FuGECommonProtocolGenericProtocolApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  Measured sources of material that are inputs to this GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterialMeasurement> GenericMaterialMeasurement {
            get {
                if ((this.GenericMaterialMeasurementField == null)) {
                    this.GenericMaterialMeasurementField = new XTypedList<GenericMaterialMeasurement>(this, LinqToXsdTypeManager.Instance, GenericMaterialMeasurementXName);
                }
                return this.GenericMaterialMeasurementField;
            }
            set {
                if ((value == null)) {
                    this.GenericMaterialMeasurementField = null;
                }
                else {
                    if ((this.GenericMaterialMeasurementField == null)) {
                        this.GenericMaterialMeasurementField = XTypedList<GenericMaterialMeasurement>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericMaterialMeasurementXName);
                    }
                    else {
                        XTypedServices.SetList<GenericMaterialMeasurement>(this.GenericMaterialMeasurementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The instances of GenericData that are inputs to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.inputDataLocalType> inputData {
            get {
                if ((this.inputDataField == null)) {
                    this.inputDataField = new XTypedList<inputDataLocalType>(this, LinqToXsdTypeManager.Instance, inputDataXName);
                }
                return this.inputDataField;
            }
            set {
                if ((value == null)) {
                    this.inputDataField = null;
                }
                else {
                    if ((this.inputDataField == null)) {
                        this.inputDataField = XTypedList<inputDataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, inputDataXName);
                    }
                    else {
                        XTypedServices.SetList<inputDataLocalType>(this.inputDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Data produced from the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.outputDataLocalType> outputData {
            get {
                if ((this.outputDataField == null)) {
                    this.outputDataField = new XTypedList<outputDataLocalType>(this, LinqToXsdTypeManager.Instance, outputDataXName);
                }
                return this.outputDataField;
            }
            set {
                if ((value == null)) {
                    this.outputDataField = null;
                }
                else {
                    if ((this.outputDataField == null)) {
                        this.outputDataField = XTypedList<outputDataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, outputDataXName);
                    }
                    else {
                        XTypedServices.SetList<outputDataLocalType>(this.outputDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The instances of GenericMaterial or a subclass of Material that are produced from the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.outputMaterialsLocalType> outputMaterials {
            get {
                if ((this.outputMaterialsField == null)) {
                    this.outputMaterialsField = new XTypedList<outputMaterialsLocalType>(this, LinqToXsdTypeManager.Instance, outputMaterialsXName);
                }
                return this.outputMaterialsField;
            }
            set {
                if ((value == null)) {
                    this.outputMaterialsField = null;
                }
                else {
                    if ((this.outputMaterialsField == null)) {
                        this.outputMaterialsField = XTypedList<outputMaterialsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, outputMaterialsXName);
                    }
                    else {
                        XTypedServices.SetList<outputMaterialsLocalType>(this.outputMaterialsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Whole Materials that are inputs to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.inputCompleteMaterialsLocalType> inputCompleteMaterials {
            get {
                if ((this.inputCompleteMaterialsField == null)) {
                    this.inputCompleteMaterialsField = new XTypedList<inputCompleteMaterialsLocalType>(this, LinqToXsdTypeManager.Instance, inputCompleteMaterialsXName);
                }
                return this.inputCompleteMaterialsField;
            }
            set {
                if ((value == null)) {
                    this.inputCompleteMaterialsField = null;
                }
                else {
                    if ((this.inputCompleteMaterialsField == null)) {
                        this.inputCompleteMaterialsField = XTypedList<inputCompleteMaterialsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, inputCompleteMaterialsXName);
                    }
                    else {
                        XTypedServices.SetList<inputCompleteMaterialsLocalType>(this.inputCompleteMaterialsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameter values for this Parameterizable Application. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<ParameterValue> ParameterValue {
            get {
                if ((this.ParameterValueField == null)) {
                    this.ParameterValueField = new XTypedList<ParameterValue>(this, LinqToXsdTypeManager.Instance, ParameterValueXName);
                }
                return this.ParameterValueField;
            }
            set {
                if ((value == null)) {
                    this.ParameterValueField = null;
                }
                else {
                    if ((this.ParameterValueField == null)) {
                        this.ParameterValueField = XTypedList<ParameterValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterValueXName);
                    }
                    else {
                        XTypedServices.SetList<ParameterValue>(this.ParameterValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol or subclass of Protocol that has been used with this GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Protocol_ref {
            get {
                XAttribute x = this.Attribute(Protocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Protocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolGenericProtocolApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GenericMaterialMeasurementXName, typeof(GenericMaterialMeasurement));
            localElementDictionary.Add(inputDataXName, typeof(inputDataLocalType));
            localElementDictionary.Add(outputDataXName, typeof(outputDataLocalType));
            localElementDictionary.Add(outputMaterialsXName, typeof(outputMaterialsLocalType));
            localElementDictionary.Add(inputCompleteMaterialsXName, typeof(inputCompleteMaterialsLocalType));
            localElementDictionary.Add(ParameterValueXName, typeof(ParameterValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class inputDataLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Data_refXName = System.Xml.Linq.XName.Get("Data_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputData", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator inputDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public inputDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Data_ref {
                get {
                    XAttribute x = this.Attribute(Data_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Data_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputDataLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class outputDataLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Data_refXName = System.Xml.Linq.XName.Get("Data_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("outputData", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator outputDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public outputDataLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Data_ref {
                get {
                    XAttribute x = this.Attribute(Data_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Data_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<outputDataLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class outputMaterialsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Material_refXName = System.Xml.Linq.XName.Get("Material_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("outputMaterials", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator outputMaterialsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputMaterialsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public outputMaterialsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Material_ref {
                get {
                    XAttribute x = this.Attribute(Material_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Material_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<outputMaterialsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class inputCompleteMaterialsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Material_refXName = System.Xml.Linq.XName.Get("Material_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputCompleteMaterials", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator inputCompleteMaterialsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputCompleteMaterialsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public inputCompleteMaterialsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Material_ref {
                get {
                    XAttribute x = this.Attribute(Material_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Material_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputCompleteMaterialsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A pairing of an output parameter from a Protocol (SourceParameter) with an input parameter to a separate Protocol (TargetParameter) to indicate that the ParameterValue will be the same. 
    /// </para>
    /// <para>
    /// Regular expression: (targetParameter, sourceParameter)
    /// </para>
    /// </summary>
    public partial class FuGECommonProtocolParameterPairType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetParameterXName = System.Xml.Linq.XName.Get("targetParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceParameterXName = System.Xml.Linq.XName.Get("sourceParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterPairType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonProtocolParameterPairType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonProtocolParameterPairType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonProtocolParameterPairType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(targetParameterXName), new NamedContentModelEntity(sourceParameterXName));
        }
        
        /// <summary>
        /// <para>
        ///  A pairing of an output parameter from a Protocol (SourceParameter) with an input parameter to a separate Protocol (TargetParameter) to indicate that the ParameterValue will be the same. 
        /// </para>
        /// <para>
        /// Regular expression: (targetParameter, sourceParameter)
        /// </para>
        /// </summary>
        public FuGECommonProtocolParameterPairType() {
        }
        
        /// <summary>
        /// <para>
        ///  A Parameter that is an input to a process which has been an output from another process. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetParameter, sourceParameter)
        /// </para>
        /// </summary>
        public virtual targetParameterLocalType targetParameter {
            get {
                XElement x = this.GetElement(targetParameterXName);
                return ((targetParameterLocalType)(x));
            }
            set {
                this.SetElement(targetParameterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A Parameter that is output from one process which will be input to another process. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetParameter, sourceParameter)
        /// </para>
        /// </summary>
        public virtual sourceParameterLocalType sourceParameter {
            get {
                XElement x = this.GetElement(sourceParameterXName);
                return ((sourceParameterLocalType)(x));
            }
            set {
                this.SetElement(sourceParameterXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonProtocolParameterPairType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(targetParameterXName, typeof(targetParameterLocalType));
            localElementDictionary.Add(sourceParameterXName, typeof(sourceParameterLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class targetParameterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Parameter_refXName = System.Xml.Linq.XName.Get("Parameter_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("targetParameter", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator targetParameterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<targetParameterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public targetParameterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Parameter_ref {
                get {
                    XAttribute x = this.Attribute(Parameter_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Parameter_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<targetParameterLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class sourceParameterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Parameter_refXName = System.Xml.Linq.XName.Get("Parameter_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sourceParameter", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator sourceParameterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sourceParameterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public sourceParameterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Parameter_ref {
                get {
                    XAttribute x = this.Attribute(Parameter_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Parameter_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<sourceParameterLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Abstract entity allowing either cvParam or userParam to be referenced in other schemas.
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonOntologyParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitAccessionXName = System.Xml.Linq.XName.Get("unitAccession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitNameXName = System.Xml.Linq.XName.Get("unitName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitCvRefXName = System.Xml.Linq.XName.Get("unitCvRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Ontology.ParamType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonOntologyParamType(XElement xe) {  return (FuGECommonOntologyParamType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Abstract entity allowing either cvParam or userParam to be referenced in other schemas.
        /// </para>
        /// </summary>
        public FuGECommonOntologyParamType() {
        }
        
        /// <summary>
        /// <para>
        /// The name of the parameter.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The user-entered value of the parameter.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An accession number identifying the unit within the OBO foundry Unit CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                XAttribute x = this.Attribute(unitAccessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitAccessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the unit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                XAttribute x = this.Attribute(unitNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this file.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                XAttribute x = this.Attribute(unitCvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitCvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single user-defined parameter.
    /// </para>
    /// </summary>
    public partial class FuGECommonOntologyuserParamType : global::psidev.info.gelml.FuGECommonOntologyParamType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Ontology.userParamType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonOntologyuserParamType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonOntologyuserParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single user-defined parameter.
        /// </para>
        /// </summary>
        public FuGECommonOntologyuserParamType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonOntologyuserParamType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single entry from an ontology or a controlled vocabulary.
    /// </para>
    /// </summary>
    public partial class FuGECommonOntologycvParamType : global::psidev.info.gelml.FuGECommonOntologyParamType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvRefXName = System.Xml.Linq.XName.Get("cvRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionXName = System.Xml.Linq.XName.Get("accession", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Ontology.cvParamType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonOntologycvParamType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonOntologycvParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single entry from an ontology or a controlled vocabulary.
        /// </para>
        /// </summary>
        public FuGECommonOntologycvParamType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the cv element from which this term originates.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cvRef {
            get {
                XAttribute x = this.Attribute(cvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(cvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The accession or ID number of this CV term in the source CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                XAttribute x = this.Attribute(accessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonOntologycvParamType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single value and unit combination.
    /// </para>
    /// </summary>
    public partial class FuGECommonOntologyPropertyValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitAccessionXName = System.Xml.Linq.XName.Get("unitAccession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitNameXName = System.Xml.Linq.XName.Get("unitName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitCvRefXName = System.Xml.Linq.XName.Get("unitCvRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Ontology.PropertyValue", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonOntologyPropertyValue(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonOntologyPropertyValue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single value and unit combination.
        /// </para>
        /// </summary>
        public FuGECommonOntologyPropertyValue() {
        }
        
        /// <summary>
        /// <para>
        /// A user-entered value for the parameter.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The accession number of the unit term in the source unit CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                XAttribute x = this.Attribute(unitAccessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitAccessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the unit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                XAttribute x = this.Attribute(unitNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this file.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                XAttribute x = this.Attribute(unitCvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitCvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonOntologyPropertyValue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A source controlled vocabulary from which cvParams will be obtained.
    /// </para>
    /// </summary>
    public partial class FuGECommonOntologycvType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fullNameXName = System.Xml.Linq.XName.Get("fullName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIXName = System.Xml.Linq.XName.Get("URI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Ontology.cvType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonOntologycvType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonOntologycvType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A source controlled vocabulary from which cvParams will be obtained.
        /// </para>
        /// </summary>
        public FuGECommonOntologycvType() {
        }
        
        /// <summary>
        /// <para>
        /// The full name of the CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fullName {
            get {
                XAttribute x = this.Attribute(fullNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fullNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The URI of the source CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                XAttribute x = this.Attribute(URIXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(URIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier of this cv within the document to be referenced by cvParam elements.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonOntologycvType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Other classes in the model can be specified as sub-classes, inheriting from Identifiable. Identifiable gives classes a unique identifier within the scope and a name that need not be unique. Identifiable also provides a mechanism for annotating objects with BibliographicReference(s) and DatabaseEntry(s). 
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonIdentifiableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.IdentifiableType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FuGECommonIdentifiableType(XElement xe) {  return (FuGECommonIdentifiableType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Other classes in the model can be specified as sub-classes, inheriting from Identifiable. Identifiable gives classes a unique identifier within the scope and a name that need not be unique. Identifiable also provides a mechanism for annotating objects with BibliographicReference(s) and DatabaseEntry(s). 
        /// </para>
        /// </summary>
        public FuGECommonIdentifiableType() {
        }
        
        /// <summary>
        /// <para>
        ///  An identifier is an unambiguous string that is unique within the scope (i.e. a document, a set of related documents, or a repository) of its use. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The potentially ambiguous common identifier, such as a human-readable name for the instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An atomic value i.e. one that has a single value. 
    /// </para>
    /// <para>
    /// Regular expression: (dataType?, PropertyValue)
    /// </para>
    /// </summary>
    public partial class FuGECommonMeasurementAtomicValueType : global::psidev.info.gelml.FuGECommonMeasurementMeasurementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyValueXName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Measurement.AtomicValueType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonMeasurementAtomicValueType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonMeasurementAtomicValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonMeasurementAtomicValueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dataTypeXName), new NamedContentModelEntity(PropertyValueXName));
        }
        
        /// <summary>
        /// <para>
        ///  An atomic value i.e. one that has a single value. 
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, PropertyValue)
        /// </para>
        /// </summary>
        public FuGECommonMeasurementAtomicValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, PropertyValue)
        /// </para>
        /// </summary>
        public virtual PropertyValue PropertyValue {
            get {
                XElement x = this.GetElement(PropertyValueXName);
                return ((PropertyValue)(x));
            }
            set {
                this.SetElement(PropertyValueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonMeasurementAtomicValueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dataTypeXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(PropertyValueXName, typeof(PropertyValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Boolean value. 
    /// </para>
    /// <para>
    /// Regular expression: (dataType?)
    /// </para>
    /// </summary>
    public partial class FuGECommonMeasurementBooleanValueType : global::psidev.info.gelml.FuGECommonMeasurementMeasurementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Measurement.BooleanValueType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonMeasurementBooleanValueType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonMeasurementBooleanValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonMeasurementBooleanValueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dataTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  A Boolean value. 
        /// </para>
        /// <para>
        /// Regular expression: (dataType?)
        /// </para>
        /// </summary>
        public FuGECommonMeasurementBooleanValueType() {
        }
        
        /// <summary>
        /// <para>
        ///  A Boolean default value for the parameter. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonMeasurementBooleanValueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dataTypeXName, typeof(FuGECommonOntologycvParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A complex default value for the Parameter, such as a term from a controlled list or a function. 
    /// </para>
    /// <para>
    /// Regular expression: (dataType?, (cvParam | userParam)+)
    /// </para>
    /// </summary>
    public partial class FuGECommonMeasurementComplexValueType : global::psidev.info.gelml.FuGECommonMeasurementMeasurementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologycvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologyuserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Measurement.ComplexValueType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonMeasurementComplexValueType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonMeasurementComplexValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonMeasurementComplexValueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dataTypeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A complex default value for the Parameter, such as a term from a controlled list or a function. 
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, (cvParam | userParam)+)
        /// </para>
        /// </summary>
        public FuGECommonMeasurementComplexValueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, (cvParam | userParam)+)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologycvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<FuGECommonOntologycvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<FuGECommonOntologycvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologycvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, (cvParam | userParam)+)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologyuserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<FuGECommonOntologyuserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<FuGECommonOntologyuserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologyuserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonMeasurementComplexValueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dataTypeXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A range value. 
    /// </para>
    /// <para>
    /// Regular expression: (dataType?, lowerLimit, upperLimit, rangeDescriptors*)
    /// </para>
    /// </summary>
    public partial class FuGECommonMeasurementRangeType : global::psidev.info.gelml.FuGECommonMeasurementMeasurementType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lowerLimitXName = System.Xml.Linq.XName.Get("lowerLimit", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName upperLimitXName = System.Xml.Linq.XName.Get("upperLimit", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rangeDescriptorsXName = System.Xml.Linq.XName.Get("rangeDescriptors", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<rangeDescriptorsLocalType> rangeDescriptorsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Measurement.RangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonMeasurementRangeType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECommonMeasurementRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonMeasurementRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dataTypeXName), new NamedContentModelEntity(lowerLimitXName), new NamedContentModelEntity(upperLimitXName), new NamedContentModelEntity(rangeDescriptorsXName));
        }
        
        /// <summary>
        /// <para>
        ///  A range value. 
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, lowerLimit, upperLimit, rangeDescriptors*)
        /// </para>
        /// </summary>
        public FuGECommonMeasurementRangeType() {
        }
        
        /// <summary>
        /// <para>
        ///  The lower limit of a range value. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, lowerLimit, upperLimit, rangeDescriptors*)
        /// </para>
        /// </summary>
        public virtual lowerLimitLocalType lowerLimit {
            get {
                XElement x = this.GetElement(lowerLimitXName);
                return ((lowerLimitLocalType)(x));
            }
            set {
                this.SetElement(lowerLimitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The lower limit of a range value. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, lowerLimit, upperLimit, rangeDescriptors*)
        /// </para>
        /// </summary>
        public virtual upperLimitLocalType upperLimit {
            get {
                XElement x = this.GetElement(upperLimitXName);
                return ((upperLimitLocalType)(x));
            }
            set {
                this.SetElement(upperLimitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Ontology terms can be used the define the semantics of the lower and upper limit in the range, for example the inclusivity of the values or what the values correspond to in the annotated object. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (dataType?, lowerLimit, upperLimit, rangeDescriptors*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonMeasurementRangeType.rangeDescriptorsLocalType> rangeDescriptors {
            get {
                if ((this.rangeDescriptorsField == null)) {
                    this.rangeDescriptorsField = new XTypedList<rangeDescriptorsLocalType>(this, LinqToXsdTypeManager.Instance, rangeDescriptorsXName);
                }
                return this.rangeDescriptorsField;
            }
            set {
                if ((value == null)) {
                    this.rangeDescriptorsField = null;
                }
                else {
                    if ((this.rangeDescriptorsField == null)) {
                        this.rangeDescriptorsField = XTypedList<rangeDescriptorsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, rangeDescriptorsXName);
                    }
                    else {
                        XTypedServices.SetList<rangeDescriptorsLocalType>(this.rangeDescriptorsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECommonMeasurementRangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dataTypeXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(lowerLimitXName, typeof(lowerLimitLocalType));
            localElementDictionary.Add(upperLimitXName, typeof(upperLimitLocalType));
            localElementDictionary.Add(rangeDescriptorsXName, typeof(rangeDescriptorsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PropertyValue)
        /// </para>
        /// </summary>
        public partial class lowerLimitLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropertyValueXName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lowerLimit", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator lowerLimitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<lowerLimitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static lowerLimitLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PropertyValue)
            /// </para>
            /// </summary>
            public lowerLimitLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PropertyValue)
            /// </para>
            /// </summary>
            public virtual PropertyValue PropertyValue {
                get {
                    XElement x = this.GetElement(PropertyValueXName);
                    return ((PropertyValue)(x));
                }
                set {
                    this.SetElement(PropertyValueXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<lowerLimitLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PropertyValueXName, typeof(PropertyValue));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PropertyValue)
        /// </para>
        /// </summary>
        public partial class upperLimitLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PropertyValueXName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("upperLimit", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator upperLimitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<upperLimitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static upperLimitLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PropertyValue)
            /// </para>
            /// </summary>
            public upperLimitLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (PropertyValue)
            /// </para>
            /// </summary>
            public virtual PropertyValue PropertyValue {
                get {
                    XElement x = this.GetElement(PropertyValueXName);
                    return ((PropertyValue)(x));
                }
                set {
                    this.SetElement(PropertyValueXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<upperLimitLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PropertyValueXName, typeof(PropertyValue));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class rangeDescriptorsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rangeDescriptors", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator rangeDescriptorsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<rangeDescriptorsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static rangeDescriptorsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public rangeDescriptorsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<rangeDescriptorsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing different methods of supplying a value or measurement. 
    /// </para>
    /// <para>
    /// Regular expression: (dataType?)
    /// </para>
    /// </summary>
    public abstract partial class FuGECommonMeasurementMeasurementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataTypeXName = System.Xml.Linq.XName.Get("dataType", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Common.Measurement.MeasurementType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECommonMeasurementMeasurementType(XElement xe) {  return (FuGECommonMeasurementMeasurementType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECommonMeasurementMeasurementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dataTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing different methods of supplying a value or measurement. 
        /// </para>
        /// <para>
        /// Regular expression: (dataType?)
        /// </para>
        /// </summary>
        public FuGECommonMeasurementMeasurementType() {
        }
        
        /// <summary>
        /// <para>
        ///  The data type of the Parameter such as Boolean, integer, String. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (dataType?)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologycvParamType dataType {
            get {
                XElement x = this.GetElement(dataTypeXName);
                return ((FuGECommonOntologycvParamType)(x));
            }
            set {
                this.SetElement(dataTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dataTypeXName, typeof(FuGECommonOntologycvParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The collection of objects that allow external references. 
    /// </para>
    /// <para>
    /// Regular expression: (BibliographicReference*, Database*)
    /// </para>
    /// </summary>
    public partial class FuGECollectionReferenceableCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BibliographicReferenceXName = System.Xml.Linq.XName.Get("BibliographicReference", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BibliographicReference> BibliographicReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseXName = System.Xml.Linq.XName.Get("Database", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Database> DatabaseField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Collection.ReferenceableCollectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECollectionReferenceableCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECollectionReferenceableCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECollectionReferenceableCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BibliographicReferenceXName), new NamedContentModelEntity(DatabaseXName));
        }
        
        /// <summary>
        /// <para>
        ///  The collection of objects that allow external references. 
        /// </para>
        /// <para>
        /// Regular expression: (BibliographicReference*, Database*)
        /// </para>
        /// </summary>
        public FuGECollectionReferenceableCollectionType() {
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the complete set of BibliographicReference objects in the FuGE document. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BibliographicReference*, Database*)
        /// </para>
        /// </summary>
        public virtual IList<BibliographicReference> BibliographicReference {
            get {
                if ((this.BibliographicReferenceField == null)) {
                    this.BibliographicReferenceField = new XTypedList<BibliographicReference>(this, LinqToXsdTypeManager.Instance, BibliographicReferenceXName);
                }
                return this.BibliographicReferenceField;
            }
            set {
                if ((value == null)) {
                    this.BibliographicReferenceField = null;
                }
                else {
                    if ((this.BibliographicReferenceField == null)) {
                        this.BibliographicReferenceField = XTypedList<BibliographicReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, BibliographicReferenceXName);
                    }
                    else {
                        XTypedServices.SetList<BibliographicReference>(this.BibliographicReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the complete set of Database objects in the FuGE document. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BibliographicReference*, Database*)
        /// </para>
        /// </summary>
        public virtual IList<Database> Database {
            get {
                if ((this.DatabaseField == null)) {
                    this.DatabaseField = new XTypedList<Database>(this, LinqToXsdTypeManager.Instance, DatabaseXName);
                }
                return this.DatabaseField;
            }
            set {
                if ((value == null)) {
                    this.DatabaseField = null;
                }
                else {
                    if ((this.DatabaseField == null)) {
                        this.DatabaseField = XTypedList<Database>.Initialize(this, LinqToXsdTypeManager.Instance, value, DatabaseXName);
                    }
                    else {
                        XTypedServices.SetList<Database>(this.DatabaseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECollectionReferenceableCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BibliographicReferenceXName, typeof(BibliographicReference));
            localElementDictionary.Add(DatabaseXName, typeof(Database));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The collection of Contact records. 
    /// </para>
    /// <para>
    /// Regular expression: ((Person | Organization)*)
    /// </para>
    /// </summary>
    public partial class FuGECollectionAuditCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonXName = System.Xml.Linq.XName.Get("Person", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonAuditPersonType> PersonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganizationXName = System.Xml.Linq.XName.Get("Organization", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonAuditOrganizationType> OrganizationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Collection.AuditCollectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECollectionAuditCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECollectionAuditCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECollectionAuditCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PersonXName), new NamedContentModelEntity(OrganizationXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The collection of Contact records. 
        /// </para>
        /// <para>
        /// Regular expression: ((Person | Organization)*)
        /// </para>
        /// </summary>
        public FuGECollectionAuditCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Person | Organization)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonAuditPersonType> Person {
            get {
                if ((this.PersonField == null)) {
                    this.PersonField = new XTypedList<FuGECommonAuditPersonType>(this, LinqToXsdTypeManager.Instance, PersonXName);
                }
                return this.PersonField;
            }
            set {
                if ((value == null)) {
                    this.PersonField = null;
                }
                else {
                    if ((this.PersonField == null)) {
                        this.PersonField = XTypedList<FuGECommonAuditPersonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PersonXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonAuditPersonType>(this.PersonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Person | Organization)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonAuditOrganizationType> Organization {
            get {
                if ((this.OrganizationField == null)) {
                    this.OrganizationField = new XTypedList<FuGECommonAuditOrganizationType>(this, LinqToXsdTypeManager.Instance, OrganizationXName);
                }
                return this.OrganizationField;
            }
            set {
                if ((value == null)) {
                    this.OrganizationField = null;
                }
                else {
                    if ((this.OrganizationField == null)) {
                        this.OrganizationField = XTypedList<FuGECommonAuditOrganizationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrganizationXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonAuditOrganizationType>(this.OrganizationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECollectionAuditCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonXName, typeof(FuGECommonAuditPersonType));
            localElementDictionary.Add(OrganizationXName, typeof(FuGECommonAuditOrganizationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The provider of the document in terms of the Contact and the software the produced the document instance. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole?)
    /// </para>
    /// </summary>
    public partial class FuGECollectionProviderType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Software_refXName = System.Xml.Linq.XName.Get("Software_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuGE.Collection.ProviderType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuGECollectionProviderType(XElement xe) { return XTypedServices.ToXTypedElement<FuGECollectionProviderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuGECollectionProviderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName));
        }
        
        /// <summary>
        /// <para>
        ///  The provider of the document in terms of the Contact and the software the produced the document instance. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public FuGECollectionProviderType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Contact that provided the document instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRole ContactRole {
            get {
                XElement x = this.GetElement(ContactRoleXName);
                return ((ContactRole)(x));
            }
            set {
                this.SetElement(ContactRoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Software that produced the document instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Software_ref {
            get {
                XAttribute x = this.Attribute(Software_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Software_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuGECollectionProviderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (cvParam | userParam)
    /// </para>
    /// </summary>
    public partial class ParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParamType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ParamType(XElement xe) { return XTypedServices.ToXTypedElement<ParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParamType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public ParamType() {
        }
        
        public ParamType(FuGECommonOntologycvParamType cvParam) {
            this.cvParam = cvParam;
        }
        
        public ParamType(FuGECommonOntologyuserParamType userParam) {
            this.userParam = userParam;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologycvParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((FuGECommonOntologycvParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyuserParamType userParam {
            get {
                XElement x = this.GetElement(userParamXName);
                return ((FuGECommonOntologyuserParamType)(x));
            }
            set {
                this.SetElement(userParamXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParamType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (cvParam | userParam)+
    /// </para>
    /// </summary>
    public partial class ParamListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologycvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuGECommonOntologyuserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParamListType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ParamListType(XElement xe) { return XTypedServices.ToXTypedElement<ParamListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParamListType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public ParamListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologycvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<FuGECommonOntologycvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<FuGECommonOntologycvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologycvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonOntologyuserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<FuGECommonOntologyuserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<FuGECommonOntologyuserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<FuGECommonOntologyuserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParamListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The root of the GelML document. 
    /// </para>
    /// <para>
    /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGelMLType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderXName = System.Xml.Linq.XName.Get("Provider", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvListXName = System.Xml.Linq.XName.Get("cvList", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelMLMaterialCollectionXName = System.Xml.Linq.XName.Get("GelMLMaterialCollection", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelMLDataCollectionXName = System.Xml.Linq.XName.Get("GelMLDataCollection", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelMLProtocolCollectionXName = System.Xml.Linq.XName.Get("GelMLProtocolCollection", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelExperimentXName = System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<GelExperiment> GelExperimentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuditCollectionXName = System.Xml.Linq.XName.Get("AuditCollection", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferenceableCollectionXName = System.Xml.Linq.XName.Get("ReferenceableCollection", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGelMLType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGelMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGelMLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProviderXName), new NamedContentModelEntity(cvListXName), new NamedContentModelEntity(GelMLMaterialCollectionXName), new NamedContentModelEntity(GelMLDataCollectionXName), new NamedContentModelEntity(GelMLProtocolCollectionXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel2DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel1DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelExperiment", "http://www.psidev.info/gelml/1_1candidate")), new NamedContentModelEntity(AuditCollectionXName), new NamedContentModelEntity(ReferenceableCollectionXName));
        }
        
        /// <summary>
        /// <para>
        ///  The root of the GelML document. 
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGelMLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual Provider Provider {
            get {
                XElement x = this.GetElement(ProviderXName);
                return ((Provider)(x));
            }
            set {
                this.SetElement(ProviderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The list of CVs used within the file
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual cvListLocalType cvList {
            get {
                XElement x = this.GetElement(cvListXName);
                return ((cvListLocalType)(x));
            }
            set {
                this.SetElement(cvListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLMaterialCollection GelMLMaterialCollection {
            get {
                XElement x = this.GetElement(GelMLMaterialCollectionXName);
                return ((GelMLMaterialCollection)(x));
            }
            set {
                this.SetElement(GelMLMaterialCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLDataCollection GelMLDataCollection {
            get {
                XElement x = this.GetElement(GelMLDataCollectionXName);
                return ((GelMLDataCollection)(x));
            }
            set {
                this.SetElement(GelMLDataCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLProtocolCollection GelMLProtocolCollection {
            get {
                XElement x = this.GetElement(GelMLProtocolCollectionXName);
                return ((GelMLProtocolCollection)(x));
            }
            set {
                this.SetElement(GelMLProtocolCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: GelExperiment, Gel2DExperiment, Gel1DExperiment, OtherGelExperiment
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual IList<GelExperiment> GelExperiment {
            get {
                if ((this.GelExperimentField == null)) {
                    this.GelExperimentField = new XTypedSubstitutedList<GelExperiment>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel2DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel1DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelExperiment", "http://www.psidev.info/gelml/1_1candidate"));
                }
                return this.GelExperimentField;
            }
            set {
                if ((value == null)) {
                    this.GelExperimentField = null;
                }
                else {
                    if ((this.GelExperimentField == null)) {
                        this.GelExperimentField = XTypedSubstitutedList<GelExperiment>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel2DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Gel1DExperiment", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelExperiment", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    else {
                        XTypedServices.SetList<GelExperiment>(this.GelExperimentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual AuditCollection AuditCollection {
            get {
                XElement x = this.GetElement(AuditCollectionXName);
                return ((AuditCollection)(x));
            }
            set {
                this.SetElement(AuditCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual ReferenceableCollection ReferenceableCollection {
            get {
                XElement x = this.GetElement(ReferenceableCollectionXName);
                return ((ReferenceableCollection)(x));
            }
            set {
                this.SetElement(ReferenceableCollectionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGelMLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProviderXName, typeof(Provider));
            localElementDictionary.Add(cvListXName, typeof(cvListLocalType));
            localElementDictionary.Add(GelMLMaterialCollectionXName, typeof(GelMLMaterialCollection));
            localElementDictionary.Add(GelMLDataCollectionXName, typeof(GelMLDataCollection));
            localElementDictionary.Add(GelMLProtocolCollectionXName, typeof(GelMLProtocolCollection));
            localElementDictionary.Add(GelExperimentXName, typeof(GelExperiment));
            localElementDictionary.Add(AuditCollectionXName, typeof(AuditCollection));
            localElementDictionary.Add(ReferenceableCollectionXName, typeof(ReferenceableCollection));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cv+)
        /// </para>
        /// </summary>
        public partial class cvListLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvXName = System.Xml.Linq.XName.Get("cv", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<cv> cvField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvList", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator cvListLocalType(XElement xe) { return XTypedServices.ToXTypedElement<cvListLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static cvListLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cv+)
            /// </para>
            /// </summary>
            public cvListLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (cv+)
            /// </para>
            /// </summary>
            public virtual IList<cv> cv {
                get {
                    if ((this.cvField == null)) {
                        this.cvField = new XTypedList<cv>(this, LinqToXsdTypeManager.Instance, cvXName);
                    }
                    return this.cvField;
                }
                set {
                    if ((value == null)) {
                        this.cvField = null;
                    }
                    else {
                        if ((this.cvField == null)) {
                            this.cvField = XTypedList<cv>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvXName);
                        }
                        else {
                            XTypedServices.SetList<cv>(this.cvField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<cvListLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvXName, typeof(cv));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all GenericMaterial instances used in GelML.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (GenericMaterial*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGelMLMaterialCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericMaterialXName = System.Xml.Linq.XName.Get("GenericMaterial", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericMaterial> GenericMaterialField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLMaterialCollectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGelMLMaterialCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGelMLMaterialCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGelMLMaterialCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GenericMaterialXName));
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all GenericMaterial instances used in GelML.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterial*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGelMLMaterialCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterial*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterial> GenericMaterial {
            get {
                if ((this.GenericMaterialField == null)) {
                    this.GenericMaterialField = new XTypedList<GenericMaterial>(this, LinqToXsdTypeManager.Instance, GenericMaterialXName);
                }
                return this.GenericMaterialField;
            }
            set {
                if ((value == null)) {
                    this.GenericMaterialField = null;
                }
                else {
                    if ((this.GenericMaterialField == null)) {
                        this.GenericMaterialField = XTypedList<GenericMaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericMaterialXName);
                    }
                    else {
                        XTypedServices.SetList<GenericMaterial>(this.GenericMaterialField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGelMLMaterialCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GenericMaterialXName, typeof(GenericMaterial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all ExternalData instances in GelML.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (ExternalData*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGelMLDataCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExternalDataXName = System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<ExternalData> ExternalDataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLDataCollectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGelMLDataCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGelMLDataCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGelMLDataCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Image", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all ExternalData instances in GelML.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (ExternalData*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGelMLDataCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: ExternalData, Image
        /// </para>
        /// <para>
        /// Regular expression: (ExternalData*)
        /// </para>
        /// </summary>
        public virtual IList<ExternalData> ExternalData {
            get {
                if ((this.ExternalDataField == null)) {
                    this.ExternalDataField = new XTypedSubstitutedList<ExternalData>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Image", "http://www.psidev.info/gelml/1_1candidate"));
                }
                return this.ExternalDataField;
            }
            set {
                if ((value == null)) {
                    this.ExternalDataField = null;
                }
                else {
                    if ((this.ExternalDataField == null)) {
                        this.ExternalDataField = XTypedSubstitutedList<ExternalData>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Image", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    else {
                        XTypedServices.SetList<ExternalData>(this.ExternalDataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGelMLDataCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalDataXName, typeof(ExternalData));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2DExperiment captures the ProtocolApplications that should be reported for
    ///    2D gel electrophoresis in a GelML file. 
    /// </para>
    /// <para>
    /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGel2DExperimentType : global::psidev.info.gelml.GelMLGelMLRootGelExperimentType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelManufactureApplicationXName = System.Xml.Linq.XName.Get("GelManufactureApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GelManufactureApplication> GelManufactureApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel2DApplicationXName = System.Xml.Linq.XName.Get("Gel2DApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageAcquisitionApplicationXName = System.Xml.Linq.XName.Get("ImageAcquisitionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImageAcquisitionApplication> ImageAcquisitionApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcisionApplicationXName = System.Xml.Linq.XName.Get("ExcisionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExcisionApplication> ExcisionApplicationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.Gel2DExperimentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGel2DExperimentType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGel2DExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGel2DExperimentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(electrophoresisTypeXName), new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(GelManufactureApplicationXName), new NamedContentModelEntity(Gel2DApplicationXName), new NamedContentModelEntity(ImageAcquisitionApplicationXName), new NamedContentModelEntity(ExcisionApplicationXName));
        }
        
        /// <summary>
        /// <para>
        ///  Gel2DExperiment captures the ProtocolApplications that should be reported for
        ///    2D gel electrophoresis in a GelML file. 
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGel2DExperimentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                if ((this.GelManufactureApplicationField == null)) {
                    this.GelManufactureApplicationField = new XTypedList<GelManufactureApplication>(this, LinqToXsdTypeManager.Instance, GelManufactureApplicationXName);
                }
                return this.GelManufactureApplicationField;
            }
            set {
                if ((value == null)) {
                    this.GelManufactureApplicationField = null;
                }
                else {
                    if ((this.GelManufactureApplicationField == null)) {
                        this.GelManufactureApplicationField = XTypedList<GelManufactureApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelManufactureApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<GelManufactureApplication>(this.GelManufactureApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual Gel2DApplication Gel2DApplication {
            get {
                XElement x = this.GetElement(Gel2DApplicationXName);
                return ((Gel2DApplication)(x));
            }
            set {
                this.SetElement(Gel2DApplicationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                if ((this.ImageAcquisitionApplicationField == null)) {
                    this.ImageAcquisitionApplicationField = new XTypedList<ImageAcquisitionApplication>(this, LinqToXsdTypeManager.Instance, ImageAcquisitionApplicationXName);
                }
                return this.ImageAcquisitionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ImageAcquisitionApplicationField = null;
                }
                else {
                    if ((this.ImageAcquisitionApplicationField == null)) {
                        this.ImageAcquisitionApplicationField = XTypedList<ImageAcquisitionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ImageAcquisitionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ImageAcquisitionApplication>(this.ImageAcquisitionApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                if ((this.ExcisionApplicationField == null)) {
                    this.ExcisionApplicationField = new XTypedList<ExcisionApplication>(this, LinqToXsdTypeManager.Instance, ExcisionApplicationXName);
                }
                return this.ExcisionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ExcisionApplicationField = null;
                }
                else {
                    if ((this.ExcisionApplicationField == null)) {
                        this.ExcisionApplicationField = XTypedList<ExcisionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExcisionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ExcisionApplication>(this.ExcisionApplicationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGel2DExperimentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(electrophoresisTypeXName, typeof(void));
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(GelManufactureApplicationXName, typeof(GelManufactureApplication));
            localElementDictionary.Add(Gel2DApplicationXName, typeof(Gel2DApplication));
            localElementDictionary.Add(ImageAcquisitionApplicationXName, typeof(ImageAcquisitionApplication));
            localElementDictionary.Add(ExcisionApplicationXName, typeof(ExcisionApplication));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all Software, Protocol and Equipment instances. 
    /// </para>
    /// <para>
    /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGelMLProtocolCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericEquipmentXName = System.Xml.Linq.XName.Get("GenericEquipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericEquipment> GenericEquipmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericSoftwareXName = System.Xml.Linq.XName.Get("GenericSoftware", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericSoftware> GenericSoftwareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericProtocolXName = System.Xml.Linq.XName.Get("GenericProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericProtocol> GenericProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingProtocolXName = System.Xml.Linq.XName.Get("SampleLoadingProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SampleLoadingProtocol> SampleLoadingProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel2DProtocolXName = System.Xml.Linq.XName.Get("Gel2DProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Gel2DProtocol> Gel2DProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel1DProtocolXName = System.Xml.Linq.XName.Get("Gel1DProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Gel1DProtocol> Gel1DProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OtherGelProtocolXName = System.Xml.Linq.XName.Get("OtherGelProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OtherGelProtocol> OtherGelProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocolXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElectrophoresisProtocol> ElectrophoresisProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubstanceMixtureProtocolXName = System.Xml.Linq.XName.Get("SubstanceMixtureProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubstanceMixtureProtocol> SubstanceMixtureProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionProtocolXName = System.Xml.Linq.XName.Get("DetectionProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DetectionProtocol> DetectionProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageAcquisitionProtocolXName = System.Xml.Linq.XName.Get("ImageAcquisitionProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImageAcquisitionProtocol> ImageAcquisitionProtocolField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLProtocolCollectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGelMLProtocolCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGelMLProtocolCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGelMLProtocolCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GenericEquipmentXName), new NamedContentModelEntity(GenericSoftwareXName), new NamedContentModelEntity(GenericProtocolXName), new NamedContentModelEntity(SampleLoadingProtocolXName), new NamedContentModelEntity(Gel2DProtocolXName), new NamedContentModelEntity(Gel1DProtocolXName), new NamedContentModelEntity(OtherGelProtocolXName), new NamedContentModelEntity(ElectrophoresisProtocolXName), new NamedContentModelEntity(SubstanceMixtureProtocolXName), new NamedContentModelEntity(DetectionProtocolXName), new NamedContentModelEntity(ImageAcquisitionProtocolXName));
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all Software, Protocol and Equipment instances. 
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGelMLProtocolCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericEquipment> GenericEquipment {
            get {
                if ((this.GenericEquipmentField == null)) {
                    this.GenericEquipmentField = new XTypedList<GenericEquipment>(this, LinqToXsdTypeManager.Instance, GenericEquipmentXName);
                }
                return this.GenericEquipmentField;
            }
            set {
                if ((value == null)) {
                    this.GenericEquipmentField = null;
                }
                else {
                    if ((this.GenericEquipmentField == null)) {
                        this.GenericEquipmentField = XTypedList<GenericEquipment>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericEquipmentXName);
                    }
                    else {
                        XTypedServices.SetList<GenericEquipment>(this.GenericEquipmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericSoftware> GenericSoftware {
            get {
                if ((this.GenericSoftwareField == null)) {
                    this.GenericSoftwareField = new XTypedList<GenericSoftware>(this, LinqToXsdTypeManager.Instance, GenericSoftwareXName);
                }
                return this.GenericSoftwareField;
            }
            set {
                if ((value == null)) {
                    this.GenericSoftwareField = null;
                }
                else {
                    if ((this.GenericSoftwareField == null)) {
                        this.GenericSoftwareField = XTypedList<GenericSoftware>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericSoftwareXName);
                    }
                    else {
                        XTypedServices.SetList<GenericSoftware>(this.GenericSoftwareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericProtocol> GenericProtocol {
            get {
                if ((this.GenericProtocolField == null)) {
                    this.GenericProtocolField = new XTypedList<GenericProtocol>(this, LinqToXsdTypeManager.Instance, GenericProtocolXName);
                }
                return this.GenericProtocolField;
            }
            set {
                if ((value == null)) {
                    this.GenericProtocolField = null;
                }
                else {
                    if ((this.GenericProtocolField == null)) {
                        this.GenericProtocolField = XTypedList<GenericProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<GenericProtocol>(this.GenericProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingProtocol> SampleLoadingProtocol {
            get {
                if ((this.SampleLoadingProtocolField == null)) {
                    this.SampleLoadingProtocolField = new XTypedList<SampleLoadingProtocol>(this, LinqToXsdTypeManager.Instance, SampleLoadingProtocolXName);
                }
                return this.SampleLoadingProtocolField;
            }
            set {
                if ((value == null)) {
                    this.SampleLoadingProtocolField = null;
                }
                else {
                    if ((this.SampleLoadingProtocolField == null)) {
                        this.SampleLoadingProtocolField = XTypedList<SampleLoadingProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<SampleLoadingProtocol>(this.SampleLoadingProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<Gel2DProtocol> Gel2DProtocol {
            get {
                if ((this.Gel2DProtocolField == null)) {
                    this.Gel2DProtocolField = new XTypedList<Gel2DProtocol>(this, LinqToXsdTypeManager.Instance, Gel2DProtocolXName);
                }
                return this.Gel2DProtocolField;
            }
            set {
                if ((value == null)) {
                    this.Gel2DProtocolField = null;
                }
                else {
                    if ((this.Gel2DProtocolField == null)) {
                        this.Gel2DProtocolField = XTypedList<Gel2DProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, Gel2DProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<Gel2DProtocol>(this.Gel2DProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<Gel1DProtocol> Gel1DProtocol {
            get {
                if ((this.Gel1DProtocolField == null)) {
                    this.Gel1DProtocolField = new XTypedList<Gel1DProtocol>(this, LinqToXsdTypeManager.Instance, Gel1DProtocolXName);
                }
                return this.Gel1DProtocolField;
            }
            set {
                if ((value == null)) {
                    this.Gel1DProtocolField = null;
                }
                else {
                    if ((this.Gel1DProtocolField == null)) {
                        this.Gel1DProtocolField = XTypedList<Gel1DProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, Gel1DProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<Gel1DProtocol>(this.Gel1DProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<OtherGelProtocol> OtherGelProtocol {
            get {
                if ((this.OtherGelProtocolField == null)) {
                    this.OtherGelProtocolField = new XTypedList<OtherGelProtocol>(this, LinqToXsdTypeManager.Instance, OtherGelProtocolXName);
                }
                return this.OtherGelProtocolField;
            }
            set {
                if ((value == null)) {
                    this.OtherGelProtocolField = null;
                }
                else {
                    if ((this.OtherGelProtocolField == null)) {
                        this.OtherGelProtocolField = XTypedList<OtherGelProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, OtherGelProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<OtherGelProtocol>(this.OtherGelProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<ElectrophoresisProtocol> ElectrophoresisProtocol {
            get {
                if ((this.ElectrophoresisProtocolField == null)) {
                    this.ElectrophoresisProtocolField = new XTypedList<ElectrophoresisProtocol>(this, LinqToXsdTypeManager.Instance, ElectrophoresisProtocolXName);
                }
                return this.ElectrophoresisProtocolField;
            }
            set {
                if ((value == null)) {
                    this.ElectrophoresisProtocolField = null;
                }
                else {
                    if ((this.ElectrophoresisProtocolField == null)) {
                        this.ElectrophoresisProtocolField = XTypedList<ElectrophoresisProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, ElectrophoresisProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<ElectrophoresisProtocol>(this.ElectrophoresisProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<SubstanceMixtureProtocol> SubstanceMixtureProtocol {
            get {
                if ((this.SubstanceMixtureProtocolField == null)) {
                    this.SubstanceMixtureProtocolField = new XTypedList<SubstanceMixtureProtocol>(this, LinqToXsdTypeManager.Instance, SubstanceMixtureProtocolXName);
                }
                return this.SubstanceMixtureProtocolField;
            }
            set {
                if ((value == null)) {
                    this.SubstanceMixtureProtocolField = null;
                }
                else {
                    if ((this.SubstanceMixtureProtocolField == null)) {
                        this.SubstanceMixtureProtocolField = XTypedList<SubstanceMixtureProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, SubstanceMixtureProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<SubstanceMixtureProtocol>(this.SubstanceMixtureProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionProtocol> DetectionProtocol {
            get {
                if ((this.DetectionProtocolField == null)) {
                    this.DetectionProtocolField = new XTypedList<DetectionProtocol>(this, LinqToXsdTypeManager.Instance, DetectionProtocolXName);
                }
                return this.DetectionProtocolField;
            }
            set {
                if ((value == null)) {
                    this.DetectionProtocolField = null;
                }
                else {
                    if ((this.DetectionProtocolField == null)) {
                        this.DetectionProtocolField = XTypedList<DetectionProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, DetectionProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<DetectionProtocol>(this.DetectionProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionProtocol> ImageAcquisitionProtocol {
            get {
                if ((this.ImageAcquisitionProtocolField == null)) {
                    this.ImageAcquisitionProtocolField = new XTypedList<ImageAcquisitionProtocol>(this, LinqToXsdTypeManager.Instance, ImageAcquisitionProtocolXName);
                }
                return this.ImageAcquisitionProtocolField;
            }
            set {
                if ((value == null)) {
                    this.ImageAcquisitionProtocolField = null;
                }
                else {
                    if ((this.ImageAcquisitionProtocolField == null)) {
                        this.ImageAcquisitionProtocolField = XTypedList<ImageAcquisitionProtocol>.Initialize(this, LinqToXsdTypeManager.Instance, value, ImageAcquisitionProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<ImageAcquisitionProtocol>(this.ImageAcquisitionProtocolField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGelMLProtocolCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GenericEquipmentXName, typeof(GenericEquipment));
            localElementDictionary.Add(GenericSoftwareXName, typeof(GenericSoftware));
            localElementDictionary.Add(GenericProtocolXName, typeof(GenericProtocol));
            localElementDictionary.Add(SampleLoadingProtocolXName, typeof(SampleLoadingProtocol));
            localElementDictionary.Add(Gel2DProtocolXName, typeof(Gel2DProtocol));
            localElementDictionary.Add(Gel1DProtocolXName, typeof(Gel1DProtocol));
            localElementDictionary.Add(OtherGelProtocolXName, typeof(OtherGelProtocol));
            localElementDictionary.Add(ElectrophoresisProtocolXName, typeof(ElectrophoresisProtocol));
            localElementDictionary.Add(SubstanceMixtureProtocolXName, typeof(SubstanceMixtureProtocol));
            localElementDictionary.Add(DetectionProtocolXName, typeof(DetectionProtocol));
            localElementDictionary.Add(ImageAcquisitionProtocolXName, typeof(ImageAcquisitionProtocol));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the groups of ProtocolApplications that
    ///    should be represented in a valid GelML document. 
    /// </para>
    /// <para>
    /// Regular expression: (electrophoresisType?, ContactRole?)
    /// </para>
    /// </summary>
    public abstract partial class GelMLGelMLRootGelExperimentType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName electrophoresisTypeXName = System.Xml.Linq.XName.Get("electrophoresisType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelExperimentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGelExperimentType(XElement xe) {  return (GelMLGelMLRootGelExperimentType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGelExperimentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(electrophoresisTypeXName), new NamedContentModelEntity(ContactRoleXName));
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the groups of ProtocolApplications that
        ///    should be represented in a valid GelML document. 
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGelExperimentType() {
        }
        
        /// <summary>
        /// <para>
        ///  The experiment type definition, such as "2D-DIGE", "one-dimensional gel
        ///        electrophoresis", "two-dimensional gel electrophoresis" etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?)
        /// </para>
        /// </summary>
        public virtual electrophoresisTypeLocalType electrophoresisType {
            get {
                XElement x = this.GetElement(electrophoresisTypeXName);
                return ((electrophoresisTypeLocalType)(x));
            }
            set {
                this.SetElement(electrophoresisTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The primary contact for this GelExperiment
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRole ContactRole {
            get {
                XElement x = this.GetElement(ContactRoleXName);
                return ((ContactRole)(x));
            }
            set {
                this.SetElement(ContactRoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The date the experiment was initiated on. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(electrophoresisTypeXName, typeof(electrophoresisTypeLocalType));
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class electrophoresisTypeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("electrophoresisType", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator electrophoresisTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<electrophoresisTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static electrophoresisTypeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public electrophoresisTypeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<electrophoresisTypeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel1DExperiment captures the ProtocolApplications that should be reported for
    ///    1D gel electrophoresis in a GelML file. 
    /// </para>
    /// <para>
    /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootGel1DExperimentType : global::psidev.info.gelml.GelMLGelMLRootGelExperimentType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelManufactureApplicationXName = System.Xml.Linq.XName.Get("GelManufactureApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GelManufactureApplication> GelManufactureApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel1DApplicationXName = System.Xml.Linq.XName.Get("Gel1DApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageAcquisitionApplicationXName = System.Xml.Linq.XName.Get("ImageAcquisitionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImageAcquisitionApplication> ImageAcquisitionApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcisionApplicationXName = System.Xml.Linq.XName.Get("ExcisionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExcisionApplication> ExcisionApplicationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.Gel1DExperimentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootGel1DExperimentType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootGel1DExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootGel1DExperimentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(electrophoresisTypeXName), new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(GelManufactureApplicationXName), new NamedContentModelEntity(Gel1DApplicationXName), new NamedContentModelEntity(ImageAcquisitionApplicationXName), new NamedContentModelEntity(ExcisionApplicationXName));
        }
        
        /// <summary>
        /// <para>
        ///  Gel1DExperiment captures the ProtocolApplications that should be reported for
        ///    1D gel electrophoresis in a GelML file. 
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootGel1DExperimentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                if ((this.GelManufactureApplicationField == null)) {
                    this.GelManufactureApplicationField = new XTypedList<GelManufactureApplication>(this, LinqToXsdTypeManager.Instance, GelManufactureApplicationXName);
                }
                return this.GelManufactureApplicationField;
            }
            set {
                if ((value == null)) {
                    this.GelManufactureApplicationField = null;
                }
                else {
                    if ((this.GelManufactureApplicationField == null)) {
                        this.GelManufactureApplicationField = XTypedList<GelManufactureApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelManufactureApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<GelManufactureApplication>(this.GelManufactureApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual Gel1DApplication Gel1DApplication {
            get {
                XElement x = this.GetElement(Gel1DApplicationXName);
                return ((Gel1DApplication)(x));
            }
            set {
                this.SetElement(Gel1DApplicationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                if ((this.ImageAcquisitionApplicationField == null)) {
                    this.ImageAcquisitionApplicationField = new XTypedList<ImageAcquisitionApplication>(this, LinqToXsdTypeManager.Instance, ImageAcquisitionApplicationXName);
                }
                return this.ImageAcquisitionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ImageAcquisitionApplicationField = null;
                }
                else {
                    if ((this.ImageAcquisitionApplicationField == null)) {
                        this.ImageAcquisitionApplicationField = XTypedList<ImageAcquisitionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ImageAcquisitionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ImageAcquisitionApplication>(this.ImageAcquisitionApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                if ((this.ExcisionApplicationField == null)) {
                    this.ExcisionApplicationField = new XTypedList<ExcisionApplication>(this, LinqToXsdTypeManager.Instance, ExcisionApplicationXName);
                }
                return this.ExcisionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ExcisionApplicationField = null;
                }
                else {
                    if ((this.ExcisionApplicationField == null)) {
                        this.ExcisionApplicationField = XTypedList<ExcisionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExcisionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ExcisionApplication>(this.ExcisionApplicationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootGel1DExperimentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(electrophoresisTypeXName, typeof(void));
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(GelManufactureApplicationXName, typeof(GelManufactureApplication));
            localElementDictionary.Add(Gel1DApplicationXName, typeof(Gel1DApplication));
            localElementDictionary.Add(ImageAcquisitionApplicationXName, typeof(ImageAcquisitionApplication));
            localElementDictionary.Add(ExcisionApplicationXName, typeof(ExcisionApplication));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  OtherGelExperiment captures the ProtocolApplications that should be reported
    ///    for a type of gel electrophoresis other than 1D or 2D in a GelML file. 
    /// </para>
    /// <para>
    /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
    /// </para>
    /// </summary>
    public partial class GelMLGelMLRootOtherGelExperimentType : global::psidev.info.gelml.GelMLGelMLRootGelExperimentType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelManufactureApplicationXName = System.Xml.Linq.XName.Get("GelManufactureApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GelManufactureApplication> GelManufactureApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OtherGelApplicationXName = System.Xml.Linq.XName.Get("OtherGelApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageAcquisitionApplicationXName = System.Xml.Linq.XName.Get("ImageAcquisitionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImageAcquisitionApplication> ImageAcquisitionApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcisionApplicationXName = System.Xml.Linq.XName.Get("ExcisionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExcisionApplication> ExcisionApplicationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.GelMLRoot.OtherGelExperimentType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMLRootOtherGelExperimentType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMLRootOtherGelExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMLRootOtherGelExperimentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(electrophoresisTypeXName), new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(GelManufactureApplicationXName), new NamedContentModelEntity(OtherGelApplicationXName), new NamedContentModelEntity(ImageAcquisitionApplicationXName), new NamedContentModelEntity(ExcisionApplicationXName));
        }
        
        /// <summary>
        /// <para>
        ///  OtherGelExperiment captures the ProtocolApplications that should be reported
        ///    for a type of gel electrophoresis other than 1D or 2D in a GelML file. 
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public GelMLGelMLRootOtherGelExperimentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                if ((this.GelManufactureApplicationField == null)) {
                    this.GelManufactureApplicationField = new XTypedList<GelManufactureApplication>(this, LinqToXsdTypeManager.Instance, GelManufactureApplicationXName);
                }
                return this.GelManufactureApplicationField;
            }
            set {
                if ((value == null)) {
                    this.GelManufactureApplicationField = null;
                }
                else {
                    if ((this.GelManufactureApplicationField == null)) {
                        this.GelManufactureApplicationField = XTypedList<GelManufactureApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelManufactureApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<GelManufactureApplication>(this.GelManufactureApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual OtherGelApplication OtherGelApplication {
            get {
                XElement x = this.GetElement(OtherGelApplicationXName);
                return ((OtherGelApplication)(x));
            }
            set {
                this.SetElement(OtherGelApplicationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                if ((this.ImageAcquisitionApplicationField == null)) {
                    this.ImageAcquisitionApplicationField = new XTypedList<ImageAcquisitionApplication>(this, LinqToXsdTypeManager.Instance, ImageAcquisitionApplicationXName);
                }
                return this.ImageAcquisitionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ImageAcquisitionApplicationField = null;
                }
                else {
                    if ((this.ImageAcquisitionApplicationField == null)) {
                        this.ImageAcquisitionApplicationField = XTypedList<ImageAcquisitionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ImageAcquisitionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ImageAcquisitionApplication>(this.ImageAcquisitionApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                if ((this.ExcisionApplicationField == null)) {
                    this.ExcisionApplicationField = new XTypedList<ExcisionApplication>(this, LinqToXsdTypeManager.Instance, ExcisionApplicationXName);
                }
                return this.ExcisionApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ExcisionApplicationField = null;
                }
                else {
                    if ((this.ExcisionApplicationField == null)) {
                        this.ExcisionApplicationField = XTypedList<ExcisionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExcisionApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<ExcisionApplication>(this.ExcisionApplicationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMLRootOtherGelExperimentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(electrophoresisTypeXName, typeof(void));
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(GelManufactureApplicationXName, typeof(GelManufactureApplication));
            localElementDictionary.Add(OtherGelApplicationXName, typeof(OtherGelApplication));
            localElementDictionary.Add(ImageAcquisitionApplicationXName, typeof(ImageAcquisitionApplication));
            localElementDictionary.Add(ExcisionApplicationXName, typeof(ExcisionApplication));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The volume of a substance relative to the medium in which it is in.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceRelativeVolumeType : global::psidev.info.gelml.GelMLSelectSubstanceVolumeParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.RelativeVolumeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceRelativeVolumeType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceRelativeVolumeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceRelativeVolumeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The volume of a substance relative to the medium in which it is in.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceRelativeVolumeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceRelativeVolumeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  VolumeFunction represents a specification of a volume that changes, for
    ///    example, over time. The value provided for a VolumeFunction should use the ComplexValue
    ///    specification to represent the function. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceVolumeFunctionType : global::psidev.info.gelml.GelMLSelectSubstanceVolumeParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.VolumeFunctionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceVolumeFunctionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceVolumeFunctionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceVolumeFunctionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  VolumeFunction represents a specification of a volume that changes, for
        ///    example, over time. The value provided for a VolumeFunction should use the ComplexValue
        ///    specification to represent the function. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceVolumeFunctionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceVolumeFunctionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An absolute volume parameter. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceAbsoluteVolumeType : global::psidev.info.gelml.GelMLSelectSubstanceVolumeParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.AbsoluteVolumeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceAbsoluteVolumeType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceAbsoluteVolumeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceAbsoluteVolumeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  An absolute volume parameter. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceAbsoluteVolumeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceAbsoluteVolumeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the different formats for representing the
    ///    volume of a substance. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public abstract partial class GelMLSelectSubstanceVolumeParameterType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.VolumeParameterType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceVolumeParameterType(XElement xe) {  return (GelMLSelectSubstanceVolumeParameterType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceVolumeParameterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different formats for representing the
        ///    volume of a substance. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceVolumeParameterType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action representing the use of a substance within a protocol. The
    ///    substance can be named by free text or using the substanceType association. The attribute
    ///    actionText can be used to specify how the substance has been used within the protocol.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceSubstanceActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConcentrationXName = System.Xml.Linq.XName.Get("Concentration", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassXName = System.Xml.Linq.XName.Get("Mass", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName substanceCharacteristicsXName = System.Xml.Linq.XName.Get("substanceCharacteristics", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<substanceCharacteristicsLocalType> substanceCharacteristicsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName substanceTypeXName = System.Xml.Linq.XName.Get("substanceType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumeParameterXName = System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName substanceNameXName = System.Xml.Linq.XName.Get("substanceName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actionTextXName = System.Xml.Linq.XName.Get("actionText", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.SubstanceActionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceSubstanceActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceSubstanceActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceSubstanceActionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConcentrationXName), new NamedContentModelEntity(MassXName), new NamedContentModelEntity(substanceCharacteristicsXName), new NamedContentModelEntity(substanceTypeXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("RelativeVolume", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("VolumeFunction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("AbsoluteVolume", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  An action representing the use of a substance within a protocol. The
        ///    substance can be named by free text or using the substanceType association. The attribute
        ///    actionText can be used to specify how the substance has been used within the protocol.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceSubstanceActionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual Concentration Concentration {
            get {
                XElement x = this.GetElement(ConcentrationXName);
                return ((Concentration)(x));
            }
            set {
                this.SetElement(ConcentrationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual Mass Mass {
            get {
                XElement x = this.GetElement(MassXName);
                return ((Mass)(x));
            }
            set {
                this.SetElement(MassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The characteristics of the substance. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLSelectSubstanceSubstanceActionType.substanceCharacteristicsLocalType> substanceCharacteristics {
            get {
                if ((this.substanceCharacteristicsField == null)) {
                    this.substanceCharacteristicsField = new XTypedList<substanceCharacteristicsLocalType>(this, LinqToXsdTypeManager.Instance, substanceCharacteristicsXName);
                }
                return this.substanceCharacteristicsField;
            }
            set {
                if ((value == null)) {
                    this.substanceCharacteristicsField = null;
                }
                else {
                    if ((this.substanceCharacteristicsField == null)) {
                        this.substanceCharacteristicsField = XTypedList<substanceCharacteristicsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, substanceCharacteristicsXName);
                    }
                    else {
                        XTypedServices.SetList<substanceCharacteristicsLocalType>(this.substanceCharacteristicsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of substance, if the substance name has not been given as free text
        ///        in the SubstanceAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual ParamType substanceType {
            get {
                XElement x = this.GetElement(substanceTypeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(substanceTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: VolumeParameter, RelativeVolume, VolumeFunction, AbsoluteVolume
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual VolumeParameter VolumeParameter {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("RelativeVolume", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("VolumeFunction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("AbsoluteVolume", "http://www.psidev.info/gelml/1_1candidate"));
                return ((VolumeParameter)(x));
            }
            set {
                this.SetElement(VolumeParameterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the substance given as free text. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string substanceName {
            get {
                XAttribute x = this.Attribute(substanceNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(substanceNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A specification of the use of the substance within the parent protocol.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actionText {
            get {
                XAttribute x = this.Attribute(actionTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(actionTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceSubstanceActionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConcentrationXName, typeof(Concentration));
            localElementDictionary.Add(MassXName, typeof(Mass));
            localElementDictionary.Add(substanceCharacteristicsXName, typeof(substanceCharacteristicsLocalType));
            localElementDictionary.Add(substanceTypeXName, typeof(ParamType));
            localElementDictionary.Add(VolumeParameterXName, typeof(VolumeParameter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public partial class substanceCharacteristicsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FuGECommonOntologycvParamType> cvParamField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FuGECommonOntologyuserParamType> userParamField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("substanceCharacteristics", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator substanceCharacteristicsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<substanceCharacteristicsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static substanceCharacteristicsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((cvParam | userParam)*)
            /// </para>
            /// </summary>
            public substanceCharacteristicsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((cvParam | userParam)*)
            /// </para>
            /// </summary>
            public virtual IList<FuGECommonOntologycvParamType> cvParam {
                get {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = new XTypedList<FuGECommonOntologycvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                    }
                    return this.cvParamField;
                }
                set {
                    if ((value == null)) {
                        this.cvParamField = null;
                    }
                    else {
                        if ((this.cvParamField == null)) {
                            this.cvParamField = XTypedList<FuGECommonOntologycvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                        }
                        else {
                            XTypedServices.SetList<FuGECommonOntologycvParamType>(this.cvParamField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((cvParam | userParam)*)
            /// </para>
            /// </summary>
            public virtual IList<FuGECommonOntologyuserParamType> userParam {
                get {
                    if ((this.userParamField == null)) {
                        this.userParamField = new XTypedList<FuGECommonOntologyuserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                    }
                    return this.userParamField;
                }
                set {
                    if ((value == null)) {
                        this.userParamField = null;
                    }
                    else {
                        if ((this.userParamField == null)) {
                            this.userParamField = XTypedList<FuGECommonOntologyuserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                        }
                        else {
                            XTypedServices.SetList<FuGECommonOntologyuserParamType>(this.userParamField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<substanceCharacteristicsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
                localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a substance within a protocol at a particular time point or for a
    ///    particular duration. 
    /// </para>
    /// <para>
    /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?, TimeParameter)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceTemporalSubstanceActionType : global::psidev.info.gelml.GelMLSelectSubstanceSubstanceActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeParameterXName = System.Xml.Linq.XName.Get("TimeParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.TemporalSubstanceActionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceTemporalSubstanceActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceTemporalSubstanceActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceTemporalSubstanceActionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConcentrationXName), new NamedContentModelEntity(MassXName), new NamedContentModelEntity(substanceCharacteristicsXName), new NamedContentModelEntity(substanceTypeXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("RelativeVolume", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("VolumeFunction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("AbsoluteVolume", "http://www.psidev.info/gelml/1_1candidate")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("TimeParameter", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Duration", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("TimePoint", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  The use of a substance within a protocol at a particular time point or for a
        ///    particular duration. 
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?, TimeParameter)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceTemporalSubstanceActionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: TimeParameter, Duration, TimePoint
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?, TimeParameter)
        /// </para>
        /// </summary>
        public virtual TimeParameter TimeParameter {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("TimeParameter", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Duration", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("TimePoint", "http://www.psidev.info/gelml/1_1candidate"));
                return ((TimeParameter)(x));
            }
            set {
                this.SetElement(TimeParameterXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceTemporalSubstanceActionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConcentrationXName, typeof(Concentration));
            localElementDictionary.Add(MassXName, typeof(Mass));
            localElementDictionary.Add(substanceCharacteristicsXName, typeof(void));
            localElementDictionary.Add(substanceTypeXName, typeof(ParamType));
            localElementDictionary.Add(VolumeParameterXName, typeof(VolumeParameter));
            localElementDictionary.Add(TimeParameterXName, typeof(TimeParameter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Protocol representing the creation of a mixture of substances, for example
    ///    to be used for specifying the components of buffers, solutions etc. If the actionText attribute
    ///    of SubtanceAction is not used, the SubstanceMixtureProtocol represents only the components of
    ///    the mixture and not the processes applied to them. 
    /// </para>
    /// <para>
    /// Regular expression: (SubstanceAction+, mixtureType?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceSubstanceMixtureProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubstanceActionXName = System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<SubstanceAction> SubstanceActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mixtureTypeXName = System.Xml.Linq.XName.Get("mixtureType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mixtureNameXName = System.Xml.Linq.XName.Get("mixtureName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.SubstanceMixtureProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceSubstanceMixtureProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceSubstanceMixtureProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceSubstanceMixtureProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("TemporalSubstanceAction", "http://www.psidev.info/gelml/1_1candidate")), new NamedContentModelEntity(mixtureTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  A Protocol representing the creation of a mixture of substances, for example
        ///    to be used for specifying the components of buffers, solutions etc. If the actionText attribute
        ///    of SubtanceAction is not used, the SubstanceMixtureProtocol represents only the components of
        ///    the mixture and not the processes applied to them. 
        /// </para>
        /// <para>
        /// Regular expression: (SubstanceAction+, mixtureType?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceSubstanceMixtureProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Substitution members: SubstanceAction, TemporalSubstanceAction
        /// </para>
        /// <para>
        /// Regular expression: (SubstanceAction+, mixtureType?)
        /// </para>
        /// </summary>
        public virtual IList<SubstanceAction> SubstanceAction {
            get {
                if ((this.SubstanceActionField == null)) {
                    this.SubstanceActionField = new XTypedSubstitutedList<SubstanceAction>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("TemporalSubstanceAction", "http://www.psidev.info/gelml/1_1candidate"));
                }
                return this.SubstanceActionField;
            }
            set {
                if ((value == null)) {
                    this.SubstanceActionField = null;
                }
                else {
                    if ((this.SubstanceActionField == null)) {
                        this.SubstanceActionField = XTypedSubstitutedList<SubstanceAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("TemporalSubstanceAction", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    else {
                        XTypedServices.SetList<SubstanceAction>(this.SubstanceActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of mixture e.g. buffer, solution, protein complex etc.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SubstanceAction+, mixtureType?)
        /// </para>
        /// </summary>
        public virtual ParamType mixtureType {
            get {
                XElement x = this.GetElement(mixtureTypeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(mixtureTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the mixture represented by this protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mixtureName {
            get {
                XAttribute x = this.Attribute(mixtureNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(mixtureNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceSubstanceMixtureProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SubstanceActionXName, typeof(SubstanceAction));
            localElementDictionary.Add(mixtureTypeXName, typeof(ParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A duration parameter. Note: values for absolute or relative time can be
    ///    specified using the Parameter DefaultValue model. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceDurationType : global::psidev.info.gelml.GelMLSelectSubstanceTimeParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.DurationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceDurationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceDurationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceDurationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A duration parameter. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceDurationType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceDurationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single time point. Note: values for absolute or relative time can be
    ///    specified using the Parameter DefaultValue model. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceTimePointType : global::psidev.info.gelml.GelMLSelectSubstanceTimeParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.TimePointType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceTimePointType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceTimePointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceTimePointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A single time point. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceTimePointType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceTimePointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing Duration and TimePoints.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public abstract partial class GelMLSelectSubstanceTimeParameterType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.TimeParameterType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceTimeParameterType(XElement xe) {  return (GelMLSelectSubstanceTimeParameterType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceTimeParameterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing Duration and TimePoints.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceTimeParameterType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Concentration of a substance. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceConcentrationType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.ConcentrationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceConcentrationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceConcentrationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceConcentrationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The Concentration of a substance. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceConcentrationType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceConcentrationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The mass of a substance. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLSelectSubstanceMassType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SelectSubstance.MassType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSelectSubstanceMassType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSelectSubstanceMassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSelectSubstanceMassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The mass of a substance. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLSelectSubstanceMassType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSelectSubstanceMassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2D is the material produced from a Gel2DApplication representing the
    ///    combination of the two gel substrates and the proteins that have been separated.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolGel2DType : global::psidev.info.gelml.GelMLGelElectrophoresedGelType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel2DProtocolGel2DType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolGel2DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel2DProtocolGel2DType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(gelLaneReferenceXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  Gel2D is the material produced from a Gel2DApplication representing the
        ///    combination of the two gel substrates and the proteins that have been separated.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolGel2DType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolGel2DType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(gelLaneReferenceXName, typeof(void));
            localElementDictionary.Add(SeparationRangeXName, typeof(SeparationRange));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing the procedure of 2D gel electrophoresis.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolGel2DProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingActionXName = System.Xml.Linq.XName.Get("SampleLoadingAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SampleLoadingAction> SampleLoadingActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FirstDimensionActionXName = System.Xml.Linq.XName.Get("FirstDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecondDimensionActionXName = System.Xml.Linq.XName.Get("SecondDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterDimensionActionXName = System.Xml.Linq.XName.Get("InterDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InterDimensionAction> InterDimensionActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionActionXName = System.Xml.Linq.XName.Get("DetectionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DetectionAction> DetectionActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel2DProtocolGel2DProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolGel2DProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel2DProtocolGel2DProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingActionXName), new NamedContentModelEntity(FirstDimensionActionXName), new NamedContentModelEntity(SecondDimensionActionXName), new NamedContentModelEntity(InterDimensionActionXName), new NamedContentModelEntity(DetectionActionXName));
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 2D gel electrophoresis.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolGel2DProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                if ((this.SampleLoadingActionField == null)) {
                    this.SampleLoadingActionField = new XTypedList<SampleLoadingAction>(this, LinqToXsdTypeManager.Instance, SampleLoadingActionXName);
                }
                return this.SampleLoadingActionField;
            }
            set {
                if ((value == null)) {
                    this.SampleLoadingActionField = null;
                }
                else {
                    if ((this.SampleLoadingActionField == null)) {
                        this.SampleLoadingActionField = XTypedList<SampleLoadingAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingActionXName);
                    }
                    else {
                        XTypedServices.SetList<SampleLoadingAction>(this.SampleLoadingActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual FirstDimensionAction FirstDimensionAction {
            get {
                XElement x = this.GetElement(FirstDimensionActionXName);
                return ((FirstDimensionAction)(x));
            }
            set {
                this.SetElement(FirstDimensionActionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual SecondDimensionAction SecondDimensionAction {
            get {
                XElement x = this.GetElement(SecondDimensionActionXName);
                return ((SecondDimensionAction)(x));
            }
            set {
                this.SetElement(SecondDimensionActionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<InterDimensionAction> InterDimensionAction {
            get {
                if ((this.InterDimensionActionField == null)) {
                    this.InterDimensionActionField = new XTypedList<InterDimensionAction>(this, LinqToXsdTypeManager.Instance, InterDimensionActionXName);
                }
                return this.InterDimensionActionField;
            }
            set {
                if ((value == null)) {
                    this.InterDimensionActionField = null;
                }
                else {
                    if ((this.InterDimensionActionField == null)) {
                        this.InterDimensionActionField = XTypedList<InterDimensionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, InterDimensionActionXName);
                    }
                    else {
                        XTypedServices.SetList<InterDimensionAction>(this.InterDimensionActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                if ((this.DetectionActionField == null)) {
                    this.DetectionActionField = new XTypedList<DetectionAction>(this, LinqToXsdTypeManager.Instance, DetectionActionXName);
                }
                return this.DetectionActionField;
            }
            set {
                if ((value == null)) {
                    this.DetectionActionField = null;
                }
                else {
                    if ((this.DetectionActionField == null)) {
                        this.DetectionActionField = XTypedList<DetectionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, DetectionActionXName);
                    }
                    else {
                        XTypedServices.SetList<DetectionAction>(this.DetectionActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolGel2DProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SampleLoadingActionXName, typeof(SampleLoadingAction));
            localElementDictionary.Add(FirstDimensionActionXName, typeof(FirstDimensionAction));
            localElementDictionary.Add(SecondDimensionActionXName, typeof(SecondDimensionAction));
            localElementDictionary.Add(InterDimensionActionXName, typeof(InterDimensionAction));
            localElementDictionary.Add(DetectionActionXName, typeof(DetectionAction));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2DApplication is the application of a Gel2DProtocol. An instance of
    ///    Gel2DApplication should reference SampleLoadingApplication, ElectrophoresisApplication,
    ///    DetectionApplications and GenericProtocolApplication as its sub-steps, as defined by the
    ///    referenced Gel2DProtocol. 
    /// </para>
    /// <para>
    /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolGel2DApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputFirstDimensionXName = System.Xml.Linq.XName.Get("inputFirstDimension", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputSecondDimensionXName = System.Xml.Linq.XName.Get("inputSecondDimension", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputXName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChildProtocolApplicationsXName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel2DProtocol_refXName = System.Xml.Linq.XName.Get("Gel2DProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel2DProtocolGel2DApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolGel2DApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel2DProtocolGel2DApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputFirstDimensionXName), new NamedContentModelEntity(inputSecondDimensionXName), new NamedContentModelEntity(outputXName), new NamedContentModelEntity(ChildProtocolApplicationsXName));
        }
        
        /// <summary>
        /// <para>
        ///  Gel2DApplication is the application of a Gel2DProtocol. An instance of
        ///    Gel2DApplication should reference SampleLoadingApplication, ElectrophoresisApplication,
        ///    DetectionApplications and GenericProtocolApplication as its sub-steps, as defined by the
        ///    referenced Gel2DProtocol. 
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolGel2DApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the Gel on which the first dimension separation is
        ///        performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual inputFirstDimensionLocalType inputFirstDimension {
            get {
                XElement x = this.GetElement(inputFirstDimensionXName);
                return ((inputFirstDimensionLocalType)(x));
            }
            set {
                this.SetElement(inputFirstDimensionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the Gel on which the second dimension separation is
        ///        performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual inputSecondDimensionLocalType inputSecondDimension {
            get {
                XElement x = this.GetElement(inputSecondDimensionXName);
                return ((inputSecondDimensionLocalType)(x));
            }
            set {
                this.SetElement(inputSecondDimensionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual outputLocalType output {
            get {
                XElement x = this.GetElement(outputXName);
                return ((outputLocalType)(x));
            }
            set {
                this.SetElement(outputXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                XElement x = this.GetElement(ChildProtocolApplicationsXName);
                return ((ChildProtocolApplicationsLocalType)(x));
            }
            set {
                this.SetElement(ChildProtocolApplicationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Gel2DProtocol that has been run. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel2DProtocol_ref {
            get {
                XAttribute x = this.Attribute(Gel2DProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Gel2DProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolGel2DApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputFirstDimensionXName, typeof(inputFirstDimensionLocalType));
            localElementDictionary.Add(inputSecondDimensionXName, typeof(inputSecondDimensionLocalType));
            localElementDictionary.Add(outputXName, typeof(outputLocalType));
            localElementDictionary.Add(ChildProtocolApplicationsXName, typeof(ChildProtocolApplicationsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel)
        /// </para>
        /// </summary>
        public partial class inputFirstDimensionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelXName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputFirstDimension", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputFirstDimensionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputFirstDimensionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputFirstDimensionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public inputFirstDimensionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public virtual Gel Gel {
                get {
                    XElement x = this.GetElement(GelXName);
                    return ((Gel)(x));
                }
                set {
                    this.SetElement(GelXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputFirstDimensionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GelXName, typeof(Gel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel)
        /// </para>
        /// </summary>
        public partial class inputSecondDimensionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelXName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputSecondDimension", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputSecondDimensionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputSecondDimensionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputSecondDimensionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public inputSecondDimensionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public virtual Gel Gel {
                get {
                    XElement x = this.GetElement(GelXName);
                    return ((Gel)(x));
                }
                set {
                    this.SetElement(GelXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputSecondDimensionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GelXName, typeof(Gel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel2D)
        /// </para>
        /// </summary>
        public partial class outputLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Gel2DXName = System.Xml.Linq.XName.Get("Gel2D", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator outputLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static outputLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Gel2DXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel2D)
            /// </para>
            /// </summary>
            public outputLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Gel2D)
            /// </para>
            /// </summary>
            public virtual Gel2D Gel2D {
                get {
                    XElement x = this.GetElement(Gel2DXName);
                    return ((Gel2D)(x));
                }
                set {
                    this.SetElement(Gel2DXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<outputLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(Gel2DXName, typeof(Gel2D));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication+, DetectionApplication*)
        /// </para>
        /// </summary>
        public partial class ChildProtocolApplicationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SampleLoadingApplicationXName = System.Xml.Linq.XName.Get("SampleLoadingApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SampleLoadingApplication> SampleLoadingApplicationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectrophoresisApplicationXName = System.Xml.Linq.XName.Get("ElectrophoresisApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ElectrophoresisApplication> ElectrophoresisApplicationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DetectionApplicationXName = System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedSubstitutedList<DetectionApplication> DetectionApplicationField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ChildProtocolApplicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ChildProtocolApplicationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ChildProtocolApplicationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingApplicationXName), new NamedContentModelEntity(ElectrophoresisApplicationXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication+, DetectionApplication*)
            /// </para>
            /// </summary>
            public ChildProtocolApplicationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication+, DetectionApplication*)
            /// </para>
            /// </summary>
            public virtual IList<SampleLoadingApplication> SampleLoadingApplication {
                get {
                    if ((this.SampleLoadingApplicationField == null)) {
                        this.SampleLoadingApplicationField = new XTypedList<SampleLoadingApplication>(this, LinqToXsdTypeManager.Instance, SampleLoadingApplicationXName);
                    }
                    return this.SampleLoadingApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.SampleLoadingApplicationField = null;
                    }
                    else {
                        if ((this.SampleLoadingApplicationField == null)) {
                            this.SampleLoadingApplicationField = XTypedList<SampleLoadingApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingApplicationXName);
                        }
                        else {
                            XTypedServices.SetList<SampleLoadingApplication>(this.SampleLoadingApplicationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication+, DetectionApplication*)
            /// </para>
            /// </summary>
            public virtual IList<ElectrophoresisApplication> ElectrophoresisApplication {
                get {
                    if ((this.ElectrophoresisApplicationField == null)) {
                        this.ElectrophoresisApplicationField = new XTypedList<ElectrophoresisApplication>(this, LinqToXsdTypeManager.Instance, ElectrophoresisApplicationXName);
                    }
                    return this.ElectrophoresisApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.ElectrophoresisApplicationField = null;
                    }
                    else {
                        if ((this.ElectrophoresisApplicationField == null)) {
                            this.ElectrophoresisApplicationField = XTypedList<ElectrophoresisApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, ElectrophoresisApplicationXName);
                        }
                        else {
                            XTypedServices.SetList<ElectrophoresisApplication>(this.ElectrophoresisApplicationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Substitution members: DetectionApplication, DirectDetection, IndirectDetection
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication+, DetectionApplication*)
            /// </para>
            /// </summary>
            public virtual IList<DetectionApplication> DetectionApplication {
                get {
                    if ((this.DetectionApplicationField == null)) {
                        this.DetectionApplicationField = new XTypedSubstitutedList<DetectionApplication>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    return this.DetectionApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.DetectionApplicationField = null;
                    }
                    else {
                        if ((this.DetectionApplicationField == null)) {
                            this.DetectionApplicationField = XTypedSubstitutedList<DetectionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                        }
                        else {
                            XTypedServices.SetList<DetectionApplication>(this.DetectionApplicationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ChildProtocolApplicationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SampleLoadingApplicationXName, typeof(SampleLoadingApplication));
                localElementDictionary.Add(ElectrophoresisApplicationXName, typeof(ElectrophoresisApplication));
                localElementDictionary.Add(DetectionApplicationXName, typeof(DetectionApplication));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of the referenced ElectrophoresisProtocol.
    ///   
    /// </para>
    /// </summary>
    public partial class GelMLElectrophoresisElectrophoresisApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocol_refXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel_refXName = System.Xml.Linq.XName.Get("Gel_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLElectrophoresisElectrophoresisApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLElectrophoresisElectrophoresisApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An application of the referenced ElectrophoresisProtocol.
        ///   
        /// </para>
        /// </summary>
        public GelMLElectrophoresisElectrophoresisApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol that is applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresisProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresisProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Gel on which Electrophoresis takes place. The referenced gels must be one of the gels
        ///        associated as inputs to Gel1DApplication, Gel2DApplication or OtherGelApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel_ref {
            get {
                XAttribute x = this.Attribute(Gel_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Gel_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLElectrophoresisElectrophoresisApplicationType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass to represent applications of a DetectionProtocol. Its
    ///    subclasses DirectDetection and IndirectDetection capture the application of the procedure. If
    ///    two stainings are done, the destaining should be the first stage of the second staining process,
    ///    as represented in the DetectionProtocol. 
    /// </para>
    /// </summary>
    public abstract partial class GelMLDetectionDetectionApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionProtocol_refXName = System.Xml.Linq.XName.Get("DetectionProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.DetectionApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLDetectionDetectionApplicationType(XElement xe) {  return (GelMLDetectionDetectionApplicationType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass to represent applications of a DetectionProtocol. Its
        ///    subclasses DirectDetection and IndirectDetection capture the application of the procedure. If
        ///    two stainings are done, the destaining should be the first stage of the second staining process,
        ///    as represented in the DetectionProtocol. 
        /// </para>
        /// </summary>
        public GelMLDetectionDetectionApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The DetectionProtocol that has been run. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string DetectionProtocol_ref {
            get {
                XAttribute x = this.Attribute(DetectionProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DetectionProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolFirstDimensionActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocol_refXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.FirstDimensionActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLGel2DProtocolFirstDimensionActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolFirstDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolFirstDimensionActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in the first dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresisProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresisProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolFirstDimensionActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolSecondDimensionActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocol_refXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.SecondDimensionActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLGel2DProtocolSecondDimensionActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolSecondDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolSecondDimensionActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in the second dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresisProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresisProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolSecondDimensionActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced DetectionProtocol, with
    ///    respect to other Actions performed within this parent protocol. 
    /// </para>
    /// <para>
    /// Regular expression: (dimension?)
    /// </para>
    /// </summary>
    public partial class GelMLGel2DProtocolDetectionActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionXName = System.Xml.Linq.XName.Get("dimension", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionProtocol_refXName = System.Xml.Linq.XName.Get("DetectionProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.DetectionActionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel2DProtocolDetectionActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel2DProtocolDetectionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel2DProtocolDetectionActionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dimensionXName));
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced DetectionProtocol, with
        ///    respect to other Actions performed within this parent protocol. 
        /// </para>
        /// <para>
        /// Regular expression: (dimension?)
        /// </para>
        /// </summary>
        public GelMLGel2DProtocolDetectionActionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (dimension?)
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                XElement x = this.GetElement(dimensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetElement(dimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The DetectionProtocol referenced from this Action. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string DetectionProtocol_ref {
            get {
                XAttribute x = this.Attribute(DetectionProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DetectionProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel2DProtocolDetectionActionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dimensionXName, typeof(int));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel1D is the material produced from a Gel1DApplication representing the
    ///    combination of the gel substrate with the proteins that have been separated. Gel1D should be
    ///    referenced by a DetectionApplication to describe any detection agents that have been applied.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
    /// </para>
    /// </summary>
    public partial class GelMLGel1DProtocolGel1DType : global::psidev.info.gelml.GelMLGelElectrophoresedGelType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel1DProtocolGel1DType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel1DProtocolGel1DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel1DProtocolGel1DType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(gelLaneReferenceXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  Gel1D is the material produced from a Gel1DApplication representing the
        ///    combination of the gel substrate with the proteins that have been separated. Gel1D should be
        ///    referenced by a DetectionApplication to describe any detection agents that have been applied.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public GelMLGel1DProtocolGel1DType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel1DProtocolGel1DType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(gelLaneReferenceXName, typeof(void));
            localElementDictionary.Add(SeparationRangeXName, typeof(SeparationRange));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The application of a Gel1DProtocol. Gel1DApplication should reference (via
    ///    ActionApplication) SampleLoadingApplication, ElectrophoresisApplication and DetectionApplication
    ///    matching the structure of the referenced Gel1DProtocol. 
    /// </para>
    /// <para>
    /// Regular expression: (inputGel, output, ChildProtocolApplications)
    /// </para>
    /// </summary>
    public partial class GelMLGel1DProtocolGel1DApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputGelXName = System.Xml.Linq.XName.Get("inputGel", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputXName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChildProtocolApplicationsXName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel1DProtocol_refXName = System.Xml.Linq.XName.Get("Gel1DProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel1DProtocolGel1DApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel1DProtocolGel1DApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel1DProtocolGel1DApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputGelXName), new NamedContentModelEntity(outputXName), new NamedContentModelEntity(ChildProtocolApplicationsXName));
        }
        
        /// <summary>
        /// <para>
        ///  The application of a Gel1DProtocol. Gel1DApplication should reference (via
        ///    ActionApplication) SampleLoadingApplication, ElectrophoresisApplication and DetectionApplication
        ///    matching the structure of the referenced Gel1DProtocol. 
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public GelMLGel1DProtocolGel1DApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The gel material on which this Gel1DProtocol acts. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual inputGelLocalType inputGel {
            get {
                XElement x = this.GetElement(inputGelXName);
                return ((inputGelLocalType)(x));
            }
            set {
                this.SetElement(inputGelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual outputLocalType output {
            get {
                XElement x = this.GetElement(outputXName);
                return ((outputLocalType)(x));
            }
            set {
                this.SetElement(outputXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                XElement x = this.GetElement(ChildProtocolApplicationsXName);
                return ((ChildProtocolApplicationsLocalType)(x));
            }
            set {
                this.SetElement(ChildProtocolApplicationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol used in this Gel1DProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel1DProtocol_ref {
            get {
                XAttribute x = this.Attribute(Gel1DProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Gel1DProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel1DProtocolGel1DApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputGelXName, typeof(inputGelLocalType));
            localElementDictionary.Add(outputXName, typeof(outputLocalType));
            localElementDictionary.Add(ChildProtocolApplicationsXName, typeof(ChildProtocolApplicationsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel)
        /// </para>
        /// </summary>
        public partial class inputGelLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelXName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputGel", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputGelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputGelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputGelLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public inputGelLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Gel)
            /// </para>
            /// </summary>
            public virtual Gel Gel {
                get {
                    XElement x = this.GetElement(GelXName);
                    return ((Gel)(x));
                }
                set {
                    this.SetElement(GelXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputGelLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GelXName, typeof(Gel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel1D)
        /// </para>
        /// </summary>
        public partial class outputLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Gel1DXName = System.Xml.Linq.XName.Get("Gel1D", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator outputLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static outputLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Gel1DXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel1D)
            /// </para>
            /// </summary>
            public outputLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Gel1D)
            /// </para>
            /// </summary>
            public virtual Gel1D Gel1D {
                get {
                    XElement x = this.GetElement(Gel1DXName);
                    return ((Gel1D)(x));
                }
                set {
                    this.SetElement(Gel1DXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<outputLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(Gel1DXName, typeof(Gel1D));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
        /// </para>
        /// </summary>
        public partial class ChildProtocolApplicationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SampleLoadingApplicationXName = System.Xml.Linq.XName.Get("SampleLoadingApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SampleLoadingApplication> SampleLoadingApplicationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectrophoresisApplicationXName = System.Xml.Linq.XName.Get("ElectrophoresisApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DetectionApplicationXName = System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedSubstitutedList<DetectionApplication> DetectionApplicationField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ChildProtocolApplicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ChildProtocolApplicationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ChildProtocolApplicationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingApplicationXName), new NamedContentModelEntity(ElectrophoresisApplicationXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public ChildProtocolApplicationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual IList<SampleLoadingApplication> SampleLoadingApplication {
                get {
                    if ((this.SampleLoadingApplicationField == null)) {
                        this.SampleLoadingApplicationField = new XTypedList<SampleLoadingApplication>(this, LinqToXsdTypeManager.Instance, SampleLoadingApplicationXName);
                    }
                    return this.SampleLoadingApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.SampleLoadingApplicationField = null;
                    }
                    else {
                        if ((this.SampleLoadingApplicationField == null)) {
                            this.SampleLoadingApplicationField = XTypedList<SampleLoadingApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingApplicationXName);
                        }
                        else {
                            XTypedServices.SetList<SampleLoadingApplication>(this.SampleLoadingApplicationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual ElectrophoresisApplication ElectrophoresisApplication {
                get {
                    XElement x = this.GetElement(ElectrophoresisApplicationXName);
                    return ((ElectrophoresisApplication)(x));
                }
                set {
                    this.SetElement(ElectrophoresisApplicationXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Substitution members: DetectionApplication, DirectDetection, IndirectDetection
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual IList<DetectionApplication> DetectionApplication {
                get {
                    if ((this.DetectionApplicationField == null)) {
                        this.DetectionApplicationField = new XTypedSubstitutedList<DetectionApplication>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    return this.DetectionApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.DetectionApplicationField = null;
                    }
                    else {
                        if ((this.DetectionApplicationField == null)) {
                            this.DetectionApplicationField = XTypedSubstitutedList<DetectionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                        }
                        else {
                            XTypedServices.SetList<DetectionApplication>(this.DetectionApplicationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ChildProtocolApplicationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SampleLoadingApplicationXName, typeof(SampleLoadingApplication));
                localElementDictionary.Add(ElectrophoresisApplicationXName, typeof(ElectrophoresisApplication));
                localElementDictionary.Add(DetectionApplicationXName, typeof(DetectionApplication));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing the procedure of 1D gel electrophoresis.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
    /// </para>
    /// </summary>
    public partial class GelMLGel1DProtocolGel1DProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingActionXName = System.Xml.Linq.XName.Get("SampleLoadingAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SampleLoadingAction> SampleLoadingActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisActionXName = System.Xml.Linq.XName.Get("ElectrophoresisAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionActionXName = System.Xml.Linq.XName.Get("DetectionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DetectionAction> DetectionActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGel1DProtocolGel1DProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGel1DProtocolGel1DProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGel1DProtocolGel1DProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingActionXName), new NamedContentModelEntity(ElectrophoresisActionXName), new NamedContentModelEntity(DetectionActionXName));
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 1D gel electrophoresis.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public GelMLGel1DProtocolGel1DProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                if ((this.SampleLoadingActionField == null)) {
                    this.SampleLoadingActionField = new XTypedList<SampleLoadingAction>(this, LinqToXsdTypeManager.Instance, SampleLoadingActionXName);
                }
                return this.SampleLoadingActionField;
            }
            set {
                if ((value == null)) {
                    this.SampleLoadingActionField = null;
                }
                else {
                    if ((this.SampleLoadingActionField == null)) {
                        this.SampleLoadingActionField = XTypedList<SampleLoadingAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingActionXName);
                    }
                    else {
                        XTypedServices.SetList<SampleLoadingAction>(this.SampleLoadingActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual ElectrophoresisAction ElectrophoresisAction {
            get {
                XElement x = this.GetElement(ElectrophoresisActionXName);
                return ((ElectrophoresisAction)(x));
            }
            set {
                this.SetElement(ElectrophoresisActionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                if ((this.DetectionActionField == null)) {
                    this.DetectionActionField = new XTypedList<DetectionAction>(this, LinqToXsdTypeManager.Instance, DetectionActionXName);
                }
                return this.DetectionActionField;
            }
            set {
                if ((value == null)) {
                    this.DetectionActionField = null;
                }
                else {
                    if ((this.DetectionActionField == null)) {
                        this.DetectionActionField = XTypedList<DetectionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, DetectionActionXName);
                    }
                    else {
                        XTypedServices.SetList<DetectionAction>(this.DetectionActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGel1DProtocolGel1DProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SampleLoadingActionXName, typeof(SampleLoadingAction));
            localElementDictionary.Add(ElectrophoresisActionXName, typeof(ElectrophoresisAction));
            localElementDictionary.Add(DetectionActionXName, typeof(DetectionAction));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The medium on which proteins are detected in processes such as
    ///    autoradiography (example photographic film). The type of material should be captured by the
    ///    inherited MaterialType association. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class GelMLDetectionDetectionMediumType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.DetectionMediumType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLDetectionDetectionMediumType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDetectionDetectionMediumType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLDetectionDetectionMediumType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The medium on which proteins are detected in processes such as
        ///    autoradiography (example photographic film). The type of material should be captured by the
        ///    inherited MaterialType association. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public GelMLDetectionDetectionMediumType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLDetectionDetectionMediumType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The process by which proteins are to be detected on a gel, either by a direct
    ///    process e.g. staining or by an indirect process e.g. Western blot. The type of protocol should
    ///    be specified using the types association inherited from Protocol 
    /// </para>
    /// <para>
    /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
    /// </para>
    /// </summary>
    public partial class GelMLDetectionDetectionProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolTextXName = System.Xml.Linq.XName.Get("protocolText", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionAgentXName = System.Xml.Linq.XName.Get("DetectionAgent", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParamType> DetectionAgentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName detectionEquipmentXName = System.Xml.Linq.XName.Get("detectionEquipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<detectionEquipmentLocalType> detectionEquipmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddBufferActionXName = System.Xml.Linq.XName.Get("AddBufferAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddBufferAction> AddBufferActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.DetectionProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLDetectionDetectionProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDetectionDetectionProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLDetectionDetectionProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(protocolTextXName), new NamedContentModelEntity(DetectionAgentXName), new NamedContentModelEntity(detectionEquipmentXName), new NamedContentModelEntity(AddBufferActionXName));
        }
        
        /// <summary>
        /// <para>
        ///  The process by which proteins are to be detected on a gel, either by a direct
        ///    process e.g. staining or by an indirect process e.g. Western blot. The type of protocol should
        ///    be specified using the types association inherited from Protocol 
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public GelMLDetectionDetectionProtocolType() {
        }
        
        /// <summary>
        /// <para>
        ///  The text of the detection protocol. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                XElement x = this.GetElement(protocolTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(protocolTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<ParamType> DetectionAgent {
            get {
                if ((this.DetectionAgentField == null)) {
                    this.DetectionAgentField = new XTypedList<ParamType>(this, LinqToXsdTypeManager.Instance, DetectionAgentXName);
                }
                return this.DetectionAgentField;
            }
            set {
                if ((value == null)) {
                    this.DetectionAgentField = null;
                }
                else {
                    if ((this.DetectionAgentField == null)) {
                        this.DetectionAgentField = XTypedList<ParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DetectionAgentXName);
                    }
                    else {
                        XTypedServices.SetList<ParamType>(this.DetectionAgentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used in the DetectionProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLDetectionDetectionProtocolType.detectionEquipmentLocalType> detectionEquipment {
            get {
                if ((this.detectionEquipmentField == null)) {
                    this.detectionEquipmentField = new XTypedList<detectionEquipmentLocalType>(this, LinqToXsdTypeManager.Instance, detectionEquipmentXName);
                }
                return this.detectionEquipmentField;
            }
            set {
                if ((value == null)) {
                    this.detectionEquipmentField = null;
                }
                else {
                    if ((this.detectionEquipmentField == null)) {
                        this.detectionEquipmentField = XTypedList<detectionEquipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, detectionEquipmentXName);
                    }
                    else {
                        XTypedServices.SetList<detectionEquipmentLocalType>(this.detectionEquipmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<AddBufferAction> AddBufferAction {
            get {
                if ((this.AddBufferActionField == null)) {
                    this.AddBufferActionField = new XTypedList<AddBufferAction>(this, LinqToXsdTypeManager.Instance, AddBufferActionXName);
                }
                return this.AddBufferActionField;
            }
            set {
                if ((value == null)) {
                    this.AddBufferActionField = null;
                }
                else {
                    if ((this.AddBufferActionField == null)) {
                        this.AddBufferActionField = XTypedList<AddBufferAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, AddBufferActionXName);
                    }
                    else {
                        XTypedServices.SetList<AddBufferAction>(this.AddBufferActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLDetectionDetectionProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(protocolTextXName, typeof(string));
            localElementDictionary.Add(DetectionAgentXName, typeof(ParamType));
            localElementDictionary.Add(detectionEquipmentXName, typeof(detectionEquipmentLocalType));
            localElementDictionary.Add(AddBufferActionXName, typeof(AddBufferAction));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class detectionEquipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("detectionEquipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator detectionEquipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<detectionEquipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public detectionEquipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<detectionEquipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  DirectDetection represents the application of a DetectionProtocol in which a
    ///    detection agent (stain or label) is applied directly to a gel. 
    /// </para>
    /// </summary>
    public partial class GelMLDetectionDirectDetectionType : global::psidev.info.gelml.GelMLDetectionDetectionApplicationType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.DirectDetectionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLDetectionDirectDetectionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDetectionDirectDetectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  DirectDetection represents the application of a DetectionProtocol in which a
        ///    detection agent (stain or label) is applied directly to a gel. 
        /// </para>
        /// </summary>
        public GelMLDetectionDirectDetectionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLDetectionDirectDetectionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  IndirectDetection represents the application of a DetectionProtocol in which
    ///    a detection agent (stain or label) is applied to a TransferMedium (e.g. a membrane) following
    ///    proteins being transfered from a gel. Subsequently, the proteins may be detected on a
    ///    DetectionMedium, such as photographic film. 
    /// </para>
    /// <para>
    /// Regular expression: (TransferMedium, DetectionMedium?)
    /// </para>
    /// </summary>
    public partial class GelMLDetectionIndirectDetectionType : global::psidev.info.gelml.GelMLDetectionDetectionApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransferMediumXName = System.Xml.Linq.XName.Get("TransferMedium", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionMediumXName = System.Xml.Linq.XName.Get("DetectionMedium", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.IndirectDetectionType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLDetectionIndirectDetectionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDetectionIndirectDetectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLDetectionIndirectDetectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TransferMediumXName), new NamedContentModelEntity(DetectionMediumXName));
        }
        
        /// <summary>
        /// <para>
        ///  IndirectDetection represents the application of a DetectionProtocol in which
        ///    a detection agent (stain or label) is applied to a TransferMedium (e.g. a membrane) following
        ///    proteins being transfered from a gel. Subsequently, the proteins may be detected on a
        ///    DetectionMedium, such as photographic film. 
        /// </para>
        /// <para>
        /// Regular expression: (TransferMedium, DetectionMedium?)
        /// </para>
        /// </summary>
        public GelMLDetectionIndirectDetectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TransferMedium, DetectionMedium?)
        /// </para>
        /// </summary>
        public virtual TransferMedium TransferMedium {
            get {
                XElement x = this.GetElement(TransferMediumXName);
                return ((TransferMedium)(x));
            }
            set {
                this.SetElement(TransferMediumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TransferMedium, DetectionMedium?)
        /// </para>
        /// </summary>
        public virtual DetectionMedium DetectionMedium {
            get {
                XElement x = this.GetElement(DetectionMediumXName);
                return ((DetectionMedium)(x));
            }
            set {
                this.SetElement(DetectionMediumXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLDetectionIndirectDetectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TransferMediumXName, typeof(TransferMedium));
            localElementDictionary.Add(DetectionMediumXName, typeof(DetectionMedium));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The medium proteins are transfered to during Indirect detection of proteins,
    ///    such as the membrane in a Western blot. The type of material should be captured by the inherited
    ///    MaterialType association. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class GelMLDetectionTransferMediumType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Detection.TransferMediumType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLDetectionTransferMediumType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDetectionTransferMediumType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLDetectionTransferMediumType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  The medium proteins are transfered to during Indirect detection of proteins,
        ///    such as the membrane in a Western blot. The type of material should be captured by the inherited
        ///    MaterialType association. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public GelMLDetectionTransferMediumType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLDetectionTransferMediumType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to the ElectrophoreisProtocol performed within the parent
    ///    protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLElectrophoresisElectrophoresisActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocol_refXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLElectrophoresisElectrophoresisActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLElectrophoresisElectrophoresisActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A reference to the ElectrophoreisProtocol performed within the parent
        ///    protocol. 
        /// </para>
        /// </summary>
        public GelMLElectrophoresisElectrophoresisActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the ElectrophoresisProtocol 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresisProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresisProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLElectrophoresisElectrophoresisActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol for capturing the details of electrophoresis. The running
    ///    conditions applied to the gel should be given in terms of voltages versus time/kilovolt hours,
    ///    (or appropriate measurements) and temperature. The voltage mode profile (eg. step and hold, or
    ///    gradient) should be given as ontology terms on ElectricalParameter. 
    /// </para>
    /// <para>
    /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
    /// </para>
    /// </summary>
    public partial class GelMLElectrophoresisElectrophoresisProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolTextXName = System.Xml.Linq.XName.Get("protocolText", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddBufferActionXName = System.Xml.Linq.XName.Get("AddBufferAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddBufferAction> AddBufferActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName electrophoresisEquipmentXName = System.Xml.Linq.XName.Get("electrophoresisEquipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<electrophoresisEquipmentLocalType> electrophoresisEquipmentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLElectrophoresisElectrophoresisProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLElectrophoresisElectrophoresisProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLElectrophoresisElectrophoresisProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(protocolTextXName), new NamedContentModelEntity(AddBufferActionXName), new NamedContentModelEntity(electrophoresisEquipmentXName));
        }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing the details of electrophoresis. The running
        ///    conditions applied to the gel should be given in terms of voltages versus time/kilovolt hours,
        ///    (or appropriate measurements) and temperature. The voltage mode profile (eg. step and hold, or
        ///    gradient) should be given as ontology terms on ElectricalParameter. 
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public GelMLElectrophoresisElectrophoresisProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                XElement x = this.GetElement(protocolTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(protocolTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<AddBufferAction> AddBufferAction {
            get {
                if ((this.AddBufferActionField == null)) {
                    this.AddBufferActionField = new XTypedList<AddBufferAction>(this, LinqToXsdTypeManager.Instance, AddBufferActionXName);
                }
                return this.AddBufferActionField;
            }
            set {
                if ((value == null)) {
                    this.AddBufferActionField = null;
                }
                else {
                    if ((this.AddBufferActionField == null)) {
                        this.AddBufferActionField = XTypedList<AddBufferAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, AddBufferActionXName);
                    }
                    else {
                        XTypedServices.SetList<AddBufferAction>(this.AddBufferActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used during electrophoresis, such as gel tanks or power
        ///        packs. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLElectrophoresisElectrophoresisProtocolType.electrophoresisEquipmentLocalType> electrophoresisEquipment {
            get {
                if ((this.electrophoresisEquipmentField == null)) {
                    this.electrophoresisEquipmentField = new XTypedList<electrophoresisEquipmentLocalType>(this, LinqToXsdTypeManager.Instance, electrophoresisEquipmentXName);
                }
                return this.electrophoresisEquipmentField;
            }
            set {
                if ((value == null)) {
                    this.electrophoresisEquipmentField = null;
                }
                else {
                    if ((this.electrophoresisEquipmentField == null)) {
                        this.electrophoresisEquipmentField = XTypedList<electrophoresisEquipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, electrophoresisEquipmentXName);
                    }
                    else {
                        XTypedServices.SetList<electrophoresisEquipmentLocalType>(this.electrophoresisEquipmentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLElectrophoresisElectrophoresisProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(protocolTextXName, typeof(string));
            localElementDictionary.Add(AddBufferActionXName, typeof(AddBufferAction));
            localElementDictionary.Add(electrophoresisEquipmentXName, typeof(electrophoresisEquipmentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class electrophoresisEquipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("electrophoresisEquipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator electrophoresisEquipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<electrophoresisEquipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public electrophoresisEquipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<electrophoresisEquipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Temperature parameter. 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLElectrophoresisTemperatureType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Electrophoresis.TemperatureType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLElectrophoresisTemperatureType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLElectrophoresisTemperatureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLElectrophoresisTemperatureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  Temperature parameter. 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLElectrophoresisTemperatureType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLElectrophoresisTemperatureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the use of buffers in the Protocol by reference to a
    ///    SubstanceMixtureProtocol that represents the buffer and optionally the method of producing the
    ///    buffer. 
    /// </para>
    /// </summary>
    public partial class GelMLElectrophoresisAddBufferActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubstanceMixtureProtocol_refXName = System.Xml.Linq.XName.Get("SubstanceMixtureProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Electrophoresis.AddBufferActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLElectrophoresisAddBufferActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLElectrophoresisAddBufferActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the use of buffers in the Protocol by reference to a
        ///    SubstanceMixtureProtocol that represents the buffer and optionally the method of producing the
        ///    buffer. 
        /// </para>
        /// </summary>
        public GelMLElectrophoresisAddBufferActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The specification of the buffer and its components. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SubstanceMixtureProtocol_ref {
            get {
                XAttribute x = this.Attribute(SubstanceMixtureProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SubstanceMixtureProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLElectrophoresisAddBufferActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A boundary chain is a notation for specifying an arbitrarily shaped location
    ///    on an image. A starting point is given (startXCoordinate and startYCoordinate) and a set of
    ///    directional steps. See chainCode documentation for this encoding. 
    /// </para>
    /// </summary>
    public partial class GelMLExcisionBoundaryChainType : global::psidev.info.gelml.GelMLExcisionFeatureLocationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startXCoordinateXName = System.Xml.Linq.XName.Get("startXCoordinate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startYCoordinateXName = System.Xml.Linq.XName.Get("startYCoordinate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chainCodeXName = System.Xml.Linq.XName.Get("chainCode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.BoundaryChainType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLExcisionBoundaryChainType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionBoundaryChainType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A boundary chain is a notation for specifying an arbitrarily shaped location
        ///    on an image. A starting point is given (startXCoordinate and startYCoordinate) and a set of
        ///    directional steps. See chainCode documentation for this encoding. 
        /// </para>
        /// </summary>
        public GelMLExcisionBoundaryChainType() {
        }
        
        /// <summary>
        /// <para>
        ///  The x-coordinate of the starting position of the chain code.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int startXCoordinate {
            get {
                XAttribute x = this.Attribute(startXCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(startXCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y-coordinate of the starting position of the chain code.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int startYCoordinate {
            get {
                XAttribute x = this.Attribute(startYCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(startYCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A chain code denotes the shape of feature using directional steps of one
        ///       pixel, starting from the specified X and Y coordinates. Each step is encoded using the
        ///       following convention: 0 = E; 1 = NE; 2 = N; 3 = NW; 4 = W; 5 = SW; 6 = S; 7 = SE; See the
        ///       specification document for a diagram. In-house representations of GelML are free to use a
        ///       compression algorithm over the chain code, such as run length encoding, but for data exchange
        ///       the code should be uncompressed as shown in the example (since entire data files can be
        ///       compressed using Zip or Gz for data transfer). Note: In XML Schema, the chainCode is
        ///       represented as an xs:integer, which covers the infinite set of integers. Care should be taken
        ///       when mapping to other platforms, such as Java, i.e. this will not map to a Java Integer.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal chainCode {
            get {
                XAttribute x = this.Attribute(chainCodeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(chainCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionBoundaryChainType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  Circle is for defining a circular location on an image. 
    /// </para>
    /// </summary>
    public partial class GelMLExcisionCircleType : global::psidev.info.gelml.GelMLExcisionFeatureLocationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pixelRadiusXName = System.Xml.Linq.XName.Get("pixelRadius", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.CircleType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLExcisionCircleType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionCircleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Circle is for defining a circular location on an image. 
        /// </para>
        /// </summary>
        public GelMLExcisionCircleType() {
        }
        
        /// <summary>
        /// <para>
        ///  Radius of the Circle in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelRadius {
            get {
                XAttribute x = this.Attribute(pixelRadiusXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(pixelRadiusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionCircleType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A sample excised from a gel. These materials can be referenced by formats
    ///    modelling other techniques, such as mass spectrometry. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class GelMLExcisionExcisedSampleType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelLocation_refXName = System.Xml.Linq.XName.Get("GelLocation_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.ExcisedSampleType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionExcisedSampleType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionExcisedSampleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionExcisedSampleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A sample excised from a gel. These materials can be referenced by formats
        ///    modelling other techniques, such as mass spectrometry. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public GelMLExcisionExcisedSampleType() {
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the location that this sample was excised from. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GelLocation_ref {
            get {
                XAttribute x = this.Attribute(GelLocation_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GelLocation_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionExcisedSampleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Application of a protocol that describes the excision of locations on
    ///    gels. 
    /// </para>
    /// <para>
    /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
    /// </para>
    /// </summary>
    public partial class GelMLExcisionExcisionApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputImageLocationsXName = System.Xml.Linq.XName.Get("inputImageLocations", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcisedSampleXName = System.Xml.Linq.XName.Get("ExcisedSample", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExcisedSample> ExcisedSampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputGelLocationsXName = System.Xml.Linq.XName.Get("inputGelLocations", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresedGel_refXName = System.Xml.Linq.XName.Get("ElectrophoresedGel_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericProtocol_refXName = System.Xml.Linq.XName.Get("GenericProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.ExcisionApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionExcisionApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionExcisionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionExcisionApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputImageLocationsXName), new NamedContentModelEntity(ExcisedSampleXName), new NamedContentModelEntity(inputGelLocationsXName));
        }
        
        /// <summary>
        /// <para>
        ///  The Application of a protocol that describes the excision of locations on
        ///    gels. 
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public GelMLExcisionExcisionApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The set of locations on an image of a gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual inputImageLocationsLocalType inputImageLocations {
            get {
                XElement x = this.GetElement(inputImageLocationsXName);
                return ((inputImageLocationsLocalType)(x));
            }
            set {
                this.SetElement(inputImageLocationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual IList<ExcisedSample> ExcisedSample {
            get {
                if ((this.ExcisedSampleField == null)) {
                    this.ExcisedSampleField = new XTypedList<ExcisedSample>(this, LinqToXsdTypeManager.Instance, ExcisedSampleXName);
                }
                return this.ExcisedSampleField;
            }
            set {
                if ((value == null)) {
                    this.ExcisedSampleField = null;
                }
                else {
                    if ((this.ExcisedSampleField == null)) {
                        this.ExcisedSampleField = XTypedList<ExcisedSample>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExcisedSampleXName);
                    }
                    else {
                        XTypedServices.SetList<ExcisedSample>(this.ExcisedSampleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The set of locations on a gel as determined by, for instance, a robotic
        ///        spot picker at runtime. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual inputGelLocationsLocalType inputGelLocations {
            get {
                XElement x = this.GetElement(inputGelLocationsXName);
                return ((inputGelLocationsLocalType)(x));
            }
            set {
                this.SetElement(inputGelLocationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresedGel from which locations are excised. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresedGel_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresedGel_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresedGel_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Protocol applied for excision. Note that equipment and software used should be
        ///        provided using the associations from GenericProtocol to GenericEquipment and
        ///        GenericSoftware. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                XAttribute x = this.Attribute(GenericProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GenericProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionExcisionApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputImageLocationsXName, typeof(inputImageLocationsLocalType));
            localElementDictionary.Add(ExcisedSampleXName, typeof(ExcisedSample));
            localElementDictionary.Add(inputGelLocationsXName, typeof(inputGelLocationsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationSet)
        /// </para>
        /// </summary>
        public partial class inputImageLocationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocationSetXName = System.Xml.Linq.XName.Get("LocationSet", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputImageLocations", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputImageLocationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputImageLocationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputImageLocationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationSetXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationSet)
            /// </para>
            /// </summary>
            public inputImageLocationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (LocationSet)
            /// </para>
            /// </summary>
            public virtual LocationSet LocationSet {
                get {
                    XElement x = this.GetElement(LocationSetXName);
                    return ((LocationSet)(x));
                }
                set {
                    this.SetElement(LocationSetXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputImageLocationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocationSetXName, typeof(LocationSet));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LocationSet)
        /// </para>
        /// </summary>
        public partial class inputGelLocationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LocationSetXName = System.Xml.Linq.XName.Get("LocationSet", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputGelLocations", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputGelLocationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputGelLocationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputGelLocationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationSetXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (LocationSet)
            /// </para>
            /// </summary>
            public inputGelLocationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (LocationSet)
            /// </para>
            /// </summary>
            public virtual LocationSet LocationSet {
                get {
                    XElement x = this.GetElement(LocationSetXName);
                    return ((LocationSet)(x));
                }
                set {
                    this.SetElement(LocationSetXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputGelLocationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LocationSetXName, typeof(LocationSet));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the different types of method that could be
    ///    used to identify a location. 
    /// </para>
    /// </summary>
    public partial class GelMLExcisionFeatureLocationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName centroidXXName = System.Xml.Linq.XName.Get("centroidX", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName centroidYXName = System.Xml.Linq.XName.Get("centroidY", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.FeatureLocationType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLExcisionFeatureLocationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionFeatureLocationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different types of method that could be
        ///    used to identify a location. 
        /// </para>
        /// </summary>
        public GelMLExcisionFeatureLocationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The centroid position on the x-axis of the image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? centroidX {
            get {
                XAttribute x = this.Attribute(centroidXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(centroidXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The centroid position on the y-axis of the image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? centroidY {
            get {
                XAttribute x = this.Attribute(centroidYXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(centroidYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionFeatureLocationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single location on a gel. 
    /// </para>
    /// <para>
    /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
    /// </para>
    /// </summary>
    public partial class GelMLExcisionGelLocationType : global::psidev.info.gelml.FuGECommonIdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationMeasureXName = System.Xml.Linq.XName.Get("LocationMeasure", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LocationMeasure> LocationMeasureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureLocationXName = System.Xml.Linq.XName.Get("FeatureLocation", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mappedLocationXName = System.Xml.Linq.XName.Get("mappedLocation", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.GelLocationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionGelLocationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionGelLocationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionGelLocationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LocationMeasureXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("FeatureLocation", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("BoundaryChain", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Circle", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Rectangle", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("BoundaryPointSet", "http://www.psidev.info/gelml/1_1candidate")), new NamedContentModelEntity(mappedLocationXName));
        }
        
        /// <summary>
        /// <para>
        ///  A single location on a gel. 
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public GelMLExcisionGelLocationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual IList<LocationMeasure> LocationMeasure {
            get {
                if ((this.LocationMeasureField == null)) {
                    this.LocationMeasureField = new XTypedList<LocationMeasure>(this, LinqToXsdTypeManager.Instance, LocationMeasureXName);
                }
                return this.LocationMeasureField;
            }
            set {
                if ((value == null)) {
                    this.LocationMeasureField = null;
                }
                else {
                    if ((this.LocationMeasureField == null)) {
                        this.LocationMeasureField = XTypedList<LocationMeasure>.Initialize(this, LinqToXsdTypeManager.Instance, value, LocationMeasureXName);
                    }
                    else {
                        XTypedServices.SetList<LocationMeasure>(this.LocationMeasureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: FeatureLocation, BoundaryChain, Circle, Rectangle, BoundaryPointSet
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual FeatureLocation FeatureLocation {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("FeatureLocation", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("BoundaryChain", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Circle", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("Rectangle", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("BoundaryPointSet", "http://www.psidev.info/gelml/1_1candidate"));
                return ((FeatureLocation)(x));
            }
            set {
                this.SetElement(FeatureLocationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This is for mapping a Location from one set to another, for example for
        ///        mapping a gel coordinate to an image coordinate for a robotic spot picker.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual mappedLocationLocalType mappedLocation {
            get {
                XElement x = this.GetElement(mappedLocationXName);
                return ((mappedLocationLocalType)(x));
            }
            set {
                this.SetElement(mappedLocationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionGelLocationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LocationMeasureXName, typeof(LocationMeasure));
            localElementDictionary.Add(FeatureLocationXName, typeof(FeatureLocation));
            localElementDictionary.Add(mappedLocationXName, typeof(mappedLocationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class mappedLocationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelLocation_refXName = System.Xml.Linq.XName.Get("GelLocation_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mappedLocation", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator mappedLocationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<mappedLocationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public mappedLocationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GelLocation_ref {
                get {
                    XAttribute x = this.Attribute(GelLocation_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GelLocation_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<mappedLocationLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A measured value, property or annotation about a GelLocation, such as
    ///    predicted MW or pI. 
    /// </para>
    /// <para>
    /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
    /// </para>
    /// </summary>
    public partial class GelMLExcisionLocationMeasureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName evidenceXName = System.Xml.Linq.XName.Get("evidence", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.LocationMeasureType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionLocationMeasureType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionLocationMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionLocationMeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(evidenceXName), new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A measured value, property or annotation about a GelLocation, such as
        ///    predicted MW or pI. 
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public GelMLExcisionLocationMeasureType() {
        }
        
        /// <summary>
        /// <para>
        ///  The evidence for this measure, such as molecular weight markers, mass
        ///      spectrometry etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual ParamType evidence {
            get {
                XElement x = this.GetElement(evidenceXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(evidenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
            get {
                XElement x = this.GetElement(AtomicValueXName);
                return ((FuGECommonMeasurementAtomicValueType)(x));
            }
            set {
                this.SetElement(AtomicValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
            get {
                XElement x = this.GetElement(BooleanValueXName);
                return ((FuGECommonMeasurementBooleanValueType)(x));
            }
            set {
                this.SetElement(BooleanValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementComplexValueType ComplexValue {
            get {
                XElement x = this.GetElement(ComplexValueXName);
                return ((FuGECommonMeasurementComplexValueType)(x));
            }
            set {
                this.SetElement(ComplexValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                XElement x = this.GetElement(RangeXName);
                return ((FuGECommonMeasurementRangeType)(x));
            }
            set {
                this.SetElement(RangeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionLocationMeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(evidenceXName, typeof(ParamType));
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  LocationSet represents a set of locations on a gel image.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (GelLocation*, locationEvidence?, setType?)
    /// </para>
    /// </summary>
    public partial class GelMLExcisionLocationSetType : global::psidev.info.gelml.FuGEBioDataInternalDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelLocationXName = System.Xml.Linq.XName.Get("GelLocation", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GelLocation> GelLocationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationEvidenceXName = System.Xml.Linq.XName.Get("locationEvidence", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setTypeXName = System.Xml.Linq.XName.Get("setType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelLane_refXName = System.Xml.Linq.XName.Get("GelLane_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image_refXName = System.Xml.Linq.XName.Get("Image_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.LocationSetType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionLocationSetType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionLocationSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionLocationSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelLocationXName), new NamedContentModelEntity(locationEvidenceXName), new NamedContentModelEntity(setTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  LocationSet represents a set of locations on a gel image.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public GelMLExcisionLocationSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual IList<GelLocation> GelLocation {
            get {
                if ((this.GelLocationField == null)) {
                    this.GelLocationField = new XTypedList<GelLocation>(this, LinqToXsdTypeManager.Instance, GelLocationXName);
                }
                return this.GelLocationField;
            }
            set {
                if ((value == null)) {
                    this.GelLocationField = null;
                }
                else {
                    if ((this.GelLocationField == null)) {
                        this.GelLocationField = XTypedList<GelLocation>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelLocationXName);
                    }
                    else {
                        XTypedServices.SetList<GelLocation>(this.GelLocationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The evidence or source file for this location set. The referenced file
        ///        should be in the GelInfoML format when it is finalised. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual locationEvidenceLocalType locationEvidence {
            get {
                XElement x = this.GetElement(locationEvidenceXName);
                return ((locationEvidenceLocalType)(x));
            }
            set {
                this.SetElement(locationEvidenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of LocationSet e.g. ImageSet, GelSet. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual setTypeLocalType setType {
            get {
                XElement x = this.GetElement(setTypeXName);
                return ((setTypeLocalType)(x));
            }
            set {
                this.SetElement(setTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the lane of a gel from which locations are being excised. A gel lane
        ///        should only be supplied if appropriate, e.g. if this is a Gel1D. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GelLane_ref {
            get {
                XAttribute x = this.Attribute(GelLane_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GelLane_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The image of a gel that these locations refer to. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image_ref {
            get {
                XAttribute x = this.Attribute(Image_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionLocationSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GelLocationXName, typeof(GelLocation));
            localElementDictionary.Add(locationEvidenceXName, typeof(locationEvidenceLocalType));
            localElementDictionary.Add(setTypeXName, typeof(setTypeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class locationEvidenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExternalData_refXName = System.Xml.Linq.XName.Get("ExternalData_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("locationEvidence", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator locationEvidenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<locationEvidenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public locationEvidenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string ExternalData_ref {
                get {
                    XAttribute x = this.Attribute(ExternalData_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(ExternalData_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<locationEvidenceLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class setTypeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("setType", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator setTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<setTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static setTypeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public setTypeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<setTypeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Rectangle is for defining a rectangular location on an image. The X/Y
    ///    coordinates correspond with the upper left corner of the rectangle. 
    /// </para>
    /// </summary>
    public partial class GelMLExcisionRectangleType : global::psidev.info.gelml.GelMLExcisionFeatureLocationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xCoordinateXName = System.Xml.Linq.XName.Get("xCoordinate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yCoordinateXName = System.Xml.Linq.XName.Get("yCoordinate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pixelXSizeXName = System.Xml.Linq.XName.Get("pixelXSize", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pixelYSizeXName = System.Xml.Linq.XName.Get("pixelYSize", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.RectangleType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLExcisionRectangleType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionRectangleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Rectangle is for defining a rectangular location on an image. The X/Y
        ///    coordinates correspond with the upper left corner of the rectangle. 
        /// </para>
        /// </summary>
        public GelMLExcisionRectangleType() {
        }
        
        /// <summary>
        /// <para>
        ///  The X-Coordinate of the upper left corner of the rectangle.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int xCoordinate {
            get {
                XAttribute x = this.Attribute(xCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(xCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Y-Coordinate of the upper left corner of the rectangle.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int yCoordinate {
            get {
                XAttribute x = this.Attribute(yCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(yCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The size of the rectangle along the X axis. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelXSize {
            get {
                XAttribute x = this.Attribute(pixelXSizeXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(pixelXSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The size of the rectangle along the Y axis. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelYSize {
            get {
                XAttribute x = this.Attribute(pixelYSizeXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(pixelYSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionRectangleType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A set of boundary points defining a location on a gel. The BoundaryPoints are
    ///    inclusive i.e. each point defines the boundary and part of the location. 
    /// </para>
    /// <para>
    /// Regular expression: (Point+)
    /// </para>
    /// </summary>
    public partial class GelMLExcisionBoundaryPointSetType : global::psidev.info.gelml.GelMLExcisionFeatureLocationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PointXName = System.Xml.Linq.XName.Get("Point", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Point> PointField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.BoundaryPointSetType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLExcisionBoundaryPointSetType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionBoundaryPointSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLExcisionBoundaryPointSetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PointXName));
        }
        
        /// <summary>
        /// <para>
        ///  A set of boundary points defining a location on a gel. The BoundaryPoints are
        ///    inclusive i.e. each point defines the boundary and part of the location. 
        /// </para>
        /// <para>
        /// Regular expression: (Point+)
        /// </para>
        /// </summary>
        public GelMLExcisionBoundaryPointSetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Point+)
        /// </para>
        /// </summary>
        public virtual IList<Point> Point {
            get {
                if ((this.PointField == null)) {
                    this.PointField = new XTypedList<Point>(this, LinqToXsdTypeManager.Instance, PointXName);
                }
                return this.PointField;
            }
            set {
                if ((value == null)) {
                    this.PointField = null;
                }
                else {
                    if ((this.PointField == null)) {
                        this.PointField = XTypedList<Point>.Initialize(this, LinqToXsdTypeManager.Instance, value, PointXName);
                    }
                    else {
                        XTypedServices.SetList<Point>(this.PointField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionBoundaryPointSetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PointXName, typeof(Point));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single boundary point used in a BoundaryPointSet. 
    /// </para>
    /// </summary>
    public partial class GelMLExcisionPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xCoordinateXName = System.Xml.Linq.XName.Get("xCoordinate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yCoordinateXName = System.Xml.Linq.XName.Get("yCoordinate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Excision.PointType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLExcisionPointType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLExcisionPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single boundary point used in a BoundaryPointSet. 
        /// </para>
        /// </summary>
        public GelMLExcisionPointType() {
        }
        
        /// <summary>
        /// <para>
        ///  x-coordinate of the boundary point. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int xCoordinate {
            get {
                XAttribute x = this.Attribute(xCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(xCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  y-coordinate of the boundary point. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int yCoordinate {
            get {
                XAttribute x = this.Attribute(yCoordinateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(yCoordinateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLExcisionPointType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass for describing gels following electrophoresis.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
    /// </para>
    /// </summary>
    public abstract partial class GelMLGelElectrophoresedGelType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gelLaneReferenceXName = System.Xml.Linq.XName.Get("gelLaneReference", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<gelLaneReferenceLocalType> gelLaneReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeparationRangeXName = System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<SeparationRange> SeparationRangeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.ElectrophoresedGelType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelElectrophoresedGelType(XElement xe) {  return (GelMLGelElectrophoresedGelType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelElectrophoresedGelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(gelLaneReferenceXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass for describing gels following electrophoresis.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public GelMLGelElectrophoresedGelType() {
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GelLanes defined as part of the Gel substrate that
        ///        this ElectrophoresedGel came from. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLGelElectrophoresedGelType.gelLaneReferenceLocalType> gelLaneReference {
            get {
                if ((this.gelLaneReferenceField == null)) {
                    this.gelLaneReferenceField = new XTypedList<gelLaneReferenceLocalType>(this, LinqToXsdTypeManager.Instance, gelLaneReferenceXName);
                }
                return this.gelLaneReferenceField;
            }
            set {
                if ((value == null)) {
                    this.gelLaneReferenceField = null;
                }
                else {
                    if ((this.gelLaneReferenceField == null)) {
                        this.gelLaneReferenceField = XTypedList<gelLaneReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, gelLaneReferenceXName);
                    }
                    else {
                        XTypedServices.SetList<gelLaneReferenceLocalType>(this.gelLaneReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: SeparationRange, PHRange, MolWeightRange, OtherGelRange
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public virtual IList<SeparationRange> SeparationRange {
            get {
                if ((this.SeparationRangeField == null)) {
                    this.SeparationRangeField = new XTypedSubstitutedList<SeparationRange>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate"));
                }
                return this.SeparationRangeField;
            }
            set {
                if ((value == null)) {
                    this.SeparationRangeField = null;
                }
                else {
                    if ((this.SeparationRangeField == null)) {
                        this.SeparationRangeField = XTypedSubstitutedList<SeparationRange>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    else {
                        XTypedServices.SetList<SeparationRange>(this.SeparationRangeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(gelLaneReferenceXName, typeof(gelLaneReferenceLocalType));
            localElementDictionary.Add(SeparationRangeXName, typeof(SeparationRange));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class gelLaneReferenceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelLane_refXName = System.Xml.Linq.XName.Get("GelLane_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("gelLaneReference", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator gelLaneReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<gelLaneReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public gelLaneReferenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GelLane_ref {
                get {
                    XAttribute x = this.Attribute(GelLane_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GelLane_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<gelLaneReferenceLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The gel matrix used in any dimension of an electrophoresis assay.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
    /// </para>
    /// </summary>
    public partial class GelMLGelGelType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gelTypeXName = System.Xml.Linq.XName.Get("gelType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelLaneXName = System.Xml.Linq.XName.Get("GelLane", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GelLane> GelLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName componentGelsXName = System.Xml.Linq.XName.Get("componentGels", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName percentAcrylamideXName = System.Xml.Linq.XName.Get("percentAcrylamide", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcrylamideToCrossLinkerXName = System.Xml.Linq.XName.Get("AcrylamideToCrossLinker", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherGelConstituentsXName = System.Xml.Linq.XName.Get("otherGelConstituents", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherGelConstituentsLocalType> otherGelConstituentsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DimensionsXName = System.Xml.Linq.XName.Get("Dimensions", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separationDimensionXName = System.Xml.Linq.XName.Get("separationDimension", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName batchNumberXName = System.Xml.Linq.XName.Get("batchNumber", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.GelType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelGelType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelGelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelGelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(gelTypeXName), new NamedContentModelEntity(GelLaneXName), new NamedContentModelEntity(componentGelsXName), new NamedContentModelEntity(percentAcrylamideXName), new NamedContentModelEntity(AcrylamideToCrossLinkerXName), new NamedContentModelEntity(otherGelConstituentsXName), new NamedContentModelEntity(modelXName), new NamedContentModelEntity(DimensionsXName));
        }
        
        /// <summary>
        /// <para>
        ///  The gel matrix used in any dimension of an electrophoresis assay.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public GelMLGelGelType() {
        }
        
        /// <summary>
        /// <para>
        /// The type of Gel using a term from a controlled vocabulary
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual ParamType gelType {
            get {
                XElement x = this.GetElement(gelTypeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(gelTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual IList<GelLane> GelLane {
            get {
                if ((this.GelLaneField == null)) {
                    this.GelLaneField = new XTypedList<GelLane>(this, LinqToXsdTypeManager.Instance, GelLaneXName);
                }
                return this.GelLaneField;
            }
            set {
                if ((value == null)) {
                    this.GelLaneField = null;
                }
                else {
                    if ((this.GelLaneField == null)) {
                        this.GelLaneField = XTypedList<GelLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelLaneXName);
                    }
                    else {
                        XTypedServices.SetList<GelLane>(this.GelLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The association can specify component gels, for example to represent a
        ///        stacking gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual componentGelsLocalType componentGels {
            get {
                XElement x = this.GetElement(componentGelsXName);
                return ((componentGelsLocalType)(x));
            }
            set {
                this.SetElement(componentGelsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The percentage acrylamide in the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual percentAcrylamideLocalType percentAcrylamide {
            get {
                XElement x = this.GetElement(percentAcrylamideXName);
                return ((percentAcrylamideLocalType)(x));
            }
            set {
                this.SetElement(percentAcrylamideXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual AcrylamideToCrossLinker AcrylamideToCrossLinker {
            get {
                XElement x = this.GetElement(AcrylamideToCrossLinkerXName);
                return ((AcrylamideToCrossLinker)(x));
            }
            set {
                this.SetElement(AcrylamideToCrossLinkerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  Other constituents of the gel (not specified elsewhere) with
        ///        measurements, such as the concentration of SDS. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLGelGelType.otherGelConstituentsLocalType> otherGelConstituents {
            get {
                if ((this.otherGelConstituentsField == null)) {
                    this.otherGelConstituentsField = new XTypedList<otherGelConstituentsLocalType>(this, LinqToXsdTypeManager.Instance, otherGelConstituentsXName);
                }
                return this.otherGelConstituentsField;
            }
            set {
                if ((value == null)) {
                    this.otherGelConstituentsField = null;
                }
                else {
                    if ((this.otherGelConstituentsField == null)) {
                        this.otherGelConstituentsField = XTypedList<otherGelConstituentsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherGelConstituentsXName);
                    }
                    else {
                        XTypedServices.SetList<otherGelConstituentsLocalType>(this.otherGelConstituentsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The model number of the gel. If no suitable CV of model numbers exist,
        ///        the model number is encoded as the term and as the termAccession. The OntologySource is the
        ///        URI of the company producing the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual ParamType model {
            get {
                XElement x = this.GetElement(modelXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(modelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual Dimensions Dimensions {
            get {
                XElement x = this.GetElement(DimensionsXName);
                return ((Dimensions)(x));
            }
            set {
                this.SetElement(DimensionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension this gel separates in e.g. for 2D electrophoresis, one Gel
        ///       separationDimension = 1, other Gel separationDimension = 2. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? separationDimension {
            get {
                XAttribute x = this.Attribute(separationDimensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(separationDimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The manufacturer's batch number for the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string batchNumber {
            get {
                XAttribute x = this.Attribute(batchNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(batchNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelGelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(gelTypeXName, typeof(ParamType));
            localElementDictionary.Add(GelLaneXName, typeof(GelLane));
            localElementDictionary.Add(componentGelsXName, typeof(componentGelsLocalType));
            localElementDictionary.Add(percentAcrylamideXName, typeof(percentAcrylamideLocalType));
            localElementDictionary.Add(AcrylamideToCrossLinkerXName, typeof(AcrylamideToCrossLinker));
            localElementDictionary.Add(otherGelConstituentsXName, typeof(otherGelConstituentsLocalType));
            localElementDictionary.Add(modelXName, typeof(ParamType));
            localElementDictionary.Add(DimensionsXName, typeof(Dimensions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel+)
        /// </para>
        /// </summary>
        public partial class componentGelsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelXName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Gel> GelField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("componentGels", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator componentGelsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<componentGelsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static componentGelsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel+)
            /// </para>
            /// </summary>
            public componentGelsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Gel+)
            /// </para>
            /// </summary>
            public virtual IList<Gel> Gel {
                get {
                    if ((this.GelField == null)) {
                        this.GelField = new XTypedList<Gel>(this, LinqToXsdTypeManager.Instance, GelXName);
                    }
                    return this.GelField;
                }
                set {
                    if ((value == null)) {
                        this.GelField = null;
                    }
                    else {
                        if ((this.GelField == null)) {
                            this.GelField = XTypedList<Gel>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelXName);
                        }
                        else {
                            XTypedServices.SetList<Gel>(this.GelField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<componentGelsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GelXName, typeof(Gel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public partial class percentAcrylamideLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("percentAcrylamide", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator percentAcrylamideLocalType(XElement xe) { return XTypedServices.ToXTypedElement<percentAcrylamideLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static percentAcrylamideLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public percentAcrylamideLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
                get {
                    XElement x = this.GetElement(AtomicValueXName);
                    return ((FuGECommonMeasurementAtomicValueType)(x));
                }
                set {
                    this.SetElement(AtomicValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
                get {
                    XElement x = this.GetElement(BooleanValueXName);
                    return ((FuGECommonMeasurementBooleanValueType)(x));
                }
                set {
                    this.SetElement(BooleanValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementComplexValueType ComplexValue {
                get {
                    XElement x = this.GetElement(ComplexValueXName);
                    return ((FuGECommonMeasurementComplexValueType)(x));
                }
                set {
                    this.SetElement(ComplexValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementRangeType Range {
                get {
                    XElement x = this.GetElement(RangeXName);
                    return ((FuGECommonMeasurementRangeType)(x));
                }
                set {
                    this.SetElement(RangeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<percentAcrylamideLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
                localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
                localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
                localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        public partial class otherGelConstituentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericMaterial_refXName = System.Xml.Linq.XName.Get("GenericMaterial_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("otherGelConstituents", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator otherGelConstituentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<otherGelConstituentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public otherGelConstituentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericMaterial_ref {
                get {
                    XAttribute x = this.Attribute(GenericMaterial_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericMaterial_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<otherGelConstituentsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A lane on a gel. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class GelMLGelGelLaneType : global::psidev.info.gelml.FuGEBioMaterialMaterialType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName laneNumberXName = System.Xml.Linq.XName.Get("laneNumber", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.GelLaneType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelGelLaneType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelGelLaneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelGelLaneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A lane on a gel. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public GelMLGelGelLaneType() {
        }
        
        /// <summary>
        /// <para>
        ///  The lane number with respect to the parent gel. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int laneNumber {
            get {
                XAttribute x = this.Attribute(laneNumberXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(laneNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelGelLaneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The application of a protocol that defines how a gel was produced.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (productGel, GenericMaterialMeasurement*)
    /// </para>
    /// </summary>
    public partial class GelMLGelGelManufactureApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName productGelXName = System.Xml.Linq.XName.Get("productGel", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericMaterialMeasurementXName = System.Xml.Linq.XName.Get("GenericMaterialMeasurement", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericMaterialMeasurement> GenericMaterialMeasurementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericProtocol_refXName = System.Xml.Linq.XName.Get("GenericProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.GelManufactureApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelGelManufactureApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelGelManufactureApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelGelManufactureApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(productGelXName), new NamedContentModelEntity(GenericMaterialMeasurementXName));
        }
        
        /// <summary>
        /// <para>
        ///  The application of a protocol that defines how a gel was produced.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (productGel, GenericMaterialMeasurement*)
        /// </para>
        /// </summary>
        public GelMLGelGelManufactureApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The gel produced by the GelManufactureApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (productGel, GenericMaterialMeasurement*)
        /// </para>
        /// </summary>
        public virtual productGelLocalType productGel {
            get {
                XElement x = this.GetElement(productGelXName);
                return ((productGelLocalType)(x));
            }
            set {
                this.SetElement(productGelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (productGel, GenericMaterialMeasurement*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterialMeasurement> GenericMaterialMeasurement {
            get {
                if ((this.GenericMaterialMeasurementField == null)) {
                    this.GenericMaterialMeasurementField = new XTypedList<GenericMaterialMeasurement>(this, LinqToXsdTypeManager.Instance, GenericMaterialMeasurementXName);
                }
                return this.GenericMaterialMeasurementField;
            }
            set {
                if ((value == null)) {
                    this.GenericMaterialMeasurementField = null;
                }
                else {
                    if ((this.GenericMaterialMeasurementField == null)) {
                        this.GenericMaterialMeasurementField = XTypedList<GenericMaterialMeasurement>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericMaterialMeasurementXName);
                    }
                    else {
                        XTypedServices.SetList<GenericMaterialMeasurement>(this.GenericMaterialMeasurementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol applied in the GelManufactureApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                XAttribute x = this.Attribute(GenericProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GenericProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelGelManufactureApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(productGelXName, typeof(productGelLocalType));
            localElementDictionary.Add(GenericMaterialMeasurementXName, typeof(GenericMaterialMeasurement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class productGelLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Gel_refXName = System.Xml.Linq.XName.Get("Gel_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("productGel", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator productGelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<productGelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public productGelLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Gel_ref {
                get {
                    XAttribute x = this.Attribute(Gel_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(Gel_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<productGelLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The measurements must be in the form of the Cartesian Coordinate system
    ///    (x,y,z). According to the standard image orientation described in section 7.1.6 of the MIAPE
    ///    document x represents the distance from the anode (+) to the cathode (-). For example in an IPG
    ///    strip x = the strip length, for a standard slab gel, x = the width and z = the matrix depth. All
    ///    dimensions should be given in milimetres. 
    /// </para>
    /// <para>
    /// Regular expression: (x, y, z)
    /// </para>
    /// </summary>
    public partial class GelMLGelDimensionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xXName = System.Xml.Linq.XName.Get("x", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yXName = System.Xml.Linq.XName.Get("y", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zXName = System.Xml.Linq.XName.Get("z", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.DimensionsType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelDimensionsType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelDimensionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelDimensionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(xXName), new NamedContentModelEntity(yXName), new NamedContentModelEntity(zXName));
        }
        
        /// <summary>
        /// <para>
        ///  The measurements must be in the form of the Cartesian Coordinate system
        ///    (x,y,z). According to the standard image orientation described in section 7.1.6 of the MIAPE
        ///    document x represents the distance from the anode (+) to the cathode (-). For example in an IPG
        ///    strip x = the strip length, for a standard slab gel, x = the width and z = the matrix depth. All
        ///    dimensions should be given in milimetres. 
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public GelMLGelDimensionsType() {
        }
        
        /// <summary>
        /// <para>
        ///  The x axis represents the distance from the anode (+) to the cathode (-).
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue x {
            get {
                XElement x = this.GetElement(xXName);
                return ((FuGECommonOntologyPropertyValue)(x));
            }
            set {
                this.SetElement(xXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y axis is the matrix length.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue y {
            get {
                XElement x = this.GetElement(yXName);
                return ((FuGECommonOntologyPropertyValue)(x));
            }
            set {
                this.SetElement(yXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The z axis dimensions is the matrix depth.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue z {
            get {
                XElement x = this.GetElement(zXName);
                return ((FuGECommonOntologyPropertyValue)(x));
            }
            set {
                this.SetElement(zXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelDimensionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(xXName, typeof(FuGECommonOntologyPropertyValue));
            localElementDictionary.Add(yXName, typeof(FuGECommonOntologyPropertyValue));
            localElementDictionary.Add(zXName, typeof(FuGECommonOntologyPropertyValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The separation range of the gel. This can use the RangeValue or ComplexValue
    ///    specification. 
    /// </para>
    /// <para>
    /// Regular expression: (Range?, rangeType?)
    /// </para>
    /// </summary>
    public abstract partial class GelMLGelSeparationRangeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rangeTypeXName = System.Xml.Linq.XName.Get("rangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionXName = System.Xml.Linq.XName.Get("dimension", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.SeparationRangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelSeparationRangeType(XElement xe) {  return (GelMLGelSeparationRangeType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelSeparationRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RangeXName), new NamedContentModelEntity(rangeTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  The separation range of the gel. This can use the RangeValue or ComplexValue
        ///    specification. 
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public GelMLGelSeparationRangeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                XElement x = this.GetElement(RangeXName);
                return ((FuGECommonMeasurementRangeType)(x));
            }
            set {
                this.SetElement(RangeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of separation range, e.g. logarithmic, linear etc.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public virtual rangeTypeLocalType rangeType {
            get {
                XElement x = this.GetElement(rangeTypeXName);
                return ((rangeTypeLocalType)(x));
            }
            set {
                this.SetElement(rangeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension separation that the range refers to. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int dimension {
            get {
                XAttribute x = this.Attribute(dimensionXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(dimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            localElementDictionary.Add(rangeTypeXName, typeof(rangeTypeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class rangeTypeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rangeType", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator rangeTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<rangeTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static rangeTypeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public rangeTypeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<rangeTypeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The estimated or known pH range of a gel that separates substances based on
    ///    their isoelectric point. 
    /// </para>
    /// <para>
    /// Regular expression: (Range?, rangeType?)
    /// </para>
    /// </summary>
    public partial class GelMLGelPHRangeType : global::psidev.info.gelml.GelMLGelSeparationRangeType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.PHRangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelPHRangeType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelPHRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelPHRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RangeXName), new NamedContentModelEntity(rangeTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  The estimated or known pH range of a gel that separates substances based on
        ///    their isoelectric point. 
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public GelMLGelPHRangeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelPHRangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            localElementDictionary.Add(rangeTypeXName, typeof(void));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The estimated or known range of a gel that separates substances by their
    ///    molecular weight. 
    /// </para>
    /// <para>
    /// Regular expression: (Range?, rangeType?)
    /// </para>
    /// </summary>
    public partial class GelMLGelMolWeightRangeType : global::psidev.info.gelml.GelMLGelSeparationRangeType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.MolWeightRangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelMolWeightRangeType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelMolWeightRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelMolWeightRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RangeXName), new NamedContentModelEntity(rangeTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  The estimated or known range of a gel that separates substances by their
        ///    molecular weight. 
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public GelMLGelMolWeightRangeType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelMolWeightRangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            localElementDictionary.Add(rangeTypeXName, typeof(void));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A gel range other than molecular weight or pH by which proteins are
    ///    separated. 
    /// </para>
    /// <para>
    /// Regular expression: (Range?, rangeType?, separationType)
    /// </para>
    /// </summary>
    public partial class GelMLGelOtherGelRangeType : global::psidev.info.gelml.GelMLGelSeparationRangeType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separationTypeXName = System.Xml.Linq.XName.Get("separationType", "http://www.psidev.info/gelml/1_1candidate");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.OtherGelRangeType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelOtherGelRangeType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelOtherGelRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelOtherGelRangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RangeXName), new NamedContentModelEntity(rangeTypeXName), new NamedContentModelEntity(separationTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  A gel range other than molecular weight or pH by which proteins are
        ///    separated. 
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?, separationType)
        /// </para>
        /// </summary>
        public GelMLGelOtherGelRangeType() {
        }
        
        /// <summary>
        /// <para>
        ///  The type of separation performed i.e. the biophysical property that is
        ///        separated on. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?, separationType)
        /// </para>
        /// </summary>
        public virtual separationTypeLocalType separationType {
            get {
                XElement x = this.GetElement(separationTypeXName);
                return ((separationTypeLocalType)(x));
            }
            set {
                this.SetElement(separationTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelOtherGelRangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            localElementDictionary.Add(rangeTypeXName, typeof(void));
            localElementDictionary.Add(separationTypeXName, typeof(separationTypeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public partial class separationTypeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("separationType", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator separationTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<separationTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static separationTypeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public separationTypeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (cvParam)
            /// </para>
            /// </summary>
            public virtual cvParam cvParam {
                get {
                    XElement x = this.GetElement(cvParamXName);
                    return ((cvParam)(x));
                }
                set {
                    this.SetElement(cvParamXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<separationTypeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(cvParamXName, typeof(cvParam));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  Describes the acrylamide:crosslinker ratio, where the crosslinker type is
    ///    given by an ontology term (e.g. bisacrylamide). The values stored in the attributes can be
    ///    represented as a simple ratio (e.g. 37.5:1) or as percentages out of 100 (97:3). If a monomer
    ///    other than acrylamide has been used, this object should not be used and the components should be
    ///    specified as additional substances. 
    /// </para>
    /// <para>
    /// Regular expression: (crossLinkerType)
    /// </para>
    /// </summary>
    public partial class GelMLGelAcrylamideToCrossLinkerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName crossLinkerTypeXName = System.Xml.Linq.XName.Get("crossLinkerType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acrylamideXName = System.Xml.Linq.XName.Get("acrylamide", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName crossLinkerXName = System.Xml.Linq.XName.Get("crossLinker", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.Gel.AcrylamideToCrossLinkerType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLGelAcrylamideToCrossLinkerType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLGelAcrylamideToCrossLinkerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLGelAcrylamideToCrossLinkerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(crossLinkerTypeXName));
        }
        
        /// <summary>
        /// <para>
        ///  Describes the acrylamide:crosslinker ratio, where the crosslinker type is
        ///    given by an ontology term (e.g. bisacrylamide). The values stored in the attributes can be
        ///    represented as a simple ratio (e.g. 37.5:1) or as percentages out of 100 (97:3). If a monomer
        ///    other than acrylamide has been used, this object should not be used and the components should be
        ///    specified as additional substances. 
        /// </para>
        /// <para>
        /// Regular expression: (crossLinkerType)
        /// </para>
        /// </summary>
        public GelMLGelAcrylamideToCrossLinkerType() {
        }
        
        /// <summary>
        /// <para>
        ///  The name of the crosslinker used in the gel. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (crossLinkerType)
        /// </para>
        /// </summary>
        public virtual ParamType crossLinkerType {
            get {
                XElement x = this.GetElement(crossLinkerTypeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(crossLinkerTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ratio of acrylamide (i.e. value =97 if ratio is 97:3)
        ///    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float acrylamide {
            get {
                XAttribute x = this.Attribute(acrylamideXName);
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(acrylamideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ratio of crosslinker (i.e. value =3 if ratio is 97:3)
        ///    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float crossLinker {
            get {
                XAttribute x = this.Attribute(crossLinkerXName);
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(crossLinkerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLGelAcrylamideToCrossLinkerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(crossLinkerTypeXName, typeof(ParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced SampleLoadingProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLSampleLoadingSampleLoadingActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName laneNumberXName = System.Xml.Linq.XName.Get("laneNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionXName = System.Xml.Linq.XName.Get("dimension", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingProtocol_refXName = System.Xml.Linq.XName.Get("SampleLoadingProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLSampleLoadingSampleLoadingActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSampleLoadingSampleLoadingActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced SampleLoadingProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public GelMLSampleLoadingSampleLoadingActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  Optional lane number attribute for specifying the intended lane that this
        ///       protocol should be applied to. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? laneNumber {
            get {
                XAttribute x = this.Attribute(laneNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(laneNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel dimension that the referenced SampleLoadingProtocol refers to.
        ///       Note, this is not required in the context of Gel1DProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                XAttribute x = this.Attribute(dimensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(dimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the SampleLoadingProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SampleLoadingProtocol_ref {
            get {
                XAttribute x = this.Attribute(SampleLoadingProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SampleLoadingProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSampleLoadingSampleLoadingActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of the SampleLoadingProtocol. SampleLoadingApplication defines
    ///    how a sample was loaded to a gel. To capture loading a first dimension gel onto a second
    ///    dimension gel, GenericMaterialMeasurement should reference the first dimension gel and
    ///    SampleLoadingApplication references the second dimension Gel (as LoadedGel).
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (InputSample)
    /// </para>
    /// </summary>
    public partial class GelMLSampleLoadingSampleLoadingApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InputSampleXName = System.Xml.Linq.XName.Get("InputSample", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingProtocol_refXName = System.Xml.Linq.XName.Get("SampleLoadingProtocol_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Gel_refXName = System.Xml.Linq.XName.Get("Gel_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GelLane_refXName = System.Xml.Linq.XName.Get("GelLane_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSampleLoadingSampleLoadingApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSampleLoadingSampleLoadingApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSampleLoadingSampleLoadingApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InputSampleXName));
        }
        
        /// <summary>
        /// <para>
        ///  An application of the SampleLoadingProtocol. SampleLoadingApplication defines
        ///    how a sample was loaded to a gel. To capture loading a first dimension gel onto a second
        ///    dimension gel, GenericMaterialMeasurement should reference the first dimension gel and
        ///    SampleLoadingApplication references the second dimension Gel (as LoadedGel).
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (InputSample)
        /// </para>
        /// </summary>
        public GelMLSampleLoadingSampleLoadingApplicationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InputSample)
        /// </para>
        /// </summary>
        public virtual InputSampleLocalType InputSample {
            get {
                XElement x = this.GetElement(InputSampleXName);
                return ((InputSampleLocalType)(x));
            }
            set {
                this.SetElement(InputSampleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The SampleLoadingProtocol that has been applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SampleLoadingProtocol_ref {
            get {
                XAttribute x = this.Attribute(SampleLoadingProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SampleLoadingProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel onto which the sample was loaded. The gel must be an instance of Gel referenced
        ///        from Gel1DApplication, Gel2DApplication or OtherGelApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel_ref {
            get {
                XAttribute x = this.Attribute(Gel_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Gel_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The lane on which the sample was loaded. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GelLane_ref {
            get {
                XAttribute x = this.Attribute(GelLane_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GelLane_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSampleLoadingSampleLoadingApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InputSampleXName, typeof(InputSampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement+)
        /// </para>
        /// </summary>
        public partial class InputSampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericMaterialMeasurementXName = System.Xml.Linq.XName.Get("GenericMaterialMeasurement", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<GenericMaterialMeasurement> GenericMaterialMeasurementField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InputSample", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator InputSampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InputSampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static InputSampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GenericMaterialMeasurementXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (GenericMaterialMeasurement+)
            /// </para>
            /// </summary>
            public InputSampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (GenericMaterialMeasurement+)
            /// </para>
            /// </summary>
            public virtual IList<GenericMaterialMeasurement> GenericMaterialMeasurement {
                get {
                    if ((this.GenericMaterialMeasurementField == null)) {
                        this.GenericMaterialMeasurementField = new XTypedList<GenericMaterialMeasurement>(this, LinqToXsdTypeManager.Instance, GenericMaterialMeasurementXName);
                    }
                    return this.GenericMaterialMeasurementField;
                }
                set {
                    if ((value == null)) {
                        this.GenericMaterialMeasurementField = null;
                    }
                    else {
                        if ((this.GenericMaterialMeasurementField == null)) {
                            this.GenericMaterialMeasurementField = XTypedList<GenericMaterialMeasurement>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericMaterialMeasurementXName);
                        }
                        else {
                            XTypedServices.SetList<GenericMaterialMeasurement>(this.GenericMaterialMeasurementField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InputSampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GenericMaterialMeasurementXName, typeof(GenericMaterialMeasurement));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Protocol defining how samples are loaded onto a Gel or GelLanes.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
    /// </para>
    /// </summary>
    public partial class GelMLSampleLoadingSampleLoadingProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolTextXName = System.Xml.Linq.XName.Get("protocolText", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName loadingBufferXName = System.Xml.Linq.XName.Get("loadingBuffer", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sampleLoadingEquipmentXName = System.Xml.Linq.XName.Get("sampleLoadingEquipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sampleLoadingEquipmentLocalType> sampleLoadingEquipmentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLSampleLoadingSampleLoadingProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLSampleLoadingSampleLoadingProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLSampleLoadingSampleLoadingProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(protocolTextXName), new NamedContentModelEntity(loadingBufferXName), new NamedContentModelEntity(GenericParameterXName), new NamedContentModelEntity(sampleLoadingEquipmentXName));
        }
        
        /// <summary>
        /// <para>
        ///  A Protocol defining how samples are loaded onto a Gel or GelLanes.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public GelMLSampleLoadingSampleLoadingProtocolType() {
        }
        
        /// <summary>
        /// <para>
        ///  The details of the SampleLoadingProtocol as free text.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                XElement x = this.GetElement(protocolTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(protocolTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The loading buffer of the sample. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual loadingBufferLocalType loadingBuffer {
            get {
                XElement x = this.GetElement(loadingBufferXName);
                return ((loadingBufferLocalType)(x));
            }
            set {
                this.SetElement(loadingBufferXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used in the SampleLoadingProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLSampleLoadingSampleLoadingProtocolType.sampleLoadingEquipmentLocalType> sampleLoadingEquipment {
            get {
                if ((this.sampleLoadingEquipmentField == null)) {
                    this.sampleLoadingEquipmentField = new XTypedList<sampleLoadingEquipmentLocalType>(this, LinqToXsdTypeManager.Instance, sampleLoadingEquipmentXName);
                }
                return this.sampleLoadingEquipmentField;
            }
            set {
                if ((value == null)) {
                    this.sampleLoadingEquipmentField = null;
                }
                else {
                    if ((this.sampleLoadingEquipmentField == null)) {
                        this.sampleLoadingEquipmentField = XTypedList<sampleLoadingEquipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, sampleLoadingEquipmentXName);
                    }
                    else {
                        XTypedServices.SetList<sampleLoadingEquipmentLocalType>(this.sampleLoadingEquipmentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLSampleLoadingSampleLoadingProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(protocolTextXName, typeof(string));
            localElementDictionary.Add(loadingBufferXName, typeof(loadingBufferLocalType));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
            localElementDictionary.Add(sampleLoadingEquipmentXName, typeof(sampleLoadingEquipmentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AddBufferAction)
        /// </para>
        /// </summary>
        public partial class loadingBufferLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AddBufferActionXName = System.Xml.Linq.XName.Get("AddBufferAction", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("loadingBuffer", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator loadingBufferLocalType(XElement xe) { return XTypedServices.ToXTypedElement<loadingBufferLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static loadingBufferLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AddBufferActionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AddBufferAction)
            /// </para>
            /// </summary>
            public loadingBufferLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (AddBufferAction)
            /// </para>
            /// </summary>
            public virtual AddBufferAction AddBufferAction {
                get {
                    XElement x = this.GetElement(AddBufferActionXName);
                    return ((AddBufferAction)(x));
                }
                set {
                    this.SetElement(AddBufferActionXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<loadingBufferLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AddBufferActionXName, typeof(AddBufferAction));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        public partial class sampleLoadingEquipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sampleLoadingEquipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator sampleLoadingEquipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sampleLoadingEquipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public sampleLoadingEquipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<sampleLoadingEquipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Action represent a reference to a Protocol for the stages that occur
    ///    between electrophoresis over particular dimensions and an ordering of the reference with respect
    ///    to other Actions performed within the parent Protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLOtherGelProtocolInterDimensionActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preDimensionXName = System.Xml.Linq.XName.Get("preDimension", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericProtocol_refXName = System.Xml.Linq.XName.Get("GenericProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.InterDimensionActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLOtherGelProtocolInterDimensionActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLOtherGelProtocolInterDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The Action represent a reference to a Protocol for the stages that occur
        ///    between electrophoresis over particular dimensions and an ordering of the reference with respect
        ///    to other Actions performed within the parent Protocol. 
        /// </para>
        /// </summary>
        public GelMLOtherGelProtocolInterDimensionActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The dimension that this procedure precedes. This attribute is not required
        ///       for within a Gel2DProtocol as it is assumed that this specifies a Protocol prior to dimension
        ///       2. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? preDimension {
            get {
                XAttribute x = this.Attribute(preDimensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(preDimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol performed between the dimensions specified. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                XAttribute x = this.Attribute(GenericProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GenericProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLOtherGelProtocolInterDimensionActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Gel output from an OtherGelApplication representing the combination of
    ///    gel substrates and proteins separated. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
    /// </para>
    /// </summary>
    public partial class GelMLOtherGelProtocolOtherGelType : global::psidev.info.gelml.GelMLGelElectrophoresedGelType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLOtherGelProtocolOtherGelType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLOtherGelProtocolOtherGelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLOtherGelProtocolOtherGelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(gelLaneReferenceXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate")));
        }
        
        /// <summary>
        /// <para>
        ///  The Gel output from an OtherGelApplication representing the combination of
        ///    gel substrates and proteins separated. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public GelMLOtherGelProtocolOtherGelType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLOtherGelProtocolOtherGelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRole));
            localElementDictionary.Add(cvParamXName, typeof(FuGECommonOntologycvParamType));
            localElementDictionary.Add(userParamXName, typeof(FuGECommonOntologyuserParamType));
            localElementDictionary.Add(gelLaneReferenceXName, typeof(void));
            localElementDictionary.Add(SeparationRangeXName, typeof(SeparationRange));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  OtherGelApplication is the application of an OtherGelProtocol. An instance of
    ///    OtherApplication should reference (via ActionApplication) SampleLoadingApplication,
    ///    ElectrophoresisApplication, DetectionApplication and GenericProtocolApplication as its
    ///    sub-steps, as defined by the referenced OtherGelProtocol. 
    /// </para>
    /// <para>
    /// Regular expression: (inputGels, output, ChildProtocolApplications)
    /// </para>
    /// </summary>
    public partial class GelMLOtherGelProtocolOtherGelApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inputGelsXName = System.Xml.Linq.XName.Get("inputGels", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outputXName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChildProtocolApplicationsXName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OtherGelProtocol_refXName = System.Xml.Linq.XName.Get("OtherGelProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLOtherGelProtocolOtherGelApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLOtherGelProtocolOtherGelApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLOtherGelProtocolOtherGelApplicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inputGelsXName), new NamedContentModelEntity(outputXName), new NamedContentModelEntity(ChildProtocolApplicationsXName));
        }
        
        /// <summary>
        /// <para>
        ///  OtherGelApplication is the application of an OtherGelProtocol. An instance of
        ///    OtherApplication should reference (via ActionApplication) SampleLoadingApplication,
        ///    ElectrophoresisApplication, DetectionApplication and GenericProtocolApplication as its
        ///    sub-steps, as defined by the referenced OtherGelProtocol. 
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public GelMLOtherGelProtocolOtherGelApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The gels on which separations are performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual inputGelsLocalType inputGels {
            get {
                XElement x = this.GetElement(inputGelsXName);
                return ((inputGelsLocalType)(x));
            }
            set {
                this.SetElement(inputGelsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual outputLocalType output {
            get {
                XElement x = this.GetElement(outputXName);
                return ((outputLocalType)(x));
            }
            set {
                this.SetElement(outputXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                XElement x = this.GetElement(ChildProtocolApplicationsXName);
                return ((ChildProtocolApplicationsLocalType)(x));
            }
            set {
                this.SetElement(ChildProtocolApplicationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The OtherGelProtocol that is applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string OtherGelProtocol_ref {
            get {
                XAttribute x = this.Attribute(OtherGelProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OtherGelProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLOtherGelProtocolOtherGelApplicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inputGelsXName, typeof(inputGelsLocalType));
            localElementDictionary.Add(outputXName, typeof(outputLocalType));
            localElementDictionary.Add(ChildProtocolApplicationsXName, typeof(ChildProtocolApplicationsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gel+)
        /// </para>
        /// </summary>
        public partial class inputGelsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GelXName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Gel> GelField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inputGels", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator inputGelsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inputGelsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static inputGelsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gel+)
            /// </para>
            /// </summary>
            public inputGelsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Gel+)
            /// </para>
            /// </summary>
            public virtual IList<Gel> Gel {
                get {
                    if ((this.GelField == null)) {
                        this.GelField = new XTypedList<Gel>(this, LinqToXsdTypeManager.Instance, GelXName);
                    }
                    return this.GelField;
                }
                set {
                    if ((value == null)) {
                        this.GelField = null;
                    }
                    else {
                        if ((this.GelField == null)) {
                            this.GelField = XTypedList<Gel>.Initialize(this, LinqToXsdTypeManager.Instance, value, GelXName);
                        }
                        else {
                            XTypedServices.SetList<Gel>(this.GelField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inputGelsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GelXName, typeof(Gel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OtherGel+)
        /// </para>
        /// </summary>
        public partial class outputLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OtherGelXName = System.Xml.Linq.XName.Get("OtherGel", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OtherGel> OtherGelField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("output", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator outputLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static outputLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OtherGelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (OtherGel+)
            /// </para>
            /// </summary>
            public outputLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (OtherGel+)
            /// </para>
            /// </summary>
            public virtual IList<OtherGel> OtherGel {
                get {
                    if ((this.OtherGelField == null)) {
                        this.OtherGelField = new XTypedList<OtherGel>(this, LinqToXsdTypeManager.Instance, OtherGelXName);
                    }
                    return this.OtherGelField;
                }
                set {
                    if ((value == null)) {
                        this.OtherGelField = null;
                    }
                    else {
                        if ((this.OtherGelField == null)) {
                            this.OtherGelField = XTypedList<OtherGel>.Initialize(this, LinqToXsdTypeManager.Instance, value, OtherGelXName);
                        }
                        else {
                            XTypedServices.SetList<OtherGel>(this.OtherGelField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<outputLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OtherGelXName, typeof(OtherGel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
        /// </para>
        /// </summary>
        public partial class ChildProtocolApplicationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SampleLoadingApplicationXName = System.Xml.Linq.XName.Get("SampleLoadingApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SampleLoadingApplication> SampleLoadingApplicationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ElectrophoresisApplicationXName = System.Xml.Linq.XName.Get("ElectrophoresisApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DetectionApplicationXName = System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedSubstitutedList<DetectionApplication> DetectionApplicationField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ChildProtocolApplications", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ChildProtocolApplicationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ChildProtocolApplicationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ChildProtocolApplicationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingApplicationXName), new NamedContentModelEntity(ElectrophoresisApplicationXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public ChildProtocolApplicationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual IList<SampleLoadingApplication> SampleLoadingApplication {
                get {
                    if ((this.SampleLoadingApplicationField == null)) {
                        this.SampleLoadingApplicationField = new XTypedList<SampleLoadingApplication>(this, LinqToXsdTypeManager.Instance, SampleLoadingApplicationXName);
                    }
                    return this.SampleLoadingApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.SampleLoadingApplicationField = null;
                    }
                    else {
                        if ((this.SampleLoadingApplicationField == null)) {
                            this.SampleLoadingApplicationField = XTypedList<SampleLoadingApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingApplicationXName);
                        }
                        else {
                            XTypedServices.SetList<SampleLoadingApplication>(this.SampleLoadingApplicationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual ElectrophoresisApplication ElectrophoresisApplication {
                get {
                    XElement x = this.GetElement(ElectrophoresisApplicationXName);
                    return ((ElectrophoresisApplication)(x));
                }
                set {
                    this.SetElement(ElectrophoresisApplicationXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Substitution members: DetectionApplication, DirectDetection, IndirectDetection
            /// </para>
            /// <para>
            /// Regular expression: (SampleLoadingApplication+, ElectrophoresisApplication, DetectionApplication+)
            /// </para>
            /// </summary>
            public virtual IList<DetectionApplication> DetectionApplication {
                get {
                    if ((this.DetectionApplicationField == null)) {
                        this.DetectionApplicationField = new XTypedSubstitutedList<DetectionApplication>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                    }
                    return this.DetectionApplicationField;
                }
                set {
                    if ((value == null)) {
                        this.DetectionApplicationField = null;
                    }
                    else {
                        if ((this.DetectionApplicationField == null)) {
                            this.DetectionApplicationField = XTypedSubstitutedList<DetectionApplication>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"));
                        }
                        else {
                            XTypedServices.SetList<DetectionApplication>(this.DetectionApplicationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ChildProtocolApplicationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SampleLoadingApplicationXName, typeof(SampleLoadingApplication));
                localElementDictionary.Add(ElectrophoresisApplicationXName, typeof(ElectrophoresisApplication));
                localElementDictionary.Add(DetectionApplicationXName, typeof(DetectionApplication));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol for capturing experiments that cannot be represented by
    ///    Gel1DProtocol or Gel2DProtocol. 
    /// </para>
    /// <para>
    /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
    /// </para>
    /// </summary>
    public partial class GelMLOtherGelProtocolOtherGelProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleLoadingActionXName = System.Xml.Linq.XName.Get("SampleLoadingAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SampleLoadingAction> SampleLoadingActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DimensionActionXName = System.Xml.Linq.XName.Get("DimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DimensionAction> DimensionActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterDimensionActionXName = System.Xml.Linq.XName.Get("InterDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InterDimensionAction> InterDimensionActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetectionActionXName = System.Xml.Linq.XName.Get("DetectionAction", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DetectionAction> DetectionActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLOtherGelProtocolOtherGelProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLOtherGelProtocolOtherGelProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLOtherGelProtocolOtherGelProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleLoadingActionXName), new NamedContentModelEntity(DimensionActionXName), new NamedContentModelEntity(InterDimensionActionXName), new NamedContentModelEntity(DetectionActionXName));
        }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing experiments that cannot be represented by
        ///    Gel1DProtocol or Gel2DProtocol. 
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public GelMLOtherGelProtocolOtherGelProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                if ((this.SampleLoadingActionField == null)) {
                    this.SampleLoadingActionField = new XTypedList<SampleLoadingAction>(this, LinqToXsdTypeManager.Instance, SampleLoadingActionXName);
                }
                return this.SampleLoadingActionField;
            }
            set {
                if ((value == null)) {
                    this.SampleLoadingActionField = null;
                }
                else {
                    if ((this.SampleLoadingActionField == null)) {
                        this.SampleLoadingActionField = XTypedList<SampleLoadingAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleLoadingActionXName);
                    }
                    else {
                        XTypedServices.SetList<SampleLoadingAction>(this.SampleLoadingActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DimensionAction> DimensionAction {
            get {
                if ((this.DimensionActionField == null)) {
                    this.DimensionActionField = new XTypedList<DimensionAction>(this, LinqToXsdTypeManager.Instance, DimensionActionXName);
                }
                return this.DimensionActionField;
            }
            set {
                if ((value == null)) {
                    this.DimensionActionField = null;
                }
                else {
                    if ((this.DimensionActionField == null)) {
                        this.DimensionActionField = XTypedList<DimensionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, DimensionActionXName);
                    }
                    else {
                        XTypedServices.SetList<DimensionAction>(this.DimensionActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<InterDimensionAction> InterDimensionAction {
            get {
                if ((this.InterDimensionActionField == null)) {
                    this.InterDimensionActionField = new XTypedList<InterDimensionAction>(this, LinqToXsdTypeManager.Instance, InterDimensionActionXName);
                }
                return this.InterDimensionActionField;
            }
            set {
                if ((value == null)) {
                    this.InterDimensionActionField = null;
                }
                else {
                    if ((this.InterDimensionActionField == null)) {
                        this.InterDimensionActionField = XTypedList<InterDimensionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, InterDimensionActionXName);
                    }
                    else {
                        XTypedServices.SetList<InterDimensionAction>(this.InterDimensionActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                if ((this.DetectionActionField == null)) {
                    this.DetectionActionField = new XTypedList<DetectionAction>(this, LinqToXsdTypeManager.Instance, DetectionActionXName);
                }
                return this.DetectionActionField;
            }
            set {
                if ((value == null)) {
                    this.DetectionActionField = null;
                }
                else {
                    if ((this.DetectionActionField == null)) {
                        this.DetectionActionField = XTypedList<DetectionAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, DetectionActionXName);
                    }
                    else {
                        XTypedServices.SetList<DetectionAction>(this.DetectionActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLOtherGelProtocolOtherGelProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SampleLoadingActionXName, typeof(SampleLoadingAction));
            localElementDictionary.Add(DimensionActionXName, typeof(DimensionAction));
            localElementDictionary.Add(InterDimensionActionXName, typeof(InterDimensionAction));
            localElementDictionary.Add(DetectionActionXName, typeof(DetectionAction));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class GelMLOtherGelProtocolDimensionActionType : global::psidev.info.gelml.FuGECommonProtocolActionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionXName = System.Xml.Linq.XName.Get("dimension", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectrophoresisProtocol_refXName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.DimensionActionType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLOtherGelProtocolDimensionActionType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLOtherGelProtocolDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public GelMLOtherGelProtocolDimensionActionType() {
        }
        
        /// <summary>
        /// <para>
        ///  The dimension that the referenced electrophoresis protocol occurs in.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                XAttribute x = this.Attribute(dimensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(dimensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in this dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                XAttribute x = this.Attribute(ElectrophoresisProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ElectrophoresisProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLOtherGelProtocolDimensionActionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to an image file stored in an external location.
    ///   
    /// </para>
    /// <para>
    /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
    /// </para>
    /// </summary>
    public partial class GelMLImageAcquisitionImageType : global::psidev.info.gelml.FuGEBioDataExternalDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName channelXName = System.Xml.Linq.XName.Get("channel", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resolutionXName = System.Xml.Linq.XName.Get("resolution", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bitDepthXName = System.Xml.Linq.XName.Get("bitDepth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionXXName = System.Xml.Linq.XName.Get("dimensionX", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionYXName = System.Xml.Linq.XName.Get("dimensionY", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLImageAcquisitionImageType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLImageAcquisitionImageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLImageAcquisitionImageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(externalFormatDocumentationXName), new NamedContentModelEntity(fileFormatXName), new NamedContentModelEntity(channelXName), new NamedContentModelEntity(resolutionXName));
        }
        
        /// <summary>
        /// <para>
        ///  A reference to an image file stored in an external location.
        ///   
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
        /// </para>
        /// </summary>
        public GelMLImageAcquisitionImageType() {
        }
        
        /// <summary>
        /// <para>
        ///  The channel or wavelength at which the image was scanned.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
        /// </para>
        /// </summary>
        public virtual channelLocalType channel {
            get {
                XElement x = this.GetElement(channelXName);
                return ((channelLocalType)(x));
            }
            set {
                this.SetElement(channelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The value of the resolution of the Image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
        /// </para>
        /// </summary>
        public virtual resolutionLocalType resolution {
            get {
                XElement x = this.GetElement(resolutionXName);
                return ((resolutionLocalType)(x));
            }
            set {
                this.SetElement(resolutionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The image bit-depth e.g. 8 bit, 16 bit. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? bitDepth {
            get {
                XAttribute x = this.Attribute(bitDepthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(bitDepthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The x-axis dimension of the image in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimensionX {
            get {
                XAttribute x = this.Attribute(dimensionXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(dimensionXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y-axis dimension of the image in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimensionY {
            get {
                XAttribute x = this.Attribute(dimensionYXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(dimensionYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLImageAcquisitionImageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(externalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(fileFormatXName, typeof(void));
            localElementDictionary.Add(channelXName, typeof(channelLocalType));
            localElementDictionary.Add(resolutionXName, typeof(resolutionLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public partial class channelLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("channel", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator channelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<channelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static channelLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public channelLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
                get {
                    XElement x = this.GetElement(AtomicValueXName);
                    return ((FuGECommonMeasurementAtomicValueType)(x));
                }
                set {
                    this.SetElement(AtomicValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
                get {
                    XElement x = this.GetElement(BooleanValueXName);
                    return ((FuGECommonMeasurementBooleanValueType)(x));
                }
                set {
                    this.SetElement(BooleanValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementComplexValueType ComplexValue {
                get {
                    XElement x = this.GetElement(ComplexValueXName);
                    return ((FuGECommonMeasurementComplexValueType)(x));
                }
                set {
                    this.SetElement(ComplexValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementRangeType Range {
                get {
                    XElement x = this.GetElement(RangeXName);
                    return ((FuGECommonMeasurementRangeType)(x));
                }
                set {
                    this.SetElement(RangeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<channelLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
                localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
                localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
                localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public partial class resolutionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AtomicValueXName = System.Xml.Linq.XName.Get("AtomicValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BooleanValueXName = System.Xml.Linq.XName.Get("BooleanValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ComplexValueXName = System.Xml.Linq.XName.Get("ComplexValue", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.psidev.info/gelml/1_1candidate");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("resolution", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator resolutionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<resolutionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static resolutionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public resolutionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
                get {
                    XElement x = this.GetElement(AtomicValueXName);
                    return ((FuGECommonMeasurementAtomicValueType)(x));
                }
                set {
                    this.SetElement(AtomicValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
                get {
                    XElement x = this.GetElement(BooleanValueXName);
                    return ((FuGECommonMeasurementBooleanValueType)(x));
                }
                set {
                    this.SetElement(BooleanValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementComplexValueType ComplexValue {
                get {
                    XElement x = this.GetElement(ComplexValueXName);
                    return ((FuGECommonMeasurementComplexValueType)(x));
                }
                set {
                    this.SetElement(ComplexValueXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range))
            /// </para>
            /// </summary>
            public virtual FuGECommonMeasurementRangeType Range {
                get {
                    XElement x = this.GetElement(RangeXName);
                    return ((FuGECommonMeasurementRangeType)(x));
                }
                set {
                    this.SetElement(RangeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<resolutionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
                localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
                localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
                localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of a protocol (GenericProtocol) describing the scanning of a
    ///    material to produce an Image. In this context it is expected that the Material would be an
    ///    ElectrophoresedGel, TransferMedium or DetectionMedium. 
    /// </para>
    /// </summary>
    public partial class GelMLImageAcquisitionImageAcquisitionApplicationType : global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image_refXName = System.Xml.Linq.XName.Get("Image_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Material_refXName = System.Xml.Linq.XName.Get("Material_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageAcquisitionProtocol_refXName = System.Xml.Linq.XName.Get("ImageAcquisitionProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageAcquisitionApplicationType", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLImageAcquisitionImageAcquisitionApplicationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLImageAcquisitionImageAcquisitionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An application of a protocol (GenericProtocol) describing the scanning of a
        ///    material to produce an Image. In this context it is expected that the Material would be an
        ///    ElectrophoresedGel, TransferMedium or DetectionMedium. 
        /// </para>
        /// </summary>
        public GelMLImageAcquisitionImageAcquisitionApplicationType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Image produced from ImageAcquisitionApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Image_ref {
            get {
                XAttribute x = this.Attribute(Image_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Input material to image acquisition.  In a 1D Gel experiment, if the gel is scanned after electrophoresis, this should
        ///        reference the Gel1D produced by Gel1DApplication. In a 2D Gel experiment, if the gel is
        ///        scanned after electrophoresis, this should reference the Gel2D produced by Gel2DApplication.
        ///        If an image is aquired of a TransferMedium or DetectionMedium, this should reference an
        ///        instance that is referenced by IndirectDetection as OutputTransferMedium or
        ///        OutputDetectionMedium. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Material_ref {
            get {
                XAttribute x = this.Attribute(Material_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Material_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol describing this image acquisition procedure, such as scanning or
        ///        photography. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ImageAcquisitionProtocol_ref {
            get {
                XAttribute x = this.Attribute(ImageAcquisitionProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageAcquisitionProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLImageAcquisitionImageAcquisitionApplicationType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing image acquisition. 
    /// </para>
    /// <para>
    /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
    /// </para>
    /// </summary>
    public partial class GelMLImageAcquisitionImageAcquisitionProtocolType : global::psidev.info.gelml.FuGECommonProtocolProtocolType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protocolTextXName = System.Xml.Linq.XName.Get("protocolText", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentXName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<equipmentLocalType> equipmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName softwareXName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<softwareLocalType> softwareField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StepsXName = System.Xml.Linq.XName.Get("Steps", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoCalibrationXName = System.Xml.Linq.XName.Get("AutoCalibration", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GenericParameterXName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GenericParameter> GenericParameterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageAcquisitionProtocolType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLImageAcquisitionImageAcquisitionProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLImageAcquisitionImageAcquisitionProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLImageAcquisitionImageAcquisitionProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(protocolTextXName), new NamedContentModelEntity(equipmentXName), new NamedContentModelEntity(softwareXName), new NamedContentModelEntity(StepsXName), new NamedContentModelEntity(AutoCalibrationXName), new NamedContentModelEntity(GenericParameterXName));
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing image acquisition. 
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public GelMLImageAcquisitionImageAcquisitionProtocolType() {
        }
        
        /// <summary>
        /// <para>
        ///  The details of the Protocol as free text.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                XElement x = this.GetElement(protocolTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(protocolTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Equipment used for image acquisition. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType.equipmentLocalType> equipment {
            get {
                if ((this.equipmentField == null)) {
                    this.equipmentField = new XTypedList<equipmentLocalType>(this, LinqToXsdTypeManager.Instance, equipmentXName);
                }
                return this.equipmentField;
            }
            set {
                if ((value == null)) {
                    this.equipmentField = null;
                }
                else {
                    if ((this.equipmentField == null)) {
                        this.equipmentField = XTypedList<equipmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, equipmentXName);
                    }
                    else {
                        XTypedServices.SetList<equipmentLocalType>(this.equipmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  The software used for image acquisition. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType.softwareLocalType> software {
            get {
                if ((this.softwareField == null)) {
                    this.softwareField = new XTypedList<softwareLocalType>(this, LinqToXsdTypeManager.Instance, softwareXName);
                }
                return this.softwareField;
            }
            set {
                if ((value == null)) {
                    this.softwareField = null;
                }
                else {
                    if ((this.softwareField == null)) {
                        this.softwareField = XTypedList<softwareLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, softwareXName);
                    }
                    else {
                        XTypedServices.SetList<softwareLocalType>(this.softwareField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        ///  Descriptions of calibration performed during image acquisition.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual StepsLocalType Steps {
            get {
                XElement x = this.GetElement(StepsXName);
                return ((StepsLocalType)(x));
            }
            set {
                this.SetElement(StepsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual AutoCalibration AutoCalibration {
            get {
                XElement x = this.GetElement(AutoCalibrationXName);
                return ((AutoCalibration)(x));
            }
            set {
                this.SetElement(AutoCalibrationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                if ((this.GenericParameterField == null)) {
                    this.GenericParameterField = new XTypedList<GenericParameter>(this, LinqToXsdTypeManager.Instance, GenericParameterXName);
                }
                return this.GenericParameterField;
            }
            set {
                if ((value == null)) {
                    this.GenericParameterField = null;
                }
                else {
                    if ((this.GenericParameterField == null)) {
                        this.GenericParameterField = XTypedList<GenericParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericParameterXName);
                    }
                    else {
                        XTypedServices.SetList<GenericParameter>(this.GenericParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLImageAcquisitionImageAcquisitionProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(protocolTextXName, typeof(string));
            localElementDictionary.Add(equipmentXName, typeof(equipmentLocalType));
            localElementDictionary.Add(softwareXName, typeof(softwareLocalType));
            localElementDictionary.Add(StepsXName, typeof(StepsLocalType));
            localElementDictionary.Add(AutoCalibrationXName, typeof(AutoCalibration));
            localElementDictionary.Add(GenericParameterXName, typeof(GenericParameter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class equipmentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericEquipment_refXName = System.Xml.Linq.XName.Get("GenericEquipment_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("equipment", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator equipmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<equipmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public equipmentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericEquipment_ref {
                get {
                    XAttribute x = this.Attribute(GenericEquipment_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericEquipment_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<equipmentLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class softwareLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericSoftware_refXName = System.Xml.Linq.XName.Get("GenericSoftware_ref", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("software", "http://www.psidev.info/gelml/1_1candidate");
            
		public static explicit operator softwareLocalType(XElement xe) { return XTypedServices.ToXTypedElement<softwareLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public softwareLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string GenericSoftware_ref {
                get {
                    XAttribute x = this.Attribute(GenericSoftware_refXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(GenericSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<softwareLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GenericAction+)
        /// </para>
        /// </summary>
        public partial class StepsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenericActionXName = System.Xml.Linq.XName.Get("GenericAction", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<GenericAction> GenericActionField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Steps", "http://www.psidev.info/gelml/1_1candidate");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator StepsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<StepsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static StepsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GenericActionXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (GenericAction+)
            /// </para>
            /// </summary>
            public StepsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (GenericAction+)
            /// </para>
            /// </summary>
            public virtual IList<GenericAction> GenericAction {
                get {
                    if ((this.GenericActionField == null)) {
                        this.GenericActionField = new XTypedList<GenericAction>(this, LinqToXsdTypeManager.Instance, GenericActionXName);
                    }
                    return this.GenericActionField;
                }
                set {
                    if ((value == null)) {
                        this.GenericActionField = null;
                    }
                    else {
                        if ((this.GenericActionField == null)) {
                            this.GenericActionField = XTypedList<GenericAction>.Initialize(this, LinqToXsdTypeManager.Instance, value, GenericActionXName);
                        }
                        else {
                            XTypedServices.SetList<GenericAction>(this.GenericActionField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<StepsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GenericActionXName, typeof(GenericAction));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  A parameter to represent whether auto-calibration was performed. This should
    ///    use BooleanValue (subclass of Measurement). 
    /// </para>
    /// <para>
    /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
    /// </para>
    /// </summary>
    public partial class GelMLImageAcquisitionAutoCalibrationType : global::psidev.info.gelml.FuGECommonProtocolParameterType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML.ImageAcquisition.AutoCalibrationType", "http://www.psidev.info/gelml/1_1candidate");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GelMLImageAcquisitionAutoCalibrationType(XElement xe) { return XTypedServices.ToXTypedElement<GelMLImageAcquisitionAutoCalibrationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GelMLImageAcquisitionAutoCalibrationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AtomicValueXName), new NamedContentModelEntity(BooleanValueXName), new NamedContentModelEntity(ComplexValueXName), new NamedContentModelEntity(RangeXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A parameter to represent whether auto-calibration was performed. This should
        ///    use BooleanValue (subclass of Measurement). 
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?)
        /// </para>
        /// </summary>
        public GelMLImageAcquisitionAutoCalibrationType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GelMLImageAcquisitionAutoCalibrationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AtomicValueXName, typeof(FuGECommonMeasurementAtomicValueType));
            localElementDictionary.Add(BooleanValueXName, typeof(FuGECommonMeasurementBooleanValueType));
            localElementDictionary.Add(ComplexValueXName, typeof(FuGECommonMeasurementComplexValueType));
            localElementDictionary.Add(RangeXName, typeof(FuGECommonMeasurementRangeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Data external to the XML instance document. The location of the data file is given in the location attribute. 
    /// </para>
    /// </summary>
    public partial class ExternalData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGEBioDataExternalDataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ExternalData(XElement xe) {  return (ExternalData)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected ExternalData(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Data external to the XML instance document. The location of the data file is given in the location attribute. 
        /// </para>
        /// </summary>
        public ExternalData() {
            SetInnerType(new FuGEBioDataExternalDataType());
        }
        
        /// <summary>
        /// <para>
        ///  Data external to the XML instance document. The location of the data file is given in the location attribute. 
        /// </para>
        /// </summary>
        public ExternalData(FuGEBioDataExternalDataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual FuGEBioDataExternalDataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A URI to access documentation and tools to interpret the external format of the ExternalData instance. For example, XML Schema or static libraries (APIs) to access binary formats. 
        ///         					 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?)
        /// </para>
        /// </summary>
        public virtual System.Uri externalFormatDocumentation {
            get {
                return this.ContentField.externalFormatDocumentation;
            }
            set {
                this.ContentField.externalFormatDocumentation = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The format of the ExternalData file, for example "tiff" for image files.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGEBioDataExternalDataType.fileFormatLocalType fileFormat {
            get {
                return this.ContentField.fileFormat;
            }
            set {
                this.ContentField.fileFormat = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The location of the data file. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri location {
            get {
                return this.ContentField.location;
            }
            set {
                this.ContentField.location = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ExternalData Load(string xmlFile) {
            return ((ExternalData)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ExternalData Load(System.IO.TextReader xmlFile) {
            return ((ExternalData)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ExternalData Parse(string xml) {
            return ((ExternalData)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new ExternalData(((FuGEBioDataExternalDataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGEBioDataExternalDataType ContentField) {
            this.ContentField = ((FuGEBioDataExternalDataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(FuGEBioDataExternalDataType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Material class, which should be used in conjunction with controlled vocabulary terms to describe Materials of any types used in an investigation. 
    /// </para>
    /// </summary>
    public partial class GenericMaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGEBioMaterialGenericMaterialType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericMaterial", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericMaterial(XElement xe) { return XTypedServices.ToXTypedElement<GenericMaterial, FuGEBioMaterialGenericMaterialType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Material class, which should be used in conjunction with controlled vocabulary terms to describe Materials of any types used in an investigation. 
        /// </para>
        /// </summary>
        public GenericMaterial() {
            SetInnerType(new FuGEBioMaterialGenericMaterialType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Material class, which should be used in conjunction with controlled vocabulary terms to describe Materials of any types used in an investigation. 
        /// </para>
        /// </summary>
        public GenericMaterial(FuGEBioMaterialGenericMaterialType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGEBioMaterialGenericMaterialType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Association from a GenericMaterial to other GenericMaterials that are sub-components (such as wells within an array plate). If a subcomponent undergoes a ProtocolApplication, then the containing GenericMaterial must also be an input to the ProtocolApplication and be output as a new GenericMaterial or version of the GenericMaterial. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, components*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGEBioMaterialGenericMaterialType.componentsLocalType> components {
            get {
                return this.ContentField.components;
            }
            set {
                this.ContentField.components = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericMaterial Load(string xmlFile) {
            return XTypedServices.Load<GenericMaterial, FuGEBioMaterialGenericMaterialType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMaterial Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericMaterial, FuGEBioMaterialGenericMaterialType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMaterial Parse(string xml) {
            return XTypedServices.Parse<GenericMaterial, FuGEBioMaterialGenericMaterialType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericMaterial(((FuGEBioMaterialGenericMaterialType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGEBioMaterialGenericMaterialType ContentField) {
            this.ContentField = ((FuGEBioMaterialGenericMaterialType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of MaterialMeasurement to be used without being extended in conjunction with GenericProtocolApplication and GenericMaterial to model measured sources of materials. 
    /// </para>
    /// </summary>
    public partial class GenericMaterialMeasurement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGEBioMaterialGenericMaterialMeasurementType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericMaterialMeasurement", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericMaterialMeasurement(XElement xe) { return XTypedServices.ToXTypedElement<GenericMaterialMeasurement, FuGEBioMaterialGenericMaterialMeasurementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of MaterialMeasurement to be used without being extended in conjunction with GenericProtocolApplication and GenericMaterial to model measured sources of materials. 
        /// </para>
        /// </summary>
        public GenericMaterialMeasurement() {
            SetInnerType(new FuGEBioMaterialGenericMaterialMeasurementType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of MaterialMeasurement to be used without being extended in conjunction with GenericProtocolApplication and GenericMaterial to model measured sources of materials. 
        /// </para>
        /// </summary>
        public GenericMaterialMeasurement(FuGEBioMaterialGenericMaterialMeasurementType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGEBioMaterialGenericMaterialMeasurementType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The instance of GenericMaterial or a subclass of Material that is input to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Material_ref {
            get {
                return this.ContentField.Material_ref;
            }
            set {
                this.ContentField.Material_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericMaterialMeasurement Load(string xmlFile) {
            return XTypedServices.Load<GenericMaterialMeasurement, FuGEBioMaterialGenericMaterialMeasurementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMaterialMeasurement Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericMaterialMeasurement, FuGEBioMaterialGenericMaterialMeasurementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericMaterialMeasurement Parse(string xml) {
            return XTypedServices.Parse<GenericMaterialMeasurement, FuGEBioMaterialGenericMaterialMeasurementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericMaterialMeasurement(((FuGEBioMaterialGenericMaterialMeasurementType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGEBioMaterialGenericMaterialMeasurementType ContentField) {
            this.ContentField = ((FuGEBioMaterialGenericMaterialMeasurementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A person for which the attributes are self describing. 
    /// </para>
    /// </summary>
    public partial class Person : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonAuditPersonType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Person", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Person(XElement xe) { return XTypedServices.ToXTypedElement<Person, FuGECommonAuditPersonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A person for which the attributes are self describing. 
        /// </para>
        /// </summary>
        public Person() {
            SetInnerType(new FuGECommonAuditPersonType());
        }
        
        /// <summary>
        /// <para>
        ///  A person for which the attributes are self describing. 
        /// </para>
        /// </summary>
        public Person(FuGECommonAuditPersonType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonAuditPersonType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The organization a person belongs to. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (affiliations*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonAuditPersonType.affiliationsLocalType> affiliations {
            get {
                return this.ContentField.affiliations;
            }
            set {
                this.ContentField.affiliations = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's last/family name. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lastName {
            get {
                return this.ContentField.lastName;
            }
            set {
                this.ContentField.lastName = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's first name. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string firstName {
            get {
                return this.ContentField.firstName;
            }
            set {
                this.ContentField.firstName = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Person's middle initial. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string midInitials {
            get {
                return this.ContentField.midInitials;
            }
            set {
                this.ContentField.midInitials = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Person Load(string xmlFile) {
            return XTypedServices.Load<Person, FuGECommonAuditPersonType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Person Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Person, FuGECommonAuditPersonType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Person Parse(string xml) {
            return XTypedServices.Parse<Person, FuGECommonAuditPersonType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Person(((FuGECommonAuditPersonType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonAuditPersonType ContentField) {
            this.ContentField = ((FuGECommonAuditPersonType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Organizations are entities like companies, universities, government agencies for which the attributes are self describing. 
    /// </para>
    /// </summary>
    public partial class Organization : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonAuditOrganizationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Organization", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Organization(XElement xe) { return XTypedServices.ToXTypedElement<Organization, FuGECommonAuditOrganizationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Organizations are entities like companies, universities, government agencies for which the attributes are self describing. 
        /// </para>
        /// </summary>
        public Organization() {
            SetInnerType(new FuGECommonAuditOrganizationType());
        }
        
        /// <summary>
        /// <para>
        ///  Organizations are entities like companies, universities, government agencies for which the attributes are self describing. 
        /// </para>
        /// </summary>
        public Organization(FuGECommonAuditOrganizationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonAuditOrganizationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The containing organization (the university or business which a lab belongs to, etc.) 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (parent?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonAuditOrganizationType.parentLocalType parent {
            get {
                return this.ContentField.parent;
            }
            set {
                this.ContentField.parent = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Organization Load(string xmlFile) {
            return XTypedServices.Load<Organization, FuGECommonAuditOrganizationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Organization Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Organization, FuGECommonAuditOrganizationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Organization Parse(string xml) {
            return XTypedServices.Parse<Organization, FuGECommonAuditOrganizationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Organization(((FuGECommonAuditOrganizationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonAuditOrganizationType ContentField) {
            this.ContentField = ((FuGECommonAuditOrganizationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The role that a Contact plays in an organization or with respect to the associating class.  A Contact may have several Roles within scope, and as such, associations to ContactRole allow the use of a Contact in a certain manner.  Examples might include a provider, or a data analyst. 
    /// </para>
    /// </summary>
    public partial class ContactRole : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonAuditContactRoleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ContactRole(XElement xe) { return XTypedServices.ToXTypedElement<ContactRole, FuGECommonAuditContactRoleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The role that a Contact plays in an organization or with respect to the associating class.  A Contact may have several Roles within scope, and as such, associations to ContactRole allow the use of a Contact in a certain manner.  Examples might include a provider, or a data analyst. 
        /// </para>
        /// </summary>
        public ContactRole() {
            SetInnerType(new FuGECommonAuditContactRoleType());
        }
        
        /// <summary>
        /// <para>
        ///  The role that a Contact plays in an organization or with respect to the associating class.  A Contact may have several Roles within scope, and as such, associations to ContactRole allow the use of a Contact in a certain manner.  Examples might include a provider, or a data analyst. 
        /// </para>
        /// </summary>
        public ContactRole(FuGECommonAuditContactRoleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonAuditContactRoleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The roles (lab equipment sales, contractor, etc.) the Contact fills. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (role)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonAuditContactRoleType.roleLocalType role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  When a ContactRole is used, it specifies which Contact the role is associated with. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Contact_ref {
            get {
                return this.ContentField.Contact_ref;
            }
            set {
                this.ContentField.Contact_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ContactRole Load(string xmlFile) {
            return XTypedServices.Load<ContactRole, FuGECommonAuditContactRoleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ContactRole Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ContactRole, FuGECommonAuditContactRoleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ContactRole Parse(string xml) {
            return XTypedServices.Parse<ContactRole, FuGECommonAuditContactRoleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ContactRole(((FuGECommonAuditContactRoleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonAuditContactRoleType ContentField) {
            this.ContentField = ((FuGECommonAuditContactRoleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Represents bibliographic references, including the most common attributes. Note that because a BibliographicReference is Identifiable, a DatabaseEntry can also be specified. 
    /// </para>
    /// </summary>
    public partial class BibliographicReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonReferencesBibliographicReferenceType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BibliographicReference", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator BibliographicReference(XElement xe) { return XTypedServices.ToXTypedElement<BibliographicReference, FuGECommonReferencesBibliographicReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Represents bibliographic references, including the most common attributes. Note that because a BibliographicReference is Identifiable, a DatabaseEntry can also be specified. 
        /// </para>
        /// </summary>
        public BibliographicReference() {
            SetInnerType(new FuGECommonReferencesBibliographicReferenceType());
        }
        
        /// <summary>
        /// <para>
        ///  Represents bibliographic references, including the most common attributes. Note that because a BibliographicReference is Identifiable, a DatabaseEntry can also be specified. 
        /// </para>
        /// </summary>
        public BibliographicReference(FuGECommonReferencesBibliographicReferenceType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonReferencesBibliographicReferenceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The names of the authors of the reference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authors {
            get {
                return this.ContentField.authors;
            }
            set {
                this.ContentField.authors = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the journal, book etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publication {
            get {
                return this.ContentField.publication;
            }
            set {
                this.ContentField.publication = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The publisher of the publication. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publisher {
            get {
                return this.ContentField.publisher;
            }
            set {
                this.ContentField.publisher = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The editor(s) of the reference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string editor {
            get {
                return this.ContentField.editor;
            }
            set {
                this.ContentField.editor = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The year of publication. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? year {
            get {
                return this.ContentField.year;
            }
            set {
                this.ContentField.year = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The volume name or number. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string volume {
            get {
                return this.ContentField.volume;
            }
            set {
                this.ContentField.volume = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The issue name or number. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string issue {
            get {
                return this.ContentField.issue;
            }
            set {
                this.ContentField.issue = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The page numbers. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pages {
            get {
                return this.ContentField.pages;
            }
            set {
                this.ContentField.pages = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The title of the BibliographicReference. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BibliographicReference Load(string xmlFile) {
            return XTypedServices.Load<BibliographicReference, FuGECommonReferencesBibliographicReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BibliographicReference Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BibliographicReference, FuGECommonReferencesBibliographicReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BibliographicReference Parse(string xml) {
            return XTypedServices.Parse<BibliographicReference, FuGECommonReferencesBibliographicReferenceType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new BibliographicReference(((FuGECommonReferencesBibliographicReferenceType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonReferencesBibliographicReferenceType ContentField) {
            this.ContentField = ((FuGECommonReferencesBibliographicReferenceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An address to a repository. 
    /// </para>
    /// </summary>
    public partial class Database : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonReferencesDatabaseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Database", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Database(XElement xe) { return XTypedServices.ToXTypedElement<Database, FuGECommonReferencesDatabaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An address to a repository. 
        /// </para>
        /// </summary>
        public Database() {
            SetInnerType(new FuGECommonReferencesDatabaseType());
        }
        
        /// <summary>
        /// <para>
        ///  An address to a repository. 
        /// </para>
        /// </summary>
        public Database(FuGECommonReferencesDatabaseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonReferencesDatabaseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Contacts associated with this database, such as hosting institution, database curators, manager etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*)
        /// </para>
        /// </summary>
        public virtual IList<ContactRole> ContactRole {
            get {
                return this.ContentField.ContactRole;
            }
            set {
                this.ContentField.ContactRole = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The version of the Database. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The location of the Database. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Database Load(string xmlFile) {
            return XTypedServices.Load<Database, FuGECommonReferencesDatabaseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Database Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Database, FuGECommonReferencesDatabaseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Database Parse(string xml) {
            return XTypedServices.Parse<Database, FuGECommonReferencesDatabaseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Database(((FuGECommonReferencesDatabaseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonReferencesDatabaseType ContentField) {
            this.ContentField = ((FuGECommonReferencesDatabaseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to a record in a database. 
    /// </para>
    /// </summary>
    public partial class DatabaseReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonReferencesDatabaseReferenceType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatabaseReference", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DatabaseReference(XElement xe) { return XTypedServices.ToXTypedElement<DatabaseReference, FuGECommonReferencesDatabaseReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A reference to a record in a database. 
        /// </para>
        /// </summary>
        public DatabaseReference() {
            SetInnerType(new FuGECommonReferencesDatabaseReferenceType());
        }
        
        /// <summary>
        /// <para>
        ///  A reference to a record in a database. 
        /// </para>
        /// </summary>
        public DatabaseReference(FuGECommonReferencesDatabaseReferenceType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonReferencesDatabaseReferenceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The identifier used to look up the record. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                return this.ContentField.accession;
            }
            set {
                this.ContentField.accession = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The appropriate version of the accession (if applicable). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string accessionVersion {
            get {
                return this.ContentField.accessionVersion;
            }
            set {
                this.ContentField.accessionVersion = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the database where the DatabaseEntry instance can be found. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Database_ref {
            get {
                return this.ContentField.Database_ref;
            }
            set {
                this.ContentField.Database_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DatabaseReference Load(string xmlFile) {
            return XTypedServices.Load<DatabaseReference, FuGECommonReferencesDatabaseReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DatabaseReference Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DatabaseReference, FuGECommonReferencesDatabaseReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DatabaseReference Parse(string xml) {
            return XTypedServices.Parse<DatabaseReference, FuGECommonReferencesDatabaseReferenceType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DatabaseReference(((FuGECommonReferencesDatabaseReferenceType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonReferencesDatabaseReferenceType ContentField) {
            this.ContentField = ((FuGECommonReferencesDatabaseReferenceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A free text description of an object. 
    /// </para>
    /// </summary>
    public partial class Description : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonDescriptionDescriptionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Description", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Description(XElement xe) { return XTypedServices.ToXTypedElement<Description, FuGECommonDescriptionDescriptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A free text description of an object. 
        /// </para>
        /// </summary>
        public Description() {
            SetInnerType(new FuGECommonDescriptionDescriptionType());
        }
        
        /// <summary>
        /// <para>
        ///  A free text description of an object. 
        /// </para>
        /// </summary>
        public Description(FuGECommonDescriptionDescriptionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonDescriptionDescriptionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The description. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string text {
            get {
                return this.ContentField.text;
            }
            set {
                this.ContentField.text = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Description Load(string xmlFile) {
            return XTypedServices.Load<Description, FuGECommonDescriptionDescriptionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Description Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Description, FuGECommonDescriptionDescriptionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Description Parse(string xml) {
            return XTypedServices.Parse<Description, FuGECommonDescriptionDescriptionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Description(((FuGECommonDescriptionDescriptionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonDescriptionDescriptionType ContentField) {
            this.ContentField = ((FuGECommonDescriptionDescriptionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single user-defined parameter.
    /// </para>
    /// </summary>
    public partial class userParam : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonOntologyuserParamType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator userParam(XElement xe) { return XTypedServices.ToXTypedElement<userParam, FuGECommonOntologyuserParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single user-defined parameter.
        /// </para>
        /// </summary>
        public userParam() {
            SetInnerType(new FuGECommonOntologyuserParamType());
        }
        
        /// <summary>
        /// <para>
        /// A single user-defined parameter.
        /// </para>
        /// </summary>
        public userParam(FuGECommonOntologyuserParamType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonOntologyuserParamType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static userParam Load(string xmlFile) {
            return XTypedServices.Load<userParam, FuGECommonOntologyuserParamType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static userParam Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<userParam, FuGECommonOntologyuserParamType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static userParam Parse(string xml) {
            return XTypedServices.Parse<userParam, FuGECommonOntologyuserParamType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new userParam(((FuGECommonOntologyuserParamType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonOntologyuserParamType ContentField) {
            this.ContentField = ((FuGECommonOntologyuserParamType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The runtime value of a Parameter. 
    /// </para>
    /// </summary>
    public partial class ParameterValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolParameterValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParameterValue", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ParameterValue(XElement xe) { return XTypedServices.ToXTypedElement<ParameterValue, FuGECommonProtocolParameterValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The runtime value of a Parameter. 
        /// </para>
        /// </summary>
        public ParameterValue() {
            SetInnerType(new FuGECommonProtocolParameterValueType());
        }
        
        /// <summary>
        /// <para>
        ///  The runtime value of a Parameter. 
        /// </para>
        /// </summary>
        public ParameterValue(FuGECommonProtocolParameterValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolParameterValueType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameter this value is for. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Parameter_ref {
            get {
                return this.ContentField.Parameter_ref;
            }
            set {
                this.ContentField.Parameter_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ParameterValue Load(string xmlFile) {
            return XTypedServices.Load<ParameterValue, FuGECommonProtocolParameterValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ParameterValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ParameterValue, FuGECommonProtocolParameterValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ParameterValue Parse(string xml) {
            return XTypedServices.Parse<ParameterValue, FuGECommonProtocolParameterValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ParameterValue(((FuGECommonProtocolParameterValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolParameterValueType ContentField) {
            this.ContentField = ((FuGECommonProtocolParameterValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a piece of Equipment with the requisite Parameters and ParameterValues. 
    /// </para>
    /// </summary>
    public partial class EquipmentApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolEquipmentApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EquipmentApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator EquipmentApplication(XElement xe) { return XTypedServices.ToXTypedElement<EquipmentApplication, FuGECommonProtocolEquipmentApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of Equipment with the requisite Parameters and ParameterValues. 
        /// </para>
        /// </summary>
        public EquipmentApplication() {
            SetInnerType(new FuGECommonProtocolEquipmentApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of Equipment with the requisite Parameters and ParameterValues. 
        /// </para>
        /// </summary>
        public EquipmentApplication(FuGECommonProtocolEquipmentApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolEquipmentApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Manufacturer's identifier for the Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                return this.ContentField.serialNumber;
            }
            set {
                this.ContentField.serialNumber = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Equipment that was used in the ProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Equipment_ref {
            get {
                return this.ContentField.Equipment_ref;
            }
            set {
                this.ContentField.Equipment_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EquipmentApplication Load(string xmlFile) {
            return XTypedServices.Load<EquipmentApplication, FuGECommonProtocolEquipmentApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EquipmentApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EquipmentApplication, FuGECommonProtocolEquipmentApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static EquipmentApplication Parse(string xml) {
            return XTypedServices.Parse<EquipmentApplication, FuGECommonProtocolEquipmentApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new EquipmentApplication(((FuGECommonProtocolEquipmentApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolEquipmentApplicationType ContentField) {
            this.ContentField = ((FuGECommonProtocolEquipmentApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a piece of software with the requisite Parameters and ParameterValues. 
    /// </para>
    /// </summary>
    public partial class SoftwareApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolSoftwareApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SoftwareApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SoftwareApplication(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareApplication, FuGECommonProtocolSoftwareApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of software with the requisite Parameters and ParameterValues. 
        /// </para>
        /// </summary>
        public SoftwareApplication() {
            SetInnerType(new FuGECommonProtocolSoftwareApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  The use of a piece of software with the requisite Parameters and ParameterValues. 
        /// </para>
        /// </summary>
        public SoftwareApplication(FuGECommonProtocolSoftwareApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolSoftwareApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Software that was used in the ProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Software_ref {
            get {
                return this.ContentField.Software_ref;
            }
            set {
                this.ContentField.Software_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SoftwareApplication Load(string xmlFile) {
            return XTypedServices.Load<SoftwareApplication, FuGECommonProtocolSoftwareApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SoftwareApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SoftwareApplication, FuGECommonProtocolSoftwareApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SoftwareApplication Parse(string xml) {
            return XTypedServices.Parse<SoftwareApplication, FuGECommonProtocolSoftwareApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SoftwareApplication(((FuGECommonProtocolSoftwareApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolSoftwareApplicationType ContentField) {
            this.ContentField = ((FuGECommonProtocolSoftwareApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  ActionApplication mirrors the structure of Actions within Protocols and allows ActionDeviations to be reported.   RULE:   If an Action references a childProtocol, an ActionApplication must be created and reference a childProtocolApplication of the corresponding type (or GenericProtocolApplication) to mirror the Protocol structure.   ActionApplications can be (but need not be) created for simple Actions. 
    /// </para>
    /// </summary>
    public partial class ActionApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolActionApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ActionApplication(XElement xe) { return XTypedServices.ToXTypedElement<ActionApplication, FuGECommonProtocolActionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  ActionApplication mirrors the structure of Actions within Protocols and allows ActionDeviations to be reported.   RULE:   If an Action references a childProtocol, an ActionApplication must be created and reference a childProtocolApplication of the corresponding type (or GenericProtocolApplication) to mirror the Protocol structure.   ActionApplications can be (but need not be) created for simple Actions. 
        /// </para>
        /// </summary>
        public ActionApplication() {
            SetInnerType(new FuGECommonProtocolActionApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  ActionApplication mirrors the structure of Actions within Protocols and allows ActionDeviations to be reported.   RULE:   If an Action references a childProtocol, an ActionApplication must be created and reference a childProtocolApplication of the corresponding type (or GenericProtocolApplication) to mirror the Protocol structure.   ActionApplications can be (but need not be) created for simple Actions. 
        /// </para>
        /// </summary>
        public ActionApplication(FuGECommonProtocolActionApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolActionApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Used to define human readable notes for annotating deviations to an Action during the ActionApplication. 
        ///          
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ParameterValue*, actionDeviation?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonProtocolActionApplicationType.actionDeviationLocalType actionDeviation {
            get {
                return this.ContentField.actionDeviation;
            }
            set {
                this.ContentField.actionDeviation = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Association to the Action that is being performed as recorded by this ActionApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Action_ref {
            get {
                return this.ContentField.Action_ref;
            }
            set {
                this.ContentField.Action_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Association to ProtocolApplication if a hierarchical Protocol has been defined representing the child step of the Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProtocolApplication_ref {
            get {
                return this.ContentField.ProtocolApplication_ref;
            }
            set {
                this.ContentField.ProtocolApplication_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ActionApplication Load(string xmlFile) {
            return XTypedServices.Load<ActionApplication, FuGECommonProtocolActionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ActionApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ActionApplication, FuGECommonProtocolActionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ActionApplication Parse(string xml) {
            return XTypedServices.Parse<ActionApplication, FuGECommonProtocolActionApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ActionApplication(((FuGECommonProtocolActionApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolActionApplicationType ContentField) {
            this.ContentField = ((FuGECommonProtocolActionApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  GenericProtocol should be used with GenericAction, GenericParameter or protocolText to describe protocols in a data format for cases where no explicit extension of Protocol has been developed. 
    /// </para>
    /// </summary>
    public partial class GenericProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericProtocol(XElement xe) { return XTypedServices.ToXTypedElement<GenericProtocol, FuGECommonProtocolGenericProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  GenericProtocol should be used with GenericAction, GenericParameter or protocolText to describe protocols in a data format for cases where no explicit extension of Protocol has been developed. 
        /// </para>
        /// </summary>
        public GenericProtocol() {
            SetInnerType(new FuGECommonProtocolGenericProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  GenericProtocol should be used with GenericAction, GenericParameter or protocolText to describe protocols in a data format for cases where no explicit extension of Protocol has been developed. 
        /// </para>
        /// </summary>
        public GenericProtocol(FuGECommonProtocolGenericProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The text that applies to the entire Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                return this.ContentField.protocolText;
            }
            set {
                this.ContentField.protocolText = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericSoftware used with this GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolType.softwareLocalType> software {
            get {
                return this.ContentField.software;
            }
            set {
                this.ContentField.software = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol used with this GenericEquipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolType.equipmentLocalType> equipment {
            get {
                return this.ContentField.equipment;
            }
            set {
                this.ContentField.equipment = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters defined for the GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The actions performed within a GenericProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText?, software*, equipment*, GenericParameter*, GenericAction*)
        /// </para>
        /// </summary>
        public virtual IList<GenericAction> GenericAction {
            get {
                return this.ContentField.GenericAction;
            }
            set {
                this.ContentField.GenericAction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericProtocol Load(string xmlFile) {
            return XTypedServices.Load<GenericProtocol, FuGECommonProtocolGenericProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericProtocol, FuGECommonProtocolGenericProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericProtocol Parse(string xml) {
            return XTypedServices.Parse<GenericProtocol, FuGECommonProtocolGenericProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericProtocol(((FuGECommonProtocolGenericProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericProtocolType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A GenericAction represents a step within a GenericProtocol. It allows a reference to a sub-GenericProtocol, user entered text to describe the GenericAction or a term from a controlled vocabulary to be given. 
    /// </para>
    /// </summary>
    public partial class GenericAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericAction(XElement xe) { return XTypedServices.ToXTypedElement<GenericAction, FuGECommonProtocolGenericActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A GenericAction represents a step within a GenericProtocol. It allows a reference to a sub-GenericProtocol, user entered text to describe the GenericAction or a term from a controlled vocabulary to be given. 
        /// </para>
        /// </summary>
        public GenericAction() {
            SetInnerType(new FuGECommonProtocolGenericActionType());
        }
        
        /// <summary>
        /// <para>
        ///  A GenericAction represents a step within a GenericProtocol. It allows a reference to a sub-GenericProtocol, user entered text to describe the GenericAction or a term from a controlled vocabulary to be given. 
        /// </para>
        /// </summary>
        public GenericAction(FuGECommonProtocolGenericActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Each GenericAction may be associated with an OntologyTerm that defines that GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonProtocolGenericActionType.actionTermLocalType actionTerm {
            get {
                return this.ContentField.actionTerm;
            }
            set {
                this.ContentField.actionTerm = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters belonging to the GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  ParameterPairs owned by the GenericAction. The TargetParameter should reference a Parameter owned by a child Protocol which is also referenced by the GenericAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (actionTerm?, GenericParameter*, ParameterPair*)
        /// </para>
        /// </summary>
        public virtual IList<ParameterPair> ParameterPair {
            get {
                return this.ContentField.ParameterPair;
            }
            set {
                this.ContentField.ParameterPair = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Free text to describe this Action. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actionText {
            get {
                return this.ContentField.actionText;
            }
            set {
                this.ContentField.actionText = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  This is an instantiation of the ChildProtocol association for associating complex, hierarchical protocols together. A GenericAction can reference substeps within the parent GenericProtocol. The substeps can be further instances of GenericProtocol, or defined subclasses of Protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Protocol_ref {
            get {
                return this.ContentField.Protocol_ref;
            }
            set {
                this.ContentField.Protocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericAction Load(string xmlFile) {
            return XTypedServices.Load<GenericAction, FuGECommonProtocolGenericActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericAction, FuGECommonProtocolGenericActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericAction Parse(string xml) {
            return XTypedServices.Parse<GenericAction, FuGECommonProtocolGenericActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericAction(((FuGECommonProtocolGenericActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericActionType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Software class for capturing the description of Software used. 
    /// </para>
    /// </summary>
    public partial class GenericSoftware : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericSoftwareType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericSoftware", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericSoftware(XElement xe) { return XTypedServices.ToXTypedElement<GenericSoftware, FuGECommonProtocolGenericSoftwareType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Software class for capturing the description of Software used. 
        /// </para>
        /// </summary>
        public GenericSoftware() {
            SetInnerType(new FuGECommonProtocolGenericSoftwareType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Software class for capturing the description of Software used. 
        /// </para>
        /// </summary>
        public GenericSoftware(FuGECommonProtocolGenericSoftwareType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericSoftwareType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Associates GenericEquipment with GenericSoftware to indicate that instances of software are run on piece(s) of Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericSoftwareType.equipmentLocalType> equipment {
            get {
                return this.ContentField.equipment;
            }
            set {
                this.ContentField.equipment = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters for this piece of GenericSoftware. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, equipment*, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericSoftware Load(string xmlFile) {
            return XTypedServices.Load<GenericSoftware, FuGECommonProtocolGenericSoftwareType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericSoftware Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericSoftware, FuGECommonProtocolGenericSoftwareType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericSoftware Parse(string xml) {
            return XTypedServices.Parse<GenericSoftware, FuGECommonProtocolGenericSoftwareType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericSoftware(((FuGECommonProtocolGenericSoftwareType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericSoftwareType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericSoftwareType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Equipment class for capturing the description of Equipment used. 
    /// </para>
    /// </summary>
    public partial class GenericEquipment : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericEquipmentType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericEquipment", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericEquipment(XElement xe) { return XTypedServices.ToXTypedElement<GenericEquipment, FuGECommonProtocolGenericEquipmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Equipment class for capturing the description of Equipment used. 
        /// </para>
        /// </summary>
        public GenericEquipment() {
            SetInnerType(new FuGECommonProtocolGenericEquipmentType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Equipment class for capturing the description of Equipment used. 
        /// </para>
        /// </summary>
        public GenericEquipment(FuGECommonProtocolGenericEquipmentType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericEquipmentType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Associates GenericEquipment with GenericSoftware to indicate that instances of software are run on piece(s) of Equipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericEquipmentType.softwareLocalType> software {
            get {
                return this.ContentField.software;
            }
            set {
                this.ContentField.software = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameters for this piece of GenericEquipment. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  An association between a parent GenericEquipment and its parts. If a GenericProtocol utilises GenericEquipment and its parts, both the parent and child GenericEquipment instances should be referenced. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (make?, model?, software*, GenericParameter*, equipmentParts*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericEquipmentType.equipmentPartsLocalType> equipmentParts {
            get {
                return this.ContentField.equipmentParts;
            }
            set {
                this.ContentField.equipmentParts = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericEquipment Load(string xmlFile) {
            return XTypedServices.Load<GenericEquipment, FuGECommonProtocolGenericEquipmentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericEquipment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericEquipment, FuGECommonProtocolGenericEquipmentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericEquipment Parse(string xml) {
            return XTypedServices.Parse<GenericEquipment, FuGECommonProtocolGenericEquipmentType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericEquipment(((FuGECommonProtocolGenericEquipmentType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericEquipmentType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericEquipmentType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of the abstract Parameter class to represent a parameter that is defined by a controlled vocabulary term. 
    /// </para>
    /// </summary>
    public partial class GenericParameter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericParameterType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericParameter(XElement xe) { return XTypedServices.ToXTypedElement<GenericParameter, FuGECommonProtocolGenericParameterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Parameter class to represent a parameter that is defined by a controlled vocabulary term. 
        /// </para>
        /// </summary>
        public GenericParameter() {
            SetInnerType(new FuGECommonProtocolGenericParameterType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of the abstract Parameter class to represent a parameter that is defined by a controlled vocabulary term. 
        /// </para>
        /// </summary>
        public GenericParameter(FuGECommonProtocolGenericParameterType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericParameterType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the parameter. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((AtomicValue | BooleanValue | ComplexValue | Range)?, parameterType?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonProtocolGenericParameterType.parameterTypeLocalType parameterType {
            get {
                return this.ContentField.parameterType;
            }
            set {
                this.ContentField.parameterType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericParameter Load(string xmlFile) {
            return XTypedServices.Load<GenericParameter, FuGECommonProtocolGenericParameterType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericParameter Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericParameter, FuGECommonProtocolGenericParameterType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericParameter Parse(string xml) {
            return XTypedServices.Parse<GenericParameter, FuGECommonProtocolGenericParameterType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericParameter(((FuGECommonProtocolGenericParameterType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericParameterType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericParameterType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A subclass of ProtocolApplication to be used as it is in data formats without being extended. 
    /// </para>
    /// </summary>
    public partial class GenericProtocolApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolGenericProtocolApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GenericProtocolApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GenericProtocolApplication(XElement xe) { return XTypedServices.ToXTypedElement<GenericProtocolApplication, FuGECommonProtocolGenericProtocolApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A subclass of ProtocolApplication to be used as it is in data formats without being extended. 
        /// </para>
        /// </summary>
        public GenericProtocolApplication() {
            SetInnerType(new FuGECommonProtocolGenericProtocolApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  A subclass of ProtocolApplication to be used as it is in data formats without being extended. 
        /// </para>
        /// </summary>
        public GenericProtocolApplication(FuGECommonProtocolGenericProtocolApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolGenericProtocolApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Measured sources of material that are inputs to this GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterialMeasurement> GenericMaterialMeasurement {
            get {
                return this.ContentField.GenericMaterialMeasurement;
            }
            set {
                this.ContentField.GenericMaterialMeasurement = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The instances of GenericData that are inputs to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.inputDataLocalType> inputData {
            get {
                return this.ContentField.inputData;
            }
            set {
                this.ContentField.inputData = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Data produced from the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.outputDataLocalType> outputData {
            get {
                return this.ContentField.outputData;
            }
            set {
                this.ContentField.outputData = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The instances of GenericMaterial or a subclass of Material that are produced from the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.outputMaterialsLocalType> outputMaterials {
            get {
                return this.ContentField.outputMaterials;
            }
            set {
                this.ContentField.outputMaterials = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Whole Materials that are inputs to the GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType.inputCompleteMaterialsLocalType> inputCompleteMaterials {
            get {
                return this.ContentField.inputCompleteMaterials;
            }
            set {
                this.ContentField.inputCompleteMaterials = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The parameter values for this Parameterizable Application. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterialMeasurement*, inputData*, outputData*, outputMaterials*, inputCompleteMaterials*, ParameterValue*)
        /// </para>
        /// </summary>
        public virtual IList<ParameterValue> ParameterValue {
            get {
                return this.ContentField.ParameterValue;
            }
            set {
                this.ContentField.ParameterValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol or subclass of Protocol that has been used with this GenericProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Protocol_ref {
            get {
                return this.ContentField.Protocol_ref;
            }
            set {
                this.ContentField.Protocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GenericProtocolApplication Load(string xmlFile) {
            return XTypedServices.Load<GenericProtocolApplication, FuGECommonProtocolGenericProtocolApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericProtocolApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GenericProtocolApplication, FuGECommonProtocolGenericProtocolApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GenericProtocolApplication Parse(string xml) {
            return XTypedServices.Parse<GenericProtocolApplication, FuGECommonProtocolGenericProtocolApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GenericProtocolApplication(((FuGECommonProtocolGenericProtocolApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolGenericProtocolApplicationType ContentField) {
            this.ContentField = ((FuGECommonProtocolGenericProtocolApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A pairing of an output parameter from a Protocol (SourceParameter) with an input parameter to a separate Protocol (TargetParameter) to indicate that the ParameterValue will be the same. 
    /// </para>
    /// </summary>
    public partial class ParameterPair : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonProtocolParameterPairType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParameterPair", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ParameterPair(XElement xe) { return XTypedServices.ToXTypedElement<ParameterPair, FuGECommonProtocolParameterPairType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A pairing of an output parameter from a Protocol (SourceParameter) with an input parameter to a separate Protocol (TargetParameter) to indicate that the ParameterValue will be the same. 
        /// </para>
        /// </summary>
        public ParameterPair() {
            SetInnerType(new FuGECommonProtocolParameterPairType());
        }
        
        /// <summary>
        /// <para>
        ///  A pairing of an output parameter from a Protocol (SourceParameter) with an input parameter to a separate Protocol (TargetParameter) to indicate that the ParameterValue will be the same. 
        /// </para>
        /// </summary>
        public ParameterPair(FuGECommonProtocolParameterPairType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonProtocolParameterPairType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A Parameter that is an input to a process which has been an output from another process. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetParameter, sourceParameter)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonProtocolParameterPairType.targetParameterLocalType targetParameter {
            get {
                return this.ContentField.targetParameter;
            }
            set {
                this.ContentField.targetParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A Parameter that is output from one process which will be input to another process. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (targetParameter, sourceParameter)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.FuGECommonProtocolParameterPairType.sourceParameterLocalType sourceParameter {
            get {
                return this.ContentField.sourceParameter;
            }
            set {
                this.ContentField.sourceParameter = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ParameterPair Load(string xmlFile) {
            return XTypedServices.Load<ParameterPair, FuGECommonProtocolParameterPairType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ParameterPair Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ParameterPair, FuGECommonProtocolParameterPairType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ParameterPair Parse(string xml) {
            return XTypedServices.Parse<ParameterPair, FuGECommonProtocolParameterPairType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ParameterPair(((FuGECommonProtocolParameterPairType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonProtocolParameterPairType ContentField) {
            this.ContentField = ((FuGECommonProtocolParameterPairType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single entry from an ontology or a controlled vocabulary.
    /// </para>
    /// </summary>
    public partial class cvParam : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonOntologycvParamType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator cvParam(XElement xe) { return XTypedServices.ToXTypedElement<cvParam, FuGECommonOntologycvParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single entry from an ontology or a controlled vocabulary.
        /// </para>
        /// </summary>
        public cvParam() {
            SetInnerType(new FuGECommonOntologycvParamType());
        }
        
        /// <summary>
        /// <para>
        ///  A single entry from an ontology or a controlled vocabulary.
        /// </para>
        /// </summary>
        public cvParam(FuGECommonOntologycvParamType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonOntologycvParamType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the cv element from which this term originates.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cvRef {
            get {
                return this.ContentField.cvRef;
            }
            set {
                this.ContentField.cvRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The accession or ID number of this CV term in the source CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                return this.ContentField.accession;
            }
            set {
                this.ContentField.accession = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static cvParam Load(string xmlFile) {
            return XTypedServices.Load<cvParam, FuGECommonOntologycvParamType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static cvParam Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<cvParam, FuGECommonOntologycvParamType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static cvParam Parse(string xml) {
            return XTypedServices.Parse<cvParam, FuGECommonOntologycvParamType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new cvParam(((FuGECommonOntologycvParamType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonOntologycvParamType ContentField) {
            this.ContentField = ((FuGECommonOntologycvParamType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A source controlled vocabulary from which cvParams will be obtained.
    /// </para>
    /// </summary>
    public partial class cv : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonOntologycvType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cv", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator cv(XElement xe) { return XTypedServices.ToXTypedElement<cv, FuGECommonOntologycvType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A source controlled vocabulary from which cvParams will be obtained.
        /// </para>
        /// </summary>
        public cv() {
            SetInnerType(new FuGECommonOntologycvType());
        }
        
        /// <summary>
        /// <para>
        /// A source controlled vocabulary from which cvParams will be obtained.
        /// </para>
        /// </summary>
        public cv(FuGECommonOntologycvType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonOntologycvType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// The full name of the CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fullName {
            get {
                return this.ContentField.fullName;
            }
            set {
                this.ContentField.fullName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The URI of the source CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier of this cv within the document to be referenced by cvParam elements.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static cv Load(string xmlFile) {
            return XTypedServices.Load<cv, FuGECommonOntologycvType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static cv Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<cv, FuGECommonOntologycvType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static cv Parse(string xml) {
            return XTypedServices.Parse<cv, FuGECommonOntologycvType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new cv(((FuGECommonOntologycvType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonOntologycvType ContentField) {
            this.ContentField = ((FuGECommonOntologycvType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The collection of objects that allow external references. 
    /// </para>
    /// </summary>
    public partial class ReferenceableCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECollectionReferenceableCollectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenceableCollection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ReferenceableCollection(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceableCollection, FuGECollectionReferenceableCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The collection of objects that allow external references. 
        /// </para>
        /// </summary>
        public ReferenceableCollection() {
            SetInnerType(new FuGECollectionReferenceableCollectionType());
        }
        
        /// <summary>
        /// <para>
        ///  The collection of objects that allow external references. 
        /// </para>
        /// </summary>
        public ReferenceableCollection(FuGECollectionReferenceableCollectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECollectionReferenceableCollectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the complete set of BibliographicReference objects in the FuGE document. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BibliographicReference*, Database*)
        /// </para>
        /// </summary>
        public virtual IList<BibliographicReference> BibliographicReference {
            get {
                return this.ContentField.BibliographicReference;
            }
            set {
                this.ContentField.BibliographicReference = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the complete set of Database objects in the FuGE document. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BibliographicReference*, Database*)
        /// </para>
        /// </summary>
        public virtual IList<Database> Database {
            get {
                return this.ContentField.Database;
            }
            set {
                this.ContentField.Database = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReferenceableCollection Load(string xmlFile) {
            return XTypedServices.Load<ReferenceableCollection, FuGECollectionReferenceableCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceableCollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReferenceableCollection, FuGECollectionReferenceableCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceableCollection Parse(string xml) {
            return XTypedServices.Parse<ReferenceableCollection, FuGECollectionReferenceableCollectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ReferenceableCollection(((FuGECollectionReferenceableCollectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECollectionReferenceableCollectionType ContentField) {
            this.ContentField = ((FuGECollectionReferenceableCollectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The collection of Contact records. 
    /// </para>
    /// </summary>
    public partial class AuditCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECollectionAuditCollectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuditCollection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator AuditCollection(XElement xe) { return XTypedServices.ToXTypedElement<AuditCollection, FuGECollectionAuditCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The collection of Contact records. 
        /// </para>
        /// </summary>
        public AuditCollection() {
            SetInnerType(new FuGECollectionAuditCollectionType());
        }
        
        /// <summary>
        /// <para>
        ///  The collection of Contact records. 
        /// </para>
        /// </summary>
        public AuditCollection(FuGECollectionAuditCollectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECollectionAuditCollectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Person | Organization)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonAuditPersonType> Person {
            get {
                return this.ContentField.Person;
            }
            set {
                this.ContentField.Person = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Person | Organization)*)
        /// </para>
        /// </summary>
        public virtual IList<FuGECommonAuditOrganizationType> Organization {
            get {
                return this.ContentField.Organization;
            }
            set {
                this.ContentField.Organization = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AuditCollection Load(string xmlFile) {
            return XTypedServices.Load<AuditCollection, FuGECollectionAuditCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AuditCollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AuditCollection, FuGECollectionAuditCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AuditCollection Parse(string xml) {
            return XTypedServices.Parse<AuditCollection, FuGECollectionAuditCollectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AuditCollection(((FuGECollectionAuditCollectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECollectionAuditCollectionType ContentField) {
            this.ContentField = ((FuGECollectionAuditCollectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The provider of the document in terms of the Contact and the software the produced the document instance. 
    /// </para>
    /// </summary>
    public partial class Provider : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECollectionProviderType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Provider", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Provider(XElement xe) { return XTypedServices.ToXTypedElement<Provider, FuGECollectionProviderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The provider of the document in terms of the Contact and the software the produced the document instance. 
        /// </para>
        /// </summary>
        public Provider() {
            SetInnerType(new FuGECollectionProviderType());
        }
        
        /// <summary>
        /// <para>
        ///  The provider of the document in terms of the Contact and the software the produced the document instance. 
        /// </para>
        /// </summary>
        public Provider(FuGECollectionProviderType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECollectionProviderType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Contact that provided the document instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRole ContactRole {
            get {
                return this.ContentField.ContactRole;
            }
            set {
                this.ContentField.ContactRole = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Software that produced the document instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Software_ref {
            get {
                return this.ContentField.Software_ref;
            }
            set {
                this.ContentField.Software_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Provider Load(string xmlFile) {
            return XTypedServices.Load<Provider, FuGECollectionProviderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Provider Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Provider, FuGECollectionProviderType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Provider Parse(string xml) {
            return XTypedServices.Parse<Provider, FuGECollectionProviderType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Provider(((FuGECollectionProviderType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECollectionProviderType ContentField) {
            this.ContentField = ((FuGECollectionProviderType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single value and unit combination.
    /// </para>
    /// </summary>
    public partial class PropertyValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FuGECommonOntologyPropertyValue ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyValue", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator PropertyValue(XElement xe) { return XTypedServices.ToXTypedElement<PropertyValue, FuGECommonOntologyPropertyValue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single value and unit combination.
        /// </para>
        /// </summary>
        public PropertyValue() {
            SetInnerType(new FuGECommonOntologyPropertyValue());
        }
        
        /// <summary>
        /// <para>
        ///  A single value and unit combination.
        /// </para>
        /// </summary>
        public PropertyValue(FuGECommonOntologyPropertyValue content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FuGECommonOntologyPropertyValue Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// A user-entered value for the parameter.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The accession number of the unit term in the source unit CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                return this.ContentField.unitAccession;
            }
            set {
                this.ContentField.unitAccession = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the unit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                return this.ContentField.unitName;
            }
            set {
                this.ContentField.unitName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this file.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                return this.ContentField.unitCvRef;
            }
            set {
                this.ContentField.unitCvRef = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PropertyValue Load(string xmlFile) {
            return XTypedServices.Load<PropertyValue, FuGECommonOntologyPropertyValue>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PropertyValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PropertyValue, FuGECommonOntologyPropertyValue>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PropertyValue Parse(string xml) {
            return XTypedServices.Parse<PropertyValue, FuGECommonOntologyPropertyValue>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PropertyValue(((FuGECommonOntologyPropertyValue)(this.Content.Clone())));
        }
        
        private void SetInnerType(FuGECommonOntologyPropertyValue ContentField) {
            this.ContentField = ((FuGECommonOntologyPropertyValue)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The root of the GelML document. 
    /// </para>
    /// </summary>
    public partial class GelML : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGelMLType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelML", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelML(XElement xe) { return XTypedServices.ToXTypedElement<GelML, GelMLGelMLRootGelMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The root of the GelML document. 
        /// </para>
        /// </summary>
        public GelML() {
            SetInnerType(new GelMLGelMLRootGelMLType());
        }
        
        /// <summary>
        /// <para>
        ///  The root of the GelML document. 
        /// </para>
        /// </summary>
        public GelML(GelMLGelMLRootGelMLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelMLRootGelMLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual Provider Provider {
            get {
                return this.ContentField.Provider;
            }
            set {
                this.ContentField.Provider = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The list of CVs used within the file
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelMLRootGelMLType.cvListLocalType cvList {
            get {
                return this.ContentField.cvList;
            }
            set {
                this.ContentField.cvList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLMaterialCollection GelMLMaterialCollection {
            get {
                return this.ContentField.GelMLMaterialCollection;
            }
            set {
                this.ContentField.GelMLMaterialCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLDataCollection GelMLDataCollection {
            get {
                return this.ContentField.GelMLDataCollection;
            }
            set {
                this.ContentField.GelMLDataCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual GelMLProtocolCollection GelMLProtocolCollection {
            get {
                return this.ContentField.GelMLProtocolCollection;
            }
            set {
                this.ContentField.GelMLProtocolCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: GelExperiment, Gel2DExperiment, Gel1DExperiment, OtherGelExperiment
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual IList<GelExperiment> GelExperiment {
            get {
                return this.ContentField.GelExperiment;
            }
            set {
                this.ContentField.GelExperiment = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual AuditCollection AuditCollection {
            get {
                return this.ContentField.AuditCollection;
            }
            set {
                this.ContentField.AuditCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Provider?, cvList, GelMLMaterialCollection?, GelMLDataCollection?, GelMLProtocolCollection?, GelExperiment*, AuditCollection?, ReferenceableCollection?)
        /// </para>
        /// </summary>
        public virtual ReferenceableCollection ReferenceableCollection {
            get {
                return this.ContentField.ReferenceableCollection;
            }
            set {
                this.ContentField.ReferenceableCollection = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelML Load(string xmlFile) {
            return XTypedServices.Load<GelML, GelMLGelMLRootGelMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelML Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelML, GelMLGelMLRootGelMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelML Parse(string xml) {
            return XTypedServices.Parse<GelML, GelMLGelMLRootGelMLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelML(((GelMLGelMLRootGelMLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGelMLType ContentField) {
            this.ContentField = ((GelMLGelMLRootGelMLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all GenericMaterial instances used in GelML.
    ///   
    /// </para>
    /// </summary>
    public partial class GelMLMaterialCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGelMLMaterialCollectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelMLMaterialCollection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLMaterialCollection(XElement xe) { return XTypedServices.ToXTypedElement<GelMLMaterialCollection, GelMLGelMLRootGelMLMaterialCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all GenericMaterial instances used in GelML.
        ///   
        /// </para>
        /// </summary>
        public GelMLMaterialCollection() {
            SetInnerType(new GelMLGelMLRootGelMLMaterialCollectionType());
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all GenericMaterial instances used in GelML.
        ///   
        /// </para>
        /// </summary>
        public GelMLMaterialCollection(GelMLGelMLRootGelMLMaterialCollectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelMLRootGelMLMaterialCollectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericMaterial*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterial> GenericMaterial {
            get {
                return this.ContentField.GenericMaterial;
            }
            set {
                this.ContentField.GenericMaterial = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelMLMaterialCollection Load(string xmlFile) {
            return XTypedServices.Load<GelMLMaterialCollection, GelMLGelMLRootGelMLMaterialCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLMaterialCollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelMLMaterialCollection, GelMLGelMLRootGelMLMaterialCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLMaterialCollection Parse(string xml) {
            return XTypedServices.Parse<GelMLMaterialCollection, GelMLGelMLRootGelMLMaterialCollectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelMLMaterialCollection(((GelMLGelMLRootGelMLMaterialCollectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGelMLMaterialCollectionType ContentField) {
            this.ContentField = ((GelMLGelMLRootGelMLMaterialCollectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all ExternalData instances in GelML.
    ///   
    /// </para>
    /// </summary>
    public partial class GelMLDataCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGelMLDataCollectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelMLDataCollection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLDataCollection(XElement xe) { return XTypedServices.ToXTypedElement<GelMLDataCollection, GelMLGelMLRootGelMLDataCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all ExternalData instances in GelML.
        ///   
        /// </para>
        /// </summary>
        public GelMLDataCollection() {
            SetInnerType(new GelMLGelMLRootGelMLDataCollectionType());
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all ExternalData instances in GelML.
        ///   
        /// </para>
        /// </summary>
        public GelMLDataCollection(GelMLGelMLRootGelMLDataCollectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelMLRootGelMLDataCollectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: ExternalData, Image
        /// </para>
        /// <para>
        /// Regular expression: (ExternalData*)
        /// </para>
        /// </summary>
        public virtual IList<ExternalData> ExternalData {
            get {
                return this.ContentField.ExternalData;
            }
            set {
                this.ContentField.ExternalData = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelMLDataCollection Load(string xmlFile) {
            return XTypedServices.Load<GelMLDataCollection, GelMLGelMLRootGelMLDataCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLDataCollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelMLDataCollection, GelMLGelMLRootGelMLDataCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLDataCollection Parse(string xml) {
            return XTypedServices.Parse<GelMLDataCollection, GelMLGelMLRootGelMLDataCollectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelMLDataCollection(((GelMLGelMLRootGelMLDataCollectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGelMLDataCollectionType ContentField) {
            this.ContentField = ((GelMLGelMLRootGelMLDataCollectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2DExperiment captures the ProtocolApplications that should be reported for
    ///    2D gel electrophoresis in a GelML file. 
    /// </para>
    /// </summary>
    public partial class Gel2DExperiment : global::psidev.info.gelml.GelExperiment, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGel2DExperimentType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel2DExperiment", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel2DExperiment(XElement xe) { return XTypedServices.ToXTypedElement<Gel2DExperiment, GelMLGelMLRootGel2DExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Gel2DExperiment captures the ProtocolApplications that should be reported for
        ///    2D gel electrophoresis in a GelML file. 
        /// </para>
        /// </summary>
        public Gel2DExperiment() : 
                base(true) {
            SetInnerType(new GelMLGelMLRootGel2DExperimentType());
        }
        
        /// <summary>
        /// <para>
        ///  Gel2DExperiment captures the ProtocolApplications that should be reported for
        ///    2D gel electrophoresis in a GelML file. 
        /// </para>
        /// </summary>
        public Gel2DExperiment(GelMLGelMLRootGel2DExperimentType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelMLRootGel2DExperimentType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                return this.ContentField.GelManufactureApplication;
            }
            set {
                this.ContentField.GelManufactureApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual Gel2DApplication Gel2DApplication {
            get {
                return this.ContentField.Gel2DApplication;
            }
            set {
                this.ContentField.Gel2DApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                return this.ContentField.ImageAcquisitionApplication;
            }
            set {
                this.ContentField.ImageAcquisitionApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel2DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                return this.ContentField.ExcisionApplication;
            }
            set {
                this.ContentField.ExcisionApplication = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Gel2DExperiment Load(string xmlFile) {
            return XTypedServices.Load<Gel2DExperiment, GelMLGelMLRootGel2DExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2DExperiment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel2DExperiment, GelMLGelMLRootGel2DExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Gel2DExperiment Parse(string xml) {
            return XTypedServices.Parse<Gel2DExperiment, GelMLGelMLRootGel2DExperimentType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel2DExperiment(((GelMLGelMLRootGel2DExperimentType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGel2DExperimentType ContentField) {
            this.ContentField = ((GelMLGelMLRootGel2DExperimentType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Collection class for accessing all Software, Protocol and Equipment instances. 
    /// </para>
    /// </summary>
    public partial class GelMLProtocolCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGelMLProtocolCollectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelMLProtocolCollection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelMLProtocolCollection(XElement xe) { return XTypedServices.ToXTypedElement<GelMLProtocolCollection, GelMLGelMLRootGelMLProtocolCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all Software, Protocol and Equipment instances. 
        /// </para>
        /// </summary>
        public GelMLProtocolCollection() {
            SetInnerType(new GelMLGelMLRootGelMLProtocolCollectionType());
        }
        
        /// <summary>
        /// <para>
        ///  Collection class for accessing all Software, Protocol and Equipment instances. 
        /// </para>
        /// </summary>
        public GelMLProtocolCollection(GelMLGelMLRootGelMLProtocolCollectionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelMLRootGelMLProtocolCollectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericEquipment> GenericEquipment {
            get {
                return this.ContentField.GenericEquipment;
            }
            set {
                this.ContentField.GenericEquipment = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericSoftware> GenericSoftware {
            get {
                return this.ContentField.GenericSoftware;
            }
            set {
                this.ContentField.GenericSoftware = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<GenericProtocol> GenericProtocol {
            get {
                return this.ContentField.GenericProtocol;
            }
            set {
                this.ContentField.GenericProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingProtocol> SampleLoadingProtocol {
            get {
                return this.ContentField.SampleLoadingProtocol;
            }
            set {
                this.ContentField.SampleLoadingProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<Gel2DProtocol> Gel2DProtocol {
            get {
                return this.ContentField.Gel2DProtocol;
            }
            set {
                this.ContentField.Gel2DProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<Gel1DProtocol> Gel1DProtocol {
            get {
                return this.ContentField.Gel1DProtocol;
            }
            set {
                this.ContentField.Gel1DProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<OtherGelProtocol> OtherGelProtocol {
            get {
                return this.ContentField.OtherGelProtocol;
            }
            set {
                this.ContentField.OtherGelProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<ElectrophoresisProtocol> ElectrophoresisProtocol {
            get {
                return this.ContentField.ElectrophoresisProtocol;
            }
            set {
                this.ContentField.ElectrophoresisProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<SubstanceMixtureProtocol> SubstanceMixtureProtocol {
            get {
                return this.ContentField.SubstanceMixtureProtocol;
            }
            set {
                this.ContentField.SubstanceMixtureProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionProtocol> DetectionProtocol {
            get {
                return this.ContentField.DetectionProtocol;
            }
            set {
                this.ContentField.DetectionProtocol = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GenericEquipment*, GenericSoftware*, GenericProtocol*, SampleLoadingProtocol*, Gel2DProtocol*, Gel1DProtocol*, OtherGelProtocol*, ElectrophoresisProtocol*, SubstanceMixtureProtocol*, DetectionProtocol*, ImageAcquisitionProtocol*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionProtocol> ImageAcquisitionProtocol {
            get {
                return this.ContentField.ImageAcquisitionProtocol;
            }
            set {
                this.ContentField.ImageAcquisitionProtocol = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelMLProtocolCollection Load(string xmlFile) {
            return XTypedServices.Load<GelMLProtocolCollection, GelMLGelMLRootGelMLProtocolCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLProtocolCollection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelMLProtocolCollection, GelMLGelMLRootGelMLProtocolCollectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelMLProtocolCollection Parse(string xml) {
            return XTypedServices.Parse<GelMLProtocolCollection, GelMLGelMLRootGelMLProtocolCollectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelMLProtocolCollection(((GelMLGelMLRootGelMLProtocolCollectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGelMLProtocolCollectionType ContentField) {
            this.ContentField = ((GelMLGelMLRootGelMLProtocolCollectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the groups of ProtocolApplications that
    ///    should be represented in a valid GelML document. 
    /// </para>
    /// </summary>
    public abstract partial class GelExperiment : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGelExperimentType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelExperiment(XElement xe) {  return (GelExperiment)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected GelExperiment(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the groups of ProtocolApplications that
        ///    should be represented in a valid GelML document. 
        /// </para>
        /// </summary>
        public GelExperiment() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the groups of ProtocolApplications that
        ///    should be represented in a valid GelML document. 
        /// </para>
        /// </summary>
        public GelExperiment(GelMLGelMLRootGelExperimentType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLGelMLRootGelExperimentType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The experiment type definition, such as "2D-DIGE", "one-dimensional gel
        ///        electrophoresis", "two-dimensional gel electrophoresis" etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelMLRootGelExperimentType.electrophoresisTypeLocalType electrophoresisType {
            get {
                return this.ContentField.electrophoresisType;
            }
            set {
                this.ContentField.electrophoresisType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The primary contact for this GelExperiment
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRole ContactRole {
            get {
                return this.ContentField.ContactRole;
            }
            set {
                this.ContentField.ContactRole = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The date the experiment was initiated on. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                return this.ContentField.date;
            }
            set {
                this.ContentField.date = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelExperiment Load(string xmlFile) {
            return ((GelExperiment)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static GelExperiment Load(System.IO.TextReader xmlFile) {
            return ((GelExperiment)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static GelExperiment Parse(string xml) {
            return ((GelExperiment)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLGelMLRootGelExperimentType ContentField) {
            this.ContentField = ((GelMLGelMLRootGelExperimentType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLGelMLRootGelExperimentType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel1DExperiment captures the ProtocolApplications that should be reported for
    ///    1D gel electrophoresis in a GelML file. 
    /// </para>
    /// </summary>
    public partial class Gel1DExperiment : global::psidev.info.gelml.GelExperiment, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootGel1DExperimentType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel1DExperiment", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel1DExperiment(XElement xe) { return XTypedServices.ToXTypedElement<Gel1DExperiment, GelMLGelMLRootGel1DExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Gel1DExperiment captures the ProtocolApplications that should be reported for
        ///    1D gel electrophoresis in a GelML file. 
        /// </para>
        /// </summary>
        public Gel1DExperiment() : 
                base(true) {
            SetInnerType(new GelMLGelMLRootGel1DExperimentType());
        }
        
        /// <summary>
        /// <para>
        ///  Gel1DExperiment captures the ProtocolApplications that should be reported for
        ///    1D gel electrophoresis in a GelML file. 
        /// </para>
        /// </summary>
        public Gel1DExperiment(GelMLGelMLRootGel1DExperimentType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelMLRootGel1DExperimentType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                return this.ContentField.GelManufactureApplication;
            }
            set {
                this.ContentField.GelManufactureApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual Gel1DApplication Gel1DApplication {
            get {
                return this.ContentField.Gel1DApplication;
            }
            set {
                this.ContentField.Gel1DApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                return this.ContentField.ImageAcquisitionApplication;
            }
            set {
                this.ContentField.ImageAcquisitionApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, Gel1DApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                return this.ContentField.ExcisionApplication;
            }
            set {
                this.ContentField.ExcisionApplication = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Gel1DExperiment Load(string xmlFile) {
            return XTypedServices.Load<Gel1DExperiment, GelMLGelMLRootGel1DExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1DExperiment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel1DExperiment, GelMLGelMLRootGel1DExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Gel1DExperiment Parse(string xml) {
            return XTypedServices.Parse<Gel1DExperiment, GelMLGelMLRootGel1DExperimentType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel1DExperiment(((GelMLGelMLRootGel1DExperimentType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootGel1DExperimentType ContentField) {
            this.ContentField = ((GelMLGelMLRootGel1DExperimentType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  OtherGelExperiment captures the ProtocolApplications that should be reported
    ///    for a type of gel electrophoresis other than 1D or 2D in a GelML file. 
    /// </para>
    /// </summary>
    public partial class OtherGelExperiment : global::psidev.info.gelml.GelExperiment, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMLRootOtherGelExperimentType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherGelExperiment", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator OtherGelExperiment(XElement xe) { return XTypedServices.ToXTypedElement<OtherGelExperiment, GelMLGelMLRootOtherGelExperimentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  OtherGelExperiment captures the ProtocolApplications that should be reported
        ///    for a type of gel electrophoresis other than 1D or 2D in a GelML file. 
        /// </para>
        /// </summary>
        public OtherGelExperiment() : 
                base(true) {
            SetInnerType(new GelMLGelMLRootOtherGelExperimentType());
        }
        
        /// <summary>
        /// <para>
        ///  OtherGelExperiment captures the ProtocolApplications that should be reported
        ///    for a type of gel electrophoresis other than 1D or 2D in a GelML file. 
        /// </para>
        /// </summary>
        public OtherGelExperiment(GelMLGelMLRootOtherGelExperimentType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelMLRootOtherGelExperimentType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<GelManufactureApplication> GelManufactureApplication {
            get {
                return this.ContentField.GelManufactureApplication;
            }
            set {
                this.ContentField.GelManufactureApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual OtherGelApplication OtherGelApplication {
            get {
                return this.ContentField.OtherGelApplication;
            }
            set {
                this.ContentField.OtherGelApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ImageAcquisitionApplication> ImageAcquisitionApplication {
            get {
                return this.ContentField.ImageAcquisitionApplication;
            }
            set {
                this.ContentField.ImageAcquisitionApplication = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (electrophoresisType?, ContactRole?, GelManufactureApplication*, OtherGelApplication, ImageAcquisitionApplication*, ExcisionApplication*)
        /// </para>
        /// </summary>
        public virtual IList<ExcisionApplication> ExcisionApplication {
            get {
                return this.ContentField.ExcisionApplication;
            }
            set {
                this.ContentField.ExcisionApplication = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static OtherGelExperiment Load(string xmlFile) {
            return XTypedServices.Load<OtherGelExperiment, GelMLGelMLRootOtherGelExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelExperiment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherGelExperiment, GelMLGelMLRootOtherGelExperimentType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static OtherGelExperiment Parse(string xml) {
            return XTypedServices.Parse<OtherGelExperiment, GelMLGelMLRootOtherGelExperimentType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherGelExperiment(((GelMLGelMLRootOtherGelExperimentType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMLRootOtherGelExperimentType ContentField) {
            this.ContentField = ((GelMLGelMLRootOtherGelExperimentType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The volume of a substance relative to the medium in which it is in.
    ///   
    /// </para>
    /// </summary>
    public partial class RelativeVolume : global::psidev.info.gelml.VolumeParameter, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceRelativeVolumeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RelativeVolume", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator RelativeVolume(XElement xe) { return XTypedServices.ToXTypedElement<RelativeVolume, GelMLSelectSubstanceRelativeVolumeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The volume of a substance relative to the medium in which it is in.
        ///   
        /// </para>
        /// </summary>
        public RelativeVolume() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceRelativeVolumeType());
        }
        
        /// <summary>
        /// <para>
        ///  The volume of a substance relative to the medium in which it is in.
        ///   
        /// </para>
        /// </summary>
        public RelativeVolume(GelMLSelectSubstanceRelativeVolumeType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceRelativeVolumeType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static RelativeVolume Load(string xmlFile) {
            return XTypedServices.Load<RelativeVolume, GelMLSelectSubstanceRelativeVolumeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static RelativeVolume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RelativeVolume, GelMLSelectSubstanceRelativeVolumeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static RelativeVolume Parse(string xml) {
            return XTypedServices.Parse<RelativeVolume, GelMLSelectSubstanceRelativeVolumeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new RelativeVolume(((GelMLSelectSubstanceRelativeVolumeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceRelativeVolumeType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceRelativeVolumeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  VolumeFunction represents a specification of a volume that changes, for
    ///    example, over time. The value provided for a VolumeFunction should use the ComplexValue
    ///    specification to represent the function. 
    /// </para>
    /// </summary>
    public partial class VolumeFunction : global::psidev.info.gelml.VolumeParameter, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceVolumeFunctionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VolumeFunction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator VolumeFunction(XElement xe) { return XTypedServices.ToXTypedElement<VolumeFunction, GelMLSelectSubstanceVolumeFunctionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  VolumeFunction represents a specification of a volume that changes, for
        ///    example, over time. The value provided for a VolumeFunction should use the ComplexValue
        ///    specification to represent the function. 
        /// </para>
        /// </summary>
        public VolumeFunction() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceVolumeFunctionType());
        }
        
        /// <summary>
        /// <para>
        ///  VolumeFunction represents a specification of a volume that changes, for
        ///    example, over time. The value provided for a VolumeFunction should use the ComplexValue
        ///    specification to represent the function. 
        /// </para>
        /// </summary>
        public VolumeFunction(GelMLSelectSubstanceVolumeFunctionType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceVolumeFunctionType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static VolumeFunction Load(string xmlFile) {
            return XTypedServices.Load<VolumeFunction, GelMLSelectSubstanceVolumeFunctionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static VolumeFunction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VolumeFunction, GelMLSelectSubstanceVolumeFunctionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static VolumeFunction Parse(string xml) {
            return XTypedServices.Parse<VolumeFunction, GelMLSelectSubstanceVolumeFunctionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new VolumeFunction(((GelMLSelectSubstanceVolumeFunctionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceVolumeFunctionType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceVolumeFunctionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An absolute volume parameter. 
    /// </para>
    /// </summary>
    public partial class AbsoluteVolume : global::psidev.info.gelml.VolumeParameter, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceAbsoluteVolumeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbsoluteVolume", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator AbsoluteVolume(XElement xe) { return XTypedServices.ToXTypedElement<AbsoluteVolume, GelMLSelectSubstanceAbsoluteVolumeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An absolute volume parameter. 
        /// </para>
        /// </summary>
        public AbsoluteVolume() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceAbsoluteVolumeType());
        }
        
        /// <summary>
        /// <para>
        ///  An absolute volume parameter. 
        /// </para>
        /// </summary>
        public AbsoluteVolume(GelMLSelectSubstanceAbsoluteVolumeType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceAbsoluteVolumeType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static AbsoluteVolume Load(string xmlFile) {
            return XTypedServices.Load<AbsoluteVolume, GelMLSelectSubstanceAbsoluteVolumeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AbsoluteVolume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AbsoluteVolume, GelMLSelectSubstanceAbsoluteVolumeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static AbsoluteVolume Parse(string xml) {
            return XTypedServices.Parse<AbsoluteVolume, GelMLSelectSubstanceAbsoluteVolumeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AbsoluteVolume(((GelMLSelectSubstanceAbsoluteVolumeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceAbsoluteVolumeType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceAbsoluteVolumeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the different formats for representing the
    ///    volume of a substance. 
    /// </para>
    /// </summary>
    public abstract partial class VolumeParameter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceVolumeParameterType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator VolumeParameter(XElement xe) {  return (VolumeParameter)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected VolumeParameter(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different formats for representing the
        ///    volume of a substance. 
        /// </para>
        /// </summary>
        public VolumeParameter() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different formats for representing the
        ///    volume of a substance. 
        /// </para>
        /// </summary>
        public VolumeParameter(GelMLSelectSubstanceVolumeParameterType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLSelectSubstanceVolumeParameterType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VolumeParameter Load(string xmlFile) {
            return ((VolumeParameter)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static VolumeParameter Load(System.IO.TextReader xmlFile) {
            return ((VolumeParameter)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static VolumeParameter Parse(string xml) {
            return ((VolumeParameter)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLSelectSubstanceVolumeParameterType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceVolumeParameterType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLSelectSubstanceVolumeParameterType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action representing the use of a substance within a protocol. The
    ///    substance can be named by free text or using the substanceType association. The attribute
    ///    actionText can be used to specify how the substance has been used within the protocol.
    ///   
    /// </para>
    /// </summary>
    public partial class SubstanceAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceSubstanceActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SubstanceAction(XElement xe) {  return (SubstanceAction)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected SubstanceAction(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  An action representing the use of a substance within a protocol. The
        ///    substance can be named by free text or using the substanceType association. The attribute
        ///    actionText can be used to specify how the substance has been used within the protocol.
        ///   
        /// </para>
        /// </summary>
        public SubstanceAction() {
            SetInnerType(new GelMLSelectSubstanceSubstanceActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action representing the use of a substance within a protocol. The
        ///    substance can be named by free text or using the substanceType association. The attribute
        ///    actionText can be used to specify how the substance has been used within the protocol.
        ///   
        /// </para>
        /// </summary>
        public SubstanceAction(GelMLSelectSubstanceSubstanceActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLSelectSubstanceSubstanceActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual Concentration Concentration {
            get {
                return this.ContentField.Concentration;
            }
            set {
                this.ContentField.Concentration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual Mass Mass {
            get {
                return this.ContentField.Mass;
            }
            set {
                this.ContentField.Mass = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The characteristics of the substance. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLSelectSubstanceSubstanceActionType.substanceCharacteristicsLocalType> substanceCharacteristics {
            get {
                return this.ContentField.substanceCharacteristics;
            }
            set {
                this.ContentField.substanceCharacteristics = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of substance, if the substance name has not been given as free text
        ///        in the SubstanceAction. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual ParamType substanceType {
            get {
                return this.ContentField.substanceType;
            }
            set {
                this.ContentField.substanceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: VolumeParameter, RelativeVolume, VolumeFunction, AbsoluteVolume
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?)
        /// </para>
        /// </summary>
        public virtual VolumeParameter VolumeParameter {
            get {
                return this.ContentField.VolumeParameter;
            }
            set {
                this.ContentField.VolumeParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the substance given as free text. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string substanceName {
            get {
                return this.ContentField.substanceName;
            }
            set {
                this.ContentField.substanceName = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A specification of the use of the substance within the parent protocol.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actionText {
            get {
                return this.ContentField.actionText;
            }
            set {
                this.ContentField.actionText = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SubstanceAction Load(string xmlFile) {
            return ((SubstanceAction)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static SubstanceAction Load(System.IO.TextReader xmlFile) {
            return ((SubstanceAction)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static SubstanceAction Parse(string xml) {
            return ((SubstanceAction)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new SubstanceAction(((GelMLSelectSubstanceSubstanceActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceSubstanceActionType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceSubstanceActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLSelectSubstanceSubstanceActionType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The use of a substance within a protocol at a particular time point or for a
    ///    particular duration. 
    /// </para>
    /// </summary>
    public partial class TemporalSubstanceAction : global::psidev.info.gelml.SubstanceAction, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceTemporalSubstanceActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TemporalSubstanceAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator TemporalSubstanceAction(XElement xe) { return XTypedServices.ToXTypedElement<TemporalSubstanceAction, GelMLSelectSubstanceTemporalSubstanceActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The use of a substance within a protocol at a particular time point or for a
        ///    particular duration. 
        /// </para>
        /// </summary>
        public TemporalSubstanceAction() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceTemporalSubstanceActionType());
        }
        
        /// <summary>
        /// <para>
        ///  The use of a substance within a protocol at a particular time point or for a
        ///    particular duration. 
        /// </para>
        /// </summary>
        public TemporalSubstanceAction(GelMLSelectSubstanceTemporalSubstanceActionType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceTemporalSubstanceActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: TimeParameter, Duration, TimePoint
        /// </para>
        /// <para>
        /// Regular expression: (Concentration?, Mass?, substanceCharacteristics*, substanceType?, VolumeParameter?, TimeParameter)
        /// </para>
        /// </summary>
        public virtual TimeParameter TimeParameter {
            get {
                return this.ContentField.TimeParameter;
            }
            set {
                this.ContentField.TimeParameter = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static TemporalSubstanceAction Load(string xmlFile) {
            return XTypedServices.Load<TemporalSubstanceAction, GelMLSelectSubstanceTemporalSubstanceActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TemporalSubstanceAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TemporalSubstanceAction, GelMLSelectSubstanceTemporalSubstanceActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static TemporalSubstanceAction Parse(string xml) {
            return XTypedServices.Parse<TemporalSubstanceAction, GelMLSelectSubstanceTemporalSubstanceActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TemporalSubstanceAction(((GelMLSelectSubstanceTemporalSubstanceActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceTemporalSubstanceActionType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceTemporalSubstanceActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Protocol representing the creation of a mixture of substances, for example
    ///    to be used for specifying the components of buffers, solutions etc. If the actionText attribute
    ///    of SubtanceAction is not used, the SubstanceMixtureProtocol represents only the components of
    ///    the mixture and not the processes applied to them. 
    /// </para>
    /// </summary>
    public partial class SubstanceMixtureProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceSubstanceMixtureProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SubstanceMixtureProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SubstanceMixtureProtocol(XElement xe) { return XTypedServices.ToXTypedElement<SubstanceMixtureProtocol, GelMLSelectSubstanceSubstanceMixtureProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A Protocol representing the creation of a mixture of substances, for example
        ///    to be used for specifying the components of buffers, solutions etc. If the actionText attribute
        ///    of SubtanceAction is not used, the SubstanceMixtureProtocol represents only the components of
        ///    the mixture and not the processes applied to them. 
        /// </para>
        /// </summary>
        public SubstanceMixtureProtocol() {
            SetInnerType(new GelMLSelectSubstanceSubstanceMixtureProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A Protocol representing the creation of a mixture of substances, for example
        ///    to be used for specifying the components of buffers, solutions etc. If the actionText attribute
        ///    of SubtanceAction is not used, the SubstanceMixtureProtocol represents only the components of
        ///    the mixture and not the processes applied to them. 
        /// </para>
        /// </summary>
        public SubstanceMixtureProtocol(GelMLSelectSubstanceSubstanceMixtureProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSelectSubstanceSubstanceMixtureProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Substitution members: SubstanceAction, TemporalSubstanceAction
        /// </para>
        /// <para>
        /// Regular expression: (SubstanceAction+, mixtureType?)
        /// </para>
        /// </summary>
        public virtual IList<SubstanceAction> SubstanceAction {
            get {
                return this.ContentField.SubstanceAction;
            }
            set {
                this.ContentField.SubstanceAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of mixture e.g. buffer, solution, protein complex etc.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SubstanceAction+, mixtureType?)
        /// </para>
        /// </summary>
        public virtual ParamType mixtureType {
            get {
                return this.ContentField.mixtureType;
            }
            set {
                this.ContentField.mixtureType = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the mixture represented by this protocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mixtureName {
            get {
                return this.ContentField.mixtureName;
            }
            set {
                this.ContentField.mixtureName = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SubstanceMixtureProtocol Load(string xmlFile) {
            return XTypedServices.Load<SubstanceMixtureProtocol, GelMLSelectSubstanceSubstanceMixtureProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SubstanceMixtureProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SubstanceMixtureProtocol, GelMLSelectSubstanceSubstanceMixtureProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SubstanceMixtureProtocol Parse(string xml) {
            return XTypedServices.Parse<SubstanceMixtureProtocol, GelMLSelectSubstanceSubstanceMixtureProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SubstanceMixtureProtocol(((GelMLSelectSubstanceSubstanceMixtureProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceSubstanceMixtureProtocolType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceSubstanceMixtureProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A duration parameter. Note: values for absolute or relative time can be
    ///    specified using the Parameter DefaultValue model. 
    /// </para>
    /// </summary>
    public partial class Duration : global::psidev.info.gelml.TimeParameter, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceDurationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Duration", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Duration(XElement xe) { return XTypedServices.ToXTypedElement<Duration, GelMLSelectSubstanceDurationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A duration parameter. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// </summary>
        public Duration() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceDurationType());
        }
        
        /// <summary>
        /// <para>
        ///  A duration parameter. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// </summary>
        public Duration(GelMLSelectSubstanceDurationType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceDurationType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Duration Load(string xmlFile) {
            return XTypedServices.Load<Duration, GelMLSelectSubstanceDurationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Duration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Duration, GelMLSelectSubstanceDurationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Duration Parse(string xml) {
            return XTypedServices.Parse<Duration, GelMLSelectSubstanceDurationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Duration(((GelMLSelectSubstanceDurationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceDurationType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceDurationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single time point. Note: values for absolute or relative time can be
    ///    specified using the Parameter DefaultValue model. 
    /// </para>
    /// </summary>
    public partial class TimePoint : global::psidev.info.gelml.TimeParameter, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceTimePointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimePoint", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator TimePoint(XElement xe) { return XTypedServices.ToXTypedElement<TimePoint, GelMLSelectSubstanceTimePointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single time point. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// </summary>
        public TimePoint() : 
                base(true) {
            SetInnerType(new GelMLSelectSubstanceTimePointType());
        }
        
        /// <summary>
        /// <para>
        ///  A single time point. Note: values for absolute or relative time can be
        ///    specified using the Parameter DefaultValue model. 
        /// </para>
        /// </summary>
        public TimePoint(GelMLSelectSubstanceTimePointType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLSelectSubstanceTimePointType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static TimePoint Load(string xmlFile) {
            return XTypedServices.Load<TimePoint, GelMLSelectSubstanceTimePointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TimePoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TimePoint, GelMLSelectSubstanceTimePointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static TimePoint Parse(string xml) {
            return XTypedServices.Parse<TimePoint, GelMLSelectSubstanceTimePointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TimePoint(((GelMLSelectSubstanceTimePointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceTimePointType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceTimePointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing Duration and TimePoints.
    ///   
    /// </para>
    /// </summary>
    public abstract partial class TimeParameter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceTimeParameterType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimeParameter", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator TimeParameter(XElement xe) {  return (TimeParameter)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected TimeParameter(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing Duration and TimePoints.
        ///   
        /// </para>
        /// </summary>
        public TimeParameter() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing Duration and TimePoints.
        ///   
        /// </para>
        /// </summary>
        public TimeParameter(GelMLSelectSubstanceTimeParameterType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLSelectSubstanceTimeParameterType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TimeParameter Load(string xmlFile) {
            return ((TimeParameter)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static TimeParameter Load(System.IO.TextReader xmlFile) {
            return ((TimeParameter)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static TimeParameter Parse(string xml) {
            return ((TimeParameter)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLSelectSubstanceTimeParameterType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceTimeParameterType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLSelectSubstanceTimeParameterType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Concentration of a substance. 
    /// </para>
    /// </summary>
    public partial class Concentration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceConcentrationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Concentration", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Concentration(XElement xe) { return XTypedServices.ToXTypedElement<Concentration, GelMLSelectSubstanceConcentrationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The Concentration of a substance. 
        /// </para>
        /// </summary>
        public Concentration() {
            SetInnerType(new GelMLSelectSubstanceConcentrationType());
        }
        
        /// <summary>
        /// <para>
        ///  The Concentration of a substance. 
        /// </para>
        /// </summary>
        public Concentration(GelMLSelectSubstanceConcentrationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSelectSubstanceConcentrationType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Concentration Load(string xmlFile) {
            return XTypedServices.Load<Concentration, GelMLSelectSubstanceConcentrationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Concentration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Concentration, GelMLSelectSubstanceConcentrationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Concentration Parse(string xml) {
            return XTypedServices.Parse<Concentration, GelMLSelectSubstanceConcentrationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Concentration(((GelMLSelectSubstanceConcentrationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceConcentrationType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceConcentrationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The mass of a substance. 
    /// </para>
    /// </summary>
    public partial class Mass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSelectSubstanceMassType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Mass", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Mass(XElement xe) { return XTypedServices.ToXTypedElement<Mass, GelMLSelectSubstanceMassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The mass of a substance. 
        /// </para>
        /// </summary>
        public Mass() {
            SetInnerType(new GelMLSelectSubstanceMassType());
        }
        
        /// <summary>
        /// <para>
        ///  The mass of a substance. 
        /// </para>
        /// </summary>
        public Mass(GelMLSelectSubstanceMassType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSelectSubstanceMassType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Mass Load(string xmlFile) {
            return XTypedServices.Load<Mass, GelMLSelectSubstanceMassType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Mass Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Mass, GelMLSelectSubstanceMassType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Mass Parse(string xml) {
            return XTypedServices.Parse<Mass, GelMLSelectSubstanceMassType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Mass(((GelMLSelectSubstanceMassType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSelectSubstanceMassType ContentField) {
            this.ContentField = ((GelMLSelectSubstanceMassType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2D is the material produced from a Gel2DApplication representing the
    ///    combination of the two gel substrates and the proteins that have been separated.
    ///   
    /// </para>
    /// </summary>
    public partial class Gel2D : global::psidev.info.gelml.ElectrophoresedGel, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolGel2DType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel2D", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel2D(XElement xe) { return XTypedServices.ToXTypedElement<Gel2D, GelMLGel2DProtocolGel2DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Gel2D is the material produced from a Gel2DApplication representing the
        ///    combination of the two gel substrates and the proteins that have been separated.
        ///   
        /// </para>
        /// </summary>
        public Gel2D() : 
                base(true) {
            SetInnerType(new GelMLGel2DProtocolGel2DType());
        }
        
        /// <summary>
        /// <para>
        ///  Gel2D is the material produced from a Gel2DApplication representing the
        ///    combination of the two gel substrates and the proteins that have been separated.
        ///   
        /// </para>
        /// </summary>
        public Gel2D(GelMLGel2DProtocolGel2DType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGel2DProtocolGel2DType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Gel2D Load(string xmlFile) {
            return XTypedServices.Load<Gel2D, GelMLGel2DProtocolGel2DType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2D Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel2D, GelMLGel2DProtocolGel2DType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Gel2D Parse(string xml) {
            return XTypedServices.Parse<Gel2D, GelMLGel2DProtocolGel2DType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel2D(((GelMLGel2DProtocolGel2DType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolGel2DType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolGel2DType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing the procedure of 2D gel electrophoresis.
    ///   
    /// </para>
    /// </summary>
    public partial class Gel2DProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolGel2DProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel2DProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel2DProtocol(XElement xe) { return XTypedServices.ToXTypedElement<Gel2DProtocol, GelMLGel2DProtocolGel2DProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 2D gel electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public Gel2DProtocol() {
            SetInnerType(new GelMLGel2DProtocolGel2DProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 2D gel electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public Gel2DProtocol(GelMLGel2DProtocolGel2DProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel2DProtocolGel2DProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                return this.ContentField.SampleLoadingAction;
            }
            set {
                this.ContentField.SampleLoadingAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual FirstDimensionAction FirstDimensionAction {
            get {
                return this.ContentField.FirstDimensionAction;
            }
            set {
                this.ContentField.FirstDimensionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual SecondDimensionAction SecondDimensionAction {
            get {
                return this.ContentField.SecondDimensionAction;
            }
            set {
                this.ContentField.SecondDimensionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<InterDimensionAction> InterDimensionAction {
            get {
                return this.ContentField.InterDimensionAction;
            }
            set {
                this.ContentField.InterDimensionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, FirstDimensionAction, SecondDimensionAction, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                return this.ContentField.DetectionAction;
            }
            set {
                this.ContentField.DetectionAction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gel2DProtocol Load(string xmlFile) {
            return XTypedServices.Load<Gel2DProtocol, GelMLGel2DProtocolGel2DProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2DProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel2DProtocol, GelMLGel2DProtocolGel2DProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2DProtocol Parse(string xml) {
            return XTypedServices.Parse<Gel2DProtocol, GelMLGel2DProtocolGel2DProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel2DProtocol(((GelMLGel2DProtocolGel2DProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolGel2DProtocolType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolGel2DProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel2DApplication is the application of a Gel2DProtocol. An instance of
    ///    Gel2DApplication should reference SampleLoadingApplication, ElectrophoresisApplication,
    ///    DetectionApplications and GenericProtocolApplication as its sub-steps, as defined by the
    ///    referenced Gel2DProtocol. 
    /// </para>
    /// </summary>
    public partial class Gel2DApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolGel2DApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel2DApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel2DApplication(XElement xe) { return XTypedServices.ToXTypedElement<Gel2DApplication, GelMLGel2DProtocolGel2DApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Gel2DApplication is the application of a Gel2DProtocol. An instance of
        ///    Gel2DApplication should reference SampleLoadingApplication, ElectrophoresisApplication,
        ///    DetectionApplications and GenericProtocolApplication as its sub-steps, as defined by the
        ///    referenced Gel2DProtocol. 
        /// </para>
        /// </summary>
        public Gel2DApplication() {
            SetInnerType(new GelMLGel2DProtocolGel2DApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  Gel2DApplication is the application of a Gel2DProtocol. An instance of
        ///    Gel2DApplication should reference SampleLoadingApplication, ElectrophoresisApplication,
        ///    DetectionApplications and GenericProtocolApplication as its sub-steps, as defined by the
        ///    referenced Gel2DProtocol. 
        /// </para>
        /// </summary>
        public Gel2DApplication(GelMLGel2DProtocolGel2DApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel2DProtocolGel2DApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the Gel on which the first dimension separation is
        ///        performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType.inputFirstDimensionLocalType inputFirstDimension {
            get {
                return this.ContentField.inputFirstDimension;
            }
            set {
                this.ContentField.inputFirstDimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Reference to the Gel on which the second dimension separation is
        ///        performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType.inputSecondDimensionLocalType inputSecondDimension {
            get {
                return this.ContentField.inputSecondDimension;
            }
            set {
                this.ContentField.inputSecondDimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType.outputLocalType output {
            get {
                return this.ContentField.output;
            }
            set {
                this.ContentField.output = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputFirstDimension, inputSecondDimension, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType.ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                return this.ContentField.ChildProtocolApplications;
            }
            set {
                this.ContentField.ChildProtocolApplications = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Gel2DProtocol that has been run. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel2DProtocol_ref {
            get {
                return this.ContentField.Gel2DProtocol_ref;
            }
            set {
                this.ContentField.Gel2DProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gel2DApplication Load(string xmlFile) {
            return XTypedServices.Load<Gel2DApplication, GelMLGel2DProtocolGel2DApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2DApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel2DApplication, GelMLGel2DProtocolGel2DApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel2DApplication Parse(string xml) {
            return XTypedServices.Parse<Gel2DApplication, GelMLGel2DProtocolGel2DApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel2DApplication(((GelMLGel2DProtocolGel2DApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolGel2DApplicationType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolGel2DApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class FirstDimensionAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolFirstDimensionActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FirstDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FirstDimensionAction(XElement xe) { return XTypedServices.ToXTypedElement<FirstDimensionAction, GelMLGel2DProtocolFirstDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public FirstDimensionAction() {
            SetInnerType(new GelMLGel2DProtocolFirstDimensionActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public FirstDimensionAction(GelMLGel2DProtocolFirstDimensionActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel2DProtocolFirstDimensionActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in the first dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                return this.ContentField.ElectrophoresisProtocol_ref;
            }
            set {
                this.ContentField.ElectrophoresisProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FirstDimensionAction Load(string xmlFile) {
            return XTypedServices.Load<FirstDimensionAction, GelMLGel2DProtocolFirstDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FirstDimensionAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FirstDimensionAction, GelMLGel2DProtocolFirstDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static FirstDimensionAction Parse(string xml) {
            return XTypedServices.Parse<FirstDimensionAction, GelMLGel2DProtocolFirstDimensionActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new FirstDimensionAction(((GelMLGel2DProtocolFirstDimensionActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolFirstDimensionActionType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolFirstDimensionActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class SecondDimensionAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolSecondDimensionActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SecondDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SecondDimensionAction(XElement xe) { return XTypedServices.ToXTypedElement<SecondDimensionAction, GelMLGel2DProtocolSecondDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public SecondDimensionAction() {
            SetInnerType(new GelMLGel2DProtocolSecondDimensionActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public SecondDimensionAction(GelMLGel2DProtocolSecondDimensionActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel2DProtocolSecondDimensionActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in the second dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                return this.ContentField.ElectrophoresisProtocol_ref;
            }
            set {
                this.ContentField.ElectrophoresisProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SecondDimensionAction Load(string xmlFile) {
            return XTypedServices.Load<SecondDimensionAction, GelMLGel2DProtocolSecondDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SecondDimensionAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SecondDimensionAction, GelMLGel2DProtocolSecondDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SecondDimensionAction Parse(string xml) {
            return XTypedServices.Parse<SecondDimensionAction, GelMLGel2DProtocolSecondDimensionActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SecondDimensionAction(((GelMLGel2DProtocolSecondDimensionActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolSecondDimensionActionType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolSecondDimensionActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced DetectionProtocol, with
    ///    respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class DetectionAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel2DProtocolDetectionActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DetectionAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DetectionAction(XElement xe) { return XTypedServices.ToXTypedElement<DetectionAction, GelMLGel2DProtocolDetectionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced DetectionProtocol, with
        ///    respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public DetectionAction() {
            SetInnerType(new GelMLGel2DProtocolDetectionActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced DetectionProtocol, with
        ///    respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public DetectionAction(GelMLGel2DProtocolDetectionActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel2DProtocolDetectionActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (dimension?)
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                return this.ContentField.dimension;
            }
            set {
                this.ContentField.dimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The DetectionProtocol referenced from this Action. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string DetectionProtocol_ref {
            get {
                return this.ContentField.DetectionProtocol_ref;
            }
            set {
                this.ContentField.DetectionProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DetectionAction Load(string xmlFile) {
            return XTypedServices.Load<DetectionAction, GelMLGel2DProtocolDetectionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DetectionAction, GelMLGel2DProtocolDetectionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionAction Parse(string xml) {
            return XTypedServices.Parse<DetectionAction, GelMLGel2DProtocolDetectionActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DetectionAction(((GelMLGel2DProtocolDetectionActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel2DProtocolDetectionActionType ContentField) {
            this.ContentField = ((GelMLGel2DProtocolDetectionActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Gel1D is the material produced from a Gel1DApplication representing the
    ///    combination of the gel substrate with the proteins that have been separated. Gel1D should be
    ///    referenced by a DetectionApplication to describe any detection agents that have been applied.
    ///   
    /// </para>
    /// </summary>
    public partial class Gel1D : global::psidev.info.gelml.ElectrophoresedGel, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel1DProtocolGel1DType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel1D", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel1D(XElement xe) { return XTypedServices.ToXTypedElement<Gel1D, GelMLGel1DProtocolGel1DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Gel1D is the material produced from a Gel1DApplication representing the
        ///    combination of the gel substrate with the proteins that have been separated. Gel1D should be
        ///    referenced by a DetectionApplication to describe any detection agents that have been applied.
        ///   
        /// </para>
        /// </summary>
        public Gel1D() : 
                base(true) {
            SetInnerType(new GelMLGel1DProtocolGel1DType());
        }
        
        /// <summary>
        /// <para>
        ///  Gel1D is the material produced from a Gel1DApplication representing the
        ///    combination of the gel substrate with the proteins that have been separated. Gel1D should be
        ///    referenced by a DetectionApplication to describe any detection agents that have been applied.
        ///   
        /// </para>
        /// </summary>
        public Gel1D(GelMLGel1DProtocolGel1DType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGel1DProtocolGel1DType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Gel1D Load(string xmlFile) {
            return XTypedServices.Load<Gel1D, GelMLGel1DProtocolGel1DType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1D Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel1D, GelMLGel1DProtocolGel1DType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Gel1D Parse(string xml) {
            return XTypedServices.Parse<Gel1D, GelMLGel1DProtocolGel1DType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel1D(((GelMLGel1DProtocolGel1DType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel1DProtocolGel1DType ContentField) {
            this.ContentField = ((GelMLGel1DProtocolGel1DType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The application of a Gel1DProtocol. Gel1DApplication should reference (via
    ///    ActionApplication) SampleLoadingApplication, ElectrophoresisApplication and DetectionApplication
    ///    matching the structure of the referenced Gel1DProtocol. 
    /// </para>
    /// </summary>
    public partial class Gel1DApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel1DProtocolGel1DApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel1DApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel1DApplication(XElement xe) { return XTypedServices.ToXTypedElement<Gel1DApplication, GelMLGel1DProtocolGel1DApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The application of a Gel1DProtocol. Gel1DApplication should reference (via
        ///    ActionApplication) SampleLoadingApplication, ElectrophoresisApplication and DetectionApplication
        ///    matching the structure of the referenced Gel1DProtocol. 
        /// </para>
        /// </summary>
        public Gel1DApplication() {
            SetInnerType(new GelMLGel1DProtocolGel1DApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  The application of a Gel1DProtocol. Gel1DApplication should reference (via
        ///    ActionApplication) SampleLoadingApplication, ElectrophoresisApplication and DetectionApplication
        ///    matching the structure of the referenced Gel1DProtocol. 
        /// </para>
        /// </summary>
        public Gel1DApplication(GelMLGel1DProtocolGel1DApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel1DProtocolGel1DApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel material on which this Gel1DProtocol acts. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel1DProtocolGel1DApplicationType.inputGelLocalType inputGel {
            get {
                return this.ContentField.inputGel;
            }
            set {
                this.ContentField.inputGel = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel1DProtocolGel1DApplicationType.outputLocalType output {
            get {
                return this.ContentField.output;
            }
            set {
                this.ContentField.output = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGel, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGel1DProtocolGel1DApplicationType.ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                return this.ContentField.ChildProtocolApplications;
            }
            set {
                this.ContentField.ChildProtocolApplications = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol used in this Gel1DProtocolApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel1DProtocol_ref {
            get {
                return this.ContentField.Gel1DProtocol_ref;
            }
            set {
                this.ContentField.Gel1DProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gel1DApplication Load(string xmlFile) {
            return XTypedServices.Load<Gel1DApplication, GelMLGel1DProtocolGel1DApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1DApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel1DApplication, GelMLGel1DProtocolGel1DApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1DApplication Parse(string xml) {
            return XTypedServices.Parse<Gel1DApplication, GelMLGel1DProtocolGel1DApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel1DApplication(((GelMLGel1DProtocolGel1DApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel1DProtocolGel1DApplicationType ContentField) {
            this.ContentField = ((GelMLGel1DProtocolGel1DApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing the procedure of 1D gel electrophoresis.
    ///   
    /// </para>
    /// </summary>
    public partial class Gel1DProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGel1DProtocolGel1DProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel1DProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel1DProtocol(XElement xe) { return XTypedServices.ToXTypedElement<Gel1DProtocol, GelMLGel1DProtocolGel1DProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 1D gel electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public Gel1DProtocol() {
            SetInnerType(new GelMLGel1DProtocolGel1DProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing the procedure of 1D gel electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public Gel1DProtocol(GelMLGel1DProtocolGel1DProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGel1DProtocolGel1DProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                return this.ContentField.SampleLoadingAction;
            }
            set {
                this.ContentField.SampleLoadingAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual ElectrophoresisAction ElectrophoresisAction {
            get {
                return this.ContentField.ElectrophoresisAction;
            }
            set {
                this.ContentField.ElectrophoresisAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction+, ElectrophoresisAction, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                return this.ContentField.DetectionAction;
            }
            set {
                this.ContentField.DetectionAction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gel1DProtocol Load(string xmlFile) {
            return XTypedServices.Load<Gel1DProtocol, GelMLGel1DProtocolGel1DProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1DProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel1DProtocol, GelMLGel1DProtocolGel1DProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel1DProtocol Parse(string xml) {
            return XTypedServices.Parse<Gel1DProtocol, GelMLGel1DProtocolGel1DProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel1DProtocol(((GelMLGel1DProtocolGel1DProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGel1DProtocolGel1DProtocolType ContentField) {
            this.ContentField = ((GelMLGel1DProtocolGel1DProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of the referenced ElectrophoresisProtocol.
    ///   
    /// </para>
    /// </summary>
    public partial class ElectrophoresisApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLElectrophoresisElectrophoresisApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElectrophoresisApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ElectrophoresisApplication(XElement xe) { return XTypedServices.ToXTypedElement<ElectrophoresisApplication, GelMLElectrophoresisElectrophoresisApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An application of the referenced ElectrophoresisProtocol.
        ///   
        /// </para>
        /// </summary>
        public ElectrophoresisApplication() {
            SetInnerType(new GelMLElectrophoresisElectrophoresisApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  An application of the referenced ElectrophoresisProtocol.
        ///   
        /// </para>
        /// </summary>
        public ElectrophoresisApplication(GelMLElectrophoresisElectrophoresisApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLElectrophoresisElectrophoresisApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol that is applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                return this.ContentField.ElectrophoresisProtocol_ref;
            }
            set {
                this.ContentField.ElectrophoresisProtocol_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Gel on which Electrophoresis takes place. The referenced gels must be one of the gels
        ///        associated as inputs to Gel1DApplication, Gel2DApplication or OtherGelApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel_ref {
            get {
                return this.ContentField.Gel_ref;
            }
            set {
                this.ContentField.Gel_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ElectrophoresisApplication Load(string xmlFile) {
            return XTypedServices.Load<ElectrophoresisApplication, GelMLElectrophoresisElectrophoresisApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ElectrophoresisApplication, GelMLElectrophoresisElectrophoresisApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisApplication Parse(string xml) {
            return XTypedServices.Parse<ElectrophoresisApplication, GelMLElectrophoresisElectrophoresisApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ElectrophoresisApplication(((GelMLElectrophoresisElectrophoresisApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLElectrophoresisElectrophoresisApplicationType ContentField) {
            this.ContentField = ((GelMLElectrophoresisElectrophoresisApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The medium on which proteins are detected in processes such as
    ///    autoradiography (example photographic film). The type of material should be captured by the
    ///    inherited MaterialType association. 
    /// </para>
    /// </summary>
    public partial class DetectionMedium : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionDetectionMediumType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DetectionMedium", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DetectionMedium(XElement xe) { return XTypedServices.ToXTypedElement<DetectionMedium, GelMLDetectionDetectionMediumType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The medium on which proteins are detected in processes such as
        ///    autoradiography (example photographic film). The type of material should be captured by the
        ///    inherited MaterialType association. 
        /// </para>
        /// </summary>
        public DetectionMedium() {
            SetInnerType(new GelMLDetectionDetectionMediumType());
        }
        
        /// <summary>
        /// <para>
        ///  The medium on which proteins are detected in processes such as
        ///    autoradiography (example photographic film). The type of material should be captured by the
        ///    inherited MaterialType association. 
        /// </para>
        /// </summary>
        public DetectionMedium(GelMLDetectionDetectionMediumType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLDetectionDetectionMediumType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DetectionMedium Load(string xmlFile) {
            return XTypedServices.Load<DetectionMedium, GelMLDetectionDetectionMediumType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionMedium Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DetectionMedium, GelMLDetectionDetectionMediumType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionMedium Parse(string xml) {
            return XTypedServices.Parse<DetectionMedium, GelMLDetectionDetectionMediumType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DetectionMedium(((GelMLDetectionDetectionMediumType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLDetectionDetectionMediumType ContentField) {
            this.ContentField = ((GelMLDetectionDetectionMediumType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The process by which proteins are to be detected on a gel, either by a direct
    ///    process e.g. staining or by an indirect process e.g. Western blot. The type of protocol should
    ///    be specified using the types association inherited from Protocol 
    /// </para>
    /// </summary>
    public partial class DetectionProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionDetectionProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DetectionProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DetectionProtocol(XElement xe) { return XTypedServices.ToXTypedElement<DetectionProtocol, GelMLDetectionDetectionProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The process by which proteins are to be detected on a gel, either by a direct
        ///    process e.g. staining or by an indirect process e.g. Western blot. The type of protocol should
        ///    be specified using the types association inherited from Protocol 
        /// </para>
        /// </summary>
        public DetectionProtocol() {
            SetInnerType(new GelMLDetectionDetectionProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  The process by which proteins are to be detected on a gel, either by a direct
        ///    process e.g. staining or by an indirect process e.g. Western blot. The type of protocol should
        ///    be specified using the types association inherited from Protocol 
        /// </para>
        /// </summary>
        public DetectionProtocol(GelMLDetectionDetectionProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLDetectionDetectionProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The text of the detection protocol. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                return this.ContentField.protocolText;
            }
            set {
                this.ContentField.protocolText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<ParamType> DetectionAgent {
            get {
                return this.ContentField.DetectionAgent;
            }
            set {
                this.ContentField.DetectionAgent = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used in the DetectionProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLDetectionDetectionProtocolType.detectionEquipmentLocalType> detectionEquipment {
            get {
                return this.ContentField.detectionEquipment;
            }
            set {
                this.ContentField.detectionEquipment = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, DetectionAgent+, detectionEquipment*, AddBufferAction*)
        /// </para>
        /// </summary>
        public virtual IList<AddBufferAction> AddBufferAction {
            get {
                return this.ContentField.AddBufferAction;
            }
            set {
                this.ContentField.AddBufferAction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DetectionProtocol Load(string xmlFile) {
            return XTypedServices.Load<DetectionProtocol, GelMLDetectionDetectionProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DetectionProtocol, GelMLDetectionDetectionProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DetectionProtocol Parse(string xml) {
            return XTypedServices.Parse<DetectionProtocol, GelMLDetectionDetectionProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DetectionProtocol(((GelMLDetectionDetectionProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLDetectionDetectionProtocolType ContentField) {
            this.ContentField = ((GelMLDetectionDetectionProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass to represent applications of a DetectionProtocol. Its
    ///    subclasses DirectDetection and IndirectDetection capture the application of the procedure. If
    ///    two stainings are done, the destaining should be the first stage of the second staining process,
    ///    as represented in the DetectionProtocol. 
    /// </para>
    /// </summary>
    public abstract partial class DetectionApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionDetectionApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DetectionApplication(XElement xe) {  return (DetectionApplication)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected DetectionApplication(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass to represent applications of a DetectionProtocol. Its
        ///    subclasses DirectDetection and IndirectDetection capture the application of the procedure. If
        ///    two stainings are done, the destaining should be the first stage of the second staining process,
        ///    as represented in the DetectionProtocol. 
        /// </para>
        /// </summary>
        public DetectionApplication() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass to represent applications of a DetectionProtocol. Its
        ///    subclasses DirectDetection and IndirectDetection capture the application of the procedure. If
        ///    two stainings are done, the destaining should be the first stage of the second staining process,
        ///    as represented in the DetectionProtocol. 
        /// </para>
        /// </summary>
        public DetectionApplication(GelMLDetectionDetectionApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLDetectionDetectionApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The DetectionProtocol that has been run. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string DetectionProtocol_ref {
            get {
                return this.ContentField.DetectionProtocol_ref;
            }
            set {
                this.ContentField.DetectionProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DetectionApplication Load(string xmlFile) {
            return ((DetectionApplication)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static DetectionApplication Load(System.IO.TextReader xmlFile) {
            return ((DetectionApplication)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static DetectionApplication Parse(string xml) {
            return ((DetectionApplication)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLDetectionDetectionApplicationType ContentField) {
            this.ContentField = ((GelMLDetectionDetectionApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLDetectionDetectionApplicationType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  DirectDetection represents the application of a DetectionProtocol in which a
    ///    detection agent (stain or label) is applied directly to a gel. 
    /// </para>
    /// </summary>
    public partial class DirectDetection : global::psidev.info.gelml.DetectionApplication, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionDirectDetectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DirectDetection(XElement xe) { return XTypedServices.ToXTypedElement<DirectDetection, GelMLDetectionDirectDetectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  DirectDetection represents the application of a DetectionProtocol in which a
        ///    detection agent (stain or label) is applied directly to a gel. 
        /// </para>
        /// </summary>
        public DirectDetection() : 
                base(true) {
            SetInnerType(new GelMLDetectionDirectDetectionType());
        }
        
        /// <summary>
        /// <para>
        ///  DirectDetection represents the application of a DetectionProtocol in which a
        ///    detection agent (stain or label) is applied directly to a gel. 
        /// </para>
        /// </summary>
        public DirectDetection(GelMLDetectionDirectDetectionType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLDetectionDirectDetectionType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static DirectDetection Load(string xmlFile) {
            return XTypedServices.Load<DirectDetection, GelMLDetectionDirectDetectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DirectDetection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DirectDetection, GelMLDetectionDirectDetectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static DirectDetection Parse(string xml) {
            return XTypedServices.Parse<DirectDetection, GelMLDetectionDirectDetectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DirectDetection(((GelMLDetectionDirectDetectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLDetectionDirectDetectionType ContentField) {
            this.ContentField = ((GelMLDetectionDirectDetectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  IndirectDetection represents the application of a DetectionProtocol in which
    ///    a detection agent (stain or label) is applied to a TransferMedium (e.g. a membrane) following
    ///    proteins being transfered from a gel. Subsequently, the proteins may be detected on a
    ///    DetectionMedium, such as photographic film. 
    /// </para>
    /// </summary>
    public partial class IndirectDetection : global::psidev.info.gelml.DetectionApplication, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionIndirectDetectionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator IndirectDetection(XElement xe) { return XTypedServices.ToXTypedElement<IndirectDetection, GelMLDetectionIndirectDetectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  IndirectDetection represents the application of a DetectionProtocol in which
        ///    a detection agent (stain or label) is applied to a TransferMedium (e.g. a membrane) following
        ///    proteins being transfered from a gel. Subsequently, the proteins may be detected on a
        ///    DetectionMedium, such as photographic film. 
        /// </para>
        /// </summary>
        public IndirectDetection() : 
                base(true) {
            SetInnerType(new GelMLDetectionIndirectDetectionType());
        }
        
        /// <summary>
        /// <para>
        ///  IndirectDetection represents the application of a DetectionProtocol in which
        ///    a detection agent (stain or label) is applied to a TransferMedium (e.g. a membrane) following
        ///    proteins being transfered from a gel. Subsequently, the proteins may be detected on a
        ///    DetectionMedium, such as photographic film. 
        /// </para>
        /// </summary>
        public IndirectDetection(GelMLDetectionIndirectDetectionType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLDetectionIndirectDetectionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TransferMedium, DetectionMedium?)
        /// </para>
        /// </summary>
        public virtual TransferMedium TransferMedium {
            get {
                return this.ContentField.TransferMedium;
            }
            set {
                this.ContentField.TransferMedium = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TransferMedium, DetectionMedium?)
        /// </para>
        /// </summary>
        public virtual DetectionMedium DetectionMedium {
            get {
                return this.ContentField.DetectionMedium;
            }
            set {
                this.ContentField.DetectionMedium = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static IndirectDetection Load(string xmlFile) {
            return XTypedServices.Load<IndirectDetection, GelMLDetectionIndirectDetectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static IndirectDetection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<IndirectDetection, GelMLDetectionIndirectDetectionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static IndirectDetection Parse(string xml) {
            return XTypedServices.Parse<IndirectDetection, GelMLDetectionIndirectDetectionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new IndirectDetection(((GelMLDetectionIndirectDetectionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLDetectionIndirectDetectionType ContentField) {
            this.ContentField = ((GelMLDetectionIndirectDetectionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The medium proteins are transfered to during Indirect detection of proteins,
    ///    such as the membrane in a Western blot. The type of material should be captured by the inherited
    ///    MaterialType association. 
    /// </para>
    /// </summary>
    public partial class TransferMedium : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLDetectionTransferMediumType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransferMedium", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator TransferMedium(XElement xe) { return XTypedServices.ToXTypedElement<TransferMedium, GelMLDetectionTransferMediumType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The medium proteins are transfered to during Indirect detection of proteins,
        ///    such as the membrane in a Western blot. The type of material should be captured by the inherited
        ///    MaterialType association. 
        /// </para>
        /// </summary>
        public TransferMedium() {
            SetInnerType(new GelMLDetectionTransferMediumType());
        }
        
        /// <summary>
        /// <para>
        ///  The medium proteins are transfered to during Indirect detection of proteins,
        ///    such as the membrane in a Western blot. The type of material should be captured by the inherited
        ///    MaterialType association. 
        /// </para>
        /// </summary>
        public TransferMedium(GelMLDetectionTransferMediumType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLDetectionTransferMediumType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TransferMedium Load(string xmlFile) {
            return XTypedServices.Load<TransferMedium, GelMLDetectionTransferMediumType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TransferMedium Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TransferMedium, GelMLDetectionTransferMediumType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TransferMedium Parse(string xml) {
            return XTypedServices.Parse<TransferMedium, GelMLDetectionTransferMediumType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TransferMedium(((GelMLDetectionTransferMediumType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLDetectionTransferMediumType ContentField) {
            this.ContentField = ((GelMLDetectionTransferMediumType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to the ElectrophoreisProtocol performed within the parent
    ///    protocol. 
    /// </para>
    /// </summary>
    public partial class ElectrophoresisAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLElectrophoresisElectrophoresisActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElectrophoresisAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ElectrophoresisAction(XElement xe) { return XTypedServices.ToXTypedElement<ElectrophoresisAction, GelMLElectrophoresisElectrophoresisActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A reference to the ElectrophoreisProtocol performed within the parent
        ///    protocol. 
        /// </para>
        /// </summary>
        public ElectrophoresisAction() {
            SetInnerType(new GelMLElectrophoresisElectrophoresisActionType());
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the ElectrophoreisProtocol performed within the parent
        ///    protocol. 
        /// </para>
        /// </summary>
        public ElectrophoresisAction(GelMLElectrophoresisElectrophoresisActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLElectrophoresisElectrophoresisActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the ElectrophoresisProtocol 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                return this.ContentField.ElectrophoresisProtocol_ref;
            }
            set {
                this.ContentField.ElectrophoresisProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ElectrophoresisAction Load(string xmlFile) {
            return XTypedServices.Load<ElectrophoresisAction, GelMLElectrophoresisElectrophoresisActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ElectrophoresisAction, GelMLElectrophoresisElectrophoresisActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisAction Parse(string xml) {
            return XTypedServices.Parse<ElectrophoresisAction, GelMLElectrophoresisElectrophoresisActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ElectrophoresisAction(((GelMLElectrophoresisElectrophoresisActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLElectrophoresisElectrophoresisActionType ContentField) {
            this.ContentField = ((GelMLElectrophoresisElectrophoresisActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol for capturing the details of electrophoresis. The running
    ///    conditions applied to the gel should be given in terms of voltages versus time/kilovolt hours,
    ///    (or appropriate measurements) and temperature. The voltage mode profile (eg. step and hold, or
    ///    gradient) should be given as ontology terms on ElectricalParameter. 
    /// </para>
    /// </summary>
    public partial class ElectrophoresisProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLElectrophoresisElectrophoresisProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElectrophoresisProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ElectrophoresisProtocol(XElement xe) { return XTypedServices.ToXTypedElement<ElectrophoresisProtocol, GelMLElectrophoresisElectrophoresisProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing the details of electrophoresis. The running
        ///    conditions applied to the gel should be given in terms of voltages versus time/kilovolt hours,
        ///    (or appropriate measurements) and temperature. The voltage mode profile (eg. step and hold, or
        ///    gradient) should be given as ontology terms on ElectricalParameter. 
        /// </para>
        /// </summary>
        public ElectrophoresisProtocol() {
            SetInnerType(new GelMLElectrophoresisElectrophoresisProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing the details of electrophoresis. The running
        ///    conditions applied to the gel should be given in terms of voltages versus time/kilovolt hours,
        ///    (or appropriate measurements) and temperature. The voltage mode profile (eg. step and hold, or
        ///    gradient) should be given as ontology terms on ElectricalParameter. 
        /// </para>
        /// </summary>
        public ElectrophoresisProtocol(GelMLElectrophoresisElectrophoresisProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLElectrophoresisElectrophoresisProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                return this.ContentField.protocolText;
            }
            set {
                this.ContentField.protocolText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<AddBufferAction> AddBufferAction {
            get {
                return this.ContentField.AddBufferAction;
            }
            set {
                this.ContentField.AddBufferAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used during electrophoresis, such as gel tanks or power
        ///        packs. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, AddBufferAction*, electrophoresisEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLElectrophoresisElectrophoresisProtocolType.electrophoresisEquipmentLocalType> electrophoresisEquipment {
            get {
                return this.ContentField.electrophoresisEquipment;
            }
            set {
                this.ContentField.electrophoresisEquipment = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ElectrophoresisProtocol Load(string xmlFile) {
            return XTypedServices.Load<ElectrophoresisProtocol, GelMLElectrophoresisElectrophoresisProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ElectrophoresisProtocol, GelMLElectrophoresisElectrophoresisProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ElectrophoresisProtocol Parse(string xml) {
            return XTypedServices.Parse<ElectrophoresisProtocol, GelMLElectrophoresisElectrophoresisProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ElectrophoresisProtocol(((GelMLElectrophoresisElectrophoresisProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLElectrophoresisElectrophoresisProtocolType ContentField) {
            this.ContentField = ((GelMLElectrophoresisElectrophoresisProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Temperature parameter. 
    /// </para>
    /// </summary>
    public partial class Temperature : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLElectrophoresisTemperatureType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Temperature", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Temperature(XElement xe) { return XTypedServices.ToXTypedElement<Temperature, GelMLElectrophoresisTemperatureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Temperature parameter. 
        /// </para>
        /// </summary>
        public Temperature() {
            SetInnerType(new GelMLElectrophoresisTemperatureType());
        }
        
        /// <summary>
        /// <para>
        ///  Temperature parameter. 
        /// </para>
        /// </summary>
        public Temperature(GelMLElectrophoresisTemperatureType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLElectrophoresisTemperatureType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Temperature Load(string xmlFile) {
            return XTypedServices.Load<Temperature, GelMLElectrophoresisTemperatureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Temperature Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Temperature, GelMLElectrophoresisTemperatureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Temperature Parse(string xml) {
            return XTypedServices.Parse<Temperature, GelMLElectrophoresisTemperatureType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Temperature(((GelMLElectrophoresisTemperatureType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLElectrophoresisTemperatureType ContentField) {
            this.ContentField = ((GelMLElectrophoresisTemperatureType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the use of buffers in the Protocol by reference to a
    ///    SubstanceMixtureProtocol that represents the buffer and optionally the method of producing the
    ///    buffer. 
    /// </para>
    /// </summary>
    public partial class AddBufferAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLElectrophoresisAddBufferActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AddBufferAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator AddBufferAction(XElement xe) { return XTypedServices.ToXTypedElement<AddBufferAction, GelMLElectrophoresisAddBufferActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the use of buffers in the Protocol by reference to a
        ///    SubstanceMixtureProtocol that represents the buffer and optionally the method of producing the
        ///    buffer. 
        /// </para>
        /// </summary>
        public AddBufferAction() {
            SetInnerType(new GelMLElectrophoresisAddBufferActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the use of buffers in the Protocol by reference to a
        ///    SubstanceMixtureProtocol that represents the buffer and optionally the method of producing the
        ///    buffer. 
        /// </para>
        /// </summary>
        public AddBufferAction(GelMLElectrophoresisAddBufferActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLElectrophoresisAddBufferActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The specification of the buffer and its components. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SubstanceMixtureProtocol_ref {
            get {
                return this.ContentField.SubstanceMixtureProtocol_ref;
            }
            set {
                this.ContentField.SubstanceMixtureProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AddBufferAction Load(string xmlFile) {
            return XTypedServices.Load<AddBufferAction, GelMLElectrophoresisAddBufferActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AddBufferAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AddBufferAction, GelMLElectrophoresisAddBufferActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AddBufferAction Parse(string xml) {
            return XTypedServices.Parse<AddBufferAction, GelMLElectrophoresisAddBufferActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AddBufferAction(((GelMLElectrophoresisAddBufferActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLElectrophoresisAddBufferActionType ContentField) {
            this.ContentField = ((GelMLElectrophoresisAddBufferActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A boundary chain is a notation for specifying an arbitrarily shaped location
    ///    on an image. A starting point is given (startXCoordinate and startYCoordinate) and a set of
    ///    directional steps. See chainCode documentation for this encoding. 
    /// </para>
    /// </summary>
    public partial class BoundaryChain : global::psidev.info.gelml.FeatureLocation, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionBoundaryChainType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BoundaryChain", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator BoundaryChain(XElement xe) { return XTypedServices.ToXTypedElement<BoundaryChain, GelMLExcisionBoundaryChainType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A boundary chain is a notation for specifying an arbitrarily shaped location
        ///    on an image. A starting point is given (startXCoordinate and startYCoordinate) and a set of
        ///    directional steps. See chainCode documentation for this encoding. 
        /// </para>
        /// </summary>
        public BoundaryChain() : 
                base(true) {
            SetInnerType(new GelMLExcisionBoundaryChainType());
        }
        
        /// <summary>
        /// <para>
        ///  A boundary chain is a notation for specifying an arbitrarily shaped location
        ///    on an image. A starting point is given (startXCoordinate and startYCoordinate) and a set of
        ///    directional steps. See chainCode documentation for this encoding. 
        /// </para>
        /// </summary>
        public BoundaryChain(GelMLExcisionBoundaryChainType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLExcisionBoundaryChainType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The x-coordinate of the starting position of the chain code.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int startXCoordinate {
            get {
                return this.ContentField.startXCoordinate;
            }
            set {
                this.ContentField.startXCoordinate = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y-coordinate of the starting position of the chain code.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int startYCoordinate {
            get {
                return this.ContentField.startYCoordinate;
            }
            set {
                this.ContentField.startYCoordinate = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A chain code denotes the shape of feature using directional steps of one
        ///       pixel, starting from the specified X and Y coordinates. Each step is encoded using the
        ///       following convention: 0 = E; 1 = NE; 2 = N; 3 = NW; 4 = W; 5 = SW; 6 = S; 7 = SE; See the
        ///       specification document for a diagram. In-house representations of GelML are free to use a
        ///       compression algorithm over the chain code, such as run length encoding, but for data exchange
        ///       the code should be uncompressed as shown in the example (since entire data files can be
        ///       compressed using Zip or Gz for data transfer). Note: In XML Schema, the chainCode is
        ///       represented as an xs:integer, which covers the infinite set of integers. Care should be taken
        ///       when mapping to other platforms, such as Java, i.e. this will not map to a Java Integer.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal chainCode {
            get {
                return this.ContentField.chainCode;
            }
            set {
                this.ContentField.chainCode = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static BoundaryChain Load(string xmlFile) {
            return XTypedServices.Load<BoundaryChain, GelMLExcisionBoundaryChainType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BoundaryChain Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BoundaryChain, GelMLExcisionBoundaryChainType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static BoundaryChain Parse(string xml) {
            return XTypedServices.Parse<BoundaryChain, GelMLExcisionBoundaryChainType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new BoundaryChain(((GelMLExcisionBoundaryChainType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionBoundaryChainType ContentField) {
            this.ContentField = ((GelMLExcisionBoundaryChainType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Circle is for defining a circular location on an image. 
    /// </para>
    /// </summary>
    public partial class Circle : global::psidev.info.gelml.FeatureLocation, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionCircleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Circle", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Circle(XElement xe) { return XTypedServices.ToXTypedElement<Circle, GelMLExcisionCircleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Circle is for defining a circular location on an image. 
        /// </para>
        /// </summary>
        public Circle() : 
                base(true) {
            SetInnerType(new GelMLExcisionCircleType());
        }
        
        /// <summary>
        /// <para>
        ///  Circle is for defining a circular location on an image. 
        /// </para>
        /// </summary>
        public Circle(GelMLExcisionCircleType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLExcisionCircleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Radius of the Circle in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelRadius {
            get {
                return this.ContentField.pixelRadius;
            }
            set {
                this.ContentField.pixelRadius = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Circle Load(string xmlFile) {
            return XTypedServices.Load<Circle, GelMLExcisionCircleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Circle Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Circle, GelMLExcisionCircleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Circle Parse(string xml) {
            return XTypedServices.Parse<Circle, GelMLExcisionCircleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Circle(((GelMLExcisionCircleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionCircleType ContentField) {
            this.ContentField = ((GelMLExcisionCircleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A sample excised from a gel. These materials can be referenced by formats
    ///    modelling other techniques, such as mass spectrometry. 
    /// </para>
    /// </summary>
    public partial class ExcisedSample : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionExcisedSampleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExcisedSample", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ExcisedSample(XElement xe) { return XTypedServices.ToXTypedElement<ExcisedSample, GelMLExcisionExcisedSampleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A sample excised from a gel. These materials can be referenced by formats
        ///    modelling other techniques, such as mass spectrometry. 
        /// </para>
        /// </summary>
        public ExcisedSample() {
            SetInnerType(new GelMLExcisionExcisedSampleType());
        }
        
        /// <summary>
        /// <para>
        ///  A sample excised from a gel. These materials can be referenced by formats
        ///    modelling other techniques, such as mass spectrometry. 
        /// </para>
        /// </summary>
        public ExcisedSample(GelMLExcisionExcisedSampleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionExcisedSampleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the location that this sample was excised from. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GelLocation_ref {
            get {
                return this.ContentField.GelLocation_ref;
            }
            set {
                this.ContentField.GelLocation_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ExcisedSample Load(string xmlFile) {
            return XTypedServices.Load<ExcisedSample, GelMLExcisionExcisedSampleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ExcisedSample Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ExcisedSample, GelMLExcisionExcisedSampleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ExcisedSample Parse(string xml) {
            return XTypedServices.Parse<ExcisedSample, GelMLExcisionExcisedSampleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ExcisedSample(((GelMLExcisionExcisedSampleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionExcisedSampleType ContentField) {
            this.ContentField = ((GelMLExcisionExcisedSampleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Application of a protocol that describes the excision of locations on
    ///    gels. 
    /// </para>
    /// </summary>
    public partial class ExcisionApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionExcisionApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExcisionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ExcisionApplication(XElement xe) { return XTypedServices.ToXTypedElement<ExcisionApplication, GelMLExcisionExcisionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The Application of a protocol that describes the excision of locations on
        ///    gels. 
        /// </para>
        /// </summary>
        public ExcisionApplication() {
            SetInnerType(new GelMLExcisionExcisionApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  The Application of a protocol that describes the excision of locations on
        ///    gels. 
        /// </para>
        /// </summary>
        public ExcisionApplication(GelMLExcisionExcisionApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionExcisionApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The set of locations on an image of a gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLExcisionExcisionApplicationType.inputImageLocationsLocalType inputImageLocations {
            get {
                return this.ContentField.inputImageLocations;
            }
            set {
                this.ContentField.inputImageLocations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual IList<ExcisedSample> ExcisedSample {
            get {
                return this.ContentField.ExcisedSample;
            }
            set {
                this.ContentField.ExcisedSample = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The set of locations on a gel as determined by, for instance, a robotic
        ///        spot picker at runtime. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (inputImageLocations?, ExcisedSample*, inputGelLocations?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLExcisionExcisionApplicationType.inputGelLocationsLocalType inputGelLocations {
            get {
                return this.ContentField.inputGelLocations;
            }
            set {
                this.ContentField.inputGelLocations = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresedGel from which locations are excised. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresedGel_ref {
            get {
                return this.ContentField.ElectrophoresedGel_ref;
            }
            set {
                this.ContentField.ElectrophoresedGel_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Protocol applied for excision. Note that equipment and software used should be
        ///        provided using the associations from GenericProtocol to GenericEquipment and
        ///        GenericSoftware. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                return this.ContentField.GenericProtocol_ref;
            }
            set {
                this.ContentField.GenericProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ExcisionApplication Load(string xmlFile) {
            return XTypedServices.Load<ExcisionApplication, GelMLExcisionExcisionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ExcisionApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ExcisionApplication, GelMLExcisionExcisionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ExcisionApplication Parse(string xml) {
            return XTypedServices.Parse<ExcisionApplication, GelMLExcisionExcisionApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ExcisionApplication(((GelMLExcisionExcisionApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionExcisionApplicationType ContentField) {
            this.ContentField = ((GelMLExcisionExcisionApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass representing the different types of method that could be
    ///    used to identify a location. 
    /// </para>
    /// </summary>
    public partial class FeatureLocation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionFeatureLocationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureLocation", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator FeatureLocation(XElement xe) {  return (FeatureLocation)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected FeatureLocation(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different types of method that could be
        ///    used to identify a location. 
        /// </para>
        /// </summary>
        public FeatureLocation() {
            SetInnerType(new GelMLExcisionFeatureLocationType());
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass representing the different types of method that could be
        ///    used to identify a location. 
        /// </para>
        /// </summary>
        public FeatureLocation(GelMLExcisionFeatureLocationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLExcisionFeatureLocationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The centroid position on the x-axis of the image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? centroidX {
            get {
                return this.ContentField.centroidX;
            }
            set {
                this.ContentField.centroidX = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The centroid position on the y-axis of the image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? centroidY {
            get {
                return this.ContentField.centroidY;
            }
            set {
                this.ContentField.centroidY = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FeatureLocation Load(string xmlFile) {
            return ((FeatureLocation)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static FeatureLocation Load(System.IO.TextReader xmlFile) {
            return ((FeatureLocation)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static FeatureLocation Parse(string xml) {
            return ((FeatureLocation)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new FeatureLocation(((GelMLExcisionFeatureLocationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionFeatureLocationType ContentField) {
            this.ContentField = ((GelMLExcisionFeatureLocationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLExcisionFeatureLocationType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single location on a gel. 
    /// </para>
    /// </summary>
    public partial class GelLocation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionGelLocationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelLocation", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelLocation(XElement xe) { return XTypedServices.ToXTypedElement<GelLocation, GelMLExcisionGelLocationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single location on a gel. 
        /// </para>
        /// </summary>
        public GelLocation() {
            SetInnerType(new GelMLExcisionGelLocationType());
        }
        
        /// <summary>
        /// <para>
        ///  A single location on a gel. 
        /// </para>
        /// </summary>
        public GelLocation(GelMLExcisionGelLocationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionGelLocationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual IList<LocationMeasure> LocationMeasure {
            get {
                return this.ContentField.LocationMeasure;
            }
            set {
                this.ContentField.LocationMeasure = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: FeatureLocation, BoundaryChain, Circle, Rectangle, BoundaryPointSet
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual FeatureLocation FeatureLocation {
            get {
                return this.ContentField.FeatureLocation;
            }
            set {
                this.ContentField.FeatureLocation = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  This is for mapping a Location from one set to another, for example for
        ///        mapping a gel coordinate to an image coordinate for a robotic spot picker.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LocationMeasure*, FeatureLocation?, mappedLocation?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLExcisionGelLocationType.mappedLocationLocalType mappedLocation {
            get {
                return this.ContentField.mappedLocation;
            }
            set {
                this.ContentField.mappedLocation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelLocation Load(string xmlFile) {
            return XTypedServices.Load<GelLocation, GelMLExcisionGelLocationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelLocation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelLocation, GelMLExcisionGelLocationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelLocation Parse(string xml) {
            return XTypedServices.Parse<GelLocation, GelMLExcisionGelLocationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelLocation(((GelMLExcisionGelLocationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionGelLocationType ContentField) {
            this.ContentField = ((GelMLExcisionGelLocationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A measured value, property or annotation about a GelLocation, such as
    ///    predicted MW or pI. 
    /// </para>
    /// </summary>
    public partial class LocationMeasure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionLocationMeasureType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationMeasure", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator LocationMeasure(XElement xe) { return XTypedServices.ToXTypedElement<LocationMeasure, GelMLExcisionLocationMeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A measured value, property or annotation about a GelLocation, such as
        ///    predicted MW or pI. 
        /// </para>
        /// </summary>
        public LocationMeasure() {
            SetInnerType(new GelMLExcisionLocationMeasureType());
        }
        
        /// <summary>
        /// <para>
        ///  A measured value, property or annotation about a GelLocation, such as
        ///    predicted MW or pI. 
        /// </para>
        /// </summary>
        public LocationMeasure(GelMLExcisionLocationMeasureType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionLocationMeasureType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The evidence for this measure, such as molecular weight markers, mass
        ///      spectrometry etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual ParamType evidence {
            get {
                return this.ContentField.evidence;
            }
            set {
                this.ContentField.evidence = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementAtomicValueType AtomicValue {
            get {
                return this.ContentField.AtomicValue;
            }
            set {
                this.ContentField.AtomicValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementBooleanValueType BooleanValue {
            get {
                return this.ContentField.BooleanValue;
            }
            set {
                this.ContentField.BooleanValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementComplexValueType ComplexValue {
            get {
                return this.ContentField.ComplexValue;
            }
            set {
                this.ContentField.ComplexValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (evidence?, (AtomicValue | BooleanValue | ComplexValue | Range))
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                return this.ContentField.Range;
            }
            set {
                this.ContentField.Range = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LocationMeasure Load(string xmlFile) {
            return XTypedServices.Load<LocationMeasure, GelMLExcisionLocationMeasureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LocationMeasure Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LocationMeasure, GelMLExcisionLocationMeasureType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LocationMeasure Parse(string xml) {
            return XTypedServices.Parse<LocationMeasure, GelMLExcisionLocationMeasureType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new LocationMeasure(((GelMLExcisionLocationMeasureType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionLocationMeasureType ContentField) {
            this.ContentField = ((GelMLExcisionLocationMeasureType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  LocationSet represents a set of locations on a gel image.
    ///   
    /// </para>
    /// </summary>
    public partial class LocationSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionLocationSetType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationSet", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator LocationSet(XElement xe) { return XTypedServices.ToXTypedElement<LocationSet, GelMLExcisionLocationSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  LocationSet represents a set of locations on a gel image.
        ///   
        /// </para>
        /// </summary>
        public LocationSet() {
            SetInnerType(new GelMLExcisionLocationSetType());
        }
        
        /// <summary>
        /// <para>
        ///  LocationSet represents a set of locations on a gel image.
        ///   
        /// </para>
        /// </summary>
        public LocationSet(GelMLExcisionLocationSetType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionLocationSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual IList<GelLocation> GelLocation {
            get {
                return this.ContentField.GelLocation;
            }
            set {
                this.ContentField.GelLocation = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The evidence or source file for this location set. The referenced file
        ///        should be in the GelInfoML format when it is finalised. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLExcisionLocationSetType.locationEvidenceLocalType locationEvidence {
            get {
                return this.ContentField.locationEvidence;
            }
            set {
                this.ContentField.locationEvidence = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of LocationSet e.g. ImageSet, GelSet. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GelLocation*, locationEvidence?, setType?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLExcisionLocationSetType.setTypeLocalType setType {
            get {
                return this.ContentField.setType;
            }
            set {
                this.ContentField.setType = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the lane of a gel from which locations are being excised. A gel lane
        ///        should only be supplied if appropriate, e.g. if this is a Gel1D. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GelLane_ref {
            get {
                return this.ContentField.GelLane_ref;
            }
            set {
                this.ContentField.GelLane_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The image of a gel that these locations refer to. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image_ref {
            get {
                return this.ContentField.Image_ref;
            }
            set {
                this.ContentField.Image_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LocationSet Load(string xmlFile) {
            return XTypedServices.Load<LocationSet, GelMLExcisionLocationSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LocationSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LocationSet, GelMLExcisionLocationSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static LocationSet Parse(string xml) {
            return XTypedServices.Parse<LocationSet, GelMLExcisionLocationSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new LocationSet(((GelMLExcisionLocationSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionLocationSetType ContentField) {
            this.ContentField = ((GelMLExcisionLocationSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Rectangle is for defining a rectangular location on an image. The X/Y
    ///    coordinates correspond with the upper left corner of the rectangle. 
    /// </para>
    /// </summary>
    public partial class Rectangle : global::psidev.info.gelml.FeatureLocation, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionRectangleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Rectangle", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Rectangle(XElement xe) { return XTypedServices.ToXTypedElement<Rectangle, GelMLExcisionRectangleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Rectangle is for defining a rectangular location on an image. The X/Y
        ///    coordinates correspond with the upper left corner of the rectangle. 
        /// </para>
        /// </summary>
        public Rectangle() : 
                base(true) {
            SetInnerType(new GelMLExcisionRectangleType());
        }
        
        /// <summary>
        /// <para>
        ///  Rectangle is for defining a rectangular location on an image. The X/Y
        ///    coordinates correspond with the upper left corner of the rectangle. 
        /// </para>
        /// </summary>
        public Rectangle(GelMLExcisionRectangleType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLExcisionRectangleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The X-Coordinate of the upper left corner of the rectangle.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int xCoordinate {
            get {
                return this.ContentField.xCoordinate;
            }
            set {
                this.ContentField.xCoordinate = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Y-Coordinate of the upper left corner of the rectangle.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int yCoordinate {
            get {
                return this.ContentField.yCoordinate;
            }
            set {
                this.ContentField.yCoordinate = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The size of the rectangle along the X axis. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelXSize {
            get {
                return this.ContentField.pixelXSize;
            }
            set {
                this.ContentField.pixelXSize = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The size of the rectangle along the Y axis. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int pixelYSize {
            get {
                return this.ContentField.pixelYSize;
            }
            set {
                this.ContentField.pixelYSize = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Rectangle Load(string xmlFile) {
            return XTypedServices.Load<Rectangle, GelMLExcisionRectangleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Rectangle Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Rectangle, GelMLExcisionRectangleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Rectangle Parse(string xml) {
            return XTypedServices.Parse<Rectangle, GelMLExcisionRectangleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Rectangle(((GelMLExcisionRectangleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionRectangleType ContentField) {
            this.ContentField = ((GelMLExcisionRectangleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A set of boundary points defining a location on a gel. The BoundaryPoints are
    ///    inclusive i.e. each point defines the boundary and part of the location. 
    /// </para>
    /// </summary>
    public partial class BoundaryPointSet : global::psidev.info.gelml.FeatureLocation, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionBoundaryPointSetType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BoundaryPointSet", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator BoundaryPointSet(XElement xe) { return XTypedServices.ToXTypedElement<BoundaryPointSet, GelMLExcisionBoundaryPointSetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A set of boundary points defining a location on a gel. The BoundaryPoints are
        ///    inclusive i.e. each point defines the boundary and part of the location. 
        /// </para>
        /// </summary>
        public BoundaryPointSet() : 
                base(true) {
            SetInnerType(new GelMLExcisionBoundaryPointSetType());
        }
        
        /// <summary>
        /// <para>
        ///  A set of boundary points defining a location on a gel. The BoundaryPoints are
        ///    inclusive i.e. each point defines the boundary and part of the location. 
        /// </para>
        /// </summary>
        public BoundaryPointSet(GelMLExcisionBoundaryPointSetType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLExcisionBoundaryPointSetType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Point+)
        /// </para>
        /// </summary>
        public virtual IList<Point> Point {
            get {
                return this.ContentField.Point;
            }
            set {
                this.ContentField.Point = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static BoundaryPointSet Load(string xmlFile) {
            return XTypedServices.Load<BoundaryPointSet, GelMLExcisionBoundaryPointSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BoundaryPointSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BoundaryPointSet, GelMLExcisionBoundaryPointSetType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static BoundaryPointSet Parse(string xml) {
            return XTypedServices.Parse<BoundaryPointSet, GelMLExcisionBoundaryPointSetType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new BoundaryPointSet(((GelMLExcisionBoundaryPointSetType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionBoundaryPointSetType ContentField) {
            this.ContentField = ((GelMLExcisionBoundaryPointSetType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A single boundary point used in a BoundaryPointSet. 
    /// </para>
    /// </summary>
    public partial class Point : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLExcisionPointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Point", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Point(XElement xe) { return XTypedServices.ToXTypedElement<Point, GelMLExcisionPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A single boundary point used in a BoundaryPointSet. 
        /// </para>
        /// </summary>
        public Point() {
            SetInnerType(new GelMLExcisionPointType());
        }
        
        /// <summary>
        /// <para>
        ///  A single boundary point used in a BoundaryPointSet. 
        /// </para>
        /// </summary>
        public Point(GelMLExcisionPointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLExcisionPointType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  x-coordinate of the boundary point. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int xCoordinate {
            get {
                return this.ContentField.xCoordinate;
            }
            set {
                this.ContentField.xCoordinate = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  y-coordinate of the boundary point. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int yCoordinate {
            get {
                return this.ContentField.yCoordinate;
            }
            set {
                this.ContentField.yCoordinate = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Point Load(string xmlFile) {
            return XTypedServices.Load<Point, GelMLExcisionPointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Point Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Point, GelMLExcisionPointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Point Parse(string xml) {
            return XTypedServices.Parse<Point, GelMLExcisionPointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Point(((GelMLExcisionPointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLExcisionPointType ContentField) {
            this.ContentField = ((GelMLExcisionPointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Abstract superclass for describing gels following electrophoresis.
    ///   
    /// </para>
    /// </summary>
    public abstract partial class ElectrophoresedGel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelElectrophoresedGelType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElectrophoresedGel", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ElectrophoresedGel(XElement xe) {  return (ElectrophoresedGel)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected ElectrophoresedGel(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass for describing gels following electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public ElectrophoresedGel() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  Abstract superclass for describing gels following electrophoresis.
        ///   
        /// </para>
        /// </summary>
        public ElectrophoresedGel(GelMLGelElectrophoresedGelType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLGelElectrophoresedGelType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GelLanes defined as part of the Gel substrate that
        ///        this ElectrophoresedGel came from. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLGelElectrophoresedGelType.gelLaneReferenceLocalType> gelLaneReference {
            get {
                return this.ContentField.gelLaneReference;
            }
            set {
                this.ContentField.gelLaneReference = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: SeparationRange, PHRange, MolWeightRange, OtherGelRange
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelLaneReference*, SeparationRange*)
        /// </para>
        /// </summary>
        public virtual IList<SeparationRange> SeparationRange {
            get {
                return this.ContentField.SeparationRange;
            }
            set {
                this.ContentField.SeparationRange = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ElectrophoresedGel Load(string xmlFile) {
            return ((ElectrophoresedGel)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ElectrophoresedGel Load(System.IO.TextReader xmlFile) {
            return ((ElectrophoresedGel)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static ElectrophoresedGel Parse(string xml) {
            return ((ElectrophoresedGel)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLGelElectrophoresedGelType ContentField) {
            this.ContentField = ((GelMLGelElectrophoresedGelType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLGelElectrophoresedGelType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The gel matrix used in any dimension of an electrophoresis assay.
    ///   
    /// </para>
    /// </summary>
    public partial class Gel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelGelType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Gel(XElement xe) { return XTypedServices.ToXTypedElement<Gel, GelMLGelGelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The gel matrix used in any dimension of an electrophoresis assay.
        ///   
        /// </para>
        /// </summary>
        public Gel() {
            SetInnerType(new GelMLGelGelType());
        }
        
        /// <summary>
        /// <para>
        ///  The gel matrix used in any dimension of an electrophoresis assay.
        ///   
        /// </para>
        /// </summary>
        public Gel(GelMLGelGelType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelGelType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// The type of Gel using a term from a controlled vocabulary
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual ParamType gelType {
            get {
                return this.ContentField.gelType;
            }
            set {
                this.ContentField.gelType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual IList<GelLane> GelLane {
            get {
                return this.ContentField.GelLane;
            }
            set {
                this.ContentField.GelLane = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The association can specify component gels, for example to represent a
        ///        stacking gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelGelType.componentGelsLocalType componentGels {
            get {
                return this.ContentField.componentGels;
            }
            set {
                this.ContentField.componentGels = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The percentage acrylamide in the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelGelType.percentAcrylamideLocalType percentAcrylamide {
            get {
                return this.ContentField.percentAcrylamide;
            }
            set {
                this.ContentField.percentAcrylamide = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual AcrylamideToCrossLinker AcrylamideToCrossLinker {
            get {
                return this.ContentField.AcrylamideToCrossLinker;
            }
            set {
                this.ContentField.AcrylamideToCrossLinker = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Other constituents of the gel (not specified elsewhere) with
        ///        measurements, such as the concentration of SDS. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLGelGelType.otherGelConstituentsLocalType> otherGelConstituents {
            get {
                return this.ContentField.otherGelConstituents;
            }
            set {
                this.ContentField.otherGelConstituents = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The model number of the gel. If no suitable CV of model numbers exist,
        ///        the model number is encoded as the term and as the termAccession. The OntologySource is the
        ///        URI of the company producing the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual ParamType model {
            get {
                return this.ContentField.model;
            }
            set {
                this.ContentField.model = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, (cvParam | userParam)*, gelType?, GelLane*, componentGels?, percentAcrylamide?, AcrylamideToCrossLinker?, otherGelConstituents*, model?, Dimensions?)
        /// </para>
        /// </summary>
        public virtual Dimensions Dimensions {
            get {
                return this.ContentField.Dimensions;
            }
            set {
                this.ContentField.Dimensions = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension this gel separates in e.g. for 2D electrophoresis, one Gel
        ///       separationDimension = 1, other Gel separationDimension = 2. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? separationDimension {
            get {
                return this.ContentField.separationDimension;
            }
            set {
                this.ContentField.separationDimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The manufacturer's batch number for the gel. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string batchNumber {
            get {
                return this.ContentField.batchNumber;
            }
            set {
                this.ContentField.batchNumber = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Gel Load(string xmlFile) {
            return XTypedServices.Load<Gel, GelMLGelGelType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Gel, GelMLGelGelType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Gel Parse(string xml) {
            return XTypedServices.Parse<Gel, GelMLGelGelType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Gel(((GelMLGelGelType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelGelType ContentField) {
            this.ContentField = ((GelMLGelGelType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A lane on a gel. 
    /// </para>
    /// </summary>
    public partial class GelLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelGelLaneType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelLane", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelLane(XElement xe) { return XTypedServices.ToXTypedElement<GelLane, GelMLGelGelLaneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A lane on a gel. 
        /// </para>
        /// </summary>
        public GelLane() {
            SetInnerType(new GelMLGelGelLaneType());
        }
        
        /// <summary>
        /// <para>
        ///  A lane on a gel. 
        /// </para>
        /// </summary>
        public GelLane(GelMLGelGelLaneType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelGelLaneType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The lane number with respect to the parent gel. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int laneNumber {
            get {
                return this.ContentField.laneNumber;
            }
            set {
                this.ContentField.laneNumber = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelLane Load(string xmlFile) {
            return XTypedServices.Load<GelLane, GelMLGelGelLaneType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelLane, GelMLGelGelLaneType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelLane Parse(string xml) {
            return XTypedServices.Parse<GelLane, GelMLGelGelLaneType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelLane(((GelMLGelGelLaneType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelGelLaneType ContentField) {
            this.ContentField = ((GelMLGelGelLaneType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The application of a protocol that defines how a gel was produced.
    ///   
    /// </para>
    /// </summary>
    public partial class GelManufactureApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelGelManufactureApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GelManufactureApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator GelManufactureApplication(XElement xe) { return XTypedServices.ToXTypedElement<GelManufactureApplication, GelMLGelGelManufactureApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The application of a protocol that defines how a gel was produced.
        ///   
        /// </para>
        /// </summary>
        public GelManufactureApplication() {
            SetInnerType(new GelMLGelGelManufactureApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  The application of a protocol that defines how a gel was produced.
        ///   
        /// </para>
        /// </summary>
        public GelManufactureApplication(GelMLGelGelManufactureApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelGelManufactureApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel produced by the GelManufactureApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (productGel, GenericMaterialMeasurement*)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelGelManufactureApplicationType.productGelLocalType productGel {
            get {
                return this.ContentField.productGel;
            }
            set {
                this.ContentField.productGel = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (productGel, GenericMaterialMeasurement*)
        /// </para>
        /// </summary>
        public virtual IList<GenericMaterialMeasurement> GenericMaterialMeasurement {
            get {
                return this.ContentField.GenericMaterialMeasurement;
            }
            set {
                this.ContentField.GenericMaterialMeasurement = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol applied in the GelManufactureApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                return this.ContentField.GenericProtocol_ref;
            }
            set {
                this.ContentField.GenericProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GelManufactureApplication Load(string xmlFile) {
            return XTypedServices.Load<GelManufactureApplication, GelMLGelGelManufactureApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelManufactureApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GelManufactureApplication, GelMLGelGelManufactureApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GelManufactureApplication Parse(string xml) {
            return XTypedServices.Parse<GelManufactureApplication, GelMLGelGelManufactureApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GelManufactureApplication(((GelMLGelGelManufactureApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelGelManufactureApplicationType ContentField) {
            this.ContentField = ((GelMLGelGelManufactureApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The measurements must be in the form of the Cartesian Coordinate system
    ///    (x,y,z). According to the standard image orientation described in section 7.1.6 of the MIAPE
    ///    document x represents the distance from the anode (+) to the cathode (-). For example in an IPG
    ///    strip x = the strip length, for a standard slab gel, x = the width and z = the matrix depth. All
    ///    dimensions should be given in milimetres. 
    /// </para>
    /// </summary>
    public partial class Dimensions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelDimensionsType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dimensions", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Dimensions(XElement xe) { return XTypedServices.ToXTypedElement<Dimensions, GelMLGelDimensionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The measurements must be in the form of the Cartesian Coordinate system
        ///    (x,y,z). According to the standard image orientation described in section 7.1.6 of the MIAPE
        ///    document x represents the distance from the anode (+) to the cathode (-). For example in an IPG
        ///    strip x = the strip length, for a standard slab gel, x = the width and z = the matrix depth. All
        ///    dimensions should be given in milimetres. 
        /// </para>
        /// </summary>
        public Dimensions() {
            SetInnerType(new GelMLGelDimensionsType());
        }
        
        /// <summary>
        /// <para>
        ///  The measurements must be in the form of the Cartesian Coordinate system
        ///    (x,y,z). According to the standard image orientation described in section 7.1.6 of the MIAPE
        ///    document x represents the distance from the anode (+) to the cathode (-). For example in an IPG
        ///    strip x = the strip length, for a standard slab gel, x = the width and z = the matrix depth. All
        ///    dimensions should be given in milimetres. 
        /// </para>
        /// </summary>
        public Dimensions(GelMLGelDimensionsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelDimensionsType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The x axis represents the distance from the anode (+) to the cathode (-).
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue x {
            get {
                return this.ContentField.x;
            }
            set {
                this.ContentField.x = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y axis is the matrix length.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue y {
            get {
                return this.ContentField.y;
            }
            set {
                this.ContentField.y = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The z axis dimensions is the matrix depth.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (x, y, z)
        /// </para>
        /// </summary>
        public virtual FuGECommonOntologyPropertyValue z {
            get {
                return this.ContentField.z;
            }
            set {
                this.ContentField.z = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Dimensions Load(string xmlFile) {
            return XTypedServices.Load<Dimensions, GelMLGelDimensionsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Dimensions Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Dimensions, GelMLGelDimensionsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Dimensions Parse(string xml) {
            return XTypedServices.Parse<Dimensions, GelMLGelDimensionsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Dimensions(((GelMLGelDimensionsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelDimensionsType ContentField) {
            this.ContentField = ((GelMLGelDimensionsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The separation range of the gel. This can use the RangeValue or ComplexValue
    ///    specification. 
    /// </para>
    /// </summary>
    public abstract partial class SeparationRange : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelSeparationRangeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SeparationRange(XElement xe) {  return (SeparationRange)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected SeparationRange(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        ///  The separation range of the gel. This can use the RangeValue or ComplexValue
        ///    specification. 
        /// </para>
        /// </summary>
        public SeparationRange() {
            throw new InvalidOperationException();
        }
        
        /// <summary>
        /// <para>
        ///  The separation range of the gel. This can use the RangeValue or ComplexValue
        ///    specification. 
        /// </para>
        /// </summary>
        public SeparationRange(GelMLGelSeparationRangeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual GelMLGelSeparationRangeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public virtual FuGECommonMeasurementRangeType Range {
            get {
                return this.ContentField.Range;
            }
            set {
                this.ContentField.Range = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of separation range, e.g. logarithmic, linear etc.
        ///     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelSeparationRangeType.rangeTypeLocalType rangeType {
            get {
                return this.ContentField.rangeType;
            }
            set {
                this.ContentField.rangeType = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension separation that the range refers to. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int dimension {
            get {
                return this.ContentField.dimension;
            }
            set {
                this.ContentField.dimension = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SeparationRange Load(string xmlFile) {
            return ((SeparationRange)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static SeparationRange Load(System.IO.TextReader xmlFile) {
            return ((SeparationRange)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static SeparationRange Parse(string xml) {
            return ((SeparationRange)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(GelMLGelSeparationRangeType ContentField) {
            this.ContentField = ((GelMLGelSeparationRangeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(GelMLGelSeparationRangeType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The estimated or known pH range of a gel that separates substances based on
    ///    their isoelectric point. 
    /// </para>
    /// </summary>
    public partial class PHRange : global::psidev.info.gelml.SeparationRange, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelPHRangeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator PHRange(XElement xe) { return XTypedServices.ToXTypedElement<PHRange, GelMLGelPHRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The estimated or known pH range of a gel that separates substances based on
        ///    their isoelectric point. 
        /// </para>
        /// </summary>
        public PHRange() : 
                base(true) {
            SetInnerType(new GelMLGelPHRangeType());
        }
        
        /// <summary>
        /// <para>
        ///  The estimated or known pH range of a gel that separates substances based on
        ///    their isoelectric point. 
        /// </para>
        /// </summary>
        public PHRange(GelMLGelPHRangeType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelPHRangeType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static PHRange Load(string xmlFile) {
            return XTypedServices.Load<PHRange, GelMLGelPHRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PHRange Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PHRange, GelMLGelPHRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static PHRange Parse(string xml) {
            return XTypedServices.Parse<PHRange, GelMLGelPHRangeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PHRange(((GelMLGelPHRangeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelPHRangeType ContentField) {
            this.ContentField = ((GelMLGelPHRangeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The estimated or known range of a gel that separates substances by their
    ///    molecular weight. 
    /// </para>
    /// </summary>
    public partial class MolWeightRange : global::psidev.info.gelml.SeparationRange, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelMolWeightRangeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator MolWeightRange(XElement xe) { return XTypedServices.ToXTypedElement<MolWeightRange, GelMLGelMolWeightRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The estimated or known range of a gel that separates substances by their
        ///    molecular weight. 
        /// </para>
        /// </summary>
        public MolWeightRange() : 
                base(true) {
            SetInnerType(new GelMLGelMolWeightRangeType());
        }
        
        /// <summary>
        /// <para>
        ///  The estimated or known range of a gel that separates substances by their
        ///    molecular weight. 
        /// </para>
        /// </summary>
        public MolWeightRange(GelMLGelMolWeightRangeType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelMolWeightRangeType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static MolWeightRange Load(string xmlFile) {
            return XTypedServices.Load<MolWeightRange, GelMLGelMolWeightRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MolWeightRange Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MolWeightRange, GelMLGelMolWeightRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static MolWeightRange Parse(string xml) {
            return XTypedServices.Parse<MolWeightRange, GelMLGelMolWeightRangeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MolWeightRange(((GelMLGelMolWeightRangeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelMolWeightRangeType ContentField) {
            this.ContentField = ((GelMLGelMolWeightRangeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A gel range other than molecular weight or pH by which proteins are
    ///    separated. 
    /// </para>
    /// </summary>
    public partial class OtherGelRange : global::psidev.info.gelml.SeparationRange, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelOtherGelRangeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator OtherGelRange(XElement xe) { return XTypedServices.ToXTypedElement<OtherGelRange, GelMLGelOtherGelRangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A gel range other than molecular weight or pH by which proteins are
        ///    separated. 
        /// </para>
        /// </summary>
        public OtherGelRange() : 
                base(true) {
            SetInnerType(new GelMLGelOtherGelRangeType());
        }
        
        /// <summary>
        /// <para>
        ///  A gel range other than molecular weight or pH by which proteins are
        ///    separated. 
        /// </para>
        /// </summary>
        public OtherGelRange(GelMLGelOtherGelRangeType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLGelOtherGelRangeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The type of separation performed i.e. the biophysical property that is
        ///        separated on. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Range?, rangeType?, separationType)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLGelOtherGelRangeType.separationTypeLocalType separationType {
            get {
                return this.ContentField.separationType;
            }
            set {
                this.ContentField.separationType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static OtherGelRange Load(string xmlFile) {
            return XTypedServices.Load<OtherGelRange, GelMLGelOtherGelRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelRange Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherGelRange, GelMLGelOtherGelRangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static OtherGelRange Parse(string xml) {
            return XTypedServices.Parse<OtherGelRange, GelMLGelOtherGelRangeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherGelRange(((GelMLGelOtherGelRangeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelOtherGelRangeType ContentField) {
            this.ContentField = ((GelMLGelOtherGelRangeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  Describes the acrylamide:crosslinker ratio, where the crosslinker type is
    ///    given by an ontology term (e.g. bisacrylamide). The values stored in the attributes can be
    ///    represented as a simple ratio (e.g. 37.5:1) or as percentages out of 100 (97:3). If a monomer
    ///    other than acrylamide has been used, this object should not be used and the components should be
    ///    specified as additional substances. 
    /// </para>
    /// </summary>
    public partial class AcrylamideToCrossLinker : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLGelAcrylamideToCrossLinkerType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AcrylamideToCrossLinker", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator AcrylamideToCrossLinker(XElement xe) { return XTypedServices.ToXTypedElement<AcrylamideToCrossLinker, GelMLGelAcrylamideToCrossLinkerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  Describes the acrylamide:crosslinker ratio, where the crosslinker type is
        ///    given by an ontology term (e.g. bisacrylamide). The values stored in the attributes can be
        ///    represented as a simple ratio (e.g. 37.5:1) or as percentages out of 100 (97:3). If a monomer
        ///    other than acrylamide has been used, this object should not be used and the components should be
        ///    specified as additional substances. 
        /// </para>
        /// </summary>
        public AcrylamideToCrossLinker() {
            SetInnerType(new GelMLGelAcrylamideToCrossLinkerType());
        }
        
        /// <summary>
        /// <para>
        ///  Describes the acrylamide:crosslinker ratio, where the crosslinker type is
        ///    given by an ontology term (e.g. bisacrylamide). The values stored in the attributes can be
        ///    represented as a simple ratio (e.g. 37.5:1) or as percentages out of 100 (97:3). If a monomer
        ///    other than acrylamide has been used, this object should not be used and the components should be
        ///    specified as additional substances. 
        /// </para>
        /// </summary>
        public AcrylamideToCrossLinker(GelMLGelAcrylamideToCrossLinkerType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLGelAcrylamideToCrossLinkerType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The name of the crosslinker used in the gel. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (crossLinkerType)
        /// </para>
        /// </summary>
        public virtual ParamType crossLinkerType {
            get {
                return this.ContentField.crossLinkerType;
            }
            set {
                this.ContentField.crossLinkerType = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ratio of acrylamide (i.e. value =97 if ratio is 97:3)
        ///    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float acrylamide {
            get {
                return this.ContentField.acrylamide;
            }
            set {
                this.ContentField.acrylamide = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ratio of crosslinker (i.e. value =3 if ratio is 97:3)
        ///    
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float crossLinker {
            get {
                return this.ContentField.crossLinker;
            }
            set {
                this.ContentField.crossLinker = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AcrylamideToCrossLinker Load(string xmlFile) {
            return XTypedServices.Load<AcrylamideToCrossLinker, GelMLGelAcrylamideToCrossLinkerType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AcrylamideToCrossLinker Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AcrylamideToCrossLinker, GelMLGelAcrylamideToCrossLinkerType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AcrylamideToCrossLinker Parse(string xml) {
            return XTypedServices.Parse<AcrylamideToCrossLinker, GelMLGelAcrylamideToCrossLinkerType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AcrylamideToCrossLinker(((GelMLGelAcrylamideToCrossLinkerType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLGelAcrylamideToCrossLinkerType ContentField) {
            this.ContentField = ((GelMLGelAcrylamideToCrossLinkerType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced SampleLoadingProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class SampleLoadingAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSampleLoadingSampleLoadingActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SampleLoadingAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SampleLoadingAction(XElement xe) { return XTypedServices.ToXTypedElement<SampleLoadingAction, GelMLSampleLoadingSampleLoadingActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced SampleLoadingProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public SampleLoadingAction() {
            SetInnerType(new GelMLSampleLoadingSampleLoadingActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced SampleLoadingProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public SampleLoadingAction(GelMLSampleLoadingSampleLoadingActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSampleLoadingSampleLoadingActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Optional lane number attribute for specifying the intended lane that this
        ///       protocol should be applied to. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? laneNumber {
            get {
                return this.ContentField.laneNumber;
            }
            set {
                this.ContentField.laneNumber = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel dimension that the referenced SampleLoadingProtocol refers to.
        ///       Note, this is not required in the context of Gel1DProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                return this.ContentField.dimension;
            }
            set {
                this.ContentField.dimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the SampleLoadingProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SampleLoadingProtocol_ref {
            get {
                return this.ContentField.SampleLoadingProtocol_ref;
            }
            set {
                this.ContentField.SampleLoadingProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SampleLoadingAction Load(string xmlFile) {
            return XTypedServices.Load<SampleLoadingAction, GelMLSampleLoadingSampleLoadingActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SampleLoadingAction, GelMLSampleLoadingSampleLoadingActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingAction Parse(string xml) {
            return XTypedServices.Parse<SampleLoadingAction, GelMLSampleLoadingSampleLoadingActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SampleLoadingAction(((GelMLSampleLoadingSampleLoadingActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSampleLoadingSampleLoadingActionType ContentField) {
            this.ContentField = ((GelMLSampleLoadingSampleLoadingActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of the SampleLoadingProtocol. SampleLoadingApplication defines
    ///    how a sample was loaded to a gel. To capture loading a first dimension gel onto a second
    ///    dimension gel, GenericMaterialMeasurement should reference the first dimension gel and
    ///    SampleLoadingApplication references the second dimension Gel (as LoadedGel).
    ///   
    /// </para>
    /// </summary>
    public partial class SampleLoadingApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSampleLoadingSampleLoadingApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SampleLoadingApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SampleLoadingApplication(XElement xe) { return XTypedServices.ToXTypedElement<SampleLoadingApplication, GelMLSampleLoadingSampleLoadingApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An application of the SampleLoadingProtocol. SampleLoadingApplication defines
        ///    how a sample was loaded to a gel. To capture loading a first dimension gel onto a second
        ///    dimension gel, GenericMaterialMeasurement should reference the first dimension gel and
        ///    SampleLoadingApplication references the second dimension Gel (as LoadedGel).
        ///   
        /// </para>
        /// </summary>
        public SampleLoadingApplication() {
            SetInnerType(new GelMLSampleLoadingSampleLoadingApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  An application of the SampleLoadingProtocol. SampleLoadingApplication defines
        ///    how a sample was loaded to a gel. To capture loading a first dimension gel onto a second
        ///    dimension gel, GenericMaterialMeasurement should reference the first dimension gel and
        ///    SampleLoadingApplication references the second dimension Gel (as LoadedGel).
        ///   
        /// </para>
        /// </summary>
        public SampleLoadingApplication(GelMLSampleLoadingSampleLoadingApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSampleLoadingSampleLoadingApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (InputSample)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLSampleLoadingSampleLoadingApplicationType.InputSampleLocalType InputSample {
            get {
                return this.ContentField.InputSample;
            }
            set {
                this.ContentField.InputSample = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The SampleLoadingProtocol that has been applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SampleLoadingProtocol_ref {
            get {
                return this.ContentField.SampleLoadingProtocol_ref;
            }
            set {
                this.ContentField.SampleLoadingProtocol_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gel onto which the sample was loaded. The gel must be an instance of Gel referenced
        ///        from Gel1DApplication, Gel2DApplication or OtherGelApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Gel_ref {
            get {
                return this.ContentField.Gel_ref;
            }
            set {
                this.ContentField.Gel_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The lane on which the sample was loaded. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GelLane_ref {
            get {
                return this.ContentField.GelLane_ref;
            }
            set {
                this.ContentField.GelLane_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SampleLoadingApplication Load(string xmlFile) {
            return XTypedServices.Load<SampleLoadingApplication, GelMLSampleLoadingSampleLoadingApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SampleLoadingApplication, GelMLSampleLoadingSampleLoadingApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingApplication Parse(string xml) {
            return XTypedServices.Parse<SampleLoadingApplication, GelMLSampleLoadingSampleLoadingApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SampleLoadingApplication(((GelMLSampleLoadingSampleLoadingApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSampleLoadingSampleLoadingApplicationType ContentField) {
            this.ContentField = ((GelMLSampleLoadingSampleLoadingApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A Protocol defining how samples are loaded onto a Gel or GelLanes.
    ///   
    /// </para>
    /// </summary>
    public partial class SampleLoadingProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLSampleLoadingSampleLoadingProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SampleLoadingProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator SampleLoadingProtocol(XElement xe) { return XTypedServices.ToXTypedElement<SampleLoadingProtocol, GelMLSampleLoadingSampleLoadingProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A Protocol defining how samples are loaded onto a Gel or GelLanes.
        ///   
        /// </para>
        /// </summary>
        public SampleLoadingProtocol() {
            SetInnerType(new GelMLSampleLoadingSampleLoadingProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A Protocol defining how samples are loaded onto a Gel or GelLanes.
        ///   
        /// </para>
        /// </summary>
        public SampleLoadingProtocol(GelMLSampleLoadingSampleLoadingProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLSampleLoadingSampleLoadingProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The details of the SampleLoadingProtocol as free text.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                return this.ContentField.protocolText;
            }
            set {
                this.ContentField.protocolText = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The loading buffer of the sample. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLSampleLoadingSampleLoadingProtocolType.loadingBufferLocalType loadingBuffer {
            get {
                return this.ContentField.loadingBuffer;
            }
            set {
                this.ContentField.loadingBuffer = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Any equipment used in the SampleLoadingProtocol. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, loadingBuffer?, GenericParameter*, sampleLoadingEquipment*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLSampleLoadingSampleLoadingProtocolType.sampleLoadingEquipmentLocalType> sampleLoadingEquipment {
            get {
                return this.ContentField.sampleLoadingEquipment;
            }
            set {
                this.ContentField.sampleLoadingEquipment = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SampleLoadingProtocol Load(string xmlFile) {
            return XTypedServices.Load<SampleLoadingProtocol, GelMLSampleLoadingSampleLoadingProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SampleLoadingProtocol, GelMLSampleLoadingSampleLoadingProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SampleLoadingProtocol Parse(string xml) {
            return XTypedServices.Parse<SampleLoadingProtocol, GelMLSampleLoadingSampleLoadingProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SampleLoadingProtocol(((GelMLSampleLoadingSampleLoadingProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLSampleLoadingSampleLoadingProtocolType ContentField) {
            this.ContentField = ((GelMLSampleLoadingSampleLoadingProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Action represent a reference to a Protocol for the stages that occur
    ///    between electrophoresis over particular dimensions and an ordering of the reference with respect
    ///    to other Actions performed within the parent Protocol. 
    /// </para>
    /// </summary>
    public partial class InterDimensionAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLOtherGelProtocolInterDimensionActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InterDimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator InterDimensionAction(XElement xe) { return XTypedServices.ToXTypedElement<InterDimensionAction, GelMLOtherGelProtocolInterDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The Action represent a reference to a Protocol for the stages that occur
        ///    between electrophoresis over particular dimensions and an ordering of the reference with respect
        ///    to other Actions performed within the parent Protocol. 
        /// </para>
        /// </summary>
        public InterDimensionAction() {
            SetInnerType(new GelMLOtherGelProtocolInterDimensionActionType());
        }
        
        /// <summary>
        /// <para>
        ///  The Action represent a reference to a Protocol for the stages that occur
        ///    between electrophoresis over particular dimensions and an ordering of the reference with respect
        ///    to other Actions performed within the parent Protocol. 
        /// </para>
        /// </summary>
        public InterDimensionAction(GelMLOtherGelProtocolInterDimensionActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLOtherGelProtocolInterDimensionActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension that this procedure precedes. This attribute is not required
        ///       for within a Gel2DProtocol as it is assumed that this specifies a Protocol prior to dimension
        ///       2. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? preDimension {
            get {
                return this.ContentField.preDimension;
            }
            set {
                this.ContentField.preDimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  A reference to the GenericProtocol performed between the dimensions specified. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GenericProtocol_ref {
            get {
                return this.ContentField.GenericProtocol_ref;
            }
            set {
                this.ContentField.GenericProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InterDimensionAction Load(string xmlFile) {
            return XTypedServices.Load<InterDimensionAction, GelMLOtherGelProtocolInterDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InterDimensionAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InterDimensionAction, GelMLOtherGelProtocolInterDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InterDimensionAction Parse(string xml) {
            return XTypedServices.Parse<InterDimensionAction, GelMLOtherGelProtocolInterDimensionActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new InterDimensionAction(((GelMLOtherGelProtocolInterDimensionActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLOtherGelProtocolInterDimensionActionType ContentField) {
            this.ContentField = ((GelMLOtherGelProtocolInterDimensionActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Gel output from an OtherGelApplication representing the combination of
    ///    gel substrates and proteins separated. 
    /// </para>
    /// </summary>
    public partial class OtherGel : global::psidev.info.gelml.ElectrophoresedGel, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLOtherGelProtocolOtherGelType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherGel", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator OtherGel(XElement xe) { return XTypedServices.ToXTypedElement<OtherGel, GelMLOtherGelProtocolOtherGelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  The Gel output from an OtherGelApplication representing the combination of
        ///    gel substrates and proteins separated. 
        /// </para>
        /// </summary>
        public OtherGel() : 
                base(true) {
            SetInnerType(new GelMLOtherGelProtocolOtherGelType());
        }
        
        /// <summary>
        /// <para>
        ///  The Gel output from an OtherGelApplication representing the combination of
        ///    gel substrates and proteins separated. 
        /// </para>
        /// </summary>
        public OtherGel(GelMLOtherGelProtocolOtherGelType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLOtherGelProtocolOtherGelType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static OtherGel Load(string xmlFile) {
            return XTypedServices.Load<OtherGel, GelMLOtherGelProtocolOtherGelType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherGel, GelMLOtherGelProtocolOtherGelType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static OtherGel Parse(string xml) {
            return XTypedServices.Parse<OtherGel, GelMLOtherGelProtocolOtherGelType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherGel(((GelMLOtherGelProtocolOtherGelType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLOtherGelProtocolOtherGelType ContentField) {
            this.ContentField = ((GelMLOtherGelProtocolOtherGelType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  OtherGelApplication is the application of an OtherGelProtocol. An instance of
    ///    OtherApplication should reference (via ActionApplication) SampleLoadingApplication,
    ///    ElectrophoresisApplication, DetectionApplication and GenericProtocolApplication as its
    ///    sub-steps, as defined by the referenced OtherGelProtocol. 
    /// </para>
    /// </summary>
    public partial class OtherGelApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLOtherGelProtocolOtherGelApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherGelApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator OtherGelApplication(XElement xe) { return XTypedServices.ToXTypedElement<OtherGelApplication, GelMLOtherGelProtocolOtherGelApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  OtherGelApplication is the application of an OtherGelProtocol. An instance of
        ///    OtherApplication should reference (via ActionApplication) SampleLoadingApplication,
        ///    ElectrophoresisApplication, DetectionApplication and GenericProtocolApplication as its
        ///    sub-steps, as defined by the referenced OtherGelProtocol. 
        /// </para>
        /// </summary>
        public OtherGelApplication() {
            SetInnerType(new GelMLOtherGelProtocolOtherGelApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  OtherGelApplication is the application of an OtherGelProtocol. An instance of
        ///    OtherApplication should reference (via ActionApplication) SampleLoadingApplication,
        ///    ElectrophoresisApplication, DetectionApplication and GenericProtocolApplication as its
        ///    sub-steps, as defined by the referenced OtherGelProtocol. 
        /// </para>
        /// </summary>
        public OtherGelApplication(GelMLOtherGelProtocolOtherGelApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLOtherGelProtocolOtherGelApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The gels on which separations are performed. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLOtherGelProtocolOtherGelApplicationType.inputGelsLocalType inputGels {
            get {
                return this.ContentField.inputGels;
            }
            set {
                this.ContentField.inputGels = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLOtherGelProtocolOtherGelApplicationType.outputLocalType output {
            get {
                return this.ContentField.output;
            }
            set {
                this.ContentField.output = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inputGels, output, ChildProtocolApplications)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLOtherGelProtocolOtherGelApplicationType.ChildProtocolApplicationsLocalType ChildProtocolApplications {
            get {
                return this.ContentField.ChildProtocolApplications;
            }
            set {
                this.ContentField.ChildProtocolApplications = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The OtherGelProtocol that is applied. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string OtherGelProtocol_ref {
            get {
                return this.ContentField.OtherGelProtocol_ref;
            }
            set {
                this.ContentField.OtherGelProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OtherGelApplication Load(string xmlFile) {
            return XTypedServices.Load<OtherGelApplication, GelMLOtherGelProtocolOtherGelApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherGelApplication, GelMLOtherGelProtocolOtherGelApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelApplication Parse(string xml) {
            return XTypedServices.Parse<OtherGelApplication, GelMLOtherGelProtocolOtherGelApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherGelApplication(((GelMLOtherGelProtocolOtherGelApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLOtherGelProtocolOtherGelApplicationType ContentField) {
            this.ContentField = ((GelMLOtherGelProtocolOtherGelApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol for capturing experiments that cannot be represented by
    ///    Gel1DProtocol or Gel2DProtocol. 
    /// </para>
    /// </summary>
    public partial class OtherGelProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLOtherGelProtocolOtherGelProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherGelProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator OtherGelProtocol(XElement xe) { return XTypedServices.ToXTypedElement<OtherGelProtocol, GelMLOtherGelProtocolOtherGelProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing experiments that cannot be represented by
        ///    Gel1DProtocol or Gel2DProtocol. 
        /// </para>
        /// </summary>
        public OtherGelProtocol() {
            SetInnerType(new GelMLOtherGelProtocolOtherGelProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A protocol for capturing experiments that cannot be represented by
        ///    Gel1DProtocol or Gel2DProtocol. 
        /// </para>
        /// </summary>
        public OtherGelProtocol(GelMLOtherGelProtocolOtherGelProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLOtherGelProtocolOtherGelProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<SampleLoadingAction> SampleLoadingAction {
            get {
                return this.ContentField.SampleLoadingAction;
            }
            set {
                this.ContentField.SampleLoadingAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DimensionAction> DimensionAction {
            get {
                return this.ContentField.DimensionAction;
            }
            set {
                this.ContentField.DimensionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<InterDimensionAction> InterDimensionAction {
            get {
                return this.ContentField.InterDimensionAction;
            }
            set {
                this.ContentField.InterDimensionAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SampleLoadingAction*, DimensionAction+, InterDimensionAction*, DetectionAction*)
        /// </para>
        /// </summary>
        public virtual IList<DetectionAction> DetectionAction {
            get {
                return this.ContentField.DetectionAction;
            }
            set {
                this.ContentField.DetectionAction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OtherGelProtocol Load(string xmlFile) {
            return XTypedServices.Load<OtherGelProtocol, GelMLOtherGelProtocolOtherGelProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherGelProtocol, GelMLOtherGelProtocolOtherGelProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherGelProtocol Parse(string xml) {
            return XTypedServices.Parse<OtherGelProtocol, GelMLOtherGelProtocolOtherGelProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherGelProtocol(((GelMLOtherGelProtocolOtherGelProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLOtherGelProtocolOtherGelProtocolType ContentField) {
            this.ContentField = ((GelMLOtherGelProtocolOtherGelProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An action to represent the order of the referenced ElectrophoresisProtocol,
    ///    with respect to other Actions performed within this parent protocol. 
    /// </para>
    /// </summary>
    public partial class DimensionAction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLOtherGelProtocolDimensionActionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DimensionAction", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator DimensionAction(XElement xe) { return XTypedServices.ToXTypedElement<DimensionAction, GelMLOtherGelProtocolDimensionActionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public DimensionAction() {
            SetInnerType(new GelMLOtherGelProtocolDimensionActionType());
        }
        
        /// <summary>
        /// <para>
        ///  An action to represent the order of the referenced ElectrophoresisProtocol,
        ///    with respect to other Actions performed within this parent protocol. 
        /// </para>
        /// </summary>
        public DimensionAction(GelMLOtherGelProtocolDimensionActionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLOtherGelProtocolDimensionActionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The dimension that the referenced electrophoresis protocol occurs in.
        ///      
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimension {
            get {
                return this.ContentField.dimension;
            }
            set {
                this.ContentField.dimension = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The ElectrophoresisProtocol performed in this dimension. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ElectrophoresisProtocol_ref {
            get {
                return this.ContentField.ElectrophoresisProtocol_ref;
            }
            set {
                this.ContentField.ElectrophoresisProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DimensionAction Load(string xmlFile) {
            return XTypedServices.Load<DimensionAction, GelMLOtherGelProtocolDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DimensionAction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DimensionAction, GelMLOtherGelProtocolDimensionActionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DimensionAction Parse(string xml) {
            return XTypedServices.Parse<DimensionAction, GelMLOtherGelProtocolDimensionActionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DimensionAction(((GelMLOtherGelProtocolDimensionActionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLOtherGelProtocolDimensionActionType ContentField) {
            this.ContentField = ((GelMLOtherGelProtocolDimensionActionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A reference to an image file stored in an external location.
    ///   
    /// </para>
    /// </summary>
    public partial class Image : global::psidev.info.gelml.ExternalData, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLImageAcquisitionImageType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Image", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator Image(XElement xe) { return XTypedServices.ToXTypedElement<Image, GelMLImageAcquisitionImageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A reference to an image file stored in an external location.
        ///   
        /// </para>
        /// </summary>
        public Image() : 
                base(true) {
            SetInnerType(new GelMLImageAcquisitionImageType());
        }
        
        /// <summary>
        /// <para>
        ///  A reference to an image file stored in an external location.
        ///   
        /// </para>
        /// </summary>
        public Image(GelMLImageAcquisitionImageType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual GelMLImageAcquisitionImageType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The channel or wavelength at which the image was scanned.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLImageAcquisitionImageType.channelLocalType channel {
            get {
                return this.ContentField.channel;
            }
            set {
                this.ContentField.channel = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The value of the resolution of the Image. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (externalFormatDocumentation?, fileFormat?, channel?, resolution?)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLImageAcquisitionImageType.resolutionLocalType resolution {
            get {
                return this.ContentField.resolution;
            }
            set {
                this.ContentField.resolution = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The image bit-depth e.g. 8 bit, 16 bit. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? bitDepth {
            get {
                return this.ContentField.bitDepth;
            }
            set {
                this.ContentField.bitDepth = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The x-axis dimension of the image in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimensionX {
            get {
                return this.ContentField.dimensionX;
            }
            set {
                this.ContentField.dimensionX = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The y-axis dimension of the image in pixels. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? dimensionY {
            get {
                return this.ContentField.dimensionY;
            }
            set {
                this.ContentField.dimensionY = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Image Load(string xmlFile) {
            return XTypedServices.Load<Image, GelMLImageAcquisitionImageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Image Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Image, GelMLImageAcquisitionImageType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static Image Parse(string xml) {
            return XTypedServices.Parse<Image, GelMLImageAcquisitionImageType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Image(((GelMLImageAcquisitionImageType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLImageAcquisitionImageType ContentField) {
            this.ContentField = ((GelMLImageAcquisitionImageType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  An application of a protocol (GenericProtocol) describing the scanning of a
    ///    material to produce an Image. In this context it is expected that the Material would be an
    ///    ElectrophoresedGel, TransferMedium or DetectionMedium. 
    /// </para>
    /// </summary>
    public partial class ImageAcquisitionApplication : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLImageAcquisitionImageAcquisitionApplicationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ImageAcquisitionApplication", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ImageAcquisitionApplication(XElement xe) { return XTypedServices.ToXTypedElement<ImageAcquisitionApplication, GelMLImageAcquisitionImageAcquisitionApplicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  An application of a protocol (GenericProtocol) describing the scanning of a
        ///    material to produce an Image. In this context it is expected that the Material would be an
        ///    ElectrophoresedGel, TransferMedium or DetectionMedium. 
        /// </para>
        /// </summary>
        public ImageAcquisitionApplication() {
            SetInnerType(new GelMLImageAcquisitionImageAcquisitionApplicationType());
        }
        
        /// <summary>
        /// <para>
        ///  An application of a protocol (GenericProtocol) describing the scanning of a
        ///    material to produce an Image. In this context it is expected that the Material would be an
        ///    ElectrophoresedGel, TransferMedium or DetectionMedium. 
        /// </para>
        /// </summary>
        public ImageAcquisitionApplication(GelMLImageAcquisitionImageAcquisitionApplicationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLImageAcquisitionImageAcquisitionApplicationType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Image produced from ImageAcquisitionApplication. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Image_ref {
            get {
                return this.ContentField.Image_ref;
            }
            set {
                this.ContentField.Image_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Input material to image acquisition.  In a 1D Gel experiment, if the gel is scanned after electrophoresis, this should
        ///        reference the Gel1D produced by Gel1DApplication. In a 2D Gel experiment, if the gel is
        ///        scanned after electrophoresis, this should reference the Gel2D produced by Gel2DApplication.
        ///        If an image is aquired of a TransferMedium or DetectionMedium, this should reference an
        ///        instance that is referenced by IndirectDetection as OutputTransferMedium or
        ///        OutputDetectionMedium. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Material_ref {
            get {
                return this.ContentField.Material_ref;
            }
            set {
                this.ContentField.Material_ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The protocol describing this image acquisition procedure, such as scanning or
        ///        photography. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ImageAcquisitionProtocol_ref {
            get {
                return this.ContentField.ImageAcquisitionProtocol_ref;
            }
            set {
                this.ContentField.ImageAcquisitionProtocol_ref = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ImageAcquisitionApplication Load(string xmlFile) {
            return XTypedServices.Load<ImageAcquisitionApplication, GelMLImageAcquisitionImageAcquisitionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ImageAcquisitionApplication Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ImageAcquisitionApplication, GelMLImageAcquisitionImageAcquisitionApplicationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ImageAcquisitionApplication Parse(string xml) {
            return XTypedServices.Parse<ImageAcquisitionApplication, GelMLImageAcquisitionImageAcquisitionApplicationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ImageAcquisitionApplication(((GelMLImageAcquisitionImageAcquisitionApplicationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLImageAcquisitionImageAcquisitionApplicationType ContentField) {
            this.ContentField = ((GelMLImageAcquisitionImageAcquisitionApplicationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A protocol describing image acquisition. 
    /// </para>
    /// </summary>
    public partial class ImageAcquisitionProtocol : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLImageAcquisitionImageAcquisitionProtocolType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ImageAcquisitionProtocol", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator ImageAcquisitionProtocol(XElement xe) { return XTypedServices.ToXTypedElement<ImageAcquisitionProtocol, GelMLImageAcquisitionImageAcquisitionProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A protocol describing image acquisition. 
        /// </para>
        /// </summary>
        public ImageAcquisitionProtocol() {
            SetInnerType(new GelMLImageAcquisitionImageAcquisitionProtocolType());
        }
        
        /// <summary>
        /// <para>
        ///  A protocol describing image acquisition. 
        /// </para>
        /// </summary>
        public ImageAcquisitionProtocol(GelMLImageAcquisitionImageAcquisitionProtocolType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLImageAcquisitionImageAcquisitionProtocolType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The details of the Protocol as free text.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual string protocolText {
            get {
                return this.ContentField.protocolText;
            }
            set {
                this.ContentField.protocolText = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Equipment used for image acquisition. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType.equipmentLocalType> equipment {
            get {
                return this.ContentField.equipment;
            }
            set {
                this.ContentField.equipment = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  The software used for image acquisition. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType.softwareLocalType> software {
            get {
                return this.ContentField.software;
            }
            set {
                this.ContentField.software = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///  Descriptions of calibration performed during image acquisition.
        ///       
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType.StepsLocalType Steps {
            get {
                return this.ContentField.Steps;
            }
            set {
                this.ContentField.Steps = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual AutoCalibration AutoCalibration {
            get {
                return this.ContentField.AutoCalibration;
            }
            set {
                this.ContentField.AutoCalibration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (protocolText, equipment+, software*, Steps?, AutoCalibration?, GenericParameter*)
        /// </para>
        /// </summary>
        public virtual IList<GenericParameter> GenericParameter {
            get {
                return this.ContentField.GenericParameter;
            }
            set {
                this.ContentField.GenericParameter = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ImageAcquisitionProtocol Load(string xmlFile) {
            return XTypedServices.Load<ImageAcquisitionProtocol, GelMLImageAcquisitionImageAcquisitionProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ImageAcquisitionProtocol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ImageAcquisitionProtocol, GelMLImageAcquisitionImageAcquisitionProtocolType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ImageAcquisitionProtocol Parse(string xml) {
            return XTypedServices.Parse<ImageAcquisitionProtocol, GelMLImageAcquisitionImageAcquisitionProtocolType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ImageAcquisitionProtocol(((GelMLImageAcquisitionImageAcquisitionProtocolType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLImageAcquisitionImageAcquisitionProtocolType ContentField) {
            this.ContentField = ((GelMLImageAcquisitionImageAcquisitionProtocolType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A parameter to represent whether auto-calibration was performed. This should
    ///    use BooleanValue (subclass of Measurement). 
    /// </para>
    /// </summary>
    public partial class AutoCalibration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GelMLImageAcquisitionAutoCalibrationType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AutoCalibration", "http://www.psidev.info/gelml/1_1candidate");
        
		public static explicit operator AutoCalibration(XElement xe) { return XTypedServices.ToXTypedElement<AutoCalibration, GelMLImageAcquisitionAutoCalibrationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        ///  A parameter to represent whether auto-calibration was performed. This should
        ///    use BooleanValue (subclass of Measurement). 
        /// </para>
        /// </summary>
        public AutoCalibration() {
            SetInnerType(new GelMLImageAcquisitionAutoCalibrationType());
        }
        
        /// <summary>
        /// <para>
        ///  A parameter to represent whether auto-calibration was performed. This should
        ///    use BooleanValue (subclass of Measurement). 
        /// </para>
        /// </summary>
        public AutoCalibration(GelMLImageAcquisitionAutoCalibrationType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual GelMLImageAcquisitionAutoCalibrationType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AutoCalibration Load(string xmlFile) {
            return XTypedServices.Load<AutoCalibration, GelMLImageAcquisitionAutoCalibrationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AutoCalibration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AutoCalibration, GelMLImageAcquisitionAutoCalibrationType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AutoCalibration Parse(string xml) {
            return XTypedServices.Parse<AutoCalibration, GelMLImageAcquisitionAutoCalibrationType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AutoCalibration(((GelMLImageAcquisitionAutoCalibrationType)(this.Content.Clone())));
        }
        
        private void SetInnerType(GelMLImageAcquisitionAutoCalibrationType ContentField) {
            this.ContentField = ((GelMLImageAcquisitionAutoCalibrationType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.ConceptualMolecule.ConceptualMoleculeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioConceptualMoleculeConceptualMoleculeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Data.DataType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioDataDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Data.ExternalDataType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioDataExternalDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Data.InternalDataType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioDataInternalDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Material.MaterialType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioMaterialMaterialType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Material.MaterialMeasurementType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioMaterialMaterialMeasurementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Material.GenericMaterialType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioMaterialGenericMaterialType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Bio.Material.GenericMaterialMeasurementType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGEBioMaterialGenericMaterialMeasurementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Audit.PersonType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonAuditPersonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Audit.OrganizationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonAuditOrganizationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Audit.ContactType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonAuditContactType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Audit.ContactRoleType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonAuditContactRoleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.References.BibliographicReferenceType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonReferencesBibliographicReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.References.DatabaseType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonReferencesDatabaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.References.DatabaseReferenceType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonReferencesDatabaseReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Description.DescriptionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonDescriptionDescriptionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterValueType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ProtocolApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolProtocolApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.SoftwareType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolSoftwareType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.EquipmentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolEquipmentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.EquipmentApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolEquipmentApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.SoftwareApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolSoftwareApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterizableApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterizableApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ActionApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolActionApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericSoftwareType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericSoftwareType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericEquipmentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericEquipmentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericParameterType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericParameterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.GenericProtocolApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Protocol.ParameterPairType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterPairType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Ontology.ParamType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonOntologyParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Ontology.userParamType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonOntologyuserParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Ontology.cvParamType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonOntologycvParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Ontology.PropertyValue", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonOntologyPropertyValue));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Ontology.cvType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonOntologycvType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.IdentifiableType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonIdentifiableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Measurement.AtomicValueType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonMeasurementAtomicValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Measurement.BooleanValueType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonMeasurementBooleanValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Measurement.ComplexValueType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonMeasurementComplexValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Measurement.RangeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonMeasurementRangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Common.Measurement.MeasurementType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECommonMeasurementMeasurementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Collection.ReferenceableCollectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECollectionReferenceableCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Collection.AuditCollectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECollectionAuditCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuGE.Collection.ProviderType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FuGECollectionProviderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParamType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParamListType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ParamListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLMaterialCollectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLMaterialCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLDataCollectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLDataCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.Gel2DExperimentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGel2DExperimentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelMLProtocolCollectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLProtocolCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.GelExperimentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGelExperimentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.Gel1DExperimentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootGel1DExperimentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.GelMLRoot.OtherGelExperimentType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMLRootOtherGelExperimentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.RelativeVolumeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceRelativeVolumeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.VolumeFunctionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceVolumeFunctionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.AbsoluteVolumeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceAbsoluteVolumeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.VolumeParameterType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceVolumeParameterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.SubstanceActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceSubstanceActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.TemporalSubstanceActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTemporalSubstanceActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.SubstanceMixtureProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceSubstanceMixtureProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.DurationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceDurationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.TimePointType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTimePointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.TimeParameterType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTimeParameterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.ConcentrationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceConcentrationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SelectSubstance.MassType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSelectSubstanceMassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.Gel2DApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.DetectionApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionDetectionApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.FirstDimensionActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolFirstDimensionActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.SecondDimensionActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolSecondDimensionActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel2DProtocol.DetectionActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel2DProtocolDetectionActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel1DProtocol.Gel1DProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.DetectionMediumType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionDetectionMediumType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.DetectionProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionDetectionProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.DirectDetectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionDirectDetectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.IndirectDetectionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionIndirectDetectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Detection.TransferMediumType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDetectionTransferMediumType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Electrophoresis.ElectrophoresisProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Electrophoresis.TemperatureType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLElectrophoresisTemperatureType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Electrophoresis.AddBufferActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLElectrophoresisAddBufferActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.BoundaryChainType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionBoundaryChainType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.CircleType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionCircleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.ExcisedSampleType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionExcisedSampleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.ExcisionApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionExcisionApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.FeatureLocationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionFeatureLocationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.GelLocationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionGelLocationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.LocationMeasureType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionLocationMeasureType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.LocationSetType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionLocationSetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.RectangleType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionRectangleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.BoundaryPointSetType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionBoundaryPointSetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Excision.PointType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLExcisionPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.ElectrophoresedGelType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelElectrophoresedGelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.GelType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelGelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.GelLaneType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelGelLaneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.GelManufactureApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelGelManufactureApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.DimensionsType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelDimensionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.SeparationRangeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelSeparationRangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.PHRangeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelPHRangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.MolWeightRangeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelMolWeightRangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.OtherGelRangeType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelOtherGelRangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.Gel.AcrylamideToCrossLinkerType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLGelAcrylamideToCrossLinkerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.SampleLoading.SampleLoadingProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.InterDimensionActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolInterDimensionActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.OtherGelProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.OtherGelProtocol.DimensionActionType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolDimensionActionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageAcquisitionApplicationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.ImageAcquisition.ImageAcquisitionProtocolType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GelML.ImageAcquisition.AutoCalibrationType", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLImageAcquisitionAutoCalibrationType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ExternalData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericMaterial", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericMaterial));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericMaterialMeasurement", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericMaterialMeasurement));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Person", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Person));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Organization", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Organization));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ContactRole", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ContactRole));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BibliographicReference", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.BibliographicReference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Database", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Database));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DatabaseReference", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DatabaseReference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Description", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Description));
            elementDictionary.Add(System.Xml.Linq.XName.Get("userParam", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.userParam));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ParameterValue", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ParameterValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("EquipmentApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.EquipmentApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SoftwareApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SoftwareApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ActionApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ActionApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericSoftware", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericSoftware));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericEquipment", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericEquipment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericParameter", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericParameter));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GenericProtocolApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GenericProtocolApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ParameterPair", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ParameterPair));
            elementDictionary.Add(System.Xml.Linq.XName.Get("cvParam", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.cvParam));
            elementDictionary.Add(System.Xml.Linq.XName.Get("cv", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.cv));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReferenceableCollection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ReferenceableCollection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AuditCollection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.AuditCollection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Provider", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Provider));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PropertyValue", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.PropertyValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelML", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelML));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelMLMaterialCollection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLMaterialCollection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelMLDataCollection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLDataCollection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel2DExperiment", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel2DExperiment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelMLProtocolCollection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelMLProtocolCollection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelExperiment", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelExperiment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel1DExperiment", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel1DExperiment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherGelExperiment", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.OtherGelExperiment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RelativeVolume", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.RelativeVolume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("VolumeFunction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.VolumeFunction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AbsoluteVolume", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.AbsoluteVolume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("VolumeParameter", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.VolumeParameter));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SubstanceAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SubstanceAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TemporalSubstanceAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.TemporalSubstanceAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SubstanceMixtureProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SubstanceMixtureProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Duration", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Duration));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TimePoint", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.TimePoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TimeParameter", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.TimeParameter));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Concentration", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Concentration));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Mass", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Mass));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel2D", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel2D));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel2DProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel2DProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel2DApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel2DApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FirstDimensionAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FirstDimensionAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SecondDimensionAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SecondDimensionAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DetectionAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DetectionAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel1D", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel1D));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel1DApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel1DApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel1DProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel1DProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ElectrophoresisApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ElectrophoresisApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DetectionMedium", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DetectionMedium));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DetectionProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DetectionProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DetectionApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DetectionApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DirectDetection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DirectDetection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("IndirectDetection", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.IndirectDetection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TransferMedium", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.TransferMedium));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ElectrophoresisAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ElectrophoresisAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ElectrophoresisProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ElectrophoresisProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Temperature", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Temperature));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AddBufferAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.AddBufferAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BoundaryChain", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.BoundaryChain));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Circle", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Circle));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ExcisedSample", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ExcisedSample));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ExcisionApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ExcisionApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FeatureLocation", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.FeatureLocation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelLocation", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelLocation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LocationMeasure", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.LocationMeasure));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LocationSet", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.LocationSet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Rectangle", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Rectangle));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BoundaryPointSet", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.BoundaryPointSet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Point", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Point));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ElectrophoresedGel", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ElectrophoresedGel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Gel", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Gel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelLane", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GelManufactureApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.GelManufactureApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Dimensions", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Dimensions));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SeparationRange", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SeparationRange));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PHRange", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.PHRange));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MolWeightRange", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.MolWeightRange));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherGelRange", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.OtherGelRange));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AcrylamideToCrossLinker", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.AcrylamideToCrossLinker));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SampleLoadingAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SampleLoadingAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SampleLoadingApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SampleLoadingApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SampleLoadingProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.SampleLoadingProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InterDimensionAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.InterDimensionAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherGel", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.OtherGel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherGelApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.OtherGelApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherGelProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.OtherGelProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DimensionAction", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.DimensionAction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Image", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.Image));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ImageAcquisitionApplication", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ImageAcquisitionApplication));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ImageAcquisitionProtocol", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.ImageAcquisitionProtocol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AutoCalibration", "http://www.psidev.info/gelml/1_1candidate"), typeof(global::psidev.info.gelml.AutoCalibration));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(psidev.info.gelml.ExternalData), typeof(global::psidev.info.gelml.FuGEBioDataExternalDataType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericMaterial), typeof(global::psidev.info.gelml.FuGEBioMaterialGenericMaterialType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericMaterialMeasurement), typeof(global::psidev.info.gelml.FuGEBioMaterialGenericMaterialMeasurementType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Person), typeof(global::psidev.info.gelml.FuGECommonAuditPersonType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Organization), typeof(global::psidev.info.gelml.FuGECommonAuditOrganizationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ContactRole), typeof(global::psidev.info.gelml.FuGECommonAuditContactRoleType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.BibliographicReference), typeof(global::psidev.info.gelml.FuGECommonReferencesBibliographicReferenceType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Database), typeof(global::psidev.info.gelml.FuGECommonReferencesDatabaseType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DatabaseReference), typeof(global::psidev.info.gelml.FuGECommonReferencesDatabaseReferenceType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Description), typeof(global::psidev.info.gelml.FuGECommonDescriptionDescriptionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.userParam), typeof(global::psidev.info.gelml.FuGECommonOntologyuserParamType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ParameterValue), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterValueType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.EquipmentApplication), typeof(global::psidev.info.gelml.FuGECommonProtocolEquipmentApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SoftwareApplication), typeof(global::psidev.info.gelml.FuGECommonProtocolSoftwareApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ActionApplication), typeof(global::psidev.info.gelml.FuGECommonProtocolActionApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericProtocol), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericAction), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericSoftware), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericSoftwareType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericEquipment), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericEquipmentType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericParameter), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericParameterType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GenericProtocolApplication), typeof(global::psidev.info.gelml.FuGECommonProtocolGenericProtocolApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ParameterPair), typeof(global::psidev.info.gelml.FuGECommonProtocolParameterPairType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.cvParam), typeof(global::psidev.info.gelml.FuGECommonOntologycvParamType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.cv), typeof(global::psidev.info.gelml.FuGECommonOntologycvType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ReferenceableCollection), typeof(global::psidev.info.gelml.FuGECollectionReferenceableCollectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.AuditCollection), typeof(global::psidev.info.gelml.FuGECollectionAuditCollectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Provider), typeof(global::psidev.info.gelml.FuGECollectionProviderType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.PropertyValue), typeof(global::psidev.info.gelml.FuGECommonOntologyPropertyValue));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelML), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelMLMaterialCollection), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLMaterialCollectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelMLDataCollection), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLDataCollectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel2DExperiment), typeof(global::psidev.info.gelml.GelMLGelMLRootGel2DExperimentType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelMLProtocolCollection), typeof(global::psidev.info.gelml.GelMLGelMLRootGelMLProtocolCollectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelExperiment), typeof(global::psidev.info.gelml.GelMLGelMLRootGelExperimentType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel1DExperiment), typeof(global::psidev.info.gelml.GelMLGelMLRootGel1DExperimentType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.OtherGelExperiment), typeof(global::psidev.info.gelml.GelMLGelMLRootOtherGelExperimentType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.RelativeVolume), typeof(global::psidev.info.gelml.GelMLSelectSubstanceRelativeVolumeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.VolumeFunction), typeof(global::psidev.info.gelml.GelMLSelectSubstanceVolumeFunctionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.AbsoluteVolume), typeof(global::psidev.info.gelml.GelMLSelectSubstanceAbsoluteVolumeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.VolumeParameter), typeof(global::psidev.info.gelml.GelMLSelectSubstanceVolumeParameterType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SubstanceAction), typeof(global::psidev.info.gelml.GelMLSelectSubstanceSubstanceActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.TemporalSubstanceAction), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTemporalSubstanceActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SubstanceMixtureProtocol), typeof(global::psidev.info.gelml.GelMLSelectSubstanceSubstanceMixtureProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Duration), typeof(global::psidev.info.gelml.GelMLSelectSubstanceDurationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.TimePoint), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTimePointType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.TimeParameter), typeof(global::psidev.info.gelml.GelMLSelectSubstanceTimeParameterType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Concentration), typeof(global::psidev.info.gelml.GelMLSelectSubstanceConcentrationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Mass), typeof(global::psidev.info.gelml.GelMLSelectSubstanceMassType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel2D), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel2DProtocol), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel2DApplication), typeof(global::psidev.info.gelml.GelMLGel2DProtocolGel2DApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.FirstDimensionAction), typeof(global::psidev.info.gelml.GelMLGel2DProtocolFirstDimensionActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SecondDimensionAction), typeof(global::psidev.info.gelml.GelMLGel2DProtocolSecondDimensionActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DetectionAction), typeof(global::psidev.info.gelml.GelMLGel2DProtocolDetectionActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel1D), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel1DApplication), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel1DProtocol), typeof(global::psidev.info.gelml.GelMLGel1DProtocolGel1DProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ElectrophoresisApplication), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DetectionMedium), typeof(global::psidev.info.gelml.GelMLDetectionDetectionMediumType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DetectionProtocol), typeof(global::psidev.info.gelml.GelMLDetectionDetectionProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DetectionApplication), typeof(global::psidev.info.gelml.GelMLDetectionDetectionApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DirectDetection), typeof(global::psidev.info.gelml.GelMLDetectionDirectDetectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.IndirectDetection), typeof(global::psidev.info.gelml.GelMLDetectionIndirectDetectionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.TransferMedium), typeof(global::psidev.info.gelml.GelMLDetectionTransferMediumType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ElectrophoresisAction), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ElectrophoresisProtocol), typeof(global::psidev.info.gelml.GelMLElectrophoresisElectrophoresisProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Temperature), typeof(global::psidev.info.gelml.GelMLElectrophoresisTemperatureType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.AddBufferAction), typeof(global::psidev.info.gelml.GelMLElectrophoresisAddBufferActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.BoundaryChain), typeof(global::psidev.info.gelml.GelMLExcisionBoundaryChainType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Circle), typeof(global::psidev.info.gelml.GelMLExcisionCircleType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ExcisedSample), typeof(global::psidev.info.gelml.GelMLExcisionExcisedSampleType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ExcisionApplication), typeof(global::psidev.info.gelml.GelMLExcisionExcisionApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.FeatureLocation), typeof(global::psidev.info.gelml.GelMLExcisionFeatureLocationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelLocation), typeof(global::psidev.info.gelml.GelMLExcisionGelLocationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.LocationMeasure), typeof(global::psidev.info.gelml.GelMLExcisionLocationMeasureType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.LocationSet), typeof(global::psidev.info.gelml.GelMLExcisionLocationSetType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Rectangle), typeof(global::psidev.info.gelml.GelMLExcisionRectangleType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.BoundaryPointSet), typeof(global::psidev.info.gelml.GelMLExcisionBoundaryPointSetType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Point), typeof(global::psidev.info.gelml.GelMLExcisionPointType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ElectrophoresedGel), typeof(global::psidev.info.gelml.GelMLGelElectrophoresedGelType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Gel), typeof(global::psidev.info.gelml.GelMLGelGelType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelLane), typeof(global::psidev.info.gelml.GelMLGelGelLaneType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.GelManufactureApplication), typeof(global::psidev.info.gelml.GelMLGelGelManufactureApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Dimensions), typeof(global::psidev.info.gelml.GelMLGelDimensionsType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SeparationRange), typeof(global::psidev.info.gelml.GelMLGelSeparationRangeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.PHRange), typeof(global::psidev.info.gelml.GelMLGelPHRangeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.MolWeightRange), typeof(global::psidev.info.gelml.GelMLGelMolWeightRangeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.OtherGelRange), typeof(global::psidev.info.gelml.GelMLGelOtherGelRangeType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.AcrylamideToCrossLinker), typeof(global::psidev.info.gelml.GelMLGelAcrylamideToCrossLinkerType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SampleLoadingAction), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SampleLoadingApplication), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.SampleLoadingProtocol), typeof(global::psidev.info.gelml.GelMLSampleLoadingSampleLoadingProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.InterDimensionAction), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolInterDimensionActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.OtherGel), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.OtherGelApplication), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.OtherGelProtocol), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolOtherGelProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.DimensionAction), typeof(global::psidev.info.gelml.GelMLOtherGelProtocolDimensionActionType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.Image), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ImageAcquisitionApplication), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionApplicationType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.ImageAcquisitionProtocol), typeof(global::psidev.info.gelml.GelMLImageAcquisitionImageAcquisitionProtocolType));
            wrapperDictionary.Add(typeof(psidev.info.gelml.AutoCalibration), typeof(global::psidev.info.gelml.GelMLImageAcquisitionAutoCalibrationType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("ExternalData", "http://www.psidev.info/gelml/1_1candidate")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public ExternalData ExternalData {  get {return rootObject as ExternalData; } }

		public GenericMaterial GenericMaterial {  get {return rootObject as GenericMaterial; } }

		public GenericMaterialMeasurement GenericMaterialMeasurement {  get {return rootObject as GenericMaterialMeasurement; } }

		public Person Person {  get {return rootObject as Person; } }

		public Organization Organization {  get {return rootObject as Organization; } }

		public ContactRole ContactRole {  get {return rootObject as ContactRole; } }

		public BibliographicReference BibliographicReference {  get {return rootObject as BibliographicReference; } }

		public Database Database {  get {return rootObject as Database; } }

		public DatabaseReference DatabaseReference {  get {return rootObject as DatabaseReference; } }

		public Description Description {  get {return rootObject as Description; } }

		public userParam userParam {  get {return rootObject as userParam; } }

		public ParameterValue ParameterValue {  get {return rootObject as ParameterValue; } }

		public EquipmentApplication EquipmentApplication {  get {return rootObject as EquipmentApplication; } }

		public SoftwareApplication SoftwareApplication {  get {return rootObject as SoftwareApplication; } }

		public ActionApplication ActionApplication {  get {return rootObject as ActionApplication; } }

		public GenericProtocol GenericProtocol {  get {return rootObject as GenericProtocol; } }

		public GenericAction GenericAction {  get {return rootObject as GenericAction; } }

		public GenericSoftware GenericSoftware {  get {return rootObject as GenericSoftware; } }

		public GenericEquipment GenericEquipment {  get {return rootObject as GenericEquipment; } }

		public GenericParameter GenericParameter {  get {return rootObject as GenericParameter; } }

		public GenericProtocolApplication GenericProtocolApplication {  get {return rootObject as GenericProtocolApplication; } }

		public ParameterPair ParameterPair {  get {return rootObject as ParameterPair; } }

		public cvParam cvParam {  get {return rootObject as cvParam; } }

		public cv cv {  get {return rootObject as cv; } }

		public ReferenceableCollection ReferenceableCollection {  get {return rootObject as ReferenceableCollection; } }

		public AuditCollection AuditCollection {  get {return rootObject as AuditCollection; } }

		public Provider Provider {  get {return rootObject as Provider; } }

		public PropertyValue PropertyValue {  get {return rootObject as PropertyValue; } }

		public GelML GelML {  get {return rootObject as GelML; } }

		public GelMLMaterialCollection GelMLMaterialCollection {  get {return rootObject as GelMLMaterialCollection; } }

		public GelMLDataCollection GelMLDataCollection {  get {return rootObject as GelMLDataCollection; } }

		public Gel2DExperiment Gel2DExperiment {  get {return rootObject as Gel2DExperiment; } }

		public GelMLProtocolCollection GelMLProtocolCollection {  get {return rootObject as GelMLProtocolCollection; } }

		public GelExperiment GelExperiment {  get {return rootObject as GelExperiment; } }

		public Gel1DExperiment Gel1DExperiment {  get {return rootObject as Gel1DExperiment; } }

		public OtherGelExperiment OtherGelExperiment {  get {return rootObject as OtherGelExperiment; } }

		public RelativeVolume RelativeVolume {  get {return rootObject as RelativeVolume; } }

		public VolumeFunction VolumeFunction {  get {return rootObject as VolumeFunction; } }

		public AbsoluteVolume AbsoluteVolume {  get {return rootObject as AbsoluteVolume; } }

		public VolumeParameter VolumeParameter {  get {return rootObject as VolumeParameter; } }

		public SubstanceAction SubstanceAction {  get {return rootObject as SubstanceAction; } }

		public TemporalSubstanceAction TemporalSubstanceAction {  get {return rootObject as TemporalSubstanceAction; } }

		public SubstanceMixtureProtocol SubstanceMixtureProtocol {  get {return rootObject as SubstanceMixtureProtocol; } }

		public Duration Duration {  get {return rootObject as Duration; } }

		public TimePoint TimePoint {  get {return rootObject as TimePoint; } }

		public TimeParameter TimeParameter {  get {return rootObject as TimeParameter; } }

		public Concentration Concentration {  get {return rootObject as Concentration; } }

		public Mass Mass {  get {return rootObject as Mass; } }

		public Gel2D Gel2D {  get {return rootObject as Gel2D; } }

		public Gel2DProtocol Gel2DProtocol {  get {return rootObject as Gel2DProtocol; } }

		public Gel2DApplication Gel2DApplication {  get {return rootObject as Gel2DApplication; } }

		public FirstDimensionAction FirstDimensionAction {  get {return rootObject as FirstDimensionAction; } }

		public SecondDimensionAction SecondDimensionAction {  get {return rootObject as SecondDimensionAction; } }

		public DetectionAction DetectionAction {  get {return rootObject as DetectionAction; } }

		public Gel1D Gel1D {  get {return rootObject as Gel1D; } }

		public Gel1DApplication Gel1DApplication {  get {return rootObject as Gel1DApplication; } }

		public Gel1DProtocol Gel1DProtocol {  get {return rootObject as Gel1DProtocol; } }

		public ElectrophoresisApplication ElectrophoresisApplication {  get {return rootObject as ElectrophoresisApplication; } }

		public DetectionMedium DetectionMedium {  get {return rootObject as DetectionMedium; } }

		public DetectionProtocol DetectionProtocol {  get {return rootObject as DetectionProtocol; } }

		public DetectionApplication DetectionApplication {  get {return rootObject as DetectionApplication; } }

		public DirectDetection DirectDetection {  get {return rootObject as DirectDetection; } }

		public IndirectDetection IndirectDetection {  get {return rootObject as IndirectDetection; } }

		public TransferMedium TransferMedium {  get {return rootObject as TransferMedium; } }

		public ElectrophoresisAction ElectrophoresisAction {  get {return rootObject as ElectrophoresisAction; } }

		public ElectrophoresisProtocol ElectrophoresisProtocol {  get {return rootObject as ElectrophoresisProtocol; } }

		public Temperature Temperature {  get {return rootObject as Temperature; } }

		public AddBufferAction AddBufferAction {  get {return rootObject as AddBufferAction; } }

		public BoundaryChain BoundaryChain {  get {return rootObject as BoundaryChain; } }

		public Circle Circle {  get {return rootObject as Circle; } }

		public ExcisedSample ExcisedSample {  get {return rootObject as ExcisedSample; } }

		public ExcisionApplication ExcisionApplication {  get {return rootObject as ExcisionApplication; } }

		public FeatureLocation FeatureLocation {  get {return rootObject as FeatureLocation; } }

		public GelLocation GelLocation {  get {return rootObject as GelLocation; } }

		public LocationMeasure LocationMeasure {  get {return rootObject as LocationMeasure; } }

		public LocationSet LocationSet {  get {return rootObject as LocationSet; } }

		public Rectangle Rectangle {  get {return rootObject as Rectangle; } }

		public BoundaryPointSet BoundaryPointSet {  get {return rootObject as BoundaryPointSet; } }

		public Point Point {  get {return rootObject as Point; } }

		public ElectrophoresedGel ElectrophoresedGel {  get {return rootObject as ElectrophoresedGel; } }

		public Gel Gel {  get {return rootObject as Gel; } }

		public GelLane GelLane {  get {return rootObject as GelLane; } }

		public GelManufactureApplication GelManufactureApplication {  get {return rootObject as GelManufactureApplication; } }

		public Dimensions Dimensions {  get {return rootObject as Dimensions; } }

		public SeparationRange SeparationRange {  get {return rootObject as SeparationRange; } }

		public PHRange PHRange {  get {return rootObject as PHRange; } }

		public MolWeightRange MolWeightRange {  get {return rootObject as MolWeightRange; } }

		public OtherGelRange OtherGelRange {  get {return rootObject as OtherGelRange; } }

		public AcrylamideToCrossLinker AcrylamideToCrossLinker {  get {return rootObject as AcrylamideToCrossLinker; } }

		public SampleLoadingAction SampleLoadingAction {  get {return rootObject as SampleLoadingAction; } }

		public SampleLoadingApplication SampleLoadingApplication {  get {return rootObject as SampleLoadingApplication; } }

		public SampleLoadingProtocol SampleLoadingProtocol {  get {return rootObject as SampleLoadingProtocol; } }

		public InterDimensionAction InterDimensionAction {  get {return rootObject as InterDimensionAction; } }

		public OtherGel OtherGel {  get {return rootObject as OtherGel; } }

		public OtherGelApplication OtherGelApplication {  get {return rootObject as OtherGelApplication; } }

		public OtherGelProtocol OtherGelProtocol {  get {return rootObject as OtherGelProtocol; } }

		public DimensionAction DimensionAction {  get {return rootObject as DimensionAction; } }

		public Image Image {  get {return rootObject as Image; } }

		public ImageAcquisitionApplication ImageAcquisitionApplication {  get {return rootObject as ImageAcquisitionApplication; } }

		public ImageAcquisitionProtocol ImageAcquisitionProtocol {  get {return rootObject as ImageAcquisitionProtocol; } }

		public AutoCalibration AutoCalibration {  get {return rootObject as AutoCalibration; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(ExternalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericMaterial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericMaterialMeasurement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Person root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Organization root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ContactRole root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BibliographicReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Database root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DatabaseReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(userParam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ParameterValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(EquipmentApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SoftwareApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ActionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericSoftware root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericEquipment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GenericProtocolApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ParameterPair root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(cvParam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(cv root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReferenceableCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AuditCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Provider root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PropertyValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelMLMaterialCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelMLDataCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel2DExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelMLProtocolCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel1DExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherGelExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RelativeVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VolumeFunction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AbsoluteVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VolumeParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SubstanceAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TemporalSubstanceAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SubstanceMixtureProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Duration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TimePoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TimeParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Concentration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Mass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel2D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel2DProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel2DApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FirstDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SecondDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DetectionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel1D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel1DApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel1DProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ElectrophoresisApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DetectionMedium root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DetectionProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DetectionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DirectDetection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(IndirectDetection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TransferMedium root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ElectrophoresisAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ElectrophoresisProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Temperature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AddBufferAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BoundaryChain root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Circle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ExcisedSample root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ExcisionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FeatureLocation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelLocation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LocationMeasure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LocationSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Rectangle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BoundaryPointSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Point root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ElectrophoresedGel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Gel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GelManufactureApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Dimensions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SeparationRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PHRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MolWeightRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherGelRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AcrylamideToCrossLinker root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SampleLoadingAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SampleLoadingApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SampleLoadingProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InterDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherGel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherGelApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherGelProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Image root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ImageAcquisitionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ImageAcquisitionProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AutoCalibration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::psidev.info.gelml.ExternalData ExternalData {  get {return rootObject as global::psidev.info.gelml.ExternalData; } }

		public global::psidev.info.gelml.GenericMaterial GenericMaterial {  get {return rootObject as global::psidev.info.gelml.GenericMaterial; } }

		public global::psidev.info.gelml.GenericMaterialMeasurement GenericMaterialMeasurement {  get {return rootObject as global::psidev.info.gelml.GenericMaterialMeasurement; } }

		public global::psidev.info.gelml.Person Person {  get {return rootObject as global::psidev.info.gelml.Person; } }

		public global::psidev.info.gelml.Organization Organization {  get {return rootObject as global::psidev.info.gelml.Organization; } }

		public global::psidev.info.gelml.ContactRole ContactRole {  get {return rootObject as global::psidev.info.gelml.ContactRole; } }

		public global::psidev.info.gelml.BibliographicReference BibliographicReference {  get {return rootObject as global::psidev.info.gelml.BibliographicReference; } }

		public global::psidev.info.gelml.Database Database {  get {return rootObject as global::psidev.info.gelml.Database; } }

		public global::psidev.info.gelml.DatabaseReference DatabaseReference {  get {return rootObject as global::psidev.info.gelml.DatabaseReference; } }

		public global::psidev.info.gelml.Description Description {  get {return rootObject as global::psidev.info.gelml.Description; } }

		public global::psidev.info.gelml.userParam userParam {  get {return rootObject as global::psidev.info.gelml.userParam; } }

		public global::psidev.info.gelml.ParameterValue ParameterValue {  get {return rootObject as global::psidev.info.gelml.ParameterValue; } }

		public global::psidev.info.gelml.EquipmentApplication EquipmentApplication {  get {return rootObject as global::psidev.info.gelml.EquipmentApplication; } }

		public global::psidev.info.gelml.SoftwareApplication SoftwareApplication {  get {return rootObject as global::psidev.info.gelml.SoftwareApplication; } }

		public global::psidev.info.gelml.ActionApplication ActionApplication {  get {return rootObject as global::psidev.info.gelml.ActionApplication; } }

		public global::psidev.info.gelml.GenericProtocol GenericProtocol {  get {return rootObject as global::psidev.info.gelml.GenericProtocol; } }

		public global::psidev.info.gelml.GenericAction GenericAction {  get {return rootObject as global::psidev.info.gelml.GenericAction; } }

		public global::psidev.info.gelml.GenericSoftware GenericSoftware {  get {return rootObject as global::psidev.info.gelml.GenericSoftware; } }

		public global::psidev.info.gelml.GenericEquipment GenericEquipment {  get {return rootObject as global::psidev.info.gelml.GenericEquipment; } }

		public global::psidev.info.gelml.GenericParameter GenericParameter {  get {return rootObject as global::psidev.info.gelml.GenericParameter; } }

		public global::psidev.info.gelml.GenericProtocolApplication GenericProtocolApplication {  get {return rootObject as global::psidev.info.gelml.GenericProtocolApplication; } }

		public global::psidev.info.gelml.ParameterPair ParameterPair {  get {return rootObject as global::psidev.info.gelml.ParameterPair; } }

		public global::psidev.info.gelml.cvParam cvParam {  get {return rootObject as global::psidev.info.gelml.cvParam; } }

		public global::psidev.info.gelml.cv cv {  get {return rootObject as global::psidev.info.gelml.cv; } }

		public global::psidev.info.gelml.ReferenceableCollection ReferenceableCollection {  get {return rootObject as global::psidev.info.gelml.ReferenceableCollection; } }

		public global::psidev.info.gelml.AuditCollection AuditCollection {  get {return rootObject as global::psidev.info.gelml.AuditCollection; } }

		public global::psidev.info.gelml.Provider Provider {  get {return rootObject as global::psidev.info.gelml.Provider; } }

		public global::psidev.info.gelml.PropertyValue PropertyValue {  get {return rootObject as global::psidev.info.gelml.PropertyValue; } }

		public global::psidev.info.gelml.GelML GelML {  get {return rootObject as global::psidev.info.gelml.GelML; } }

		public global::psidev.info.gelml.GelMLMaterialCollection GelMLMaterialCollection {  get {return rootObject as global::psidev.info.gelml.GelMLMaterialCollection; } }

		public global::psidev.info.gelml.GelMLDataCollection GelMLDataCollection {  get {return rootObject as global::psidev.info.gelml.GelMLDataCollection; } }

		public global::psidev.info.gelml.Gel2DExperiment Gel2DExperiment {  get {return rootObject as global::psidev.info.gelml.Gel2DExperiment; } }

		public global::psidev.info.gelml.GelMLProtocolCollection GelMLProtocolCollection {  get {return rootObject as global::psidev.info.gelml.GelMLProtocolCollection; } }

		public global::psidev.info.gelml.GelExperiment GelExperiment {  get {return rootObject as global::psidev.info.gelml.GelExperiment; } }

		public global::psidev.info.gelml.Gel1DExperiment Gel1DExperiment {  get {return rootObject as global::psidev.info.gelml.Gel1DExperiment; } }

		public global::psidev.info.gelml.OtherGelExperiment OtherGelExperiment {  get {return rootObject as global::psidev.info.gelml.OtherGelExperiment; } }

		public global::psidev.info.gelml.RelativeVolume RelativeVolume {  get {return rootObject as global::psidev.info.gelml.RelativeVolume; } }

		public global::psidev.info.gelml.VolumeFunction VolumeFunction {  get {return rootObject as global::psidev.info.gelml.VolumeFunction; } }

		public global::psidev.info.gelml.AbsoluteVolume AbsoluteVolume {  get {return rootObject as global::psidev.info.gelml.AbsoluteVolume; } }

		public global::psidev.info.gelml.VolumeParameter VolumeParameter {  get {return rootObject as global::psidev.info.gelml.VolumeParameter; } }

		public global::psidev.info.gelml.SubstanceAction SubstanceAction {  get {return rootObject as global::psidev.info.gelml.SubstanceAction; } }

		public global::psidev.info.gelml.TemporalSubstanceAction TemporalSubstanceAction {  get {return rootObject as global::psidev.info.gelml.TemporalSubstanceAction; } }

		public global::psidev.info.gelml.SubstanceMixtureProtocol SubstanceMixtureProtocol {  get {return rootObject as global::psidev.info.gelml.SubstanceMixtureProtocol; } }

		public global::psidev.info.gelml.Duration Duration {  get {return rootObject as global::psidev.info.gelml.Duration; } }

		public global::psidev.info.gelml.TimePoint TimePoint {  get {return rootObject as global::psidev.info.gelml.TimePoint; } }

		public global::psidev.info.gelml.TimeParameter TimeParameter {  get {return rootObject as global::psidev.info.gelml.TimeParameter; } }

		public global::psidev.info.gelml.Concentration Concentration {  get {return rootObject as global::psidev.info.gelml.Concentration; } }

		public global::psidev.info.gelml.Mass Mass {  get {return rootObject as global::psidev.info.gelml.Mass; } }

		public global::psidev.info.gelml.Gel2D Gel2D {  get {return rootObject as global::psidev.info.gelml.Gel2D; } }

		public global::psidev.info.gelml.Gel2DProtocol Gel2DProtocol {  get {return rootObject as global::psidev.info.gelml.Gel2DProtocol; } }

		public global::psidev.info.gelml.Gel2DApplication Gel2DApplication {  get {return rootObject as global::psidev.info.gelml.Gel2DApplication; } }

		public global::psidev.info.gelml.FirstDimensionAction FirstDimensionAction {  get {return rootObject as global::psidev.info.gelml.FirstDimensionAction; } }

		public global::psidev.info.gelml.SecondDimensionAction SecondDimensionAction {  get {return rootObject as global::psidev.info.gelml.SecondDimensionAction; } }

		public global::psidev.info.gelml.DetectionAction DetectionAction {  get {return rootObject as global::psidev.info.gelml.DetectionAction; } }

		public global::psidev.info.gelml.Gel1D Gel1D {  get {return rootObject as global::psidev.info.gelml.Gel1D; } }

		public global::psidev.info.gelml.Gel1DApplication Gel1DApplication {  get {return rootObject as global::psidev.info.gelml.Gel1DApplication; } }

		public global::psidev.info.gelml.Gel1DProtocol Gel1DProtocol {  get {return rootObject as global::psidev.info.gelml.Gel1DProtocol; } }

		public global::psidev.info.gelml.ElectrophoresisApplication ElectrophoresisApplication {  get {return rootObject as global::psidev.info.gelml.ElectrophoresisApplication; } }

		public global::psidev.info.gelml.DetectionMedium DetectionMedium {  get {return rootObject as global::psidev.info.gelml.DetectionMedium; } }

		public global::psidev.info.gelml.DetectionProtocol DetectionProtocol {  get {return rootObject as global::psidev.info.gelml.DetectionProtocol; } }

		public global::psidev.info.gelml.DetectionApplication DetectionApplication {  get {return rootObject as global::psidev.info.gelml.DetectionApplication; } }

		public global::psidev.info.gelml.DirectDetection DirectDetection {  get {return rootObject as global::psidev.info.gelml.DirectDetection; } }

		public global::psidev.info.gelml.IndirectDetection IndirectDetection {  get {return rootObject as global::psidev.info.gelml.IndirectDetection; } }

		public global::psidev.info.gelml.TransferMedium TransferMedium {  get {return rootObject as global::psidev.info.gelml.TransferMedium; } }

		public global::psidev.info.gelml.ElectrophoresisAction ElectrophoresisAction {  get {return rootObject as global::psidev.info.gelml.ElectrophoresisAction; } }

		public global::psidev.info.gelml.ElectrophoresisProtocol ElectrophoresisProtocol {  get {return rootObject as global::psidev.info.gelml.ElectrophoresisProtocol; } }

		public global::psidev.info.gelml.Temperature Temperature {  get {return rootObject as global::psidev.info.gelml.Temperature; } }

		public global::psidev.info.gelml.AddBufferAction AddBufferAction {  get {return rootObject as global::psidev.info.gelml.AddBufferAction; } }

		public global::psidev.info.gelml.BoundaryChain BoundaryChain {  get {return rootObject as global::psidev.info.gelml.BoundaryChain; } }

		public global::psidev.info.gelml.Circle Circle {  get {return rootObject as global::psidev.info.gelml.Circle; } }

		public global::psidev.info.gelml.ExcisedSample ExcisedSample {  get {return rootObject as global::psidev.info.gelml.ExcisedSample; } }

		public global::psidev.info.gelml.ExcisionApplication ExcisionApplication {  get {return rootObject as global::psidev.info.gelml.ExcisionApplication; } }

		public global::psidev.info.gelml.FeatureLocation FeatureLocation {  get {return rootObject as global::psidev.info.gelml.FeatureLocation; } }

		public global::psidev.info.gelml.GelLocation GelLocation {  get {return rootObject as global::psidev.info.gelml.GelLocation; } }

		public global::psidev.info.gelml.LocationMeasure LocationMeasure {  get {return rootObject as global::psidev.info.gelml.LocationMeasure; } }

		public global::psidev.info.gelml.LocationSet LocationSet {  get {return rootObject as global::psidev.info.gelml.LocationSet; } }

		public global::psidev.info.gelml.Rectangle Rectangle {  get {return rootObject as global::psidev.info.gelml.Rectangle; } }

		public global::psidev.info.gelml.BoundaryPointSet BoundaryPointSet {  get {return rootObject as global::psidev.info.gelml.BoundaryPointSet; } }

		public global::psidev.info.gelml.Point Point {  get {return rootObject as global::psidev.info.gelml.Point; } }

		public global::psidev.info.gelml.ElectrophoresedGel ElectrophoresedGel {  get {return rootObject as global::psidev.info.gelml.ElectrophoresedGel; } }

		public global::psidev.info.gelml.Gel Gel {  get {return rootObject as global::psidev.info.gelml.Gel; } }

		public global::psidev.info.gelml.GelLane GelLane {  get {return rootObject as global::psidev.info.gelml.GelLane; } }

		public global::psidev.info.gelml.GelManufactureApplication GelManufactureApplication {  get {return rootObject as global::psidev.info.gelml.GelManufactureApplication; } }

		public global::psidev.info.gelml.Dimensions Dimensions {  get {return rootObject as global::psidev.info.gelml.Dimensions; } }

		public global::psidev.info.gelml.SeparationRange SeparationRange {  get {return rootObject as global::psidev.info.gelml.SeparationRange; } }

		public global::psidev.info.gelml.PHRange PHRange {  get {return rootObject as global::psidev.info.gelml.PHRange; } }

		public global::psidev.info.gelml.MolWeightRange MolWeightRange {  get {return rootObject as global::psidev.info.gelml.MolWeightRange; } }

		public global::psidev.info.gelml.OtherGelRange OtherGelRange {  get {return rootObject as global::psidev.info.gelml.OtherGelRange; } }

		public global::psidev.info.gelml.AcrylamideToCrossLinker AcrylamideToCrossLinker {  get {return rootObject as global::psidev.info.gelml.AcrylamideToCrossLinker; } }

		public global::psidev.info.gelml.SampleLoadingAction SampleLoadingAction {  get {return rootObject as global::psidev.info.gelml.SampleLoadingAction; } }

		public global::psidev.info.gelml.SampleLoadingApplication SampleLoadingApplication {  get {return rootObject as global::psidev.info.gelml.SampleLoadingApplication; } }

		public global::psidev.info.gelml.SampleLoadingProtocol SampleLoadingProtocol {  get {return rootObject as global::psidev.info.gelml.SampleLoadingProtocol; } }

		public global::psidev.info.gelml.InterDimensionAction InterDimensionAction {  get {return rootObject as global::psidev.info.gelml.InterDimensionAction; } }

		public global::psidev.info.gelml.OtherGel OtherGel {  get {return rootObject as global::psidev.info.gelml.OtherGel; } }

		public global::psidev.info.gelml.OtherGelApplication OtherGelApplication {  get {return rootObject as global::psidev.info.gelml.OtherGelApplication; } }

		public global::psidev.info.gelml.OtherGelProtocol OtherGelProtocol {  get {return rootObject as global::psidev.info.gelml.OtherGelProtocol; } }

		public global::psidev.info.gelml.DimensionAction DimensionAction {  get {return rootObject as global::psidev.info.gelml.DimensionAction; } }

		public global::psidev.info.gelml.Image Image {  get {return rootObject as global::psidev.info.gelml.Image; } }

		public global::psidev.info.gelml.ImageAcquisitionApplication ImageAcquisitionApplication {  get {return rootObject as global::psidev.info.gelml.ImageAcquisitionApplication; } }

		public global::psidev.info.gelml.ImageAcquisitionProtocol ImageAcquisitionProtocol {  get {return rootObject as global::psidev.info.gelml.ImageAcquisitionProtocol; } }

		public global::psidev.info.gelml.AutoCalibration AutoCalibration {  get {return rootObject as global::psidev.info.gelml.AutoCalibration; } }
        
        private XRoot() {
        }
        
        public XRoot(global::psidev.info.gelml.ExternalData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericMaterial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericMaterialMeasurement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Person root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Organization root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ContactRole root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.BibliographicReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Database root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DatabaseReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.userParam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ParameterValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.EquipmentApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SoftwareApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ActionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericSoftware root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericEquipment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GenericProtocolApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ParameterPair root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.cvParam root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.cv root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ReferenceableCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.AuditCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Provider root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.PropertyValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelMLMaterialCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelMLDataCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel2DExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelMLProtocolCollection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel1DExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.OtherGelExperiment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.RelativeVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.VolumeFunction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.AbsoluteVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.VolumeParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SubstanceAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.TemporalSubstanceAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SubstanceMixtureProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Duration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.TimePoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.TimeParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Concentration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Mass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel2D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel2DProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel2DApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.FirstDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SecondDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DetectionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel1D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel1DApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel1DProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ElectrophoresisApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DetectionMedium root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DetectionProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DetectionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DirectDetection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.IndirectDetection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.TransferMedium root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ElectrophoresisAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ElectrophoresisProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Temperature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.AddBufferAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.BoundaryChain root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Circle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ExcisedSample root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ExcisionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.FeatureLocation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelLocation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.LocationMeasure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.LocationSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Rectangle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.BoundaryPointSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Point root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ElectrophoresedGel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Gel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.GelManufactureApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Dimensions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SeparationRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.PHRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.MolWeightRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.OtherGelRange root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.AcrylamideToCrossLinker root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SampleLoadingAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SampleLoadingApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.SampleLoadingProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.InterDimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.OtherGel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.OtherGelApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.OtherGelProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.DimensionAction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.Image root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ImageAcquisitionApplication root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.ImageAcquisitionProtocol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::psidev.info.gelml.AutoCalibration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
