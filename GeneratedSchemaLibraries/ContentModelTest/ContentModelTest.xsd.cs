//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToXsd.Schemas.Test.ContentModelTypes {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Foo, Bar)
    /// </para>
    /// </summary>
    public abstract partial class BaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FooXName = System.Xml.Linq.XName.Get("Foo", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BarXName = System.Xml.Linq.XName.Get("Bar", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BaseType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BaseType(XElement xe) {  return (BaseType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Foo, Bar)
        /// </para>
        /// </summary>
        public BaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Foo {
            get {
                XElement x = this.GetElement(FooXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FooXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Bar {
            get {
                XElement x = this.GetElement(BarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RestrictionType : global::LinqToXsd.Schemas.Test.ContentModelTypes.BaseType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RestrictionType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
		public static explicit operator RestrictionType(XElement xe) { return XTypedServices.ToXTypedElement<RestrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RestrictionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RestrictionType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Foo, Bar)
    /// </para>
    /// </summary>
    public partial class EmptyExtensionType : global::LinqToXsd.Schemas.Test.ContentModelTypes.BaseType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmptyExtensionType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EmptyExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<EmptyExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EmptyExtensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Foo, Bar)
        /// </para>
        /// </summary>
        public EmptyExtensionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmptyExtensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tic | Tac | Toc)?
    /// </para>
    /// </summary>
    public partial class SimpleChoiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TicXName = System.Xml.Linq.XName.Get("Tic", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TacXName = System.Xml.Linq.XName.Get("Tac", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TocXName = System.Xml.Linq.XName.Get("Toc", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SimpleChoiceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SimpleChoiceType(XElement xe) { return XTypedServices.ToXTypedElement<SimpleChoiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SimpleChoiceType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(TicXName), new NamedContentModelEntity(TacXName), new NamedContentModelEntity(TocXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tic | Tac | Toc)?
        /// </para>
        /// </summary>
        public SimpleChoiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Tic | Tac | Toc)?
        /// </para>
        /// </summary>
        public virtual string Tic {
            get {
                XElement x = this.GetElement(TicXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TicXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Tic | Tac | Toc)?
        /// </para>
        /// </summary>
        public virtual string Tac {
            get {
                XElement x = this.GetElement(TacXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TacXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Tic | Tac | Toc)?
        /// </para>
        /// </summary>
        public virtual string Toc {
            get {
                XElement x = this.GetElement(TocXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TocXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimpleChoiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TicXName, typeof(string));
            localElementDictionary.Add(TacXName, typeof(string));
            localElementDictionary.Add(TocXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Tic | Tac)?, Foo, Bar)
    /// </para>
    /// </summary>
    public partial class SequenceWithChoiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TicXName = System.Xml.Linq.XName.Get("Tic", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TacXName = System.Xml.Linq.XName.Get("Tac", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FooXName = System.Xml.Linq.XName.Get("Foo", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BarXName = System.Xml.Linq.XName.Get("Bar", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SequenceWithChoiceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SequenceWithChoiceType(XElement xe) { return XTypedServices.ToXTypedElement<SequenceWithChoiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SequenceWithChoiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TicXName), new NamedContentModelEntity(TacXName)), new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Tic | Tac)?, Foo, Bar)
        /// </para>
        /// </summary>
        public SequenceWithChoiceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Tic | Tac)?, Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Tic {
            get {
                XElement x = this.GetElement(TicXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TicXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Tic | Tac)?, Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Tac {
            get {
                XElement x = this.GetElement(TacXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TacXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((Tic | Tac)?, Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Foo {
            get {
                XElement x = this.GetElement(FooXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FooXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((Tic | Tac)?, Foo, Bar)
        /// </para>
        /// </summary>
        public virtual string Bar {
            get {
                XElement x = this.GetElement(BarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SequenceWithChoiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TicXName, typeof(string));
            localElementDictionary.Add(TacXName, typeof(string));
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Foo, Bar)|Toc)
    /// </para>
    /// </summary>
    public partial class ChoiceWithSequemceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FooXName = System.Xml.Linq.XName.Get("Foo", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BarXName = System.Xml.Linq.XName.Get("Bar", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TocXName = System.Xml.Linq.XName.Get("Toc", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ChoiceWithSequemceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ChoiceWithSequemceType(XElement xe) { return XTypedServices.ToXTypedElement<ChoiceWithSequemceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ChoiceWithSequemceType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName)), new NamedContentModelEntity(TocXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Foo, Bar)|Toc)
        /// </para>
        /// </summary>
        public ChoiceWithSequemceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Foo, Bar)|Toc)
        /// </para>
        /// </summary>
        public virtual string Foo {
            get {
                XElement x = this.GetElement(FooXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FooXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Foo, Bar)|Toc)
        /// </para>
        /// </summary>
        public virtual string Bar {
            get {
                XElement x = this.GetElement(BarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: ((Foo, Bar)|Toc)
        /// </para>
        /// </summary>
        public virtual string Toc {
            get {
                XElement x = this.GetElement(TocXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TocXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ChoiceWithSequemceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
            localElementDictionary.Add(TocXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
    /// </para>
    /// </summary>
    public partial class DeepChoiceTreeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FooXName = System.Xml.Linq.XName.Get("Foo", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BarXName = System.Xml.Linq.XName.Get("Bar", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TocXName = System.Xml.Linq.XName.Get("Toc", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FozXName = System.Xml.Linq.XName.Get("Foz", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BazXName = System.Xml.Linq.XName.Get("Baz", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TicXName = System.Xml.Linq.XName.Get("Tic", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeepChoiceTreeType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeepChoiceTreeType(XElement xe) { return XTypedServices.ToXTypedElement<DeepChoiceTreeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeepChoiceTreeType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName)), new NamedContentModelEntity(TocXName)), new NamedContentModelEntity(FozXName), new NamedContentModelEntity(BazXName)), new NamedContentModelEntity(TicXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public DeepChoiceTreeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Foo {
            get {
                XElement x = this.GetElement(FooXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FooXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Bar {
            get {
                XElement x = this.GetElement(BarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Toc {
            get {
                XElement x = this.GetElement(TocXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TocXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Foz {
            get {
                XElement x = this.GetElement(FozXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FozXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Baz {
            get {
                XElement x = this.GetElement(BazXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BazXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo, Bar)|Toc), Foz, Baz)|Tic)
        /// </para>
        /// </summary>
        public virtual string Tic {
            get {
                XElement x = this.GetElement(TicXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TicXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeepChoiceTreeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
            localElementDictionary.Add(TocXName, typeof(string));
            localElementDictionary.Add(FozXName, typeof(string));
            localElementDictionary.Add(BazXName, typeof(string));
            localElementDictionary.Add(TicXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
    /// </para>
    /// </summary>
    public partial class DeepSequenceTreeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FooXName = System.Xml.Linq.XName.Get("Foo", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BarXName = System.Xml.Linq.XName.Get("Bar", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TocXName = System.Xml.Linq.XName.Get("Toc", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FozXName = System.Xml.Linq.XName.Get("Foz", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BazXName = System.Xml.Linq.XName.Get("Baz", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TicXName = System.Xml.Linq.XName.Get("Tic", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeepSequenceTreeType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeepSequenceTreeType(XElement xe) { return XTypedServices.ToXTypedElement<DeepSequenceTreeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeepSequenceTreeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FooXName), new NamedContentModelEntity(BarXName)), new NamedContentModelEntity(TocXName)), new NamedContentModelEntity(FozXName), new NamedContentModelEntity(BazXName)), new NamedContentModelEntity(TicXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public DeepSequenceTreeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Foo {
            get {
                XElement x = this.GetElement(FooXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FooXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Bar {
            get {
                XElement x = this.GetElement(BarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Toc {
            get {
                XElement x = this.GetElement(TocXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TocXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Foz {
            get {
                XElement x = this.GetElement(FozXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FozXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Baz {
            get {
                XElement x = this.GetElement(BazXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BazXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((((Foo | Bar), Toc)|Foz | Baz), Tic)
        /// </para>
        /// </summary>
        public virtual string Tic {
            get {
                XElement x = this.GetElement(TicXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TicXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeepSequenceTreeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FooXName, typeof(string));
            localElementDictionary.Add(BarXName, typeof(string));
            localElementDictionary.Add(TocXName, typeof(string));
            localElementDictionary.Add(FozXName, typeof(string));
            localElementDictionary.Add(BazXName, typeof(string));
            localElementDictionary.Add(TicXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("BaseType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.BaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RestrictionType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.RestrictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EmptyExtensionType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.EmptyExtensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SimpleChoiceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.SimpleChoiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SequenceWithChoiceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.SequenceWithChoiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ChoiceWithSequemceType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.ChoiceWithSequemceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeepChoiceTreeType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.DeepChoiceTreeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeepSequenceTreeType", "http://linqtoxsd.schemas.org/test/content-model-types.xsd"), typeof(global::LinqToXsd.Schemas.Test.ContentModelTypes.DeepSequenceTreeType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return typeof(Xml.Schema.Linq.XTypedElement);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRoot() {
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
